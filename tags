!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADOBE_DEFLATE	include/SpinnakerDefs.h	/^            ADOBE_DEFLATE, \/**< Save using ADOBE DEFLATE compression *\/$/;"	e	enum:Spinnaker::TIFFOption::CompressionMethod
ADOBE_DEFLATE	include/spinc/SpinnakerDefsC.h	/^	ADOBE_DEFLATE, \/\/ Save using ADOBE DEFLATE compression $/;"	e	enum:CompressionMethod
ATOMIC_VARIABLE	include/SpinGenApi/Autovector.h	/^    typedef long ATOMIC_VARIABLE;$/;"	t
ATOMIC_VARIABLE	include/SpinGenApi/Autovector.h	/^    typedef uint32_t ATOMIC_VARIABLE;$/;"	t
AVIOption	include/SpinnakerDefs.h	/^		AVIOption()$/;"	f	struct:Spinnaker::AVIOption
AVIOption	include/SpinnakerDefs.h	/^    struct AVIOption$/;"	s	namespace:Spinnaker
AVIRecorder	include/AVIRecorder.h	/^    class SPINNAKER_API AVIRecorder$/;"	c	namespace:Spinnaker
AcquireImages	Abhinay/Abhi_hardware/Abhi_hardware.cpp	/^int AcquireImages(CameraList camList)$/;"	f
AcquireImages	Abhinay/Abhi_test1/Abhi_test1.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, INodeMap & nodeMapTLDevice)$/;"	f
AcquireImages	Abhinay/Abhi_test1/Abhi_test1OLD.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, INodeMap & nodeMapTLDevice)$/;"	f
AcquireImages	Abhinay/Abhi_test1/MultiCamStream.cpp	/^int AcquireImages(CameraList camList)$/;"	f
AcquireImages	Abhinay/Abhi_test2/Abhi_test2.cpp	/^int AcquireImages(CameraList camList)$/;"	f
AcquireImages	Abhinay/Abhi_test3/Abhi_test3.cpp	/^int AcquireImages(CameraList camList)$/;"	f
AcquireImages	Abhinay/Abhi_test4/Abhi_test4.cpp	/^int AcquireImages(CameraList camList)$/;"	f
AcquireImages	Abhinay/Abhi_trigger/Trigger.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, INodeMap & nodeMapTLDevice)$/;"	f
AcquireImages	SpinnakerTest/Abhi_test1/Abhi_test1.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, INodeMap & nodeMapTLDevice)$/;"	f
AcquireImages	SpinnakerTest/Abhi_test1/Abhi_test1OLD.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, INodeMap & nodeMapTLDevice)$/;"	f
AcquireImages	SpinnakerTest/Abhi_test1/MultiCamStream.cpp	/^int AcquireImages(CameraList camList)$/;"	f
AcquireImages	SpinnakerTest/Abhi_test2/Abhi_test2.cpp	/^int AcquireImages(CameraList camList)$/;"	f
AcquireImages	SpinnakerTest/Abhi_test3/Abhi_test3.cpp	/^int AcquireImages(CameraList camList, INodeMap & nodeMap\/*, INodeMap & nodeMapTLDevice*\/)$/;"	f
AcquireImages	SpinnakerTest/Abhi_test4/Abhi_test4.cpp	/^int AcquireImages(CameraList camList)$/;"	f
AcquireImages	SpinnakerTest/Abhi_trigger/Trigger.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, INodeMap & nodeMapTLDevice)$/;"	f
AcquireImages	SpinnakerTest/Acquisition/Acquisition.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, INodeMap & nodeMapTLDevice)$/;"	f
AcquireImages	SpinnakerTest/AcquisitionMultipleCamera/AcquisitionMultipleCamera.cpp	/^int AcquireImages(CameraList camList)$/;"	f
AcquireImages	SpinnakerTest/AcquisitionMultipleCamera_C/AcquisitionMultipleCamera_C.cpp	/^spinError AcquireImages(spinCameraList hCameraList, size_t numCameras)$/;"	f
AcquireImages	SpinnakerTest/Acquisition_C/Acquisition_C.cpp	/^spinError AcquireImages(spinCamera hCam, spinNodeMapHandle hNodeMap, spinNodeMapHandle hNodeMapTLDevice)$/;"	f
AcquireImages	SpinnakerTest/ChunkData/ChunkData.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, INodeMap & nodeMapTLDevice)$/;"	f
AcquireImages	SpinnakerTest/ChunkData_C/ChunkData_C.cpp	/^spinError AcquireImages(spinCamera hCam, spinNodeMapHandle hNodeMap, spinNodeMapHandle hNodeMapTLDevice)$/;"	f
AcquireImages	SpinnakerTest/DeviceEvents/DeviceEvents.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, INodeMap & nodeMapTLDevice)$/;"	f
AcquireImages	SpinnakerTest/DeviceEvents_C/DeviceEvents_C.cpp	/^spinError AcquireImages(spinCamera hCam, spinNodeMapHandle hNodeMap, spinNodeMapHandle hNodeMapTLDevice)$/;"	f
AcquireImages	SpinnakerTest/Exposure/Exposure.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, INodeMap & nodeMapTLDevice)$/;"	f
AcquireImages	SpinnakerTest/Exposure_C/Exposure_C.cpp	/^spinError AcquireImages(spinCamera hCam, spinNodeMapHandle hNodeMap, spinNodeMapHandle hNodeMapTLDevice)$/;"	f
AcquireImages	SpinnakerTest/Exposure_C_QuickSpin/Exposure_C_QuickSpin.cpp	/^spinError AcquireImages(spinCamera hCam, quickSpin qs, quickSpinTLDevice qsD)$/;"	f
AcquireImages	SpinnakerTest/Exposure_QuickSpin/Exposure_QuickSpin.cpp	/^int AcquireImages(CameraPtr pCam)$/;"	f
AcquireImages	SpinnakerTest/ImageEvents/ImageEvents.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, INodeMap & nodeMapTLDevice, ImageEventHandler*& imageEventHandler)$/;"	f
AcquireImages	SpinnakerTest/ImageEvents_C/ImageEvents_C.cpp	/^spinError AcquireImages(spinCamera hCam, spinNodeMapHandle hNodeMap, userData* imageEventInfo)$/;"	f
AcquireImages	SpinnakerTest/ImageFormatControl/ImageFormatControl.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, INodeMap & nodeMapTLDevice)$/;"	f
AcquireImages	SpinnakerTest/ImageFormatControl_C/ImageFormatControl_C.cpp	/^spinError AcquireImages(spinCamera hCam, spinNodeMapHandle hNodeMap, spinNodeMapHandle hNodeMapTLDevice)$/;"	f
AcquireImages	SpinnakerTest/ImageFormatControl_C_QuickSpin/ImageFormatControl_C_QuickSpin.cpp	/^spinError AcquireImages(spinCamera hCam, quickSpin qs, quickSpinTLDevice qsD)$/;"	f
AcquireImages	SpinnakerTest/ImageFormatControl_QuickSpin/ImageFormatControl_QuickSpin.cpp	/^int AcquireImages(CameraPtr pCam)$/;"	f
AcquireImages	SpinnakerTest/LookupTable/LookupTable.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, INodeMap & nodeMapTLDevice)$/;"	f
AcquireImages	SpinnakerTest/LookupTable_C/LookupTable_C.cpp	/^spinError AcquireImages(spinCamera hCam, spinNodeMapHandle hNodeMap, spinNodeMapHandle hNodeMapTLDevice)$/;"	f
AcquireImages	SpinnakerTest/SaveToAvi/SaveToAvi.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, vector<ImagePtr> & images)$/;"	f
AcquireImages	SpinnakerTest/SaveToAvi_C/SaveToAvi_C.cpp	/^spinError AcquireImages(spinCamera hCam, spinNodeMapHandle hNodeMap, spinNodeMapHandle hNodeMapTLDevice, spinImage hImages[])$/;"	f
AcquireImages	SpinnakerTest/Sequencer/Sequencer.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, INodeMap & nodeMapGenTL)$/;"	f
AcquireImages	SpinnakerTest/Sequencer_C/Sequencer_C.cpp	/^spinError AcquireImages(spinCamera hCam, spinNodeMapHandle hNodeMap, spinNodeMapHandle hNodeMapTLDevice)$/;"	f
AcquireImages	SpinnakerTest/Trigger/Trigger.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, INodeMap & nodeMapTLDevice)$/;"	f
AcquireImages	SpinnakerTest/Trigger_C/Trigger_C.cpp	/^spinError AcquireImages(spinCamera hCam, spinNodeMapHandle hNodeMap, spinNodeMapHandle hNodeMapTLDevice)$/;"	f
AcquireImages	SpinnakerTest/Trigger_C_QuickSpin/Trigger_C_QuickSpin.cpp	/^spinError AcquireImages(spinCamera hCam, quickSpin qs, quickSpinTLDevice qsD)$/;"	f
AcquireImages	SpinnakerTest/Trigger_QuickSpin/Trigger_QuickSpin.cpp	/^int AcquireImages(CameraPtr pCam)$/;"	f
AcquireImages	src/Abhi_hardware/Abhi_hardware.cpp	/^int AcquireImages(CameraList camList)$/;"	f
AcquireImages	src/Abhi_test1/Abhi_test1.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, INodeMap & nodeMapTLDevice)$/;"	f
AcquireImages	src/Abhi_test1/Abhi_test1OLD.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, INodeMap & nodeMapTLDevice)$/;"	f
AcquireImages	src/Abhi_test1/MultiCamStream.cpp	/^int AcquireImages(CameraList camList)$/;"	f
AcquireImages	src/Abhi_test2/Abhi_test2.cpp	/^int AcquireImages(CameraList camList)$/;"	f
AcquireImages	src/Abhi_test3/Abhi_test3.cpp	/^int AcquireImages(CameraList camList)$/;"	f
AcquireImages	src/Abhi_test4/Abhi_test4.cpp	/^int AcquireImages(CameraList camList)$/;"	f
AcquireImages	src/Abhi_trigger/Trigger.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, INodeMap & nodeMapTLDevice)$/;"	f
AcquireImages	src/Acquisition/Acquisition.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, INodeMap & nodeMapTLDevice)$/;"	f
AcquireImages	src/AcquisitionMultipleCamera/AcquisitionMultipleCamera.cpp	/^int AcquireImages(CameraList camList)$/;"	f
AcquireImages	src/AcquisitionMultipleCamera_C/AcquisitionMultipleCamera_C.cpp	/^spinError AcquireImages(spinCameraList hCameraList, size_t numCameras)$/;"	f
AcquireImages	src/Acquisition_C/Acquisition_C.cpp	/^spinError AcquireImages(spinCamera hCam, spinNodeMapHandle hNodeMap, spinNodeMapHandle hNodeMapTLDevice)$/;"	f
AcquireImages	src/ChunkData/ChunkData.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, INodeMap & nodeMapTLDevice)$/;"	f
AcquireImages	src/ChunkData_C/ChunkData_C.cpp	/^spinError AcquireImages(spinCamera hCam, spinNodeMapHandle hNodeMap, spinNodeMapHandle hNodeMapTLDevice)$/;"	f
AcquireImages	src/DeviceEvents/DeviceEvents.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, INodeMap & nodeMapTLDevice)$/;"	f
AcquireImages	src/DeviceEvents_C/DeviceEvents_C.cpp	/^spinError AcquireImages(spinCamera hCam, spinNodeMapHandle hNodeMap, spinNodeMapHandle hNodeMapTLDevice)$/;"	f
AcquireImages	src/Exposure/Exposure.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, INodeMap & nodeMapTLDevice)$/;"	f
AcquireImages	src/Exposure_C/Exposure_C.cpp	/^spinError AcquireImages(spinCamera hCam, spinNodeMapHandle hNodeMap, spinNodeMapHandle hNodeMapTLDevice)$/;"	f
AcquireImages	src/Exposure_C_QuickSpin/Exposure_C_QuickSpin.cpp	/^spinError AcquireImages(spinCamera hCam, quickSpin qs, quickSpinTLDevice qsD)$/;"	f
AcquireImages	src/Exposure_QuickSpin/Exposure_QuickSpin.cpp	/^int AcquireImages(CameraPtr pCam)$/;"	f
AcquireImages	src/ImageEvents/ImageEvents.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, INodeMap & nodeMapTLDevice, ImageEventHandler*& imageEventHandler)$/;"	f
AcquireImages	src/ImageEvents_C/ImageEvents_C.cpp	/^spinError AcquireImages(spinCamera hCam, spinNodeMapHandle hNodeMap, userData* imageEventInfo)$/;"	f
AcquireImages	src/ImageFormatControl/ImageFormatControl.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, INodeMap & nodeMapTLDevice)$/;"	f
AcquireImages	src/ImageFormatControl_C/ImageFormatControl_C.cpp	/^spinError AcquireImages(spinCamera hCam, spinNodeMapHandle hNodeMap, spinNodeMapHandle hNodeMapTLDevice)$/;"	f
AcquireImages	src/ImageFormatControl_C_QuickSpin/ImageFormatControl_C_QuickSpin.cpp	/^spinError AcquireImages(spinCamera hCam, quickSpin qs, quickSpinTLDevice qsD)$/;"	f
AcquireImages	src/ImageFormatControl_QuickSpin/ImageFormatControl_QuickSpin.cpp	/^int AcquireImages(CameraPtr pCam)$/;"	f
AcquireImages	src/LookupTable/LookupTable.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, INodeMap & nodeMapTLDevice)$/;"	f
AcquireImages	src/LookupTable_C/LookupTable_C.cpp	/^spinError AcquireImages(spinCamera hCam, spinNodeMapHandle hNodeMap, spinNodeMapHandle hNodeMapTLDevice)$/;"	f
AcquireImages	src/SaveToAvi/SaveToAvi.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, vector<ImagePtr> & images)$/;"	f
AcquireImages	src/SaveToAvi_C/SaveToAvi_C.cpp	/^spinError AcquireImages(spinCamera hCam, spinNodeMapHandle hNodeMap, spinNodeMapHandle hNodeMapTLDevice, spinImage hImages[])$/;"	f
AcquireImages	src/Sequencer/Sequencer.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, INodeMap & nodeMapGenTL)$/;"	f
AcquireImages	src/Sequencer_C/Sequencer_C.cpp	/^spinError AcquireImages(spinCamera hCam, spinNodeMapHandle hNodeMap, spinNodeMapHandle hNodeMapTLDevice)$/;"	f
AcquireImages	src/Trigger/Trigger.cpp	/^int AcquireImages(CameraPtr pCam, INodeMap & nodeMap, INodeMap & nodeMapTLDevice)$/;"	f
AcquireImages	src/Trigger_C/Trigger_C.cpp	/^spinError AcquireImages(spinCamera hCam, spinNodeMapHandle hNodeMap, spinNodeMapHandle hNodeMapTLDevice)$/;"	f
AcquireImages	src/Trigger_C_QuickSpin/Trigger_C_QuickSpin.cpp	/^spinError AcquireImages(spinCamera hCam, quickSpin qs, quickSpinTLDevice qsD)$/;"	f
AcquireImages	src/Trigger_QuickSpin/Trigger_QuickSpin.cpp	/^int AcquireImages(CameraPtr pCam)$/;"	f
AcquisitionAbort	include/Camera.h	/^		GenApi::ICommand &AcquisitionAbort;$/;"	m	class:Spinnaker::Camera
AcquisitionAbort	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode AcquisitionAbort;$/;"	m	struct:_quickSpin
AcquisitionArm	include/Camera.h	/^		GenApi::ICommand &AcquisitionArm;$/;"	m	class:Spinnaker::Camera
AcquisitionArm	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode AcquisitionArm;$/;"	m	struct:_quickSpin
AcquisitionBurstFrameCount	include/Camera.h	/^		GenApi::IInteger &AcquisitionBurstFrameCount;$/;"	m	class:Spinnaker::Camera
AcquisitionBurstFrameCount	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode AcquisitionBurstFrameCount;$/;"	m	struct:_quickSpin
AcquisitionFrameCount	include/Camera.h	/^		GenApi::IInteger &AcquisitionFrameCount;$/;"	m	class:Spinnaker::Camera
AcquisitionFrameCount	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode AcquisitionFrameCount;$/;"	m	struct:_quickSpin
AcquisitionFrameRate	include/Camera.h	/^		GenApi::IFloat &AcquisitionFrameRate;$/;"	m	class:Spinnaker::Camera
AcquisitionFrameRate	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode AcquisitionFrameRate;$/;"	m	struct:_quickSpin
AcquisitionLineRate	include/Camera.h	/^		GenApi::IFloat &AcquisitionLineRate;$/;"	m	class:Spinnaker::Camera
AcquisitionLineRate	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode AcquisitionLineRate;$/;"	m	struct:_quickSpin
AcquisitionMode	include/Camera.h	/^		GenApi::IEnumerationT<AcquisitionModeEnums> &AcquisitionMode;$/;"	m	class:Spinnaker::Camera
AcquisitionMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode AcquisitionMode;$/;"	m	struct:_quickSpin
AcquisitionModeEnums	include/CameraDefs.h	/^	enum AcquisitionModeEnums	\/*!< Sets the acquisition mode of the device. It defines mainly the number of frames to capture during an acquisition and the way the acquisition stops.*\/$/;"	g	namespace:Spinnaker
AcquisitionMode_Continuous	include/CameraDefs.h	/^		AcquisitionMode_Continuous,	\/*!< Frames are captured continuously until stopped with the AcquisitionStop command.*\/$/;"	e	enum:Spinnaker::AcquisitionModeEnums
AcquisitionMode_Continuous	include/spinc/CameraDefsC.h	/^	AcquisitionMode_Continuous,	\/*!< Frames are captured continuously until stopped with the AcquisitionStop command.*\/$/;"	e	enum:_spinAcquisitionModeEnums
AcquisitionMode_MultiFrame	include/CameraDefs.h	/^		AcquisitionMode_MultiFrame,	\/*!< The number of frames specified by AcquisitionFrameCount is captured.*\/$/;"	e	enum:Spinnaker::AcquisitionModeEnums
AcquisitionMode_MultiFrame	include/spinc/CameraDefsC.h	/^	AcquisitionMode_MultiFrame,	\/*!< The number of frames specified by AcquisitionFrameCount is captured.*\/$/;"	e	enum:_spinAcquisitionModeEnums
AcquisitionMode_SingleFrame	include/CameraDefs.h	/^		AcquisitionMode_SingleFrame,	\/*!< One frame is captured.*\/$/;"	e	enum:Spinnaker::AcquisitionModeEnums
AcquisitionMode_SingleFrame	include/spinc/CameraDefsC.h	/^	AcquisitionMode_SingleFrame,	\/*!< One frame is captured.*\/$/;"	e	enum:_spinAcquisitionModeEnums
AcquisitionStart	include/Camera.h	/^		GenApi::ICommand &AcquisitionStart;$/;"	m	class:Spinnaker::Camera
AcquisitionStart	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode AcquisitionStart;$/;"	m	struct:_quickSpin
AcquisitionStatus	include/Camera.h	/^		GenApi::IBoolean &AcquisitionStatus;$/;"	m	class:Spinnaker::Camera
AcquisitionStatus	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode AcquisitionStatus;$/;"	m	struct:_quickSpin
AcquisitionStatusSelector	include/Camera.h	/^		GenApi::IEnumerationT<AcquisitionStatusSelectorEnums> &AcquisitionStatusSelector;$/;"	m	class:Spinnaker::Camera
AcquisitionStatusSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode AcquisitionStatusSelector;$/;"	m	struct:_quickSpin
AcquisitionStatusSelectorEnums	include/CameraDefs.h	/^	enum AcquisitionStatusSelectorEnums	\/*!< Selects the internal acquisition signal to read using AcquisitionStatus.*\/$/;"	g	namespace:Spinnaker
AcquisitionStatusSelector_AcquisitionActive	include/CameraDefs.h	/^		AcquisitionStatusSelector_AcquisitionActive,	\/*!< Device is currently doing an acquisition of one or many frames.*\/$/;"	e	enum:Spinnaker::AcquisitionStatusSelectorEnums
AcquisitionStatusSelector_AcquisitionActive	include/spinc/CameraDefsC.h	/^	AcquisitionStatusSelector_AcquisitionActive,	\/*!< Device is currently doing an acquisition of one or many frames.*\/$/;"	e	enum:_spinAcquisitionStatusSelectorEnums
AcquisitionStatusSelector_AcquisitionTransfer	include/CameraDefs.h	/^		AcquisitionStatusSelector_AcquisitionTransfer,	\/*!< Device is currently transferring an acquisition of one or many frames.*\/$/;"	e	enum:Spinnaker::AcquisitionStatusSelectorEnums
AcquisitionStatusSelector_AcquisitionTransfer	include/spinc/CameraDefsC.h	/^	AcquisitionStatusSelector_AcquisitionTransfer,	\/*!< Device is currently transferring an acquisition of one or many frames.*\/$/;"	e	enum:_spinAcquisitionStatusSelectorEnums
AcquisitionStatusSelector_AcquisitionTriggerWait	include/CameraDefs.h	/^		AcquisitionStatusSelector_AcquisitionTriggerWait,	\/*!< Device is currently waiting for a trigger for the capture of one or many frames.*\/$/;"	e	enum:Spinnaker::AcquisitionStatusSelectorEnums
AcquisitionStatusSelector_AcquisitionTriggerWait	include/spinc/CameraDefsC.h	/^	AcquisitionStatusSelector_AcquisitionTriggerWait,	\/*!< Device is currently waiting for a trigger for the capture of one or many frames.*\/$/;"	e	enum:_spinAcquisitionStatusSelectorEnums
AcquisitionStatusSelector_ExposureActive	include/CameraDefs.h	/^		AcquisitionStatusSelector_ExposureActive,	\/*!< Device is doing the exposure of a frame.*\/$/;"	e	enum:Spinnaker::AcquisitionStatusSelectorEnums
AcquisitionStatusSelector_ExposureActive	include/spinc/CameraDefsC.h	/^	AcquisitionStatusSelector_ExposureActive,	\/*!< Device is doing the exposure of a frame.*\/$/;"	e	enum:_spinAcquisitionStatusSelectorEnums
AcquisitionStatusSelector_FrameActive	include/CameraDefs.h	/^		AcquisitionStatusSelector_FrameActive,	\/*!< Device is currently doing the capture of a frame.*\/$/;"	e	enum:Spinnaker::AcquisitionStatusSelectorEnums
AcquisitionStatusSelector_FrameActive	include/spinc/CameraDefsC.h	/^	AcquisitionStatusSelector_FrameActive,	\/*!< Device is currently doing the capture of a frame.*\/$/;"	e	enum:_spinAcquisitionStatusSelectorEnums
AcquisitionStatusSelector_FrameTriggerWait	include/CameraDefs.h	/^		AcquisitionStatusSelector_FrameTriggerWait,	\/*!< Device is currently waiting for a frame start trigger.*\/$/;"	e	enum:Spinnaker::AcquisitionStatusSelectorEnums
AcquisitionStatusSelector_FrameTriggerWait	include/spinc/CameraDefsC.h	/^	AcquisitionStatusSelector_FrameTriggerWait,	\/*!< Device is currently waiting for a frame start trigger.*\/$/;"	e	enum:_spinAcquisitionStatusSelectorEnums
AcquisitionStop	include/Camera.h	/^		GenApi::ICommand &AcquisitionStop;$/;"	m	class:Spinnaker::Camera
AcquisitionStop	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode AcquisitionStop;$/;"	m	struct:_quickSpin
ActionDeviceKey	include/Camera.h	/^		GenApi::IInteger &ActionDeviceKey;$/;"	m	class:Spinnaker::Camera
ActionDeviceKey	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode ActionDeviceKey;$/;"	m	struct:_quickSpin
ActionGroupKey	include/Camera.h	/^		GenApi::IInteger &ActionGroupKey;$/;"	m	class:Spinnaker::Camera
ActionGroupKey	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode ActionGroupKey;$/;"	m	struct:_quickSpin
ActionGroupMask	include/Camera.h	/^		GenApi::IInteger &ActionGroupMask;$/;"	m	class:Spinnaker::Camera
ActionGroupMask	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode ActionGroupMask;$/;"	m	struct:_quickSpin
ActionQueueSize	include/Camera.h	/^		GenApi::IInteger &ActionQueueSize;$/;"	m	class:Spinnaker::Camera
ActionQueueSize	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode ActionQueueSize;$/;"	m	struct:_quickSpin
ActionSelector	include/Camera.h	/^		GenApi::IInteger &ActionSelector;$/;"	m	class:Spinnaker::Camera
ActionSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode ActionSelector;$/;"	m	struct:_quickSpin
ActionUnconditionalMode	include/Camera.h	/^		GenApi::IEnumerationT<ActionUnconditionalModeEnums> &ActionUnconditionalMode;$/;"	m	class:Spinnaker::Camera
ActionUnconditionalMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ActionUnconditionalMode;$/;"	m	struct:_quickSpin
ActionUnconditionalModeEnums	include/CameraDefs.h	/^	enum ActionUnconditionalModeEnums	\/*!< Enables the unconditional action command mode where action commands are processed even when the primary control channel is closed.*\/$/;"	g	namespace:Spinnaker
ActionUnconditionalMode_Off	include/CameraDefs.h	/^		ActionUnconditionalMode_Off,	\/*!< Unconditional mode is disabled.*\/$/;"	e	enum:Spinnaker::ActionUnconditionalModeEnums
ActionUnconditionalMode_Off	include/spinc/CameraDefsC.h	/^	ActionUnconditionalMode_Off,	\/*!< Unconditional mode is disabled.*\/$/;"	e	enum:_spinActionUnconditionalModeEnums
ActionUnconditionalMode_On	include/CameraDefs.h	/^		ActionUnconditionalMode_On,	\/*!< Unconditional mode is enabled.*\/$/;"	e	enum:Spinnaker::ActionUnconditionalModeEnums
ActionUnconditionalMode_On	include/spinc/CameraDefsC.h	/^	ActionUnconditionalMode_On,	\/*!< Unconditional mode is enabled.*\/$/;"	e	enum:_spinActionUnconditionalModeEnums
ArrivalEvent	include/ArrivalEvent.h	/^	class SPINNAKER_API ArrivalEvent : public virtual Event$/;"	c	namespace:Spinnaker
Attach	include/SpinGenApi/NodeMapRef.h	/^		void GenApi::CNodeMapRefT<TCameraParams>::Attach(INodeMap *pNodeMap, const GenICam::gcstring &DeviceName, int* pRefCount)$/;"	f	class:Spinnaker::GenApi::GenApi::CNodeMapRefT
AttachStatistics_t	include/SpinGenApi/ChunkAdapter.h	/^		typedef struct AttachStatistics_t$/;"	s	namespace:Spinnaker::GenApi
AttachStatistics_t	include/SpinGenApi/ChunkAdapter.h	/^		} AttachStatistics_t;$/;"	t	namespace:Spinnaker::GenApi	typeref:struct:Spinnaker::GenApi::AttachStatistics_t
AutoForceIP	include/TransportLayerInterface.h	/^		GenApi::ICommand &AutoForceIP;$/;"	m	class:Spinnaker::TransportLayerInterface
AutoForceIP	include/spinc/TransportLayerInterfaceC.h	/^	quickSpinCommandNode AutoForceIP;$/;"	m	struct:_quickSpinTLInterface
AutoLock	include/SpinGenApi/GCSynch.h	/^			AutoLock(CLock& lock)$/;"	f	class:Spinnaker::GenICam::AutoLock
AutoLock	include/SpinGenApi/GCSynch.h	/^		class AutoLock$/;"	c	namespace:Spinnaker::GenICam
AutoLock	include/SpinGenApi/Synch.h	/^			AutoLock(CLock& lock)$/;"	f	class:Spinnaker::GenApi::AutoLock
AutoLock	include/SpinGenApi/Synch.h	/^		class AutoLock$/;"	c	namespace:Spinnaker::GenApi
Automatic	include/SpinGenApi/Types.h	/^			Automatic,       \/\/!> slope is determined automatically by probing the function$/;"	e	enum:Spinnaker::GenApi::_ESlope
Automatic	include/spinc/SpinnakerGenApiDefsC.h	/^	Automatic,       \/\/!> slope is determined automatically by probing the function$/;"	e	enum:_spinSlope
BLUE	include/SpinnakerDefs.h	/^		BLUE,$/;"	e	enum:Spinnaker::StatisticsChannel
BLUE	include/spinc/SpinnakerDefsC.h	/^	BLUE,$/;"	e	enum:_spinStatisticsChannel
BMP	include/SpinnakerDefs.h	/^		BMP, \/**< Bitmap. *\/$/;"	e	enum:Spinnaker::ImageFileFormat
BMP	include/spinc/SpinnakerDefsC.h	/^	BMP, \/**< Bitmap. *\/$/;"	e	enum:_spinImageFileFormat
BMPOption	include/SpinnakerDefs.h	/^		BMPOption()$/;"	f	struct:Spinnaker::BMPOption
BMPOption	include/SpinnakerDefs.h	/^	struct BMPOption$/;"	s	namespace:Spinnaker
BOOL	include/PtGreyVideoEncoder.h	/^typedef int BOOL;$/;"	t
BR	include/PtGreyVideoEncoder.h	/^	int BR;								\/* Desired bit rate (bits per second). Minimum is PTGREY_BR_MIN. *\/$/;"	m	struct:PtGreyVideoEncoderOptions
BalanceRatio	include/Camera.h	/^		GenApi::IFloat &BalanceRatio;$/;"	m	class:Spinnaker::Camera
BalanceRatio	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode BalanceRatio;$/;"	m	struct:_quickSpin
BalanceRatioSelector	include/Camera.h	/^		GenApi::IEnumerationT<BalanceRatioSelectorEnums> &BalanceRatioSelector;$/;"	m	class:Spinnaker::Camera
BalanceRatioSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode BalanceRatioSelector;$/;"	m	struct:_quickSpin
BalanceRatioSelectorEnums	include/CameraDefs.h	/^	enum BalanceRatioSelectorEnums	\/*!< Selects which Balance ratio to control.*\/$/;"	g	namespace:Spinnaker
BalanceRatioSelector_All	include/CameraDefs.h	/^		BalanceRatioSelector_All,	\/*!< Balance Ratio will be applied to all channels or taps.*\/$/;"	e	enum:Spinnaker::BalanceRatioSelectorEnums
BalanceRatioSelector_All	include/spinc/CameraDefsC.h	/^	BalanceRatioSelector_All,	\/*!< Balance Ratio will be applied to all channels or taps.*\/$/;"	e	enum:_spinBalanceRatioSelectorEnums
BalanceRatioSelector_Blue	include/CameraDefs.h	/^		BalanceRatioSelector_Blue,	\/*!< Balance Ratio will be applied to the blue channel.*\/$/;"	e	enum:Spinnaker::BalanceRatioSelectorEnums
BalanceRatioSelector_Blue	include/spinc/CameraDefsC.h	/^	BalanceRatioSelector_Blue,	\/*!< Balance Ratio will be applied to the blue channel.*\/$/;"	e	enum:_spinBalanceRatioSelectorEnums
BalanceRatioSelector_Green	include/CameraDefs.h	/^		BalanceRatioSelector_Green,	\/*!< Balance Ratio will be applied to the green channel.*\/$/;"	e	enum:Spinnaker::BalanceRatioSelectorEnums
BalanceRatioSelector_Green	include/spinc/CameraDefsC.h	/^	BalanceRatioSelector_Green,	\/*!< Balance Ratio will be applied to the green channel.*\/$/;"	e	enum:_spinBalanceRatioSelectorEnums
BalanceRatioSelector_Red	include/CameraDefs.h	/^		BalanceRatioSelector_Red,	\/*!< Balance Ratio will be applied to the red channel.*\/$/;"	e	enum:Spinnaker::BalanceRatioSelectorEnums
BalanceRatioSelector_Red	include/spinc/CameraDefsC.h	/^	BalanceRatioSelector_Red,	\/*!< Balance Ratio will be applied to the red channel.*\/$/;"	e	enum:_spinBalanceRatioSelectorEnums
BalanceRatioSelector_Tap1	include/CameraDefs.h	/^		BalanceRatioSelector_Tap1,	\/*!< Balance Ratio will be applied to Tap 1.*\/$/;"	e	enum:Spinnaker::BalanceRatioSelectorEnums
BalanceRatioSelector_Tap1	include/spinc/CameraDefsC.h	/^	BalanceRatioSelector_Tap1,	\/*!< Balance Ratio will be applied to Tap 1.*\/$/;"	e	enum:_spinBalanceRatioSelectorEnums
BalanceRatioSelector_Tap2	include/CameraDefs.h	/^		BalanceRatioSelector_Tap2,	\/*!< Balance Ratio will be applied to Tap 2.*\/$/;"	e	enum:Spinnaker::BalanceRatioSelectorEnums
BalanceRatioSelector_Tap2	include/spinc/CameraDefsC.h	/^	BalanceRatioSelector_Tap2,	\/*!< Balance Ratio will be applied to Tap 2.*\/$/;"	e	enum:_spinBalanceRatioSelectorEnums
BalanceRatioSelector_U	include/CameraDefs.h	/^		BalanceRatioSelector_U,	\/*!< Balance Ratio will be applied to U channel.*\/$/;"	e	enum:Spinnaker::BalanceRatioSelectorEnums
BalanceRatioSelector_U	include/spinc/CameraDefsC.h	/^	BalanceRatioSelector_U,	\/*!< Balance Ratio will be applied to U channel.*\/$/;"	e	enum:_spinBalanceRatioSelectorEnums
BalanceRatioSelector_V	include/CameraDefs.h	/^		BalanceRatioSelector_V,	\/*!< Balance Ratio will be applied to V channel.*\/$/;"	e	enum:Spinnaker::BalanceRatioSelectorEnums
BalanceRatioSelector_V	include/spinc/CameraDefsC.h	/^	BalanceRatioSelector_V,	\/*!< Balance Ratio will be applied to V channel.*\/$/;"	e	enum:_spinBalanceRatioSelectorEnums
BalanceRatioSelector_Y	include/CameraDefs.h	/^		BalanceRatioSelector_Y,	\/*!< Balance Ratio will be applied to Y channel.*\/$/;"	e	enum:Spinnaker::BalanceRatioSelectorEnums
BalanceRatioSelector_Y	include/spinc/CameraDefsC.h	/^	BalanceRatioSelector_Y,	\/*!< Balance Ratio will be applied to Y channel.*\/$/;"	e	enum:_spinBalanceRatioSelectorEnums
BalanceWhiteAuto	include/Camera.h	/^		GenApi::IEnumerationT<BalanceWhiteAutoEnums> &BalanceWhiteAuto;$/;"	m	class:Spinnaker::Camera
BalanceWhiteAuto	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode BalanceWhiteAuto;$/;"	m	struct:_quickSpin
BalanceWhiteAutoEnums	include/CameraDefs.h	/^	enum BalanceWhiteAutoEnums	\/*!< Controls the mode for automatic white balancing between the color channels. The white balancing ratios are automatically adjusted.*\/$/;"	g	namespace:Spinnaker
BalanceWhiteAuto_Continuous	include/CameraDefs.h	/^		BalanceWhiteAuto_Continuous,	\/*!< White balancing is constantly adjusted by the device.*\/$/;"	e	enum:Spinnaker::BalanceWhiteAutoEnums
BalanceWhiteAuto_Continuous	include/spinc/CameraDefsC.h	/^	BalanceWhiteAuto_Continuous,	\/*!< White balancing is constantly adjusted by the device.*\/$/;"	e	enum:_spinBalanceWhiteAutoEnums
BalanceWhiteAuto_Off	include/CameraDefs.h	/^		BalanceWhiteAuto_Off,	\/*!< White balancing is user controlled using BalanceRatioSelector and BalanceRatio.*\/$/;"	e	enum:Spinnaker::BalanceWhiteAutoEnums
BalanceWhiteAuto_Off	include/spinc/CameraDefsC.h	/^	BalanceWhiteAuto_Off,	\/*!< White balancing is user controlled using BalanceRatioSelector and BalanceRatio.*\/$/;"	e	enum:_spinBalanceWhiteAutoEnums
BalanceWhiteAuto_Once	include/CameraDefs.h	/^		BalanceWhiteAuto_Once,	\/*!< White balancing is automatically adjusted once by the device. Once it has converged, it automatically returns to the Off state.*\/$/;"	e	enum:Spinnaker::BalanceWhiteAutoEnums
BalanceWhiteAuto_Once	include/spinc/CameraDefsC.h	/^	BalanceWhiteAuto_Once,	\/*!< White balancing is automatically adjusted once by the device. Once it has converged, it automatically returns to the Off state.*\/$/;"	e	enum:_spinBalanceWhiteAutoEnums
BaseNode	include/spinc/SpinnakerGenApiDefsC.h	/^	BaseNode,$/;"	e	enum:_spinNodeType
BasePtr	include/BasePtr.h	/^	class SPINNAKER_API BasePtr$/;"	c	namespace:Spinnaker
Beginner	include/SpinGenApi/Types.h	/^			Beginner = 0,              \/\/!< Always visible$/;"	e	enum:Spinnaker::GenApi::_EVisibility
Beginner	include/spinc/SpinnakerGenApiDefsC.h	/^	Beginner = 0,$/;"	e	enum:_spinVisibility
BigEndian	include/SpinGenApi/Types.h	/^			BigEndian,        \/\/!< Register is big endian$/;"	e	enum:Spinnaker::GenApi::_EEndianess
BigEndian	include/spinc/SpinnakerGenApiDefsC.h	/^	BigEndian,        \/\/!< Register is big endian$/;"	e	enum:_spinEndianess
BinningHorizontal	include/Camera.h	/^		GenApi::IInteger &BinningHorizontal;$/;"	m	class:Spinnaker::Camera
BinningHorizontal	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode BinningHorizontal;$/;"	m	struct:_quickSpin
BinningHorizontalMode	include/Camera.h	/^		GenApi::IEnumerationT<BinningHorizontalModeEnums> &BinningHorizontalMode;$/;"	m	class:Spinnaker::Camera
BinningHorizontalMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode BinningHorizontalMode;$/;"	m	struct:_quickSpin
BinningHorizontalModeEnums	include/CameraDefs.h	/^	enum BinningHorizontalModeEnums	\/*!< Sets the mode to use to combine horizontal photo-sensitive cells together when BinningHorizontal is used.*\/$/;"	g	namespace:Spinnaker
BinningHorizontalMode_Average	include/CameraDefs.h	/^		BinningHorizontalMode_Average,	\/*!< The response from the combined cells will be averaged, resulting in increased signal\/noise ratio.*\/$/;"	e	enum:Spinnaker::BinningHorizontalModeEnums
BinningHorizontalMode_Average	include/spinc/CameraDefsC.h	/^	BinningHorizontalMode_Average,	\/*!< The response from the combined cells will be averaged, resulting in increased signal\/noise ratio.*\/$/;"	e	enum:_spinBinningHorizontalModeEnums
BinningHorizontalMode_Sum	include/CameraDefs.h	/^		BinningHorizontalMode_Sum,	\/*!< The response from the combined cells will be added, resulting in increased sensitivity.*\/$/;"	e	enum:Spinnaker::BinningHorizontalModeEnums
BinningHorizontalMode_Sum	include/spinc/CameraDefsC.h	/^	BinningHorizontalMode_Sum,	\/*!< The response from the combined cells will be added, resulting in increased sensitivity.*\/$/;"	e	enum:_spinBinningHorizontalModeEnums
BinningSelector	include/Camera.h	/^		GenApi::IEnumerationT<BinningSelectorEnums> &BinningSelector;$/;"	m	class:Spinnaker::Camera
BinningSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode BinningSelector;$/;"	m	struct:_quickSpin
BinningSelectorEnums	include/CameraDefs.h	/^	enum BinningSelectorEnums	\/*!< Selects which binning engine is controlled by the BinningHorizontal and BinningVertical features.*\/$/;"	g	namespace:Spinnaker
BinningSelector_Region0	include/CameraDefs.h	/^		BinningSelector_Region0,	\/*!< Selected feature will control the region 0 binning.*\/$/;"	e	enum:Spinnaker::BinningSelectorEnums
BinningSelector_Region0	include/spinc/CameraDefsC.h	/^	BinningSelector_Region0,	\/*!< Selected feature will control the region 0 binning.*\/$/;"	e	enum:_spinBinningSelectorEnums
BinningSelector_Region1	include/CameraDefs.h	/^		BinningSelector_Region1,	\/*!< Selected feature will control the region 1 binning.*\/$/;"	e	enum:Spinnaker::BinningSelectorEnums
BinningSelector_Region1	include/spinc/CameraDefsC.h	/^	BinningSelector_Region1,	\/*!< Selected feature will control the region 1 binning.*\/$/;"	e	enum:_spinBinningSelectorEnums
BinningSelector_Region2	include/CameraDefs.h	/^		BinningSelector_Region2,	\/*!< Selected feature will control the region 2 binning.*\/$/;"	e	enum:Spinnaker::BinningSelectorEnums
BinningSelector_Region2	include/spinc/CameraDefsC.h	/^	BinningSelector_Region2,	\/*!< Selected feature will control the region 2 binning.*\/$/;"	e	enum:_spinBinningSelectorEnums
BinningSelector_Sensor	include/CameraDefs.h	/^		BinningSelector_Sensor,	\/*!< Selected features will control the sensor binning.*\/$/;"	e	enum:Spinnaker::BinningSelectorEnums
BinningSelector_Sensor	include/spinc/CameraDefsC.h	/^	BinningSelector_Sensor,	\/*!< Selected features will control the sensor binning.*\/$/;"	e	enum:_spinBinningSelectorEnums
BinningVertical	include/Camera.h	/^		GenApi::IInteger &BinningVertical;$/;"	m	class:Spinnaker::Camera
BinningVertical	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode BinningVertical;$/;"	m	struct:_quickSpin
BinningVerticalMode	include/Camera.h	/^		GenApi::IEnumerationT<BinningVerticalModeEnums> &BinningVerticalMode;$/;"	m	class:Spinnaker::Camera
BinningVerticalMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode BinningVerticalMode;$/;"	m	struct:_quickSpin
BinningVerticalModeEnums	include/CameraDefs.h	/^	enum BinningVerticalModeEnums	\/*!< Sets the mode used to combine horizontal photo-sensitive cells together when BinningVertical is used.*\/$/;"	g	namespace:Spinnaker
BinningVerticalMode_Average	include/CameraDefs.h	/^		BinningVerticalMode_Average,	\/*!< The response from the combined cells will be averaged, resulting in increased signal\/noise ratio.*\/$/;"	e	enum:Spinnaker::BinningVerticalModeEnums
BinningVerticalMode_Average	include/spinc/CameraDefsC.h	/^	BinningVerticalMode_Average,	\/*!< The response from the combined cells will be averaged, resulting in increased signal\/noise ratio.*\/$/;"	e	enum:_spinBinningVerticalModeEnums
BinningVerticalMode_Sum	include/CameraDefs.h	/^		BinningVerticalMode_Sum,	\/*!< The response from the combined cells will be added, resulting in increased sensitivity.*\/$/;"	e	enum:Spinnaker::BinningVerticalModeEnums
BinningVerticalMode_Sum	include/spinc/CameraDefsC.h	/^	BinningVerticalMode_Sum,	\/*!< The response from the combined cells will be added, resulting in increased sensitivity.*\/$/;"	e	enum:_spinBinningVerticalModeEnums
BlackLevel	include/Camera.h	/^		GenApi::IFloat &BlackLevel;$/;"	m	class:Spinnaker::Camera
BlackLevel	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode BlackLevel;$/;"	m	struct:_quickSpin
BlackLevelAuto	include/Camera.h	/^		GenApi::IEnumerationT<BlackLevelAutoEnums> &BlackLevelAuto;$/;"	m	class:Spinnaker::Camera
BlackLevelAuto	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode BlackLevelAuto;$/;"	m	struct:_quickSpin
BlackLevelAutoBalance	include/Camera.h	/^		GenApi::IEnumerationT<BlackLevelAutoBalanceEnums> &BlackLevelAutoBalance;$/;"	m	class:Spinnaker::Camera
BlackLevelAutoBalance	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode BlackLevelAutoBalance;$/;"	m	struct:_quickSpin
BlackLevelAutoBalanceEnums	include/CameraDefs.h	/^	enum BlackLevelAutoBalanceEnums	\/*!< Controls the mode for automatic black level balancing between the sensor color channels or taps. The black level coefficients of each channel are adjusted so they are matched.*\/$/;"	g	namespace:Spinnaker
BlackLevelAutoBalance_Continuous	include/CameraDefs.h	/^		BlackLevelAutoBalance_Continuous,	\/*!< Black level tap balancing is constantly adjusted by the device.*\/$/;"	e	enum:Spinnaker::BlackLevelAutoBalanceEnums
BlackLevelAutoBalance_Continuous	include/spinc/CameraDefsC.h	/^	BlackLevelAutoBalance_Continuous,	\/*!< Black level tap balancing is constantly adjusted by the device.*\/$/;"	e	enum:_spinBlackLevelAutoBalanceEnums
BlackLevelAutoBalance_Off	include/CameraDefs.h	/^		BlackLevelAutoBalance_Off,	\/*!< Black level tap balancing is user controlled using BlackLevel.*\/$/;"	e	enum:Spinnaker::BlackLevelAutoBalanceEnums
BlackLevelAutoBalance_Off	include/spinc/CameraDefsC.h	/^	BlackLevelAutoBalance_Off,	\/*!< Black level tap balancing is user controlled using BlackLevel.*\/$/;"	e	enum:_spinBlackLevelAutoBalanceEnums
BlackLevelAutoBalance_Once	include/CameraDefs.h	/^		BlackLevelAutoBalance_Once,	\/*!< Black level tap balancing is automatically adjusted once by the device. Once it has converged, it automatically returns to the Off state.*\/$/;"	e	enum:Spinnaker::BlackLevelAutoBalanceEnums
BlackLevelAutoBalance_Once	include/spinc/CameraDefsC.h	/^	BlackLevelAutoBalance_Once,	\/*!< Black level tap balancing is automatically adjusted once by the device. Once it has converged, it automatically returns to the Off state.*\/$/;"	e	enum:_spinBlackLevelAutoBalanceEnums
BlackLevelAutoEnums	include/CameraDefs.h	/^	enum BlackLevelAutoEnums	\/*!< Controls the mode for automatic black level adjustment. The exact algorithm used to implement this adjustment is device-specific.*\/$/;"	g	namespace:Spinnaker
BlackLevelAuto_Continuous	include/CameraDefs.h	/^		BlackLevelAuto_Continuous,	\/*!< Analog black level is constantly adjusted by the device.*\/$/;"	e	enum:Spinnaker::BlackLevelAutoEnums
BlackLevelAuto_Continuous	include/spinc/CameraDefsC.h	/^	BlackLevelAuto_Continuous,	\/*!< Analog black level is constantly adjusted by the device.*\/$/;"	e	enum:_spinBlackLevelAutoEnums
BlackLevelAuto_Off	include/CameraDefs.h	/^		BlackLevelAuto_Off,	\/*!< Analog black level is user controlled using BlackLevel.*\/$/;"	e	enum:Spinnaker::BlackLevelAutoEnums
BlackLevelAuto_Off	include/spinc/CameraDefsC.h	/^	BlackLevelAuto_Off,	\/*!< Analog black level is user controlled using BlackLevel.*\/$/;"	e	enum:_spinBlackLevelAutoEnums
BlackLevelAuto_Once	include/CameraDefs.h	/^		BlackLevelAuto_Once,	\/*!< Analog black level is automatically adjusted once by the device. Once it has converged, it automatically returns to the Off state.*\/$/;"	e	enum:Spinnaker::BlackLevelAutoEnums
BlackLevelAuto_Once	include/spinc/CameraDefsC.h	/^	BlackLevelAuto_Once,	\/*!< Analog black level is automatically adjusted once by the device. Once it has converged, it automatically returns to the Off state.*\/$/;"	e	enum:_spinBlackLevelAutoEnums
BlackLevelSelector	include/Camera.h	/^		GenApi::IEnumerationT<BlackLevelSelectorEnums> &BlackLevelSelector;$/;"	m	class:Spinnaker::Camera
BlackLevelSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode BlackLevelSelector;$/;"	m	struct:_quickSpin
BlackLevelSelectorEnums	include/CameraDefs.h	/^	enum BlackLevelSelectorEnums	\/*!< Selects which Black Level is controlled by the various Black Level features.*\/$/;"	g	namespace:Spinnaker
BlackLevelSelector_All	include/CameraDefs.h	/^		BlackLevelSelector_All,	\/*!< Black Level will be applied to all channels or taps.*\/$/;"	e	enum:Spinnaker::BlackLevelSelectorEnums
BlackLevelSelector_All	include/spinc/CameraDefsC.h	/^	BlackLevelSelector_All,	\/*!< Black Level will be applied to all channels or taps.*\/$/;"	e	enum:_spinBlackLevelSelectorEnums
BlackLevelSelector_Blue	include/CameraDefs.h	/^		BlackLevelSelector_Blue,	\/*!< Black Level will be applied to the blue channel.*\/$/;"	e	enum:Spinnaker::BlackLevelSelectorEnums
BlackLevelSelector_Blue	include/spinc/CameraDefsC.h	/^	BlackLevelSelector_Blue,	\/*!< Black Level will be applied to the blue channel.*\/$/;"	e	enum:_spinBlackLevelSelectorEnums
BlackLevelSelector_Green	include/CameraDefs.h	/^		BlackLevelSelector_Green,	\/*!< Black Level will be applied to the green channel.*\/$/;"	e	enum:Spinnaker::BlackLevelSelectorEnums
BlackLevelSelector_Green	include/spinc/CameraDefsC.h	/^	BlackLevelSelector_Green,	\/*!< Black Level will be applied to the green channel.*\/$/;"	e	enum:_spinBlackLevelSelectorEnums
BlackLevelSelector_Red	include/CameraDefs.h	/^		BlackLevelSelector_Red,	\/*!< Black Level will be applied to the red channel.*\/$/;"	e	enum:Spinnaker::BlackLevelSelectorEnums
BlackLevelSelector_Red	include/spinc/CameraDefsC.h	/^	BlackLevelSelector_Red,	\/*!< Black Level will be applied to the red channel.*\/$/;"	e	enum:_spinBlackLevelSelectorEnums
BlackLevelSelector_Tap1	include/CameraDefs.h	/^		BlackLevelSelector_Tap1,	\/*!< Black Level will be applied to Tap 1.*\/$/;"	e	enum:Spinnaker::BlackLevelSelectorEnums
BlackLevelSelector_Tap1	include/spinc/CameraDefsC.h	/^	BlackLevelSelector_Tap1,	\/*!< Black Level will be applied to Tap 1.*\/$/;"	e	enum:_spinBlackLevelSelectorEnums
BlackLevelSelector_Tap2	include/CameraDefs.h	/^		BlackLevelSelector_Tap2,	\/*!< Black Level will be applied to Tap 2.*\/$/;"	e	enum:Spinnaker::BlackLevelSelectorEnums
BlackLevelSelector_Tap2	include/spinc/CameraDefsC.h	/^	BlackLevelSelector_Tap2,	\/*!< Black Level will be applied to Tap 2.*\/$/;"	e	enum:_spinBlackLevelSelectorEnums
BlackLevelSelector_U	include/CameraDefs.h	/^		BlackLevelSelector_U,	\/*!< Black Level will be applied to U channel.*\/$/;"	e	enum:Spinnaker::BlackLevelSelectorEnums
BlackLevelSelector_U	include/spinc/CameraDefsC.h	/^	BlackLevelSelector_U,	\/*!< Black Level will be applied to U channel.*\/$/;"	e	enum:_spinBlackLevelSelectorEnums
BlackLevelSelector_V	include/CameraDefs.h	/^		BlackLevelSelector_V,	\/*!< Black Level will be applied to V channel.*\/$/;"	e	enum:Spinnaker::BlackLevelSelectorEnums
BlackLevelSelector_V	include/spinc/CameraDefsC.h	/^	BlackLevelSelector_V,	\/*!< Black Level will be applied to V channel.*\/$/;"	e	enum:_spinBlackLevelSelectorEnums
BlackLevelSelector_Y	include/CameraDefs.h	/^		BlackLevelSelector_Y,	\/*!< Black Level will be applied to Y channel.*\/$/;"	e	enum:Spinnaker::BlackLevelSelectorEnums
BlackLevelSelector_Y	include/spinc/CameraDefsC.h	/^	BlackLevelSelector_Y,	\/*!< Black Level will be applied to Y channel.*\/$/;"	e	enum:_spinBlackLevelSelectorEnums
BlockId	include/SpinGenApi/EventAdapterGEV.h	/^        uint16_t BlockId;$/;"	m	struct:Spinnaker::GenApi::GVCP_EVENT_ITEM
BlockId	include/SpinGenApi/EventAdapterGEV.h	/^        uint16_t BlockId;$/;"	m	struct:Spinnaker::GenApi::GVCP_EVENT_ITEM_EXTENDED_ID
BlockId64High	include/SpinGenApi/EventAdapterGEV.h	/^        uint32_t BlockId64High;$/;"	m	struct:Spinnaker::GenApi::GVCP_EVENT_ITEM_EXTENDED_ID
BlockId64Low	include/SpinGenApi/EventAdapterGEV.h	/^        uint32_t BlockId64Low;$/;"	m	struct:Spinnaker::GenApi::GVCP_EVENT_ITEM_EXTENDED_ID
Boolean	include/SpinGenApi/Types.h	/^			Boolean,                    \/\/!< Check box$/;"	e	enum:Spinnaker::GenApi::_ERepresentation
Boolean	include/spinc/SpinnakerGenApiDefsC.h	/^	Boolean,                    \/\/!< Check box$/;"	e	enum:_spinRepresentation
BooleanNode	include/SpinGenApi/BooleanNode.h	/^		class SPINNAKER_API BooleanNode : virtual public IBoolean, virtual public ValueNode$/;"	c	namespace:Spinnaker::GenApi
BooleanNode	include/spinc/SpinnakerGenApiDefsC.h	/^	BooleanNode,$/;"	e	enum:_spinNodeType
CBasePtr	include/SpinGenApi/Pointer.h	/^		typedef CPointer<IBase> CBasePtr;$/;"	t	namespace:Spinnaker::GenApi
CBooleanPtr	include/SpinGenApi/Pointer.h	/^		typedef CPointer<IBoolean> CBooleanPtr;$/;"	t	namespace:Spinnaker::GenApi
CBooleanRef	include/SpinGenApi/BooleanNode.h	/^		typedef BooleanNode CBooleanRef;$/;"	t	namespace:Spinnaker::GenApi
CC	Abhinay/Abhi_hardware/Makefile	/^CC = g++ ${CFLAGS} -ggdb ${CVFLAGS}$/;"	m
CC	Abhinay/Abhi_test1/Makefile	/^CC = g++ ${CFLAGS} -ggdb ${CVFLAGS}$/;"	m
CC	Abhinay/Abhi_test2/Makefile	/^CC = g++ ${CFLAGS} -ggdb ${CVFLAGS}$/;"	m
CC	Abhinay/Abhi_test3/Makefile	/^CC = g++ ${CFLAGS} -ggdb ${CVFLAGS}$/;"	m
CC	Abhinay/Abhi_test4/Makefile	/^CC = g++ ${CFLAGS} -ggdb ${CVFLAGS}$/;"	m
CC	Abhinay/Abhi_trigger/Makefile	/^CC = g++ ${CFLAGS} -ggdb ${CVFLAGS}$/;"	m
CC	SpinnakerTest/Abhi_test1/Makefile	/^CC = g++ ${CFLAGS} -ggdb ${CVFLAGS}$/;"	m
CC	SpinnakerTest/Abhi_test2/Makefile	/^CC = g++ ${CFLAGS} -ggdb ${CVFLAGS}$/;"	m
CC	SpinnakerTest/Abhi_test3/Makefile	/^CC = g++ ${CFLAGS} -ggdb ${CVFLAGS}$/;"	m
CC	SpinnakerTest/Abhi_test4/Makefile	/^CC = g++ ${CFLAGS} -ggdb ${CVFLAGS}$/;"	m
CC	SpinnakerTest/Abhi_trigger/Makefile	/^CC = g++ ${CFLAGS} -ggdb ${CVFLAGS}$/;"	m
CC	SpinnakerTest/Acquisition/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/AcquisitionMultipleCamera/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/AcquisitionMultipleCamera_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/Acquisition_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/ChunkData/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/ChunkData_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/DeviceEvents/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/DeviceEvents_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/Enumeration/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/EnumerationEvents/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/EnumerationEvents_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/Enumeration_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/Enumeration_C_QuickSpin/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/Enumeration_QuickSpin/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/Exposure/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/Exposure_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/Exposure_C_QuickSpin/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/Exposure_QuickSpin/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/ImageEvents/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/ImageEvents_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/ImageFormatControl/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/ImageFormatControl_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/ImageFormatControl_C_QuickSpin/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/ImageFormatControl_QuickSpin/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/Logging/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/Logging_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/LookupTable/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/LookupTable_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/NodeMapCallback/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/NodeMapCallback_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/NodeMapInfo/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/NodeMapInfo_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/NodeMapInfo_C_QuickSpin/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/NodeMapInfo_QuickSpin/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/SaveToAvi/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/SaveToAvi_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/Sequencer/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/Sequencer_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/Trigger/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/Trigger_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/Trigger_C_QuickSpin/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	SpinnakerTest/Trigger_QuickSpin/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/Abhi_hardware/Makefile	/^CC = g++ ${CFLAGS} -ggdb ${CVFLAGS}$/;"	m
CC	src/Abhi_test1/Makefile	/^CC = g++ ${CFLAGS} -ggdb ${CVFLAGS}$/;"	m
CC	src/Abhi_test2/Makefile	/^CC = g++ ${CFLAGS} -ggdb ${CVFLAGS}$/;"	m
CC	src/Abhi_test3/Makefile	/^CC = g++ ${CFLAGS} -ggdb ${CVFLAGS}$/;"	m
CC	src/Abhi_test4/Makefile	/^CC = g++ ${CFLAGS} -ggdb ${CVFLAGS}$/;"	m
CC	src/Abhi_trigger/Makefile	/^CC = g++ ${CFLAGS} -ggdb ${CVFLAGS}$/;"	m
CC	src/Acquisition/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/AcquisitionMultipleCamera/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/AcquisitionMultipleCamera_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/Acquisition_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/ChunkData/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/ChunkData_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/DeviceEvents/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/DeviceEvents_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/Enumeration/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/EnumerationEvents/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/EnumerationEvents_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/Enumeration_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/Enumeration_C_QuickSpin/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/Enumeration_QuickSpin/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/Exposure/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/Exposure_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/Exposure_C_QuickSpin/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/Exposure_QuickSpin/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/ImageEvents/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/ImageEvents_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/ImageFormatControl/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/ImageFormatControl_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/ImageFormatControl_C_QuickSpin/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/ImageFormatControl_QuickSpin/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/Logging/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/Logging_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/LookupTable/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/LookupTable_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/NodeMapCallback/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/NodeMapCallback_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/NodeMapInfo/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/NodeMapInfo_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/NodeMapInfo_C_QuickSpin/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/NodeMapInfo_QuickSpin/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/SaveToAvi/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/SaveToAvi_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/Sequencer/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/Sequencer_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/Trigger/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/Trigger_C/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/Trigger_C_QuickSpin/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CC	src/Trigger_QuickSpin/Makefile	/^CC = g++ ${CFLAGS}$/;"	m
CCITTFAX3	include/SpinnakerDefs.h	/^            CCITTFAX3,$/;"	e	enum:Spinnaker::TIFFOption::CompressionMethod
CCITTFAX3	include/spinc/SpinnakerDefsC.h	/^	CCITTFAX3,$/;"	e	enum:CompressionMethod
CCITTFAX4	include/SpinnakerDefs.h	/^            CCITTFAX4,$/;"	e	enum:Spinnaker::TIFFOption::CompressionMethod
CCITTFAX4	include/spinc/SpinnakerDefsC.h	/^	CCITTFAX4,$/;"	e	enum:CompressionMethod
CCategoryPtr	include/SpinGenApi/Pointer.h	/^		typedef CPointer<ICategory> CCategoryPtr;$/;"	t	namespace:Spinnaker::GenApi
CCategoryRef	include/SpinGenApi/CategoryNode.h	/^        typedef CategoryNode CCategoryRef;$/;"	t	namespace:Spinnaker::GenApi
CChunkAdapter	include/SpinGenApi/ChunkAdapter.h	/^		class SPINNAKER_API CChunkAdapter$/;"	c	namespace:Spinnaker::GenApi
CChunkAdapterDcam	include/SpinGenApi/ChunkAdapterDcam.h	/^		class SPINNAKER_API CChunkAdapterDcam : public  CChunkAdapter$/;"	c	namespace:Spinnaker::GenApi
CChunkAdapterGEV	include/SpinGenApi/ChunkAdapterGEV.h	/^		class SPINNAKER_API CChunkAdapterGEV : public  CChunkAdapter$/;"	c	namespace:Spinnaker::GenApi
CChunkAdapterGeneric	include/SpinGenApi/ChunkAdapterGeneric.h	/^		class SPINNAKER_API CChunkAdapterGeneric : public CChunkAdapter$/;"	c	namespace:Spinnaker::GenApi
CChunkAdapterU3V	include/SpinGenApi/ChunkAdapterU3V.h	/^		class SPINNAKER_API CChunkAdapterU3V : public  CChunkAdapter$/;"	c	namespace:Spinnaker::GenApi
CChunkPort	include/SpinGenApi/ChunkPort.h	/^		class SPINNAKER_API CChunkPort : public IPortConstruct$/;"	c	namespace:Spinnaker::GenApi
CChunkPortPtr	include/SpinGenApi/Pointer.h	/^		typedef CPointer<IChunkPort> CChunkPortPtr;$/;"	t	namespace:Spinnaker::GenApi
CCommandPtr	include/SpinGenApi/Pointer.h	/^		typedef CPointer<ICommand> CCommandPtr;$/;"	t	namespace:Spinnaker::GenApi
CCommandRef	include/SpinGenApi/CommandNode.h	/^        typedef CommandNode CCommandRef;$/;"	t	namespace:Spinnaker::GenApi
CDeviceInfoPtr	include/SpinGenApi/Pointer.h	/^		typedef CPointer<IDeviceInfo, INodeMap> CDeviceInfoPtr;$/;"	t	namespace:Spinnaker::GenApi
CEnumEntryPtr	include/SpinGenApi/Pointer.h	/^		typedef CPointer<IEnumEntry> CEnumEntryPtr;$/;"	t	namespace:Spinnaker::GenApi
CEnumEntryRef	include/SpinGenApi/EnumEntryNode.h	/^		typedef EnumEntryNode CEnumEntryRef;$/;"	t	namespace:Spinnaker::GenApi
CEnumerationPtr	include/SpinGenApi/Pointer.h	/^		typedef CPointer<IEnumeration> CEnumerationPtr;$/;"	t	namespace:Spinnaker::GenApi
CEnumerationRef	include/SpinGenApi/EnumNode.h	/^        typedef EnumNode CEnumerationRef;$/;"	t	namespace:Spinnaker::GenApi
CEnumerationTRef	include/SpinGenApi/EnumNodeT.h	/^		class SPINNAKER_API CEnumerationTRef : virtual public IEnumerationT<EnumT> , public virtual EnumNode$/;"	c	namespace:Spinnaker::GenApi
CEventAdapter	include/SpinGenApi/EventAdapter.h	/^		class SPINNAKER_API CEventAdapter$/;"	c	namespace:Spinnaker::GenApi
CEventAdapter1394	include/SpinGenApi/EventAdapter1394.h	/^		class SPINNAKER_API CEventAdapter1394 : public CEventAdapter$/;"	c	namespace:Spinnaker::GenApi
CEventAdapterGEV	include/SpinGenApi/EventAdapterGEV.h	/^		class SPINNAKER_API CEventAdapterGEV : public CEventAdapter$/;"	c	namespace:Spinnaker::GenApi
CEventAdapterGeneric	include/SpinGenApi/EventAdapterGeneric.h	/^		class SPINNAKER_API CEventAdapterGeneric : public  CEventAdapter$/;"	c	namespace:Spinnaker::GenApi
CEventAdapterU3V	include/SpinGenApi/EventAdapterU3V.h	/^		class SPINNAKER_API CEventAdapterU3V : public  CEventAdapter$/;"	c	namespace:Spinnaker::GenApi
CEventPort	include/SpinGenApi/EventPort.h	/^		class SPINNAKER_API CEventPort : public IPortConstruct$/;"	c	namespace:Spinnaker::GenApi
CFeatureBag	include/SpinGenApi/Persistence.h	/^		class SPINNAKER_API CFeatureBag : public IPersistScript$/;"	c	namespace:Spinnaker::GenApi
CFloatPtr	include/SpinGenApi/Pointer.h	/^			CFloatPtr( IBase *pB )$/;"	f	class:Spinnaker::GenApi::CFloatPtr
CFloatPtr	include/SpinGenApi/Pointer.h	/^			CFloatPtr() throw()$/;"	f	class:Spinnaker::GenApi::CFloatPtr
CFloatPtr	include/SpinGenApi/Pointer.h	/^        class CFloatPtr : public CPointer < IFloat, IBase >$/;"	c	namespace:Spinnaker::GenApi
CFloatRef	include/SpinGenApi/FloatNode.h	/^        typedef FloatNode CFloatRef;$/;"	t	namespace:Spinnaker::GenApi
CGeneric_XMLLoaderParams	include/SpinGenApi/NodeMapRef.h	/^		class CGeneric_XMLLoaderParams$/;"	c	namespace:Spinnaker::GenApi
CGlobalLock	include/SpinGenApi/GCSynch.h	/^		class SPINNAKER_API CGlobalLock$/;"	c	namespace:Spinnaker::GenICam
CGlobalLockUnlocker	include/SpinGenApi/GCSynch.h	/^			CGlobalLockUnlocker(CGlobalLock& lock)$/;"	f	class:Spinnaker::GenICam::CGlobalLockUnlocker
CGlobalLockUnlocker	include/SpinGenApi/GCSynch.h	/^		class SPINNAKER_API CGlobalLockUnlocker$/;"	c	namespace:Spinnaker::GenICam
CHUNK_BASE_ADDRESS_REGISTER	include/SpinGenApi/IChunkPort.h	48;"	d
CHUNK_BASE_ADDRESS_REGISTER_LEN	include/SpinGenApi/IChunkPort.h	51;"	d
CHUNK_LENGTH_REGISTER	include/SpinGenApi/IChunkPort.h	54;"	d
CHUNK_LENGTH_REGISTER_LEN	include/SpinGenApi/IChunkPort.h	57;"	d
CIntegerPtr	include/SpinGenApi/Pointer.h	/^		typedef CPointer<IInteger> CIntegerPtr;$/;"	t	namespace:Spinnaker::GenApi
CIntegerRef	include/SpinGenApi/IntegerNode.h	/^		typedef IntegerNode CIntegerRef;$/;"	t	namespace:Spinnaker::GenApi
CL	include/SpinGenApi/Types.h	/^			CL,              \/\/!< name resides in camera link namespace$/;"	e	enum:Spinnaker::GenApi::_EStandardNameSpace
CL	include/spinc/SpinnakerGenApiDefsC.h	/^	CL,              \/\/!< name resides in camera link namespace$/;"	e	enum:_spinStandardNameSpace
CLock	include/SpinGenApi/GCSynch.h	/^		class SPINNAKER_API CLock$/;"	c	namespace:Spinnaker::GenICam
CLock	include/SpinGenApi/Synch.h	/^		class SPINNAKER_API CLock$/;"	c	namespace:Spinnaker::GenApi
CLockEx	include/SpinGenApi/GCSynch.h	/^		class SPINNAKER_API CLockEx : public CLock$/;"	c	namespace:Spinnaker::GenICam
CLockEx	include/SpinGenApi/Synch.h	/^		class SPINNAKER_API CLockEx : public CLock$/;"	c	namespace:Spinnaker::GenApi
CNodeCallback	include/SpinGenApi/NodeCallback.h	/^			CNodeCallback(INode* pNode, ECallbackType CallbackType) :$/;"	f	class:Spinnaker::GenApi::CNodeCallback
CNodeCallback	include/SpinGenApi/NodeCallback.h	/^		class CNodeCallback$/;"	c	namespace:Spinnaker::GenApi
CNodeMapDynPtr	include/SpinGenApi/Pointer.h	/^		typedef CPointer<INodeMapDyn, INodeMap> CNodeMapDynPtr;$/;"	t	namespace:Spinnaker::GenApi
CNodeMapFactory	include/SpinGenApi/NodeMapFactory.h	/^		class SPINNAKER_API CNodeMapFactory$/;"	c	namespace:Spinnaker::GenApi
CNodeMapPtr	include/SpinGenApi/Pointer.h	/^		typedef CPointer<INodeMap, INodeMap> CNodeMapPtr;$/;"	t	namespace:Spinnaker::GenApi
CNodeMapRef	include/SpinGenApi/NodeMap.h	/^		typedef NodeMap CNodeMapRef;$/;"	t	namespace:Spinnaker::GenApi
CNodeMapRef	include/SpinGenApi/NodeMapRef.h	/^			CNodeMapRef(INodeMap* pNodeMap, const GenICam::gcstring &DeviceName = "Device")$/;"	f	class:Spinnaker::GenApi::CNodeMapRef
CNodeMapRef	include/SpinGenApi/NodeMapRef.h	/^			CNodeMapRef(const CNodeMapRef& Them)$/;"	f	class:Spinnaker::GenApi::CNodeMapRef
CNodeMapRef	include/SpinGenApi/NodeMapRef.h	/^			CNodeMapRef(const GenICam::gcstring &DeviceName = "Device")$/;"	f	class:Spinnaker::GenApi::CNodeMapRef
CNodeMapRef	include/SpinGenApi/NodeMapRef.h	/^		class CNodeMapRef : public CNodeMapRefT<GenApi::CGeneric_XMLLoaderParams>$/;"	c	namespace:Spinnaker::GenApi
CNodeMapRefT	include/SpinGenApi/NodeMapRef.h	/^		GenApi::CNodeMapRefT<TCameraParams>::CNodeMapRefT(const CNodeMapRefT& Them)$/;"	f	class:Spinnaker::GenApi::GenApi::CNodeMapRefT
CNodeMapRefT	include/SpinGenApi/NodeMapRef.h	/^		class SPINNAKER_API CNodeMapRefT : public TCameraParams$/;"	c	namespace:Spinnaker::GenApi
CNodeMapRefT	include/SpinGenApi/NodeMapRef.h	/^		inline CNodeMapRefT<TCameraParams>::CNodeMapRefT(INodeMap *pNodeMap, const GenICam::gcstring &DeviceName)$/;"	f	class:Spinnaker::GenApi::CNodeMapRefT
CNodeMapRefT	include/SpinGenApi/NodeMapRef.h	/^		inline CNodeMapRefT<TCameraParams>::CNodeMapRefT(const GenICam::gcstring &DeviceName)$/;"	f	class:Spinnaker::GenApi::CNodeMapRefT
CNodePtr	include/SpinGenApi/Pointer.h	/^		typedef  CPointer<INode, IBase> CNodePtr;$/;"	t	namespace:Spinnaker::GenApi
CNodeRef	include/SpinGenApi/Node.h	/^		typedef Node CNodeRef;$/;"	t	namespace:Spinnaker::GenApi
COMMAND_MAGIC	include/SpinGenApi/EventAdapterGEV.h	/^    const uint8_t COMMAND_MAGIC = 0x42;$/;"	m	namespace:Spinnaker::GenApi
CPointer	include/SpinGenApi/Pointer.h	/^        CPointer( B *pB )$/;"	f	class:Spinnaker::GenApi::CPointer
CPointer	include/SpinGenApi/Pointer.h	/^        CPointer(void) $/;"	f	class:Spinnaker::GenApi::CPointer
CPointer	include/SpinGenApi/Pointer.h	/^        class CPointer$/;"	c	namespace:Spinnaker::GenApi
CPortConstructPtr	include/SpinGenApi/Pointer.h	/^		typedef CPointer<IPortConstruct> CPortConstructPtr;$/;"	t	namespace:Spinnaker::GenApi
CPortImpl	include/SpinGenApi/PortImpl.h	/^			CPortImpl()$/;"	f	class:Spinnaker::GenApi::CPortImpl
CPortImpl	include/SpinGenApi/PortImpl.h	/^		class SPINNAKER_API CPortImpl : public IPortConstruct, public IPortReplay$/;"	c	namespace:Spinnaker::GenApi
CPortPtr	include/SpinGenApi/Pointer.h	/^		typedef CPointer<IPort> CPortPtr;$/;"	t	namespace:Spinnaker::GenApi
CPortRecorderPtr	include/SpinGenApi/Pointer.h	/^		typedef CPointer<IPortRecorder> CPortRecorderPtr;$/;"	t	namespace:Spinnaker::GenApi
CPortRecorderRef	include/SpinGenApi/PortRecorder.h	/^		typedef PortRecorder CPortRecorderRef;$/;"	t	namespace:Spinnaker::GenApi
CPortRef	include/SpinGenApi/PortNode.h	/^		typedef PortNode CPortRef;$/;"	t	namespace:Spinnaker::GenApi
CPortReplayPtr	include/SpinGenApi/Pointer.h	/^		typedef CPointer<IPortReplay> CPortReplayPtr;$/;"	t	namespace:Spinnaker::GenApi
CPortWriteList	include/SpinGenApi/PortWriteList.h	/^		class SPINNAKER_API CPortWriteList : virtual public IPortWriteList$/;"	c	namespace:Spinnaker::GenApi
CPortWriteListPtr	include/SpinGenApi/Pointer.h	/^		typedef CPointer<IPortWriteList, IPortWriteList> CPortWriteListPtr;$/;"	t	namespace:Spinnaker::GenApi
CRCChecksum	include/SpinGenApi/ChunkAdapterDcam.h	/^			uint32_t CRCChecksum;$/;"	m	struct:Spinnaker::GenApi::DCAM_CHECKSUM
CRegisterPortImpl	include/SpinGenApi/RegisterPortImpl.h	/^			CRegisterPortImpl(int MaxNumQuadlets = 1, bool TransportLayerSwapsEndianess = false){};$/;"	f	class:Spinnaker::GenApi::CRegisterPortImpl
CRegisterPortImpl	include/SpinGenApi/RegisterPortImpl.h	/^		class CRegisterPortImpl : public CPortImpl$/;"	c	namespace:Spinnaker::GenApi
CRegisterPtr	include/SpinGenApi/Pointer.h	/^		typedef CPointer<IRegister> CRegisterPtr;$/;"	t	namespace:Spinnaker::GenApi
CRegisterRef	include/SpinGenApi/RegisterNode.h	/^		typedef RegisterNode CRegisterRef;$/;"	t	namespace:Spinnaker::GenApi
CSelectorPtr	include/SpinGenApi/Pointer.h	/^		typedef CPointer<ISelector> CSelectorPtr;$/;"	t	namespace:Spinnaker::GenApi
CSelectorRef	include/SpinGenApi/Node.h	/^		typedef Node CSelectorRef;$/;"	t	namespace:Spinnaker::GenApi
CSelectorSet	include/SpinGenApi/SelectorSet.h	/^		class SPINNAKER_API CSelectorSet : virtual public Node $/;"	c	namespace:Spinnaker::GenApi
CStringPtr	include/SpinGenApi/Pointer.h	/^		typedef CPointer<IString> CStringPtr;$/;"	t	namespace:Spinnaker::GenApi
CStringRef	include/SpinGenApi/StringNode.h	/^        typedef StringNode CStringRef;$/;"	t	namespace:Spinnaker::GenApi
CTestPortStruct	include/SpinGenApi/StructPort.h	/^			CTestPortStruct(int64_t BaseAddress = 0)$/;"	f	class:Spinnaker::GenApi::CTestPortStruct
CTestPortStruct	include/SpinGenApi/StructPort.h	/^		class CTestPortStruct : public CDataStruct, public CPortImpl$/;"	c	namespace:Spinnaker::GenApi
CVFLAGS	Abhinay/Abhi_hardware/Makefile	/^CVFLAGS = `pkg-config --cflags opencv`$/;"	m
CVFLAGS	Abhinay/Abhi_test1/Makefile	/^CVFLAGS = `pkg-config --cflags opencv`$/;"	m
CVFLAGS	Abhinay/Abhi_test2/Makefile	/^CVFLAGS = `pkg-config --cflags opencv`$/;"	m
CVFLAGS	Abhinay/Abhi_test3/Makefile	/^CVFLAGS = `pkg-config --cflags opencv`$/;"	m
CVFLAGS	Abhinay/Abhi_test4/Makefile	/^CVFLAGS = `pkg-config --cflags opencv`$/;"	m
CVFLAGS	Abhinay/Abhi_trigger/Makefile	/^CVFLAGS = `pkg-config --cflags opencv`$/;"	m
CVFLAGS	SpinnakerTest/Abhi_test1/Makefile	/^CVFLAGS = `pkg-config --cflags opencv`$/;"	m
CVFLAGS	SpinnakerTest/Abhi_test2/Makefile	/^CVFLAGS = `pkg-config --cflags opencv`$/;"	m
CVFLAGS	SpinnakerTest/Abhi_test3/Makefile	/^CVFLAGS = `pkg-config --cflags opencv`$/;"	m
CVFLAGS	SpinnakerTest/Abhi_test4/Makefile	/^CVFLAGS = `pkg-config --cflags opencv`$/;"	m
CVFLAGS	SpinnakerTest/Abhi_trigger/Makefile	/^CVFLAGS = `pkg-config --cflags opencv`$/;"	m
CVFLAGS	src/Abhi_hardware/Makefile	/^CVFLAGS = `pkg-config --cflags opencv`$/;"	m
CVFLAGS	src/Abhi_test1/Makefile	/^CVFLAGS = `pkg-config --cflags opencv`$/;"	m
CVFLAGS	src/Abhi_test2/Makefile	/^CVFLAGS = `pkg-config --cflags opencv`$/;"	m
CVFLAGS	src/Abhi_test3/Makefile	/^CVFLAGS = `pkg-config --cflags opencv`$/;"	m
CVFLAGS	src/Abhi_test4/Makefile	/^CVFLAGS = `pkg-config --cflags opencv`$/;"	m
CVFLAGS	src/Abhi_trigger/Makefile	/^CVFLAGS = `pkg-config --cflags opencv`$/;"	m
CV_LIB	Abhinay/Abhi_hardware/Makefile	/^CV_LIB = `pkg-config --libs opencv`${D}$/;"	m
CV_LIB	Abhinay/Abhi_test1/Makefile	/^CV_LIB = `pkg-config --libs opencv`${D}$/;"	m
CV_LIB	Abhinay/Abhi_test2/Makefile	/^CV_LIB = `pkg-config --libs opencv`${D}$/;"	m
CV_LIB	Abhinay/Abhi_test3/Makefile	/^CV_LIB = `pkg-config --libs opencv`${D}$/;"	m
CV_LIB	Abhinay/Abhi_test4/Makefile	/^CV_LIB = `pkg-config --libs opencv`${D}$/;"	m
CV_LIB	Abhinay/Abhi_trigger/Makefile	/^CV_LIB = `pkg-config --libs opencv`${D}$/;"	m
CV_LIB	SpinnakerTest/Abhi_test1/Makefile	/^CV_LIB = `pkg-config --libs opencv`${D}$/;"	m
CV_LIB	SpinnakerTest/Abhi_test2/Makefile	/^CV_LIB = `pkg-config --libs opencv`${D}$/;"	m
CV_LIB	SpinnakerTest/Abhi_test3/Makefile	/^CV_LIB = `pkg-config --libs opencv`${D}$/;"	m
CV_LIB	SpinnakerTest/Abhi_test4/Makefile	/^CV_LIB = `pkg-config --libs opencv`${D}$/;"	m
CV_LIB	SpinnakerTest/Abhi_trigger/Makefile	/^CV_LIB = `pkg-config --libs opencv`${D}$/;"	m
CV_LIB	src/Abhi_hardware/Makefile	/^CV_LIB = `pkg-config --libs opencv`${D}$/;"	m
CV_LIB	src/Abhi_test1/Makefile	/^CV_LIB = `pkg-config --libs opencv`${D}$/;"	m
CV_LIB	src/Abhi_test2/Makefile	/^CV_LIB = `pkg-config --libs opencv`${D}$/;"	m
CV_LIB	src/Abhi_test3/Makefile	/^CV_LIB = `pkg-config --libs opencv`${D}$/;"	m
CV_LIB	src/Abhi_test4/Makefile	/^CV_LIB = `pkg-config --libs opencv`${D}$/;"	m
CV_LIB	src/Abhi_trigger/Makefile	/^CV_LIB = `pkg-config --libs opencv`${D}$/;"	m
CValuePtr	include/SpinGenApi/Pointer.h	/^		typedef CPointer<IValue> CValuePtr;$/;"	t	namespace:Spinnaker::GenApi
CValueRef	include/SpinGenApi/ValueNode.h	/^        typedef ValueNode CValueRef;$/;"	t	namespace:Spinnaker::GenApi
CacheUsage_Automatic	include/SpinGenApi/NodeMapFactory.h	/^			CacheUsage_Automatic, \/\/\/< The use of cache files is determined automatically.$/;"	e	enum:Spinnaker::GenApi::__anon1
CacheUsage_ForceRead	include/SpinGenApi/NodeMapFactory.h	/^			CacheUsage_ForceRead, \/\/\/< Suppresses loading and preprocessing of the camera description xml file and$/;"	e	enum:Spinnaker::GenApi::__anon1
CacheUsage_ForceWrite	include/SpinGenApi/NodeMapFactory.h	/^			CacheUsage_ForceWrite,\/\/\/< Forces the loading and preprocessing of the camera description xml file. $/;"	e	enum:Spinnaker::GenApi::__anon1
CacheUsage_Ignore	include/SpinGenApi/NodeMapFactory.h	/^			CacheUsage_Ignore     \/\/\/< Forces the loading and preprocessing of the camera description xml file. No cache file is written.$/;"	e	enum:Spinnaker::GenApi::__anon1
CallbackHandleType	include/SpinGenApi/INode.h	/^		typedef intptr_t CallbackHandleType;$/;"	t	namespace:Spinnaker::GenApi
Camera	include/Camera.h	/^	class SPINNAKER_API Camera : public CameraBase$/;"	c	namespace:Spinnaker
CameraBase	include/CameraBase.h	/^	class SPINNAKER_API CameraBase$/;"	c	namespace:Spinnaker
CameraList	include/CameraList.h	/^	class SPINNAKER_API CameraList$/;"	c	namespace:Spinnaker
CameraPtr	include/CameraPtr.h	/^		CameraPtr() throw()$/;"	f	class:Spinnaker::CameraPtr
CameraPtr	include/CameraPtr.h	/^		CameraPtr(const int \/*nMustBeNull*\/) throw()$/;"	f	class:Spinnaker::CameraPtr
CameraPtr	include/CameraPtr.h	/^	class SPINNAKER_API CameraPtr : public BasePtr<Camera,CameraBase>$/;"	c	namespace:Spinnaker
CameraSelection	include/GUI/CameraSelection.h	/^		class SPINNAKER_API CameraSelection$/;"	c	namespace:Spinnaker::GUI_GTKmm
CameraSelectionDlg	include/GUI/CameraSelectionDlg.h	/^		class SPINNAKER_API CameraSelectionDlg$/;"	c	namespace:Spinnaker::GUI
CameraSelectionWidget	include/GUI/CameraSelectionWidget.h	/^		class SPINNAKER_API CameraSelectionWidget : public Gtk::VBox$/;"	c	namespace:Spinnaker::GUI_GTKmm
CameraSelectionWindow	include/GUI/SpinnakerGUI_WPF.h	/^		class SPINNAKER_API CameraSelectionWindow$/;"	c	namespace:Spinnaker::GUI_WPF
CastToIDestroy	include/SpinGenApi/NodeMapRef.h	/^		inline IDestroy *CastToIDestroy(INodeMap *pNodeMap)$/;"	f	namespace:Spinnaker::GenApi
CategoryNode	include/SpinGenApi/CategoryNode.h	/^		class SPINNAKER_API CategoryNode : virtual public ICategory, virtual public ValueNode$/;"	c	namespace:Spinnaker::GenApi
CategoryNode	include/spinc/SpinnakerGenApiDefsC.h	/^	CategoryNode,$/;"	e	enum:_spinNodeType
ChangeHeightAndGain	SpinnakerTest/NodeMapCallback/NodeMapCallback.cpp	/^int ChangeHeightAndGain(INodeMap & nodeMap)$/;"	f
ChangeHeightAndGain	SpinnakerTest/NodeMapCallback_C/NodeMapCallback_C.cpp	/^spinError ChangeHeightAndGain(spinNodeMapHandle hNodeMap)$/;"	f
ChangeHeightAndGain	src/NodeMapCallback/NodeMapCallback.cpp	/^int ChangeHeightAndGain(INodeMap & nodeMap)$/;"	f
ChangeHeightAndGain	src/NodeMapCallback_C/NodeMapCallback_C.cpp	/^spinError ChangeHeightAndGain(spinNodeMapHandle hNodeMap)$/;"	f
ChunkBlackLevel	include/Camera.h	/^		GenApi::IFloat &ChunkBlackLevel;$/;"	m	class:Spinnaker::Camera
ChunkBlackLevel	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode ChunkBlackLevel;$/;"	m	struct:_quickSpin
ChunkBlackLevelSelector	include/Camera.h	/^		GenApi::IEnumerationT<ChunkBlackLevelSelectorEnums> &ChunkBlackLevelSelector;$/;"	m	class:Spinnaker::Camera
ChunkBlackLevelSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ChunkBlackLevelSelector;$/;"	m	struct:_quickSpin
ChunkBlackLevelSelectorEnums	include/CameraDefs.h	/^	enum ChunkBlackLevelSelectorEnums	\/*!< Selects which Black Level to return. Possible values are:*\/$/;"	g	namespace:Spinnaker
ChunkBlackLevelSelector_All	include/CameraDefs.h	/^		ChunkBlackLevelSelector_All,	\/*!< Black Level will be applied to all channels or taps.*\/$/;"	e	enum:Spinnaker::ChunkBlackLevelSelectorEnums
ChunkBlackLevelSelector_All	include/spinc/CameraDefsC.h	/^	ChunkBlackLevelSelector_All,	\/*!< Black Level will be applied to all channels or taps.*\/$/;"	e	enum:_spinChunkBlackLevelSelectorEnums
ChunkBlackLevelSelector_Blue	include/CameraDefs.h	/^		ChunkBlackLevelSelector_Blue,	\/*!< Black Level will be applied to the blue channel.*\/$/;"	e	enum:Spinnaker::ChunkBlackLevelSelectorEnums
ChunkBlackLevelSelector_Blue	include/spinc/CameraDefsC.h	/^	ChunkBlackLevelSelector_Blue,	\/*!< Black Level will be applied to the blue channel.*\/$/;"	e	enum:_spinChunkBlackLevelSelectorEnums
ChunkBlackLevelSelector_Green	include/CameraDefs.h	/^		ChunkBlackLevelSelector_Green,	\/*!< Black Level will be applied to the green channel.*\/$/;"	e	enum:Spinnaker::ChunkBlackLevelSelectorEnums
ChunkBlackLevelSelector_Green	include/spinc/CameraDefsC.h	/^	ChunkBlackLevelSelector_Green,	\/*!< Black Level will be applied to the green channel.*\/$/;"	e	enum:_spinChunkBlackLevelSelectorEnums
ChunkBlackLevelSelector_Red	include/CameraDefs.h	/^		ChunkBlackLevelSelector_Red,	\/*!< Black Level will be applied to the red channel.*\/$/;"	e	enum:Spinnaker::ChunkBlackLevelSelectorEnums
ChunkBlackLevelSelector_Red	include/spinc/CameraDefsC.h	/^	ChunkBlackLevelSelector_Red,	\/*!< Black Level will be applied to the red channel.*\/$/;"	e	enum:_spinChunkBlackLevelSelectorEnums
ChunkBlackLevelSelector_Tap1	include/CameraDefs.h	/^		ChunkBlackLevelSelector_Tap1,	\/*!< Black Level will be applied to Tap 1.*\/$/;"	e	enum:Spinnaker::ChunkBlackLevelSelectorEnums
ChunkBlackLevelSelector_Tap1	include/spinc/CameraDefsC.h	/^	ChunkBlackLevelSelector_Tap1,	\/*!< Black Level will be applied to Tap 1.*\/$/;"	e	enum:_spinChunkBlackLevelSelectorEnums
ChunkBlackLevelSelector_Tap2	include/CameraDefs.h	/^		ChunkBlackLevelSelector_Tap2,	\/*!< Black Level will be applied to Tap 2.*\/$/;"	e	enum:Spinnaker::ChunkBlackLevelSelectorEnums
ChunkBlackLevelSelector_Tap2	include/spinc/CameraDefsC.h	/^	ChunkBlackLevelSelector_Tap2,	\/*!< Black Level will be applied to Tap 2.*\/$/;"	e	enum:_spinChunkBlackLevelSelectorEnums
ChunkBlackLevelSelector_U	include/CameraDefs.h	/^		ChunkBlackLevelSelector_U,	\/*!< Black Level will be applied to U channel.*\/$/;"	e	enum:Spinnaker::ChunkBlackLevelSelectorEnums
ChunkBlackLevelSelector_U	include/spinc/CameraDefsC.h	/^	ChunkBlackLevelSelector_U,	\/*!< Black Level will be applied to U channel.*\/$/;"	e	enum:_spinChunkBlackLevelSelectorEnums
ChunkBlackLevelSelector_V	include/CameraDefs.h	/^		ChunkBlackLevelSelector_V,	\/*!< Black Level will be applied to V channel.*\/$/;"	e	enum:Spinnaker::ChunkBlackLevelSelectorEnums
ChunkBlackLevelSelector_V	include/spinc/CameraDefsC.h	/^	ChunkBlackLevelSelector_V,	\/*!< Black Level will be applied to V channel.*\/$/;"	e	enum:_spinChunkBlackLevelSelectorEnums
ChunkBlackLevelSelector_Y	include/CameraDefs.h	/^		ChunkBlackLevelSelector_Y,	\/*!< Black Level will be applied to Y channel.*\/$/;"	e	enum:Spinnaker::ChunkBlackLevelSelectorEnums
ChunkBlackLevelSelector_Y	include/spinc/CameraDefsC.h	/^	ChunkBlackLevelSelector_Y,	\/*!< Black Level will be applied to Y channel.*\/$/;"	e	enum:_spinChunkBlackLevelSelectorEnums
ChunkCounterSelector	include/Camera.h	/^		GenApi::IEnumerationT<ChunkCounterSelectorEnums> &ChunkCounterSelector;$/;"	m	class:Spinnaker::Camera
ChunkCounterSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ChunkCounterSelector;$/;"	m	struct:_quickSpin
ChunkCounterSelectorEnums	include/CameraDefs.h	/^	enum ChunkCounterSelectorEnums	\/*!< Selects which counter to retrieve data from.*\/$/;"	g	namespace:Spinnaker
ChunkCounterSelector_Counter0	include/CameraDefs.h	/^		ChunkCounterSelector_Counter0,	\/*!< Selects the counter 0.*\/$/;"	e	enum:Spinnaker::ChunkCounterSelectorEnums
ChunkCounterSelector_Counter0	include/spinc/CameraDefsC.h	/^	ChunkCounterSelector_Counter0,	\/*!< Selects the counter 0.*\/$/;"	e	enum:_spinChunkCounterSelectorEnums
ChunkCounterSelector_Counter1	include/CameraDefs.h	/^		ChunkCounterSelector_Counter1,	\/*!< Selects the counter 1.*\/$/;"	e	enum:Spinnaker::ChunkCounterSelectorEnums
ChunkCounterSelector_Counter1	include/spinc/CameraDefsC.h	/^	ChunkCounterSelector_Counter1,	\/*!< Selects the counter 1.*\/$/;"	e	enum:_spinChunkCounterSelectorEnums
ChunkCounterSelector_Counter2	include/CameraDefs.h	/^		ChunkCounterSelector_Counter2,	\/*!< Selects the counter 2.*\/$/;"	e	enum:Spinnaker::ChunkCounterSelectorEnums
ChunkCounterSelector_Counter2	include/spinc/CameraDefsC.h	/^	ChunkCounterSelector_Counter2,	\/*!< Selects the counter 2.*\/$/;"	e	enum:_spinChunkCounterSelectorEnums
ChunkCounterValue	include/Camera.h	/^		GenApi::IInteger &ChunkCounterValue;$/;"	m	class:Spinnaker::Camera
ChunkCounterValue	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode ChunkCounterValue;$/;"	m	struct:_quickSpin
ChunkData	include/ChunkData.h	/^	class SPINNAKER_API ChunkData$/;"	c	namespace:Spinnaker
ChunkEnable	include/Camera.h	/^		GenApi::IBoolean &ChunkEnable;$/;"	m	class:Spinnaker::Camera
ChunkEnable	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode ChunkEnable;$/;"	m	struct:_quickSpin
ChunkEncoderSelector	include/Camera.h	/^		GenApi::IEnumerationT<ChunkEncoderSelectorEnums> &ChunkEncoderSelector;$/;"	m	class:Spinnaker::Camera
ChunkEncoderSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ChunkEncoderSelector;$/;"	m	struct:_quickSpin
ChunkEncoderSelectorEnums	include/CameraDefs.h	/^	enum ChunkEncoderSelectorEnums	\/*!< Selects which Encoder to retrieve data from.*\/$/;"	g	namespace:Spinnaker
ChunkEncoderSelector_Encoder0	include/CameraDefs.h	/^		ChunkEncoderSelector_Encoder0,	\/*!< Selects the first Encoder.*\/$/;"	e	enum:Spinnaker::ChunkEncoderSelectorEnums
ChunkEncoderSelector_Encoder0	include/spinc/CameraDefsC.h	/^	ChunkEncoderSelector_Encoder0,	\/*!< Selects the first Encoder.*\/$/;"	e	enum:_spinChunkEncoderSelectorEnums
ChunkEncoderSelector_Encoder1	include/CameraDefs.h	/^		ChunkEncoderSelector_Encoder1,	\/*!< Selects the first Encoder.*\/$/;"	e	enum:Spinnaker::ChunkEncoderSelectorEnums
ChunkEncoderSelector_Encoder1	include/spinc/CameraDefsC.h	/^	ChunkEncoderSelector_Encoder1,	\/*!< Selects the first Encoder.*\/$/;"	e	enum:_spinChunkEncoderSelectorEnums
ChunkEncoderSelector_Encoder2	include/CameraDefs.h	/^		ChunkEncoderSelector_Encoder2,	\/*!< Selects the second Encoder.*\/$/;"	e	enum:Spinnaker::ChunkEncoderSelectorEnums
ChunkEncoderSelector_Encoder2	include/spinc/CameraDefsC.h	/^	ChunkEncoderSelector_Encoder2,	\/*!< Selects the second Encoder.*\/$/;"	e	enum:_spinChunkEncoderSelectorEnums
ChunkEncoderStatus	include/Camera.h	/^		GenApi::IEnumerationT<ChunkEncoderStatusEnums> &ChunkEncoderStatus;$/;"	m	class:Spinnaker::Camera
ChunkEncoderStatus	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ChunkEncoderStatus;$/;"	m	struct:_quickSpin
ChunkEncoderStatusEnums	include/CameraDefs.h	/^	enum ChunkEncoderStatusEnums	\/*!< Returns the motion status of the selected encoder.*\/$/;"	g	namespace:Spinnaker
ChunkEncoderStatus_EncoderDown	include/CameraDefs.h	/^		ChunkEncoderStatus_EncoderDown,	\/*!< The encoder counter last decremented.*\/$/;"	e	enum:Spinnaker::ChunkEncoderStatusEnums
ChunkEncoderStatus_EncoderDown	include/spinc/CameraDefsC.h	/^	ChunkEncoderStatus_EncoderDown,	\/*!< The encoder counter last decremented.*\/$/;"	e	enum:_spinChunkEncoderStatusEnums
ChunkEncoderStatus_EncoderIdle	include/CameraDefs.h	/^		ChunkEncoderStatus_EncoderIdle,	\/*!< The encoder is not active.*\/$/;"	e	enum:Spinnaker::ChunkEncoderStatusEnums
ChunkEncoderStatus_EncoderIdle	include/spinc/CameraDefsC.h	/^	ChunkEncoderStatus_EncoderIdle,	\/*!< The encoder is not active.*\/$/;"	e	enum:_spinChunkEncoderStatusEnums
ChunkEncoderStatus_EncoderStatic	include/CameraDefs.h	/^		ChunkEncoderStatus_EncoderStatic,	\/*!< No motion within the EncoderTimeout time.*\/$/;"	e	enum:Spinnaker::ChunkEncoderStatusEnums
ChunkEncoderStatus_EncoderStatic	include/spinc/CameraDefsC.h	/^	ChunkEncoderStatus_EncoderStatic,	\/*!< No motion within the EncoderTimeout time.*\/$/;"	e	enum:_spinChunkEncoderStatusEnums
ChunkEncoderStatus_EncoderUp	include/CameraDefs.h	/^		ChunkEncoderStatus_EncoderUp,	\/*!< The encoder counter last incremented.*\/$/;"	e	enum:Spinnaker::ChunkEncoderStatusEnums
ChunkEncoderStatus_EncoderUp	include/spinc/CameraDefsC.h	/^	ChunkEncoderStatus_EncoderUp,	\/*!< The encoder counter last incremented.*\/$/;"	e	enum:_spinChunkEncoderStatusEnums
ChunkEncoderValue	include/Camera.h	/^		GenApi::IInteger &ChunkEncoderValue;$/;"	m	class:Spinnaker::Camera
ChunkEncoderValue	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode ChunkEncoderValue;$/;"	m	struct:_quickSpin
ChunkExposureTime	include/Camera.h	/^		GenApi::IFloat &ChunkExposureTime;$/;"	m	class:Spinnaker::Camera
ChunkExposureTime	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode ChunkExposureTime;$/;"	m	struct:_quickSpin
ChunkExposureTimeSelector	include/Camera.h	/^		GenApi::IEnumerationT<ChunkExposureTimeSelectorEnums> &ChunkExposureTimeSelector;$/;"	m	class:Spinnaker::Camera
ChunkExposureTimeSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ChunkExposureTimeSelector;$/;"	m	struct:_quickSpin
ChunkExposureTimeSelectorEnums	include/CameraDefs.h	/^	enum ChunkExposureTimeSelectorEnums	\/*!< Selects which exposure time is read by the ChunkExposureTime feature.*\/$/;"	g	namespace:Spinnaker
ChunkExposureTimeSelector_Blue	include/CameraDefs.h	/^		ChunkExposureTimeSelector_Blue,	\/*!< Selects the blue ExposureTime.*\/$/;"	e	enum:Spinnaker::ChunkExposureTimeSelectorEnums
ChunkExposureTimeSelector_Blue	include/spinc/CameraDefsC.h	/^	ChunkExposureTimeSelector_Blue,	\/*!< Selects the blue ExposureTime.*\/$/;"	e	enum:_spinChunkExposureTimeSelectorEnums
ChunkExposureTimeSelector_Common	include/CameraDefs.h	/^		ChunkExposureTimeSelector_Common,	\/*!< Selects the common ExposureTime.*\/$/;"	e	enum:Spinnaker::ChunkExposureTimeSelectorEnums
ChunkExposureTimeSelector_Common	include/spinc/CameraDefsC.h	/^	ChunkExposureTimeSelector_Common,	\/*!< Selects the common ExposureTime.*\/$/;"	e	enum:_spinChunkExposureTimeSelectorEnums
ChunkExposureTimeSelector_Cyan	include/CameraDefs.h	/^		ChunkExposureTimeSelector_Cyan,	\/*!< Selects the cyan common ExposureTime..*\/$/;"	e	enum:Spinnaker::ChunkExposureTimeSelectorEnums
ChunkExposureTimeSelector_Cyan	include/spinc/CameraDefsC.h	/^	ChunkExposureTimeSelector_Cyan,	\/*!< Selects the cyan common ExposureTime..*\/$/;"	e	enum:_spinChunkExposureTimeSelectorEnums
ChunkExposureTimeSelector_Green	include/CameraDefs.h	/^		ChunkExposureTimeSelector_Green,	\/*!< Selects the green ExposureTime.*\/$/;"	e	enum:Spinnaker::ChunkExposureTimeSelectorEnums
ChunkExposureTimeSelector_Green	include/spinc/CameraDefsC.h	/^	ChunkExposureTimeSelector_Green,	\/*!< Selects the green ExposureTime.*\/$/;"	e	enum:_spinChunkExposureTimeSelectorEnums
ChunkExposureTimeSelector_Infrared	include/CameraDefs.h	/^		ChunkExposureTimeSelector_Infrared,	\/*!< Selects the infrared ExposureTime.*\/$/;"	e	enum:Spinnaker::ChunkExposureTimeSelectorEnums
ChunkExposureTimeSelector_Infrared	include/spinc/CameraDefsC.h	/^	ChunkExposureTimeSelector_Infrared,	\/*!< Selects the infrared ExposureTime.*\/$/;"	e	enum:_spinChunkExposureTimeSelectorEnums
ChunkExposureTimeSelector_Magenta	include/CameraDefs.h	/^		ChunkExposureTimeSelector_Magenta,	\/*!< Selects the magenta ExposureTime..*\/$/;"	e	enum:Spinnaker::ChunkExposureTimeSelectorEnums
ChunkExposureTimeSelector_Magenta	include/spinc/CameraDefsC.h	/^	ChunkExposureTimeSelector_Magenta,	\/*!< Selects the magenta ExposureTime..*\/$/;"	e	enum:_spinChunkExposureTimeSelectorEnums
ChunkExposureTimeSelector_Red	include/CameraDefs.h	/^		ChunkExposureTimeSelector_Red,	\/*!< Selects the red common ExposureTime.*\/$/;"	e	enum:Spinnaker::ChunkExposureTimeSelectorEnums
ChunkExposureTimeSelector_Red	include/spinc/CameraDefsC.h	/^	ChunkExposureTimeSelector_Red,	\/*!< Selects the red common ExposureTime.*\/$/;"	e	enum:_spinChunkExposureTimeSelectorEnums
ChunkExposureTimeSelector_Stage1	include/CameraDefs.h	/^		ChunkExposureTimeSelector_Stage1,	\/*!< Selects the first stage ExposureTime.*\/$/;"	e	enum:Spinnaker::ChunkExposureTimeSelectorEnums
ChunkExposureTimeSelector_Stage1	include/spinc/CameraDefsC.h	/^	ChunkExposureTimeSelector_Stage1,	\/*!< Selects the first stage ExposureTime.*\/$/;"	e	enum:_spinChunkExposureTimeSelectorEnums
ChunkExposureTimeSelector_Stage2	include/CameraDefs.h	/^		ChunkExposureTimeSelector_Stage2,	\/*!< Selects the second stage ExposureTime.*\/$/;"	e	enum:Spinnaker::ChunkExposureTimeSelectorEnums
ChunkExposureTimeSelector_Stage2	include/spinc/CameraDefsC.h	/^	ChunkExposureTimeSelector_Stage2,	\/*!< Selects the second stage ExposureTime.*\/$/;"	e	enum:_spinChunkExposureTimeSelectorEnums
ChunkExposureTimeSelector_Ultraviolet	include/CameraDefs.h	/^		ChunkExposureTimeSelector_Ultraviolet,	\/*!< Selects the ultraviolet ExposureTime.*\/$/;"	e	enum:Spinnaker::ChunkExposureTimeSelectorEnums
ChunkExposureTimeSelector_Ultraviolet	include/spinc/CameraDefsC.h	/^	ChunkExposureTimeSelector_Ultraviolet,	\/*!< Selects the ultraviolet ExposureTime.*\/$/;"	e	enum:_spinChunkExposureTimeSelectorEnums
ChunkExposureTimeSelector_Yellow	include/CameraDefs.h	/^		ChunkExposureTimeSelector_Yellow,	\/*!< Selects the yellow ExposureTime..*\/$/;"	e	enum:Spinnaker::ChunkExposureTimeSelectorEnums
ChunkExposureTimeSelector_Yellow	include/spinc/CameraDefsC.h	/^	ChunkExposureTimeSelector_Yellow,	\/*!< Selects the yellow ExposureTime..*\/$/;"	e	enum:_spinChunkExposureTimeSelectorEnums
ChunkFrameID	include/Camera.h	/^		GenApi::IInteger &ChunkFrameID;$/;"	m	class:Spinnaker::Camera
ChunkFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode ChunkFrameID;$/;"	m	struct:_quickSpin
ChunkGain	include/Camera.h	/^		GenApi::IFloat &ChunkGain;$/;"	m	class:Spinnaker::Camera
ChunkGain	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode ChunkGain;$/;"	m	struct:_quickSpin
ChunkGainSelector	include/Camera.h	/^		GenApi::IEnumerationT<ChunkGainSelectorEnums> &ChunkGainSelector;$/;"	m	class:Spinnaker::Camera
ChunkGainSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ChunkGainSelector;$/;"	m	struct:_quickSpin
ChunkGainSelectorEnums	include/CameraDefs.h	/^	enum ChunkGainSelectorEnums	\/*!< Selects which Gain to return.*\/$/;"	g	namespace:Spinnaker
ChunkGainSelector_All	include/CameraDefs.h	/^		ChunkGainSelector_All,	\/*!< Gain will be applied to all channels or taps.*\/$/;"	e	enum:Spinnaker::ChunkGainSelectorEnums
ChunkGainSelector_All	include/spinc/CameraDefsC.h	/^	ChunkGainSelector_All,	\/*!< Gain will be applied to all channels or taps.*\/$/;"	e	enum:_spinChunkGainSelectorEnums
ChunkGainSelector_AnalogAll	include/CameraDefs.h	/^		ChunkGainSelector_AnalogAll,	\/*!< Gain will be applied to all analog channels or taps.*\/$/;"	e	enum:Spinnaker::ChunkGainSelectorEnums
ChunkGainSelector_AnalogAll	include/spinc/CameraDefsC.h	/^	ChunkGainSelector_AnalogAll,	\/*!< Gain will be applied to all analog channels or taps.*\/$/;"	e	enum:_spinChunkGainSelectorEnums
ChunkGainSelector_AnalogBlue	include/CameraDefs.h	/^		ChunkGainSelector_AnalogBlue,	\/*!< Gain will be applied to the blue analog channel.*\/$/;"	e	enum:Spinnaker::ChunkGainSelectorEnums
ChunkGainSelector_AnalogBlue	include/spinc/CameraDefsC.h	/^	ChunkGainSelector_AnalogBlue,	\/*!< Gain will be applied to the blue analog channel.*\/$/;"	e	enum:_spinChunkGainSelectorEnums
ChunkGainSelector_AnalogGreen	include/CameraDefs.h	/^		ChunkGainSelector_AnalogGreen,	\/*!< Gain will be applied to the green analog channel.*\/$/;"	e	enum:Spinnaker::ChunkGainSelectorEnums
ChunkGainSelector_AnalogGreen	include/spinc/CameraDefsC.h	/^	ChunkGainSelector_AnalogGreen,	\/*!< Gain will be applied to the green analog channel.*\/$/;"	e	enum:_spinChunkGainSelectorEnums
ChunkGainSelector_AnalogRed	include/CameraDefs.h	/^		ChunkGainSelector_AnalogRed,	\/*!< Gain will be applied to the red analog channel.*\/$/;"	e	enum:Spinnaker::ChunkGainSelectorEnums
ChunkGainSelector_AnalogRed	include/spinc/CameraDefsC.h	/^	ChunkGainSelector_AnalogRed,	\/*!< Gain will be applied to the red analog channel.*\/$/;"	e	enum:_spinChunkGainSelectorEnums
ChunkGainSelector_AnalogTap1	include/CameraDefs.h	/^		ChunkGainSelector_AnalogTap1,	\/*!< Analog gain will be applied to Tap 1.*\/$/;"	e	enum:Spinnaker::ChunkGainSelectorEnums
ChunkGainSelector_AnalogTap1	include/spinc/CameraDefsC.h	/^	ChunkGainSelector_AnalogTap1,	\/*!< Analog gain will be applied to Tap 1.*\/$/;"	e	enum:_spinChunkGainSelectorEnums
ChunkGainSelector_AnalogTap2	include/CameraDefs.h	/^		ChunkGainSelector_AnalogTap2,	\/*!< Analog gain will be applied to Tap 2.*\/$/;"	e	enum:Spinnaker::ChunkGainSelectorEnums
ChunkGainSelector_AnalogTap2	include/spinc/CameraDefsC.h	/^	ChunkGainSelector_AnalogTap2,	\/*!< Analog gain will be applied to Tap 2.*\/$/;"	e	enum:_spinChunkGainSelectorEnums
ChunkGainSelector_AnalogU	include/CameraDefs.h	/^		ChunkGainSelector_AnalogU,	\/*!< Gain will be applied to U analog channel.*\/$/;"	e	enum:Spinnaker::ChunkGainSelectorEnums
ChunkGainSelector_AnalogU	include/spinc/CameraDefsC.h	/^	ChunkGainSelector_AnalogU,	\/*!< Gain will be applied to U analog channel.*\/$/;"	e	enum:_spinChunkGainSelectorEnums
ChunkGainSelector_AnalogV	include/CameraDefs.h	/^		ChunkGainSelector_AnalogV,	\/*!< Gain will be applied to V analog channel.*\/$/;"	e	enum:Spinnaker::ChunkGainSelectorEnums
ChunkGainSelector_AnalogV	include/spinc/CameraDefsC.h	/^	ChunkGainSelector_AnalogV,	\/*!< Gain will be applied to V analog channel.*\/$/;"	e	enum:_spinChunkGainSelectorEnums
ChunkGainSelector_AnalogY	include/CameraDefs.h	/^		ChunkGainSelector_AnalogY,	\/*!< Gain will be applied to Y analog channel.*\/$/;"	e	enum:Spinnaker::ChunkGainSelectorEnums
ChunkGainSelector_AnalogY	include/spinc/CameraDefsC.h	/^	ChunkGainSelector_AnalogY,	\/*!< Gain will be applied to Y analog channel.*\/$/;"	e	enum:_spinChunkGainSelectorEnums
ChunkGainSelector_Blue	include/CameraDefs.h	/^		ChunkGainSelector_Blue,	\/*!< Gain will be applied to the blue channel.*\/$/;"	e	enum:Spinnaker::ChunkGainSelectorEnums
ChunkGainSelector_Blue	include/spinc/CameraDefsC.h	/^	ChunkGainSelector_Blue,	\/*!< Gain will be applied to the blue channel.*\/$/;"	e	enum:_spinChunkGainSelectorEnums
ChunkGainSelector_DigitalAll	include/CameraDefs.h	/^		ChunkGainSelector_DigitalAll,	\/*!< Gain will be applied to all digital channels or taps.*\/$/;"	e	enum:Spinnaker::ChunkGainSelectorEnums
ChunkGainSelector_DigitalAll	include/spinc/CameraDefsC.h	/^	ChunkGainSelector_DigitalAll,	\/*!< Gain will be applied to all digital channels or taps.*\/$/;"	e	enum:_spinChunkGainSelectorEnums
ChunkGainSelector_DigitalBlue	include/CameraDefs.h	/^		ChunkGainSelector_DigitalBlue,	\/*!< Gain will be applied to the blue digital channel.*\/$/;"	e	enum:Spinnaker::ChunkGainSelectorEnums
ChunkGainSelector_DigitalBlue	include/spinc/CameraDefsC.h	/^	ChunkGainSelector_DigitalBlue,	\/*!< Gain will be applied to the blue digital channel.*\/$/;"	e	enum:_spinChunkGainSelectorEnums
ChunkGainSelector_DigitalGreen	include/CameraDefs.h	/^		ChunkGainSelector_DigitalGreen,	\/*!< Gain will be applied to the green digital channel.*\/$/;"	e	enum:Spinnaker::ChunkGainSelectorEnums
ChunkGainSelector_DigitalGreen	include/spinc/CameraDefsC.h	/^	ChunkGainSelector_DigitalGreen,	\/*!< Gain will be applied to the green digital channel.*\/$/;"	e	enum:_spinChunkGainSelectorEnums
ChunkGainSelector_DigitalRed	include/CameraDefs.h	/^		ChunkGainSelector_DigitalRed,	\/*!< Gain will be applied to the red digital channel.*\/$/;"	e	enum:Spinnaker::ChunkGainSelectorEnums
ChunkGainSelector_DigitalRed	include/spinc/CameraDefsC.h	/^	ChunkGainSelector_DigitalRed,	\/*!< Gain will be applied to the red digital channel.*\/$/;"	e	enum:_spinChunkGainSelectorEnums
ChunkGainSelector_DigitalTap1	include/CameraDefs.h	/^		ChunkGainSelector_DigitalTap1,	\/*!< Digital gain will be applied to Tap 1.*\/$/;"	e	enum:Spinnaker::ChunkGainSelectorEnums
ChunkGainSelector_DigitalTap1	include/spinc/CameraDefsC.h	/^	ChunkGainSelector_DigitalTap1,	\/*!< Digital gain will be applied to Tap 1.*\/$/;"	e	enum:_spinChunkGainSelectorEnums
ChunkGainSelector_DigitalTap2	include/CameraDefs.h	/^		ChunkGainSelector_DigitalTap2,	\/*!< Digital gain will be applied to Tap 2.*\/$/;"	e	enum:Spinnaker::ChunkGainSelectorEnums
ChunkGainSelector_DigitalTap2	include/spinc/CameraDefsC.h	/^	ChunkGainSelector_DigitalTap2,	\/*!< Digital gain will be applied to Tap 2.*\/$/;"	e	enum:_spinChunkGainSelectorEnums
ChunkGainSelector_DigitalU	include/CameraDefs.h	/^		ChunkGainSelector_DigitalU,	\/*!< Gain will be applied to U digital channel.*\/$/;"	e	enum:Spinnaker::ChunkGainSelectorEnums
ChunkGainSelector_DigitalU	include/spinc/CameraDefsC.h	/^	ChunkGainSelector_DigitalU,	\/*!< Gain will be applied to U digital channel.*\/$/;"	e	enum:_spinChunkGainSelectorEnums
ChunkGainSelector_DigitalV	include/CameraDefs.h	/^		ChunkGainSelector_DigitalV,	\/*!< Gain will be applied to V digital channel.*\/$/;"	e	enum:Spinnaker::ChunkGainSelectorEnums
ChunkGainSelector_DigitalV	include/spinc/CameraDefsC.h	/^	ChunkGainSelector_DigitalV,	\/*!< Gain will be applied to V digital channel.*\/$/;"	e	enum:_spinChunkGainSelectorEnums
ChunkGainSelector_DigitalY	include/CameraDefs.h	/^		ChunkGainSelector_DigitalY,	\/*!< Gain will be applied to Y digital channel.*\/$/;"	e	enum:Spinnaker::ChunkGainSelectorEnums
ChunkGainSelector_DigitalY	include/spinc/CameraDefsC.h	/^	ChunkGainSelector_DigitalY,	\/*!< Gain will be applied to Y digital channel.*\/$/;"	e	enum:_spinChunkGainSelectorEnums
ChunkGainSelector_Green	include/CameraDefs.h	/^		ChunkGainSelector_Green,	\/*!< Gain will be applied to the green channel.*\/$/;"	e	enum:Spinnaker::ChunkGainSelectorEnums
ChunkGainSelector_Green	include/spinc/CameraDefsC.h	/^	ChunkGainSelector_Green,	\/*!< Gain will be applied to the green channel.*\/$/;"	e	enum:_spinChunkGainSelectorEnums
ChunkGainSelector_Red	include/CameraDefs.h	/^		ChunkGainSelector_Red,	\/*!< Gain will be applied to the red channel.*\/$/;"	e	enum:Spinnaker::ChunkGainSelectorEnums
ChunkGainSelector_Red	include/spinc/CameraDefsC.h	/^	ChunkGainSelector_Red,	\/*!< Gain will be applied to the red channel.*\/$/;"	e	enum:_spinChunkGainSelectorEnums
ChunkGainSelector_Tap1	include/CameraDefs.h	/^		ChunkGainSelector_Tap1,	\/*!< Gain will be applied to Tap 1.*\/$/;"	e	enum:Spinnaker::ChunkGainSelectorEnums
ChunkGainSelector_Tap1	include/spinc/CameraDefsC.h	/^	ChunkGainSelector_Tap1,	\/*!< Gain will be applied to Tap 1.*\/$/;"	e	enum:_spinChunkGainSelectorEnums
ChunkGainSelector_Tap2	include/CameraDefs.h	/^		ChunkGainSelector_Tap2,	\/*!< Gain will be applied to Tap 2.*\/$/;"	e	enum:Spinnaker::ChunkGainSelectorEnums
ChunkGainSelector_Tap2	include/spinc/CameraDefsC.h	/^	ChunkGainSelector_Tap2,	\/*!< Gain will be applied to Tap 2.*\/$/;"	e	enum:_spinChunkGainSelectorEnums
ChunkGainSelector_U	include/CameraDefs.h	/^		ChunkGainSelector_U,	\/*!< Gain will be applied to U channel.*\/$/;"	e	enum:Spinnaker::ChunkGainSelectorEnums
ChunkGainSelector_U	include/spinc/CameraDefsC.h	/^	ChunkGainSelector_U,	\/*!< Gain will be applied to U channel.*\/$/;"	e	enum:_spinChunkGainSelectorEnums
ChunkGainSelector_V	include/CameraDefs.h	/^		ChunkGainSelector_V,	\/*!< Gain will be applied to V channel.*\/$/;"	e	enum:Spinnaker::ChunkGainSelectorEnums
ChunkGainSelector_V	include/spinc/CameraDefsC.h	/^	ChunkGainSelector_V,	\/*!< Gain will be applied to V channel.*\/$/;"	e	enum:_spinChunkGainSelectorEnums
ChunkGainSelector_Y	include/CameraDefs.h	/^		ChunkGainSelector_Y,	\/*!< Gain will be applied to Y channel.*\/$/;"	e	enum:Spinnaker::ChunkGainSelectorEnums
ChunkGainSelector_Y	include/spinc/CameraDefsC.h	/^	ChunkGainSelector_Y,	\/*!< Gain will be applied to Y channel.*\/$/;"	e	enum:_spinChunkGainSelectorEnums
ChunkHeight	include/Camera.h	/^		GenApi::IInteger &ChunkHeight;$/;"	m	class:Spinnaker::Camera
ChunkHeight	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode ChunkHeight;$/;"	m	struct:_quickSpin
ChunkID	include/SpinGenApi/ChunkAdapterDcam.h	/^			SPIN_GUID     ChunkID;$/;"	m	struct:Spinnaker::GenApi::DCAM_CHUNK_TRAILER
ChunkID	include/SpinGenApi/ChunkAdapterGEV.h	/^			uint32_t ChunkID;$/;"	m	struct:Spinnaker::GenApi::GVCP_CHUNK_TRAILER
ChunkID	include/SpinGenApi/ChunkAdapterGeneric.h	/^			GenICam::gcstring ChunkID;$/;"	m	struct:Spinnaker::GenApi::SingleChunkDataStr_t
ChunkID	include/SpinGenApi/ChunkAdapterGeneric.h	/^			uint64_t ChunkID;$/;"	m	struct:Spinnaker::GenApi::SingleChunkData_t
ChunkID	include/SpinGenApi/ChunkAdapterU3V.h	/^			uint32_t ChunkID;$/;"	m	struct:Spinnaker::GenApi::U3V_CHUNK_TRAILER
ChunkImage	include/Camera.h	/^		GenApi::IRegister &ChunkImage;$/;"	m	class:Spinnaker::Camera
ChunkImage	include/spinc/QuickSpinDefsC.h	/^	quickSpinRegisterNode ChunkImage;$/;"	m	struct:_quickSpin
ChunkImageComponent	include/Camera.h	/^		GenApi::IEnumerationT<ChunkImageComponentEnums> &ChunkImageComponent;$/;"	m	class:Spinnaker::Camera
ChunkImageComponent	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ChunkImageComponent;$/;"	m	struct:_quickSpin
ChunkImageComponentEnums	include/CameraDefs.h	/^	enum ChunkImageComponentEnums	\/*!< Returns the component of the payload image. This can be used to identify the image component of a generic part in a multipart transfer.*\/$/;"	g	namespace:Spinnaker
ChunkImageComponent_Color	include/CameraDefs.h	/^		ChunkImageComponent_Color,	\/*!< The image data is color component.*\/$/;"	e	enum:Spinnaker::ChunkImageComponentEnums
ChunkImageComponent_Color	include/spinc/CameraDefsC.h	/^	ChunkImageComponent_Color,	\/*!< The image data is color component.*\/$/;"	e	enum:_spinChunkImageComponentEnums
ChunkImageComponent_Confidence	include/CameraDefs.h	/^		ChunkImageComponent_Confidence,	\/*!< The image data is the confidence map component.*\/$/;"	e	enum:Spinnaker::ChunkImageComponentEnums
ChunkImageComponent_Confidence	include/spinc/CameraDefsC.h	/^	ChunkImageComponent_Confidence,	\/*!< The image data is the confidence map component.*\/$/;"	e	enum:_spinChunkImageComponentEnums
ChunkImageComponent_Disparity	include/CameraDefs.h	/^		ChunkImageComponent_Disparity,	\/*!< The image data is the disparity component.*\/$/;"	e	enum:Spinnaker::ChunkImageComponentEnums
ChunkImageComponent_Disparity	include/spinc/CameraDefsC.h	/^	ChunkImageComponent_Disparity,	\/*!< The image data is the disparity component.*\/$/;"	e	enum:_spinChunkImageComponentEnums
ChunkImageComponent_Infrared	include/CameraDefs.h	/^		ChunkImageComponent_Infrared,	\/*!< The image data is infrared component.*\/$/;"	e	enum:Spinnaker::ChunkImageComponentEnums
ChunkImageComponent_Infrared	include/spinc/CameraDefsC.h	/^	ChunkImageComponent_Infrared,	\/*!< The image data is infrared component.*\/$/;"	e	enum:_spinChunkImageComponentEnums
ChunkImageComponent_Intensity	include/CameraDefs.h	/^		ChunkImageComponent_Intensity,	\/*!< The image data is the intensity component.*\/$/;"	e	enum:Spinnaker::ChunkImageComponentEnums
ChunkImageComponent_Intensity	include/spinc/CameraDefsC.h	/^	ChunkImageComponent_Intensity,	\/*!< The image data is the intensity component.*\/$/;"	e	enum:_spinChunkImageComponentEnums
ChunkImageComponent_Range	include/CameraDefs.h	/^		ChunkImageComponent_Range,	\/*!< The image data is the range (distance) component.*\/$/;"	e	enum:Spinnaker::ChunkImageComponentEnums
ChunkImageComponent_Range	include/spinc/CameraDefsC.h	/^	ChunkImageComponent_Range,	\/*!< The image data is the range (distance) component.*\/$/;"	e	enum:_spinChunkImageComponentEnums
ChunkImageComponent_Scatter	include/CameraDefs.h	/^		ChunkImageComponent_Scatter,	\/*!< The image data is the scatter component.*\/$/;"	e	enum:Spinnaker::ChunkImageComponentEnums
ChunkImageComponent_Scatter	include/spinc/CameraDefsC.h	/^	ChunkImageComponent_Scatter,	\/*!< The image data is the scatter component.*\/$/;"	e	enum:_spinChunkImageComponentEnums
ChunkImageComponent_Ultraviolet	include/CameraDefs.h	/^		ChunkImageComponent_Ultraviolet,	\/*!< The image data is the ultraviolet component.*\/$/;"	e	enum:Spinnaker::ChunkImageComponentEnums
ChunkImageComponent_Ultraviolet	include/spinc/CameraDefsC.h	/^	ChunkImageComponent_Ultraviolet,	\/*!< The image data is the ultraviolet component.*\/$/;"	e	enum:_spinChunkImageComponentEnums
ChunkLength	include/SpinGenApi/ChunkAdapterDcam.h	/^			uint32_t ChunkLength;$/;"	m	struct:Spinnaker::GenApi::DCAM_CHUNK_TRAILER
ChunkLength	include/SpinGenApi/ChunkAdapterGEV.h	/^			uint32_t ChunkLength;$/;"	m	struct:Spinnaker::GenApi::GVCP_CHUNK_TRAILER
ChunkLength	include/SpinGenApi/ChunkAdapterGeneric.h	/^			size_t ChunkLength;$/;"	m	struct:Spinnaker::GenApi::SingleChunkDataStr_t
ChunkLength	include/SpinGenApi/ChunkAdapterGeneric.h	/^			size_t ChunkLength;$/;"	m	struct:Spinnaker::GenApi::SingleChunkData_t
ChunkLength	include/SpinGenApi/ChunkAdapterU3V.h	/^			uint32_t ChunkLength;$/;"	m	struct:Spinnaker::GenApi::U3V_CHUNK_TRAILER
ChunkLinePitch	include/Camera.h	/^		GenApi::IInteger &ChunkLinePitch;$/;"	m	class:Spinnaker::Camera
ChunkLinePitch	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode ChunkLinePitch;$/;"	m	struct:_quickSpin
ChunkLineStatusAll	include/Camera.h	/^		GenApi::IInteger &ChunkLineStatusAll;$/;"	m	class:Spinnaker::Camera
ChunkLineStatusAll	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode ChunkLineStatusAll;$/;"	m	struct:_quickSpin
ChunkModeActive	include/Camera.h	/^		GenApi::IBoolean &ChunkModeActive;$/;"	m	class:Spinnaker::Camera
ChunkModeActive	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode ChunkModeActive;$/;"	m	struct:_quickSpin
ChunkOffset	include/SpinGenApi/ChunkAdapterGeneric.h	/^			ptrdiff_t ChunkOffset;$/;"	m	struct:Spinnaker::GenApi::SingleChunkDataStr_t
ChunkOffset	include/SpinGenApi/ChunkAdapterGeneric.h	/^			ptrdiff_t ChunkOffset;$/;"	m	struct:Spinnaker::GenApi::SingleChunkData_t
ChunkOffsetX	include/Camera.h	/^		GenApi::IInteger &ChunkOffsetX;$/;"	m	class:Spinnaker::Camera
ChunkOffsetX	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode ChunkOffsetX;$/;"	m	struct:_quickSpin
ChunkOffsetY	include/Camera.h	/^		GenApi::IInteger &ChunkOffsetY;$/;"	m	class:Spinnaker::Camera
ChunkOffsetY	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode ChunkOffsetY;$/;"	m	struct:_quickSpin
ChunkPartSelector	include/Camera.h	/^		GenApi::IInteger &ChunkPartSelector;$/;"	m	class:Spinnaker::Camera
ChunkPartSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode ChunkPartSelector;$/;"	m	struct:_quickSpin
ChunkPixelDynamicRangeMax	include/Camera.h	/^		GenApi::IInteger &ChunkPixelDynamicRangeMax;$/;"	m	class:Spinnaker::Camera
ChunkPixelDynamicRangeMax	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode ChunkPixelDynamicRangeMax;$/;"	m	struct:_quickSpin
ChunkPixelDynamicRangeMin	include/Camera.h	/^		GenApi::IInteger &ChunkPixelDynamicRangeMin;$/;"	m	class:Spinnaker::Camera
ChunkPixelDynamicRangeMin	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode ChunkPixelDynamicRangeMin;$/;"	m	struct:_quickSpin
ChunkPixelFormat	include/Camera.h	/^		GenApi::IEnumerationT<ChunkPixelFormatEnums> &ChunkPixelFormat;$/;"	m	class:Spinnaker::Camera
ChunkPixelFormat	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ChunkPixelFormat;$/;"	m	struct:_quickSpin
ChunkPixelFormatEnums	include/CameraDefs.h	/^	enum ChunkPixelFormatEnums	\/*!< Returns the PixelFormat of the image included in the payload.*\/$/;"	g	namespace:Spinnaker
ChunkPixelFormat_B10	include/CameraDefs.h	/^		ChunkPixelFormat_B10,	\/*!< Blue 10-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_B10	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_B10,	\/*!< Blue 10-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_B12	include/CameraDefs.h	/^		ChunkPixelFormat_B12,	\/*!< Blue 12-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_B12	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_B12,	\/*!< Blue 12-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_B16	include/CameraDefs.h	/^		ChunkPixelFormat_B16,	\/*!< Blue 16-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_B16	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_B16,	\/*!< Blue 16-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_B8	include/CameraDefs.h	/^		ChunkPixelFormat_B8,	\/*!< Blue 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_B8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_B8,	\/*!< Blue 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BGR10	include/CameraDefs.h	/^		ChunkPixelFormat_BGR10,	\/*!< Blue-Green-Red 10-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BGR10	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BGR10,	\/*!< Blue-Green-Red 10-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BGR10p	include/CameraDefs.h	/^		ChunkPixelFormat_BGR10p,	\/*!< Blue-Green-Red 10-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BGR10p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BGR10p,	\/*!< Blue-Green-Red 10-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BGR12	include/CameraDefs.h	/^		ChunkPixelFormat_BGR12,	\/*!< Blue-Green-Red 12-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BGR12	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BGR12,	\/*!< Blue-Green-Red 12-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BGR12p	include/CameraDefs.h	/^		ChunkPixelFormat_BGR12p,	\/*!< Blue-Green-Red 12-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BGR12p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BGR12p,	\/*!< Blue-Green-Red 12-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BGR14	include/CameraDefs.h	/^		ChunkPixelFormat_BGR14,	\/*!< Blue-Green-Red 14-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BGR14	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BGR14,	\/*!< Blue-Green-Red 14-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BGR16	include/CameraDefs.h	/^		ChunkPixelFormat_BGR16,	\/*!< Blue-Green-Red 16-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BGR16	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BGR16,	\/*!< Blue-Green-Red 16-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BGR565p	include/CameraDefs.h	/^		ChunkPixelFormat_BGR565p,	\/*!< Blue-Green-Red 5\/6\/5-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BGR565p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BGR565p,	\/*!< Blue-Green-Red 5\/6\/5-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BGR8	include/CameraDefs.h	/^		ChunkPixelFormat_BGR8,	\/*!< Blue-Green-Red 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BGR8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BGR8,	\/*!< Blue-Green-Red 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BGRa10	include/CameraDefs.h	/^		ChunkPixelFormat_BGRa10,	\/*!< Blue-Green-Red-alpha 10-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BGRa10	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BGRa10,	\/*!< Blue-Green-Red-alpha 10-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BGRa10p	include/CameraDefs.h	/^		ChunkPixelFormat_BGRa10p,	\/*!< Blue-Green-Red-alpha 10-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BGRa10p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BGRa10p,	\/*!< Blue-Green-Red-alpha 10-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BGRa12	include/CameraDefs.h	/^		ChunkPixelFormat_BGRa12,	\/*!< Blue-Green-Red-alpha 12-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BGRa12	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BGRa12,	\/*!< Blue-Green-Red-alpha 12-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BGRa12p	include/CameraDefs.h	/^		ChunkPixelFormat_BGRa12p,	\/*!< Blue-Green-Red-alpha 12-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BGRa12p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BGRa12p,	\/*!< Blue-Green-Red-alpha 12-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BGRa14	include/CameraDefs.h	/^		ChunkPixelFormat_BGRa14,	\/*!< Blue-Green-Red-alpha 14-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BGRa14	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BGRa14,	\/*!< Blue-Green-Red-alpha 14-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BGRa16	include/CameraDefs.h	/^		ChunkPixelFormat_BGRa16,	\/*!< Blue-Green-Red-alpha 16-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BGRa16	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BGRa16,	\/*!< Blue-Green-Red-alpha 16-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BGRa8	include/CameraDefs.h	/^		ChunkPixelFormat_BGRa8,	\/*!< Blue-Green-Red-alpha 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BGRa8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BGRa8,	\/*!< Blue-Green-Red-alpha 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BayerBG10	include/CameraDefs.h	/^		ChunkPixelFormat_BayerBG10,	\/*!< Bayer Blue-Green 10-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BayerBG10	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BayerBG10,	\/*!< Bayer Blue-Green 10-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BayerBG10p	include/CameraDefs.h	/^		ChunkPixelFormat_BayerBG10p,	\/*!< Bayer Blue-Green 10-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BayerBG10p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BayerBG10p,	\/*!< Bayer Blue-Green 10-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BayerBG12	include/CameraDefs.h	/^		ChunkPixelFormat_BayerBG12,	\/*!< Bayer Blue-Green 12-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BayerBG12	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BayerBG12,	\/*!< Bayer Blue-Green 12-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BayerBG12p	include/CameraDefs.h	/^		ChunkPixelFormat_BayerBG12p,	\/*!< Bayer Blue-Green 12-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BayerBG12p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BayerBG12p,	\/*!< Bayer Blue-Green 12-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BayerBG16	include/CameraDefs.h	/^		ChunkPixelFormat_BayerBG16,	\/*!< Bayer Blue-Green 16-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BayerBG16	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BayerBG16,	\/*!< Bayer Blue-Green 16-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BayerBG8	include/CameraDefs.h	/^		ChunkPixelFormat_BayerBG8,	\/*!< Bayer Blue-Green 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BayerBG8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BayerBG8,	\/*!< Bayer Blue-Green 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BayerGB10	include/CameraDefs.h	/^		ChunkPixelFormat_BayerGB10,	\/*!< Bayer Green-Blue 10-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BayerGB10	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BayerGB10,	\/*!< Bayer Green-Blue 10-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BayerGB10p	include/CameraDefs.h	/^		ChunkPixelFormat_BayerGB10p,	\/*!< Bayer Green-Blue 10-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BayerGB10p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BayerGB10p,	\/*!< Bayer Green-Blue 10-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BayerGB12	include/CameraDefs.h	/^		ChunkPixelFormat_BayerGB12,	\/*!< Bayer Green-Blue 12-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BayerGB12	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BayerGB12,	\/*!< Bayer Green-Blue 12-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BayerGB12p	include/CameraDefs.h	/^		ChunkPixelFormat_BayerGB12p,	\/*!< Bayer Green-Blue 12-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BayerGB12p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BayerGB12p,	\/*!< Bayer Green-Blue 12-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BayerGB16	include/CameraDefs.h	/^		ChunkPixelFormat_BayerGB16,	\/*!< Bayer Green-Blue 16-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BayerGB16	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BayerGB16,	\/*!< Bayer Green-Blue 16-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BayerGB8	include/CameraDefs.h	/^		ChunkPixelFormat_BayerGB8,	\/*!< Bayer Green-Blue 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BayerGB8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BayerGB8,	\/*!< Bayer Green-Blue 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BayerGR10	include/CameraDefs.h	/^		ChunkPixelFormat_BayerGR10,	\/*!< Bayer Green-Red 10-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BayerGR10	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BayerGR10,	\/*!< Bayer Green-Red 10-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BayerGR10p	include/CameraDefs.h	/^		ChunkPixelFormat_BayerGR10p,	\/*!< Bayer Green-Red 10-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BayerGR10p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BayerGR10p,	\/*!< Bayer Green-Red 10-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BayerGR12	include/CameraDefs.h	/^		ChunkPixelFormat_BayerGR12,	\/*!< Bayer Green-Red 12-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BayerGR12	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BayerGR12,	\/*!< Bayer Green-Red 12-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BayerGR12p	include/CameraDefs.h	/^		ChunkPixelFormat_BayerGR12p,	\/*!< Bayer Green-Red 12-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BayerGR12p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BayerGR12p,	\/*!< Bayer Green-Red 12-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BayerGR16	include/CameraDefs.h	/^		ChunkPixelFormat_BayerGR16,	\/*!< Bayer Green-Red 16-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BayerGR16	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BayerGR16,	\/*!< Bayer Green-Red 16-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BayerGR8	include/CameraDefs.h	/^		ChunkPixelFormat_BayerGR8,	\/*!< Bayer Green-Red 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BayerGR8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BayerGR8,	\/*!< Bayer Green-Red 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BayerRG10	include/CameraDefs.h	/^		ChunkPixelFormat_BayerRG10,	\/*!< Bayer Red-Green 10-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BayerRG10	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BayerRG10,	\/*!< Bayer Red-Green 10-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BayerRG10p	include/CameraDefs.h	/^		ChunkPixelFormat_BayerRG10p,	\/*!< Bayer Red-Green 10-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BayerRG10p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BayerRG10p,	\/*!< Bayer Red-Green 10-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BayerRG12	include/CameraDefs.h	/^		ChunkPixelFormat_BayerRG12,	\/*!< Bayer Red-Green 12-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BayerRG12	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BayerRG12,	\/*!< Bayer Red-Green 12-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BayerRG12p	include/CameraDefs.h	/^		ChunkPixelFormat_BayerRG12p,	\/*!< Bayer Red-Green 12-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BayerRG12p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BayerRG12p,	\/*!< Bayer Red-Green 12-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BayerRG16	include/CameraDefs.h	/^		ChunkPixelFormat_BayerRG16,	\/*!< Bayer Red-Green 16-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BayerRG16	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BayerRG16,	\/*!< Bayer Red-Green 16-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BayerRG8	include/CameraDefs.h	/^		ChunkPixelFormat_BayerRG8,	\/*!< Bayer Red-Green 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BayerRG8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BayerRG8,	\/*!< Bayer Red-Green 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BiColorBGRG10	include/CameraDefs.h	/^		ChunkPixelFormat_BiColorBGRG10,	\/*!< Bi-color Blue\/Green - Red\/Green 10-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BiColorBGRG10	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BiColorBGRG10,	\/*!< Bi-color Blue\/Green - Red\/Green 10-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BiColorBGRG10p	include/CameraDefs.h	/^		ChunkPixelFormat_BiColorBGRG10p,	\/*!< Bi-color Blue\/Green - Red\/Green 10-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BiColorBGRG10p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BiColorBGRG10p,	\/*!< Bi-color Blue\/Green - Red\/Green 10-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BiColorBGRG12	include/CameraDefs.h	/^		ChunkPixelFormat_BiColorBGRG12,	\/*!< Bi-color Blue\/Green - Red\/Green 12-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BiColorBGRG12	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BiColorBGRG12,	\/*!< Bi-color Blue\/Green - Red\/Green 12-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BiColorBGRG12p	include/CameraDefs.h	/^		ChunkPixelFormat_BiColorBGRG12p,	\/*!< Bi-color Blue\/Green - Red\/Green 12-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BiColorBGRG12p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BiColorBGRG12p,	\/*!< Bi-color Blue\/Green - Red\/Green 12-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BiColorBGRG8	include/CameraDefs.h	/^		ChunkPixelFormat_BiColorBGRG8,	\/*!< Bi-color Blue\/Green - Red\/Green 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BiColorBGRG8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BiColorBGRG8,	\/*!< Bi-color Blue\/Green - Red\/Green 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BiColorRGBG10	include/CameraDefs.h	/^		ChunkPixelFormat_BiColorRGBG10,	\/*!< Bi-color Red\/Green - Blue\/Green 10-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BiColorRGBG10	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BiColorRGBG10,	\/*!< Bi-color Red\/Green - Blue\/Green 10-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BiColorRGBG10p	include/CameraDefs.h	/^		ChunkPixelFormat_BiColorRGBG10p,	\/*!< Bi-color Red\/Green - Blue\/Green 10-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BiColorRGBG10p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BiColorRGBG10p,	\/*!< Bi-color Red\/Green - Blue\/Green 10-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BiColorRGBG12	include/CameraDefs.h	/^		ChunkPixelFormat_BiColorRGBG12,	\/*!< Bi-color Red\/Green - Blue\/Green 12-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BiColorRGBG12	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BiColorRGBG12,	\/*!< Bi-color Red\/Green - Blue\/Green 12-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BiColorRGBG12p	include/CameraDefs.h	/^		ChunkPixelFormat_BiColorRGBG12p,	\/*!< Bi-color Red\/Green - Blue\/Green 12-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BiColorRGBG12p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BiColorRGBG12p,	\/*!< Bi-color Red\/Green - Blue\/Green 12-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_BiColorRGBG8	include/CameraDefs.h	/^		ChunkPixelFormat_BiColorRGBG8,	\/*!< Bi-color Red\/Green - Blue\/Green 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_BiColorRGBG8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_BiColorRGBG8,	\/*!< Bi-color Red\/Green - Blue\/Green 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Confidence1	include/CameraDefs.h	/^		ChunkPixelFormat_Confidence1,	\/*!< Confidence 1-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Confidence1	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Confidence1,	\/*!< Confidence 1-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Confidence16	include/CameraDefs.h	/^		ChunkPixelFormat_Confidence16,	\/*!< Confidence 16-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Confidence16	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Confidence16,	\/*!< Confidence 16-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Confidence1p	include/CameraDefs.h	/^		ChunkPixelFormat_Confidence1p,	\/*!< Confidence 1-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Confidence1p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Confidence1p,	\/*!< Confidence 1-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Confidence32f	include/CameraDefs.h	/^		ChunkPixelFormat_Confidence32f,	\/*!< Confidence 32-bit floating point*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Confidence32f	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Confidence32f,	\/*!< Confidence 32-bit floating point*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Confidence8	include/CameraDefs.h	/^		ChunkPixelFormat_Confidence8,	\/*!< Confidence 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Confidence8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Confidence8,	\/*!< Confidence 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_A10p	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_A10p,	\/*!< 3D coordinate A 10-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_A10p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_A10p,	\/*!< 3D coordinate A 10-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_A12p	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_A12p,	\/*!< 3D coordinate A 12-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_A12p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_A12p,	\/*!< 3D coordinate A 12-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_A16	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_A16,	\/*!< 3D coordinate A 16-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_A16	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_A16,	\/*!< 3D coordinate A 16-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_A32f	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_A32f,	\/*!< 3D coordinate A 32-bit floating point*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_A32f	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_A32f,	\/*!< 3D coordinate A 32-bit floating point*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_A8	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_A8,	\/*!< 3D coordinate A 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_A8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_A8,	\/*!< 3D coordinate A 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_ABC10p	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_ABC10p,	\/*!< 3D coordinate A-B-C 10-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_ABC10p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_ABC10p,	\/*!< 3D coordinate A-B-C 10-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_ABC10p_Planar	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_ABC10p_Planar,	\/*!< 3D coordinate A-B-C 10-bit packed planar*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_ABC10p_Planar	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_ABC10p_Planar,	\/*!< 3D coordinate A-B-C 10-bit packed planar*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_ABC12p	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_ABC12p,	\/*!< 3D coordinate A-B-C 12-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_ABC12p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_ABC12p,	\/*!< 3D coordinate A-B-C 12-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_ABC12p_Planar	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_ABC12p_Planar,	\/*!< 3D coordinate A-B-C 12-bit packed planar*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_ABC12p_Planar	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_ABC12p_Planar,	\/*!< 3D coordinate A-B-C 12-bit packed planar*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_ABC16	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_ABC16,	\/*!< 3D coordinate A-B-C 16-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_ABC16	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_ABC16,	\/*!< 3D coordinate A-B-C 16-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_ABC16_Planar	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_ABC16_Planar,	\/*!< 3D coordinate A-B-C 16-bit planar*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_ABC16_Planar	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_ABC16_Planar,	\/*!< 3D coordinate A-B-C 16-bit planar*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_ABC32f	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_ABC32f,	\/*!< 3D coordinate A-B-C 32-bit floating point*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_ABC32f	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_ABC32f,	\/*!< 3D coordinate A-B-C 32-bit floating point*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_ABC32f_Planar	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_ABC32f_Planar,	\/*!< 3D coordinate A-B-C 32-bit floating point planar*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_ABC32f_Planar	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_ABC32f_Planar,	\/*!< 3D coordinate A-B-C 32-bit floating point planar*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_ABC8	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_ABC8,	\/*!< 3D coordinate A-B-C 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_ABC8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_ABC8,	\/*!< 3D coordinate A-B-C 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_ABC8_Planar	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_ABC8_Planar,	\/*!< 3D coordinate A-B-C 8-bit planar*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_ABC8_Planar	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_ABC8_Planar,	\/*!< 3D coordinate A-B-C 8-bit planar*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_AC10p	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_AC10p,	\/*!< 3D coordinate A-C 10-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_AC10p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_AC10p,	\/*!< 3D coordinate A-C 10-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_AC10p_Planar	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_AC10p_Planar,	\/*!< 3D coordinate A-C 10-bit packed planar*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_AC10p_Planar	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_AC10p_Planar,	\/*!< 3D coordinate A-C 10-bit packed planar*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_AC12p	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_AC12p,	\/*!< 3D coordinate A-C 12-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_AC12p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_AC12p,	\/*!< 3D coordinate A-C 12-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_AC12p_Planar	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_AC12p_Planar,	\/*!< 3D coordinate A-C 12-bit packed planar*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_AC12p_Planar	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_AC12p_Planar,	\/*!< 3D coordinate A-C 12-bit packed planar*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_AC16	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_AC16,	\/*!< 3D coordinate A-C 16-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_AC16	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_AC16,	\/*!< 3D coordinate A-C 16-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_AC16_Planar	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_AC16_Planar,	\/*!< 3D coordinate A-C 16-bit planar*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_AC16_Planar	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_AC16_Planar,	\/*!< 3D coordinate A-C 16-bit planar*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_AC32f	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_AC32f,	\/*!< 3D coordinate A-C 32-bit floating point*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_AC32f	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_AC32f,	\/*!< 3D coordinate A-C 32-bit floating point*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_AC32f_Planar	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_AC32f_Planar,	\/*!< 3D coordinate A-C 32-bit floating point planar*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_AC32f_Planar	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_AC32f_Planar,	\/*!< 3D coordinate A-C 32-bit floating point planar*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_AC8	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_AC8,	\/*!< 3D coordinate A-C 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_AC8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_AC8,	\/*!< 3D coordinate A-C 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_AC8_Planar	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_AC8_Planar,	\/*!< 3D coordinate A-C 8-bit planar*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_AC8_Planar	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_AC8_Planar,	\/*!< 3D coordinate A-C 8-bit planar*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_B10p	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_B10p,	\/*!< 3D coordinate B 10-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_B10p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_B10p,	\/*!< 3D coordinate B 10-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_B12p	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_B12p,	\/*!< 3D coordinate B 12-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_B12p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_B12p,	\/*!< 3D coordinate B 12-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_B16	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_B16,	\/*!< 3D coordinate B 16-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_B16	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_B16,	\/*!< 3D coordinate B 16-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_B32f	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_B32f,	\/*!< 3D coordinate B 32-bit floating point*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_B32f	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_B32f,	\/*!< 3D coordinate B 32-bit floating point*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_B8	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_B8,	\/*!< 3D coordinate B 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_B8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_B8,	\/*!< 3D coordinate B 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_C10p	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_C10p,	\/*!< 3D coordinate C 10-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_C10p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_C10p,	\/*!< 3D coordinate C 10-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_C12p	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_C12p,	\/*!< 3D coordinate C 12-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_C12p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_C12p,	\/*!< 3D coordinate C 12-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_C16	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_C16,	\/*!< 3D coordinate C 16-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_C16	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_C16,	\/*!< 3D coordinate C 16-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_C32f	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_C32f,	\/*!< 3D coordinate C 32-bit floating point*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_C32f	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_C32f,	\/*!< 3D coordinate C 32-bit floating point*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_C8	include/CameraDefs.h	/^		ChunkPixelFormat_Coord3D_C8,	\/*!< 3D coordinate C 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Coord3D_C8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Coord3D_C8,	\/*!< 3D coordinate C 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_G10	include/CameraDefs.h	/^		ChunkPixelFormat_G10,	\/*!< Green 10-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_G10	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_G10,	\/*!< Green 10-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_G12	include/CameraDefs.h	/^		ChunkPixelFormat_G12,	\/*!< Green 12-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_G12	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_G12,	\/*!< Green 12-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_G16	include/CameraDefs.h	/^		ChunkPixelFormat_G16,	\/*!< Green 16-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_G16	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_G16,	\/*!< Green 16-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_G8	include/CameraDefs.h	/^		ChunkPixelFormat_G8,	\/*!< Green 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_G8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_G8,	\/*!< Green 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Mono10	include/CameraDefs.h	/^		ChunkPixelFormat_Mono10,	\/*!< Monochrome 10-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Mono10	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Mono10,	\/*!< Monochrome 10-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Mono10p	include/CameraDefs.h	/^		ChunkPixelFormat_Mono10p,	\/*!< Monochrome 10-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Mono10p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Mono10p,	\/*!< Monochrome 10-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Mono12	include/CameraDefs.h	/^		ChunkPixelFormat_Mono12,	\/*!< Monochrome 12-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Mono12	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Mono12,	\/*!< Monochrome 12-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Mono12p	include/CameraDefs.h	/^		ChunkPixelFormat_Mono12p,	\/*!< Monochrome 12-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Mono12p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Mono12p,	\/*!< Monochrome 12-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Mono14	include/CameraDefs.h	/^		ChunkPixelFormat_Mono14,	\/*!< Monochrome 14-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Mono14	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Mono14,	\/*!< Monochrome 14-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Mono16	include/CameraDefs.h	/^		ChunkPixelFormat_Mono16,	\/*!< Monochrome 16-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Mono16	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Mono16,	\/*!< Monochrome 16-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Mono1p	include/CameraDefs.h	/^		ChunkPixelFormat_Mono1p,	\/*!< Monochrome 1-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Mono1p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Mono1p,	\/*!< Monochrome 1-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Mono2p	include/CameraDefs.h	/^		ChunkPixelFormat_Mono2p,	\/*!< Monochrome 2-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Mono2p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Mono2p,	\/*!< Monochrome 2-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Mono4p	include/CameraDefs.h	/^		ChunkPixelFormat_Mono4p,	\/*!< Monochrome 4-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Mono4p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Mono4p,	\/*!< Monochrome 4-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Mono8	include/CameraDefs.h	/^		ChunkPixelFormat_Mono8,	\/*!< Monochrome 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Mono8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Mono8,	\/*!< Monochrome 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_Mono8s	include/CameraDefs.h	/^		ChunkPixelFormat_Mono8s,	\/*!< Monochrome 8-bit signed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_Mono8s	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_Mono8s,	\/*!< Monochrome 8-bit signed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_R10	include/CameraDefs.h	/^		ChunkPixelFormat_R10,	\/*!< Red 10-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_R10	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_R10,	\/*!< Red 10-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_R12	include/CameraDefs.h	/^		ChunkPixelFormat_R12,	\/*!< Red 12-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_R12	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_R12,	\/*!< Red 12-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_R16	include/CameraDefs.h	/^		ChunkPixelFormat_R16,	\/*!< Red 16-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_R16	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_R16,	\/*!< Red 16-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_R8	include/CameraDefs.h	/^		ChunkPixelFormat_R8,	\/*!< Red 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_R8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_R8,	\/*!< Red 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_RGB10	include/CameraDefs.h	/^		ChunkPixelFormat_RGB10,	\/*!< Red-Green-Blue 10-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_RGB10	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_RGB10,	\/*!< Red-Green-Blue 10-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_RGB10_Planar	include/CameraDefs.h	/^		ChunkPixelFormat_RGB10_Planar,	\/*!< Red-Green-Blue 10-bit unpacked planar*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_RGB10_Planar	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_RGB10_Planar,	\/*!< Red-Green-Blue 10-bit unpacked planar*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_RGB10p	include/CameraDefs.h	/^		ChunkPixelFormat_RGB10p,	\/*!< Red-Green-Blue 10-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_RGB10p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_RGB10p,	\/*!< Red-Green-Blue 10-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_RGB10p32	include/CameraDefs.h	/^		ChunkPixelFormat_RGB10p32,	\/*!< Red-Green-Blue 10-bit packed into 32-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_RGB10p32	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_RGB10p32,	\/*!< Red-Green-Blue 10-bit packed into 32-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_RGB12	include/CameraDefs.h	/^		ChunkPixelFormat_RGB12,	\/*!< Red-Green-Blue 12-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_RGB12	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_RGB12,	\/*!< Red-Green-Blue 12-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_RGB12_Planar	include/CameraDefs.h	/^		ChunkPixelFormat_RGB12_Planar,	\/*!< Red-Green-Blue 12-bit unpacked planar*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_RGB12_Planar	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_RGB12_Planar,	\/*!< Red-Green-Blue 12-bit unpacked planar*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_RGB12p	include/CameraDefs.h	/^		ChunkPixelFormat_RGB12p,	\/*!< Red-Green-Blue 12-bit packed  *\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_RGB12p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_RGB12p,	\/*!< Red-Green-Blue 12-bit packed  *\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_RGB14	include/CameraDefs.h	/^		ChunkPixelFormat_RGB14,	\/*!< Red-Green-Blue 14-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_RGB14	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_RGB14,	\/*!< Red-Green-Blue 14-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_RGB16	include/CameraDefs.h	/^		ChunkPixelFormat_RGB16,	\/*!< Red-Green-Blue 16-bit  *\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_RGB16	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_RGB16,	\/*!< Red-Green-Blue 16-bit  *\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_RGB16_Planar	include/CameraDefs.h	/^		ChunkPixelFormat_RGB16_Planar,	\/*!< Red-Green-Blue 16-bit planar*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_RGB16_Planar	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_RGB16_Planar,	\/*!< Red-Green-Blue 16-bit planar*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_RGB565p	include/CameraDefs.h	/^		ChunkPixelFormat_RGB565p,	\/*!< Red-Green-Blue 5\/6\/5-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_RGB565p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_RGB565p,	\/*!< Red-Green-Blue 5\/6\/5-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_RGB8	include/CameraDefs.h	/^		ChunkPixelFormat_RGB8,	\/*!< Red-Green-Blue 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_RGB8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_RGB8,	\/*!< Red-Green-Blue 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_RGB8_Planar	include/CameraDefs.h	/^		ChunkPixelFormat_RGB8_Planar,	\/*!< Red-Green-Blue 8-bit planar*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_RGB8_Planar	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_RGB8_Planar,	\/*!< Red-Green-Blue 8-bit planar*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_RGBa10	include/CameraDefs.h	/^		ChunkPixelFormat_RGBa10,	\/*!< Red-Green-Blue-alpha 10-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_RGBa10	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_RGBa10,	\/*!< Red-Green-Blue-alpha 10-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_RGBa10p	include/CameraDefs.h	/^		ChunkPixelFormat_RGBa10p,	\/*!< Red-Green-Blue-alpha 10-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_RGBa10p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_RGBa10p,	\/*!< Red-Green-Blue-alpha 10-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_RGBa12	include/CameraDefs.h	/^		ChunkPixelFormat_RGBa12,	\/*!< Red-Green-Blue-alpha 12-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_RGBa12	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_RGBa12,	\/*!< Red-Green-Blue-alpha 12-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_RGBa12p	include/CameraDefs.h	/^		ChunkPixelFormat_RGBa12p,	\/*!< Red-Green-Blue-alpha 12-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_RGBa12p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_RGBa12p,	\/*!< Red-Green-Blue-alpha 12-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_RGBa14	include/CameraDefs.h	/^		ChunkPixelFormat_RGBa14,	\/*!< Red-Green-Blue-alpha 14-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_RGBa14	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_RGBa14,	\/*!< Red-Green-Blue-alpha 14-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_RGBa16	include/CameraDefs.h	/^		ChunkPixelFormat_RGBa16,	\/*!< Red-Green-Blue-alpha 16-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_RGBa16	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_RGBa16,	\/*!< Red-Green-Blue-alpha 16-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_RGBa8	include/CameraDefs.h	/^		ChunkPixelFormat_RGBa8,	\/*!< Red-Green-Blue-alpha 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_RGBa8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_RGBa8,	\/*!< Red-Green-Blue-alpha 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_SCF1WBWG10	include/CameraDefs.h	/^		ChunkPixelFormat_SCF1WBWG10,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 10-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_SCF1WBWG10	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_SCF1WBWG10,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 10-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_SCF1WBWG10p	include/CameraDefs.h	/^		ChunkPixelFormat_SCF1WBWG10p,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 10-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_SCF1WBWG10p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_SCF1WBWG10p,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 10-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_SCF1WBWG12	include/CameraDefs.h	/^		ChunkPixelFormat_SCF1WBWG12,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 12-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_SCF1WBWG12	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_SCF1WBWG12,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 12-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_SCF1WBWG12p	include/CameraDefs.h	/^		ChunkPixelFormat_SCF1WBWG12p,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 12-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_SCF1WBWG12p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_SCF1WBWG12p,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 12-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_SCF1WBWG14	include/CameraDefs.h	/^		ChunkPixelFormat_SCF1WBWG14,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 14-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_SCF1WBWG14	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_SCF1WBWG14,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 14-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_SCF1WBWG16	include/CameraDefs.h	/^		ChunkPixelFormat_SCF1WBWG16,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 16-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_SCF1WBWG16	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_SCF1WBWG16,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 16-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_SCF1WBWG8	include/CameraDefs.h	/^		ChunkPixelFormat_SCF1WBWG8,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_SCF1WBWG8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_SCF1WBWG8,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_SCF1WGWB10	include/CameraDefs.h	/^		ChunkPixelFormat_SCF1WGWB10,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 10-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_SCF1WGWB10	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_SCF1WGWB10,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 10-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_SCF1WGWB10p	include/CameraDefs.h	/^		ChunkPixelFormat_SCF1WGWB10p,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 10-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_SCF1WGWB10p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_SCF1WGWB10p,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 10-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_SCF1WGWB12	include/CameraDefs.h	/^		ChunkPixelFormat_SCF1WGWB12,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 12-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_SCF1WGWB12	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_SCF1WGWB12,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 12-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_SCF1WGWB12p	include/CameraDefs.h	/^		ChunkPixelFormat_SCF1WGWB12p,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 12-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_SCF1WGWB12p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_SCF1WGWB12p,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 12-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_SCF1WGWB14	include/CameraDefs.h	/^		ChunkPixelFormat_SCF1WGWB14,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 14-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_SCF1WGWB14	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_SCF1WGWB14,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 14-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_SCF1WGWB16	include/CameraDefs.h	/^		ChunkPixelFormat_SCF1WGWB16,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 16-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_SCF1WGWB16	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_SCF1WGWB16,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 16-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_SCF1WGWB8	include/CameraDefs.h	/^		ChunkPixelFormat_SCF1WGWB8,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_SCF1WGWB8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_SCF1WGWB8,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_SCF1WGWR10	include/CameraDefs.h	/^		ChunkPixelFormat_SCF1WGWR10,	\/*!< Sparse Color Filter #1 White-Green-White-Red 10-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_SCF1WGWR10	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_SCF1WGWR10,	\/*!< Sparse Color Filter #1 White-Green-White-Red 10-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_SCF1WGWR10p	include/CameraDefs.h	/^		ChunkPixelFormat_SCF1WGWR10p,	\/*!< Sparse Color Filter #1 White-Green-White-Red 10-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_SCF1WGWR10p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_SCF1WGWR10p,	\/*!< Sparse Color Filter #1 White-Green-White-Red 10-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_SCF1WGWR12	include/CameraDefs.h	/^		ChunkPixelFormat_SCF1WGWR12,	\/*!< Sparse Color Filter #1 White-Green-White-Red 12-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_SCF1WGWR12	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_SCF1WGWR12,	\/*!< Sparse Color Filter #1 White-Green-White-Red 12-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_SCF1WGWR12p	include/CameraDefs.h	/^		ChunkPixelFormat_SCF1WGWR12p,	\/*!< Sparse Color Filter #1 White-Green-White-Red 12-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_SCF1WGWR12p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_SCF1WGWR12p,	\/*!< Sparse Color Filter #1 White-Green-White-Red 12-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_SCF1WGWR14	include/CameraDefs.h	/^		ChunkPixelFormat_SCF1WGWR14,	\/*!< Sparse Color Filter #1 White-Green-White-Red 14-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_SCF1WGWR14	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_SCF1WGWR14,	\/*!< Sparse Color Filter #1 White-Green-White-Red 14-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_SCF1WGWR16	include/CameraDefs.h	/^		ChunkPixelFormat_SCF1WGWR16,	\/*!< Sparse Color Filter #1 White-Green-White-Red 16-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_SCF1WGWR16	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_SCF1WGWR16,	\/*!< Sparse Color Filter #1 White-Green-White-Red 16-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_SCF1WGWR8	include/CameraDefs.h	/^		ChunkPixelFormat_SCF1WGWR8,	\/*!< Sparse Color Filter #1 White-Green-White-Red 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_SCF1WGWR8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_SCF1WGWR8,	\/*!< Sparse Color Filter #1 White-Green-White-Red 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_SCF1WRWG10	include/CameraDefs.h	/^		ChunkPixelFormat_SCF1WRWG10,	\/*!< Sparse Color Filter #1 White-Red-White-Green 10-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_SCF1WRWG10	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_SCF1WRWG10,	\/*!< Sparse Color Filter #1 White-Red-White-Green 10-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_SCF1WRWG10p	include/CameraDefs.h	/^		ChunkPixelFormat_SCF1WRWG10p,	\/*!< Sparse Color Filter #1 White-Red-White-Green 10-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_SCF1WRWG10p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_SCF1WRWG10p,	\/*!< Sparse Color Filter #1 White-Red-White-Green 10-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_SCF1WRWG12	include/CameraDefs.h	/^		ChunkPixelFormat_SCF1WRWG12,	\/*!< Sparse Color Filter #1 White-Red-White-Green 12-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_SCF1WRWG12	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_SCF1WRWG12,	\/*!< Sparse Color Filter #1 White-Red-White-Green 12-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_SCF1WRWG12p	include/CameraDefs.h	/^		ChunkPixelFormat_SCF1WRWG12p,	\/*!< Sparse Color Filter #1 White-Red-White-Green 12-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_SCF1WRWG12p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_SCF1WRWG12p,	\/*!< Sparse Color Filter #1 White-Red-White-Green 12-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_SCF1WRWG14	include/CameraDefs.h	/^		ChunkPixelFormat_SCF1WRWG14,	\/*!< Sparse Color Filter #1 White-Red-White-Green 14-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_SCF1WRWG14	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_SCF1WRWG14,	\/*!< Sparse Color Filter #1 White-Red-White-Green 14-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_SCF1WRWG16	include/CameraDefs.h	/^		ChunkPixelFormat_SCF1WRWG16,	\/*!< Sparse Color Filter #1 White-Red-White-Green 16-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_SCF1WRWG16	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_SCF1WRWG16,	\/*!< Sparse Color Filter #1 White-Red-White-Green 16-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_SCF1WRWG8	include/CameraDefs.h	/^		ChunkPixelFormat_SCF1WRWG8,	\/*!< Sparse Color Filter #1 White-Red-White-Green 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_SCF1WRWG8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_SCF1WRWG8,	\/*!< Sparse Color Filter #1 White-Red-White-Green 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr10_CbYCr	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr10_CbYCr,	\/*!< YCbCr 4:4:4 10-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr10_CbYCr	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr10_CbYCr,	\/*!< YCbCr 4:4:4 10-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr10p_CbYCr	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr10p_CbYCr,	\/*!< YCbCr 4:4:4 10-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr10p_CbYCr	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr10p_CbYCr,	\/*!< YCbCr 4:4:4 10-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr12_CbYCr	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr12_CbYCr,	\/*!< YCbCr 4:4:4 12-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr12_CbYCr	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr12_CbYCr,	\/*!< YCbCr 4:4:4 12-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr12p_CbYCr	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr12p_CbYCr,	\/*!< YCbCr 4:4:4 12-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr12p_CbYCr	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr12p_CbYCr,	\/*!< YCbCr 4:4:4 12-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr411_8	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr411_8,	\/*!< YCbCr 4:1:1 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr411_8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr411_8,	\/*!< YCbCr 4:1:1 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr411_8_CbYYCrYY	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr411_8_CbYYCrYY,	\/*!< YCbCr 4:1:1 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr411_8_CbYYCrYY	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr411_8_CbYYCrYY,	\/*!< YCbCr 4:1:1 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr422_10	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr422_10,	\/*!< YCbCr 4:2:2 10-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr422_10	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr422_10,	\/*!< YCbCr 4:2:2 10-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr422_10_CbYCrY	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr422_10_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr422_10_CbYCrY	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr422_10_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr422_10p	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr422_10p,	\/*!< YCbCr 4:2:2 10-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr422_10p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr422_10p,	\/*!< YCbCr 4:2:2 10-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr422_10p_CbYCrY	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr422_10p_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr422_10p_CbYCrY	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr422_10p_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr422_12	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr422_12,	\/*!< YCbCr 4:2:2 12-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr422_12	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr422_12,	\/*!< YCbCr 4:2:2 12-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr422_12_CbYCrY	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr422_12_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit unpacked*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr422_12_CbYCrY	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr422_12_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit unpacked*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr422_12p	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr422_12p,	\/*!< YCbCr 4:2:2 12-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr422_12p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr422_12p,	\/*!< YCbCr 4:2:2 12-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr422_12p_CbYCrY	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr422_12p_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit packed*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr422_12p_CbYCrY	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr422_12p_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit packed*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr422_8	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr422_8,	\/*!< YCbCr 4:2:2 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr422_8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr422_8,	\/*!< YCbCr 4:2:2 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr422_8_CbYCrY	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr422_8_CbYCrY,	\/*!< YCbCr 4:2:2 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr422_8_CbYCrY	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr422_8_CbYCrY,	\/*!< YCbCr 4:2:2 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_10_CbYCr	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr601_10_CbYCr,	\/*!< YCbCr 4:4:4 10-bit unpacked BT.601*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_10_CbYCr	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr601_10_CbYCr,	\/*!< YCbCr 4:4:4 10-bit unpacked BT.601*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_10p_CbYCr	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr601_10p_CbYCr,	\/*!< YCbCr 4:4:4 10-bit packed BT.601*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_10p_CbYCr	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr601_10p_CbYCr,	\/*!< YCbCr 4:4:4 10-bit packed BT.601*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_12_CbYCr	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr601_12_CbYCr,	\/*!< YCbCr 4:4:4 12-bit unpacked BT.601*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_12_CbYCr	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr601_12_CbYCr,	\/*!< YCbCr 4:4:4 12-bit unpacked BT.601*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_12p_CbYCr	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr601_12p_CbYCr,	\/*!< YCbCr 4:4:4 12-bit packed BT.601*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_12p_CbYCr	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr601_12p_CbYCr,	\/*!< YCbCr 4:4:4 12-bit packed BT.601*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_411_8_CbYYCrYY	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr601_411_8_CbYYCrYY,	\/*!< YCbCr 4:1:1 8-bit BT.601*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_411_8_CbYYCrYY	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr601_411_8_CbYYCrYY,	\/*!< YCbCr 4:1:1 8-bit BT.601*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_422_10	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr601_422_10,	\/*!< YCbCr 4:2:2 10-bit unpacked BT.601*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_422_10	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr601_422_10,	\/*!< YCbCr 4:2:2 10-bit unpacked BT.601*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_422_10_CbYCrY	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr601_422_10_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit unpacked BT.601*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_422_10_CbYCrY	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr601_422_10_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit unpacked BT.601*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_422_10p	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr601_422_10p,	\/*!< YCbCr 4:2:2 10-bit packed BT.601*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_422_10p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr601_422_10p,	\/*!< YCbCr 4:2:2 10-bit packed BT.601*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_422_10p_CbYCrY	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr601_422_10p_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit packed BT.601*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_422_10p_CbYCrY	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr601_422_10p_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit packed BT.601*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_422_12	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr601_422_12,	\/*!< YCbCr 4:2:2 12-bit unpacked BT.601*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_422_12	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr601_422_12,	\/*!< YCbCr 4:2:2 12-bit unpacked BT.601*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_422_12_CbYCrY	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr601_422_12_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit unpacked BT.601*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_422_12_CbYCrY	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr601_422_12_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit unpacked BT.601*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_422_12p	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr601_422_12p,	\/*!< YCbCr 4:2:2 12-bit packed BT.601*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_422_12p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr601_422_12p,	\/*!< YCbCr 4:2:2 12-bit packed BT.601*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_422_12p_CbYCrY	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr601_422_12p_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit packed BT.601*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_422_12p_CbYCrY	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr601_422_12p_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit packed BT.601*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_422_8	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr601_422_8,	\/*!< YCbCr 4:2:2 8-bit BT.601*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_422_8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr601_422_8,	\/*!< YCbCr 4:2:2 8-bit BT.601*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_422_8_CbYCrY	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr601_422_8_CbYCrY,	\/*!< YCbCr 4:2:2 8-bit BT.601*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_422_8_CbYCrY	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr601_422_8_CbYCrY,	\/*!< YCbCr 4:2:2 8-bit BT.601*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_8_CbYCr	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr601_8_CbYCr,	\/*!< YCbCr 4:4:4 8-bit BT.601*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr601_8_CbYCr	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr601_8_CbYCr,	\/*!< YCbCr 4:4:4 8-bit BT.601*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_10_CbYCr	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr709_10_CbYCr,	\/*!< YCbCr 4:4:4 10-bit unpacked BT.709*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_10_CbYCr	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr709_10_CbYCr,	\/*!< YCbCr 4:4:4 10-bit unpacked BT.709*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_10p_CbYCr	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr709_10p_CbYCr,	\/*!< YCbCr 4:4:4 10-bit packed BT.709*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_10p_CbYCr	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr709_10p_CbYCr,	\/*!< YCbCr 4:4:4 10-bit packed BT.709*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_12_CbYCr	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr709_12_CbYCr,	\/*!< YCbCr 4:4:4 12-bit unpacked BT.709*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_12_CbYCr	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr709_12_CbYCr,	\/*!< YCbCr 4:4:4 12-bit unpacked BT.709*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_12p_CbYCr	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr709_12p_CbYCr,	\/*!< YCbCr 4:4:4 12-bit packed BT.709*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_12p_CbYCr	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr709_12p_CbYCr,	\/*!< YCbCr 4:4:4 12-bit packed BT.709*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_411_8_CbYYCrYY	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr709_411_8_CbYYCrYY,	\/*!< YCbCr 4:1:1 8-bit BT.709*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_411_8_CbYYCrYY	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr709_411_8_CbYYCrYY,	\/*!< YCbCr 4:1:1 8-bit BT.709*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_422_10	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr709_422_10,	\/*!< YCbCr 4:2:2 10-bit unpacked BT.709*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_422_10	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr709_422_10,	\/*!< YCbCr 4:2:2 10-bit unpacked BT.709*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_422_10_CbYCrY	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr709_422_10_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit unpacked BT.709*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_422_10_CbYCrY	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr709_422_10_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit unpacked BT.709*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_422_10p	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr709_422_10p,	\/*!< YCbCr 4:2:2 10-bit packed BT.709*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_422_10p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr709_422_10p,	\/*!< YCbCr 4:2:2 10-bit packed BT.709*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_422_10p_CbYCrY	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr709_422_10p_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit packed BT.709*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_422_10p_CbYCrY	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr709_422_10p_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit packed BT.709*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_422_12	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr709_422_12,	\/*!< YCbCr 4:2:2 12-bit unpacked BT.709*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_422_12	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr709_422_12,	\/*!< YCbCr 4:2:2 12-bit unpacked BT.709*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_422_12_CbYCrY	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr709_422_12_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit unpacked BT.709*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_422_12_CbYCrY	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr709_422_12_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit unpacked BT.709*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_422_12p	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr709_422_12p,	\/*!< YCbCr 4:2:2 12-bit packed BT.709*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_422_12p	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr709_422_12p,	\/*!< YCbCr 4:2:2 12-bit packed BT.709*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_422_12p_CbYCrY	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr709_422_12p_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit packed BT.709*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_422_12p_CbYCrY	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr709_422_12p_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit packed BT.709*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_422_8	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr709_422_8,	\/*!< YCbCr 4:2:2 8-bit BT.709*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_422_8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr709_422_8,	\/*!< YCbCr 4:2:2 8-bit BT.709*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_422_8_CbYCrY	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr709_422_8_CbYCrY,	\/*!< YCbCr 4:2:2 8-bit BT.709*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_422_8_CbYCrY	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr709_422_8_CbYCrY,	\/*!< YCbCr 4:2:2 8-bit BT.709*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_8_CbYCr	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr709_8_CbYCr,	\/*!< YCbCr 4:4:4 8-bit BT.709*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr709_8_CbYCr	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr709_8_CbYCr,	\/*!< YCbCr 4:4:4 8-bit BT.709*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr8	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr8,	\/*!< YCbCr 4:4:4 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr8,	\/*!< YCbCr 4:4:4 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YCbCr8_CbYCr	include/CameraDefs.h	/^		ChunkPixelFormat_YCbCr8_CbYCr,	\/*!< YCbCr 4:4:4 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YCbCr8_CbYCr	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YCbCr8_CbYCr,	\/*!< YCbCr 4:4:4 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YUV411_8_UYYVYY	include/CameraDefs.h	/^		ChunkPixelFormat_YUV411_8_UYYVYY,	\/*!< YUV 4:1:1 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YUV411_8_UYYVYY	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YUV411_8_UYYVYY,	\/*!< YUV 4:1:1 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YUV422_8	include/CameraDefs.h	/^		ChunkPixelFormat_YUV422_8,	\/*!< YUV 4:2:2 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YUV422_8	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YUV422_8,	\/*!< YUV 4:2:2 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YUV422_8_UYVY	include/CameraDefs.h	/^		ChunkPixelFormat_YUV422_8_UYVY,	\/*!< YUV 4:2:2 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YUV422_8_UYVY	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YUV422_8_UYVY,	\/*!< YUV 4:2:2 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkPixelFormat_YUV8_UYV	include/CameraDefs.h	/^		ChunkPixelFormat_YUV8_UYV,	\/*!< YUV 4:4:4 8-bit*\/$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
ChunkPixelFormat_YUV8_UYV	include/spinc/CameraDefsC.h	/^	ChunkPixelFormat_YUV8_UYV,	\/*!< YUV 4:4:4 8-bit*\/$/;"	e	enum:_spinChunkPixelFormatEnums
ChunkRegionID	include/Camera.h	/^		GenApi::IEnumerationT<ChunkRegionIDEnums> &ChunkRegionID;$/;"	m	class:Spinnaker::Camera
ChunkRegionID	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ChunkRegionID;$/;"	m	struct:_quickSpin
ChunkRegionIDEnums	include/CameraDefs.h	/^	enum ChunkRegionIDEnums	\/*!< Returns the identifier of Region that the image comes from.*\/$/;"	g	namespace:Spinnaker
ChunkRegionID_Region0	include/CameraDefs.h	/^		ChunkRegionID_Region0,	\/*!< Image comes from the Region 0.*\/$/;"	e	enum:Spinnaker::ChunkRegionIDEnums
ChunkRegionID_Region0	include/spinc/CameraDefsC.h	/^	ChunkRegionID_Region0,	\/*!< Image comes from the Region 0.*\/$/;"	e	enum:_spinChunkRegionIDEnums
ChunkRegionID_Region1	include/CameraDefs.h	/^		ChunkRegionID_Region1,	\/*!< Image comes from the Region 1.*\/$/;"	e	enum:Spinnaker::ChunkRegionIDEnums
ChunkRegionID_Region1	include/spinc/CameraDefsC.h	/^	ChunkRegionID_Region1,	\/*!< Image comes from the Region 1.*\/$/;"	e	enum:_spinChunkRegionIDEnums
ChunkRegionID_Region2	include/CameraDefs.h	/^		ChunkRegionID_Region2,	\/*!< Image comes from the Region 2.*\/$/;"	e	enum:Spinnaker::ChunkRegionIDEnums
ChunkRegionID_Region2	include/spinc/CameraDefsC.h	/^	ChunkRegionID_Region2,	\/*!< Image comes from the Region 2.*\/$/;"	e	enum:_spinChunkRegionIDEnums
ChunkScan3dAxisMax	include/Camera.h	/^		GenApi::IFloat &ChunkScan3dAxisMax;$/;"	m	class:Spinnaker::Camera
ChunkScan3dAxisMax	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode ChunkScan3dAxisMax;$/;"	m	struct:_quickSpin
ChunkScan3dAxisMin	include/Camera.h	/^		GenApi::IFloat &ChunkScan3dAxisMin;$/;"	m	class:Spinnaker::Camera
ChunkScan3dAxisMin	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode ChunkScan3dAxisMin;$/;"	m	struct:_quickSpin
ChunkScan3dCoordinateOffset	include/Camera.h	/^		GenApi::IFloat &ChunkScan3dCoordinateOffset;$/;"	m	class:Spinnaker::Camera
ChunkScan3dCoordinateOffset	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode ChunkScan3dCoordinateOffset;$/;"	m	struct:_quickSpin
ChunkScan3dCoordinateReferenceSelector	include/Camera.h	/^		GenApi::IEnumerationT<ChunkScan3dCoordinateReferenceSelectorEnums> &ChunkScan3dCoordinateReferenceSelector;$/;"	m	class:Spinnaker::Camera
ChunkScan3dCoordinateReferenceSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ChunkScan3dCoordinateReferenceSelector;$/;"	m	struct:_quickSpin
ChunkScan3dCoordinateReferenceSelectorEnums	include/CameraDefs.h	/^	enum ChunkScan3dCoordinateReferenceSelectorEnums	\/*!< Selector to read a coordinate system reference value defining the transform of a point from one system to the other.*\/$/;"	g	namespace:Spinnaker
ChunkScan3dCoordinateReferenceSelector_RotationX	include/CameraDefs.h	/^		ChunkScan3dCoordinateReferenceSelector_RotationX,	\/*!< Rotation around X axis.*\/$/;"	e	enum:Spinnaker::ChunkScan3dCoordinateReferenceSelectorEnums
ChunkScan3dCoordinateReferenceSelector_RotationX	include/spinc/CameraDefsC.h	/^	ChunkScan3dCoordinateReferenceSelector_RotationX,	\/*!< Rotation around X axis.*\/$/;"	e	enum:_spinChunkScan3dCoordinateReferenceSelectorEnums
ChunkScan3dCoordinateReferenceSelector_RotationY	include/CameraDefs.h	/^		ChunkScan3dCoordinateReferenceSelector_RotationY,	\/*!< Rotation around Y axis.*\/$/;"	e	enum:Spinnaker::ChunkScan3dCoordinateReferenceSelectorEnums
ChunkScan3dCoordinateReferenceSelector_RotationY	include/spinc/CameraDefsC.h	/^	ChunkScan3dCoordinateReferenceSelector_RotationY,	\/*!< Rotation around Y axis.*\/$/;"	e	enum:_spinChunkScan3dCoordinateReferenceSelectorEnums
ChunkScan3dCoordinateReferenceSelector_RotationZ	include/CameraDefs.h	/^		ChunkScan3dCoordinateReferenceSelector_RotationZ,	\/*!< Rotation around Z axis.*\/$/;"	e	enum:Spinnaker::ChunkScan3dCoordinateReferenceSelectorEnums
ChunkScan3dCoordinateReferenceSelector_RotationZ	include/spinc/CameraDefsC.h	/^	ChunkScan3dCoordinateReferenceSelector_RotationZ,	\/*!< Rotation around Z axis.*\/$/;"	e	enum:_spinChunkScan3dCoordinateReferenceSelectorEnums
ChunkScan3dCoordinateReferenceSelector_TranslationX	include/CameraDefs.h	/^		ChunkScan3dCoordinateReferenceSelector_TranslationX,	\/*!< X axis translation.*\/$/;"	e	enum:Spinnaker::ChunkScan3dCoordinateReferenceSelectorEnums
ChunkScan3dCoordinateReferenceSelector_TranslationX	include/spinc/CameraDefsC.h	/^	ChunkScan3dCoordinateReferenceSelector_TranslationX,	\/*!< X axis translation.*\/$/;"	e	enum:_spinChunkScan3dCoordinateReferenceSelectorEnums
ChunkScan3dCoordinateReferenceSelector_TranslationY	include/CameraDefs.h	/^		ChunkScan3dCoordinateReferenceSelector_TranslationY,	\/*!< Y axis translation.*\/$/;"	e	enum:Spinnaker::ChunkScan3dCoordinateReferenceSelectorEnums
ChunkScan3dCoordinateReferenceSelector_TranslationY	include/spinc/CameraDefsC.h	/^	ChunkScan3dCoordinateReferenceSelector_TranslationY,	\/*!< Y axis translation.*\/$/;"	e	enum:_spinChunkScan3dCoordinateReferenceSelectorEnums
ChunkScan3dCoordinateReferenceSelector_TranslationZ	include/CameraDefs.h	/^		ChunkScan3dCoordinateReferenceSelector_TranslationZ,	\/*!< Z axis translation.*\/$/;"	e	enum:Spinnaker::ChunkScan3dCoordinateReferenceSelectorEnums
ChunkScan3dCoordinateReferenceSelector_TranslationZ	include/spinc/CameraDefsC.h	/^	ChunkScan3dCoordinateReferenceSelector_TranslationZ,	\/*!< Z axis translation.*\/$/;"	e	enum:_spinChunkScan3dCoordinateReferenceSelectorEnums
ChunkScan3dCoordinateReferenceValue	include/Camera.h	/^		GenApi::IFloat &ChunkScan3dCoordinateReferenceValue;$/;"	m	class:Spinnaker::Camera
ChunkScan3dCoordinateReferenceValue	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode ChunkScan3dCoordinateReferenceValue;$/;"	m	struct:_quickSpin
ChunkScan3dCoordinateScale	include/Camera.h	/^		GenApi::IFloat &ChunkScan3dCoordinateScale;$/;"	m	class:Spinnaker::Camera
ChunkScan3dCoordinateScale	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode ChunkScan3dCoordinateScale;$/;"	m	struct:_quickSpin
ChunkScan3dCoordinateSelector	include/Camera.h	/^		GenApi::IEnumerationT<ChunkScan3dCoordinateSelectorEnums> &ChunkScan3dCoordinateSelector;$/;"	m	class:Spinnaker::Camera
ChunkScan3dCoordinateSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ChunkScan3dCoordinateSelector;$/;"	m	struct:_quickSpin
ChunkScan3dCoordinateSelectorEnums	include/CameraDefs.h	/^	enum ChunkScan3dCoordinateSelectorEnums	\/*!< Selects which Coordinate to retrieve data from.*\/$/;"	g	namespace:Spinnaker
ChunkScan3dCoordinateSelector_CoordinateA	include/CameraDefs.h	/^		ChunkScan3dCoordinateSelector_CoordinateA,	\/*!< The first (X or Theta) coordinate*\/$/;"	e	enum:Spinnaker::ChunkScan3dCoordinateSelectorEnums
ChunkScan3dCoordinateSelector_CoordinateA	include/spinc/CameraDefsC.h	/^	ChunkScan3dCoordinateSelector_CoordinateA,	\/*!< The first (X or Theta) coordinate*\/$/;"	e	enum:_spinChunkScan3dCoordinateSelectorEnums
ChunkScan3dCoordinateSelector_CoordinateB	include/CameraDefs.h	/^		ChunkScan3dCoordinateSelector_CoordinateB,	\/*!< The second (Y or Phi) coordinate*\/$/;"	e	enum:Spinnaker::ChunkScan3dCoordinateSelectorEnums
ChunkScan3dCoordinateSelector_CoordinateB	include/spinc/CameraDefsC.h	/^	ChunkScan3dCoordinateSelector_CoordinateB,	\/*!< The second (Y or Phi) coordinate*\/$/;"	e	enum:_spinChunkScan3dCoordinateSelectorEnums
ChunkScan3dCoordinateSelector_CoordinateC	include/CameraDefs.h	/^		ChunkScan3dCoordinateSelector_CoordinateC,	\/*!< The third (Z or Rho) coordinate.*\/$/;"	e	enum:Spinnaker::ChunkScan3dCoordinateSelectorEnums
ChunkScan3dCoordinateSelector_CoordinateC	include/spinc/CameraDefsC.h	/^	ChunkScan3dCoordinateSelector_CoordinateC,	\/*!< The third (Z or Rho) coordinate.*\/$/;"	e	enum:_spinChunkScan3dCoordinateSelectorEnums
ChunkScan3dCoordinateSystem	include/Camera.h	/^		GenApi::IEnumerationT<ChunkScan3dCoordinateSystemEnums> &ChunkScan3dCoordinateSystem;$/;"	m	class:Spinnaker::Camera
ChunkScan3dCoordinateSystem	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ChunkScan3dCoordinateSystem;$/;"	m	struct:_quickSpin
ChunkScan3dCoordinateSystemEnums	include/CameraDefs.h	/^	enum ChunkScan3dCoordinateSystemEnums	\/*!< Returns the Coordinate System of the image included in the payload.*\/$/;"	g	namespace:Spinnaker
ChunkScan3dCoordinateSystemReference	include/Camera.h	/^		GenApi::IEnumerationT<ChunkScan3dCoordinateSystemReferenceEnums> &ChunkScan3dCoordinateSystemReference;$/;"	m	class:Spinnaker::Camera
ChunkScan3dCoordinateSystemReference	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ChunkScan3dCoordinateSystemReference;$/;"	m	struct:_quickSpin
ChunkScan3dCoordinateSystemReferenceEnums	include/CameraDefs.h	/^	enum ChunkScan3dCoordinateSystemReferenceEnums	\/*!< Returns the Coordinate System Position of the image included in the payload.*\/$/;"	g	namespace:Spinnaker
ChunkScan3dCoordinateSystemReference_Anchor	include/CameraDefs.h	/^		ChunkScan3dCoordinateSystemReference_Anchor,	\/*!< Default value. Original fixed reference. The coordinate system fixed relative the camera reference point marker is used.*\/$/;"	e	enum:Spinnaker::ChunkScan3dCoordinateSystemReferenceEnums
ChunkScan3dCoordinateSystemReference_Anchor	include/spinc/CameraDefsC.h	/^	ChunkScan3dCoordinateSystemReference_Anchor,	\/*!< Default value. Original fixed reference. The coordinate system fixed relative the camera reference point marker is used.*\/$/;"	e	enum:_spinChunkScan3dCoordinateSystemReferenceEnums
ChunkScan3dCoordinateSystemReference_Transformed	include/CameraDefs.h	/^		ChunkScan3dCoordinateSystemReference_Transformed,	\/*!< Transformed reference system. The transformed coordinate system is used according to the definition in the rotation and translation matrices.*\/$/;"	e	enum:Spinnaker::ChunkScan3dCoordinateSystemReferenceEnums
ChunkScan3dCoordinateSystemReference_Transformed	include/spinc/CameraDefsC.h	/^	ChunkScan3dCoordinateSystemReference_Transformed,	\/*!< Transformed reference system. The transformed coordinate system is used according to the definition in the rotation and translation matrices.*\/$/;"	e	enum:_spinChunkScan3dCoordinateSystemReferenceEnums
ChunkScan3dCoordinateSystem_Cartesian	include/CameraDefs.h	/^		ChunkScan3dCoordinateSystem_Cartesian,	\/*!< Default value. 3-axis orthogonal, right-hand X-Y-Z.*\/$/;"	e	enum:Spinnaker::ChunkScan3dCoordinateSystemEnums
ChunkScan3dCoordinateSystem_Cartesian	include/spinc/CameraDefsC.h	/^	ChunkScan3dCoordinateSystem_Cartesian,	\/*!< Default value. 3-axis orthogonal, right-hand X-Y-Z.*\/$/;"	e	enum:_spinChunkScan3dCoordinateSystemEnums
ChunkScan3dCoordinateSystem_Cylindrical	include/CameraDefs.h	/^		ChunkScan3dCoordinateSystem_Cylindrical,	\/*!< A Theta-Y-Rho coordinate system.*\/$/;"	e	enum:Spinnaker::ChunkScan3dCoordinateSystemEnums
ChunkScan3dCoordinateSystem_Cylindrical	include/spinc/CameraDefsC.h	/^	ChunkScan3dCoordinateSystem_Cylindrical,	\/*!< A Theta-Y-Rho coordinate system.*\/$/;"	e	enum:_spinChunkScan3dCoordinateSystemEnums
ChunkScan3dCoordinateSystem_Spherical	include/CameraDefs.h	/^		ChunkScan3dCoordinateSystem_Spherical,	\/*!< A Theta-Phi-Rho coordinate system.*\/$/;"	e	enum:Spinnaker::ChunkScan3dCoordinateSystemEnums
ChunkScan3dCoordinateSystem_Spherical	include/spinc/CameraDefsC.h	/^	ChunkScan3dCoordinateSystem_Spherical,	\/*!< A Theta-Phi-Rho coordinate system.*\/$/;"	e	enum:_spinChunkScan3dCoordinateSystemEnums
ChunkScan3dCoordinateTransformSelector	include/Camera.h	/^		GenApi::IEnumerationT<ChunkScan3dCoordinateTransformSelectorEnums> &ChunkScan3dCoordinateTransformSelector;$/;"	m	class:Spinnaker::Camera
ChunkScan3dCoordinateTransformSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ChunkScan3dCoordinateTransformSelector;$/;"	m	struct:_quickSpin
ChunkScan3dCoordinateTransformSelectorEnums	include/CameraDefs.h	/^	enum ChunkScan3dCoordinateTransformSelectorEnums	\/*!< Selector for transform values.*\/$/;"	g	namespace:Spinnaker
ChunkScan3dCoordinateTransformSelector_RotationX	include/CameraDefs.h	/^		ChunkScan3dCoordinateTransformSelector_RotationX,	\/*!< Rotation around X axis.*\/$/;"	e	enum:Spinnaker::ChunkScan3dCoordinateTransformSelectorEnums
ChunkScan3dCoordinateTransformSelector_RotationX	include/spinc/CameraDefsC.h	/^	ChunkScan3dCoordinateTransformSelector_RotationX,	\/*!< Rotation around X axis.*\/$/;"	e	enum:_spinChunkScan3dCoordinateTransformSelectorEnums
ChunkScan3dCoordinateTransformSelector_RotationY	include/CameraDefs.h	/^		ChunkScan3dCoordinateTransformSelector_RotationY,	\/*!< Rotation around Y axis.*\/$/;"	e	enum:Spinnaker::ChunkScan3dCoordinateTransformSelectorEnums
ChunkScan3dCoordinateTransformSelector_RotationY	include/spinc/CameraDefsC.h	/^	ChunkScan3dCoordinateTransformSelector_RotationY,	\/*!< Rotation around Y axis.*\/$/;"	e	enum:_spinChunkScan3dCoordinateTransformSelectorEnums
ChunkScan3dCoordinateTransformSelector_RotationZ	include/CameraDefs.h	/^		ChunkScan3dCoordinateTransformSelector_RotationZ,	\/*!< Rotation around Z axis.*\/$/;"	e	enum:Spinnaker::ChunkScan3dCoordinateTransformSelectorEnums
ChunkScan3dCoordinateTransformSelector_RotationZ	include/spinc/CameraDefsC.h	/^	ChunkScan3dCoordinateTransformSelector_RotationZ,	\/*!< Rotation around Z axis.*\/$/;"	e	enum:_spinChunkScan3dCoordinateTransformSelectorEnums
ChunkScan3dCoordinateTransformSelector_TranslationX	include/CameraDefs.h	/^		ChunkScan3dCoordinateTransformSelector_TranslationX,	\/*!< Translation along X axis.*\/$/;"	e	enum:Spinnaker::ChunkScan3dCoordinateTransformSelectorEnums
ChunkScan3dCoordinateTransformSelector_TranslationX	include/spinc/CameraDefsC.h	/^	ChunkScan3dCoordinateTransformSelector_TranslationX,	\/*!< Translation along X axis.*\/$/;"	e	enum:_spinChunkScan3dCoordinateTransformSelectorEnums
ChunkScan3dCoordinateTransformSelector_TranslationY	include/CameraDefs.h	/^		ChunkScan3dCoordinateTransformSelector_TranslationY,	\/*!< Translation along Y axis.*\/$/;"	e	enum:Spinnaker::ChunkScan3dCoordinateTransformSelectorEnums
ChunkScan3dCoordinateTransformSelector_TranslationY	include/spinc/CameraDefsC.h	/^	ChunkScan3dCoordinateTransformSelector_TranslationY,	\/*!< Translation along Y axis.*\/$/;"	e	enum:_spinChunkScan3dCoordinateTransformSelectorEnums
ChunkScan3dCoordinateTransformSelector_TranslationZ	include/CameraDefs.h	/^		ChunkScan3dCoordinateTransformSelector_TranslationZ,	\/*!< Translation along Z axis.*\/$/;"	e	enum:Spinnaker::ChunkScan3dCoordinateTransformSelectorEnums
ChunkScan3dCoordinateTransformSelector_TranslationZ	include/spinc/CameraDefsC.h	/^	ChunkScan3dCoordinateTransformSelector_TranslationZ,	\/*!< Translation along Z axis.*\/$/;"	e	enum:_spinChunkScan3dCoordinateTransformSelectorEnums
ChunkScan3dDistanceUnit	include/Camera.h	/^		GenApi::IEnumerationT<ChunkScan3dDistanceUnitEnums> &ChunkScan3dDistanceUnit;$/;"	m	class:Spinnaker::Camera
ChunkScan3dDistanceUnit	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ChunkScan3dDistanceUnit;$/;"	m	struct:_quickSpin
ChunkScan3dDistanceUnitEnums	include/CameraDefs.h	/^	enum ChunkScan3dDistanceUnitEnums	\/*!< Returns the Distance Unit of the payload image.*\/$/;"	g	namespace:Spinnaker
ChunkScan3dDistanceUnit_Inch	include/CameraDefs.h	/^		ChunkScan3dDistanceUnit_Inch,	\/*!< Distance values are in inch units.*\/$/;"	e	enum:Spinnaker::ChunkScan3dDistanceUnitEnums
ChunkScan3dDistanceUnit_Inch	include/spinc/CameraDefsC.h	/^	ChunkScan3dDistanceUnit_Inch,	\/*!< Distance values are in inch units.*\/$/;"	e	enum:_spinChunkScan3dDistanceUnitEnums
ChunkScan3dDistanceUnit_Millimeter	include/CameraDefs.h	/^		ChunkScan3dDistanceUnit_Millimeter,	\/*!< Default value. Distance values are in millimeter units.*\/$/;"	e	enum:Spinnaker::ChunkScan3dDistanceUnitEnums
ChunkScan3dDistanceUnit_Millimeter	include/spinc/CameraDefsC.h	/^	ChunkScan3dDistanceUnit_Millimeter,	\/*!< Default value. Distance values are in millimeter units.*\/$/;"	e	enum:_spinChunkScan3dDistanceUnitEnums
ChunkScan3dInvalidDataFlag	include/Camera.h	/^		GenApi::IBoolean &ChunkScan3dInvalidDataFlag;$/;"	m	class:Spinnaker::Camera
ChunkScan3dInvalidDataFlag	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode ChunkScan3dInvalidDataFlag;$/;"	m	struct:_quickSpin
ChunkScan3dInvalidDataValue	include/Camera.h	/^		GenApi::IFloat &ChunkScan3dInvalidDataValue;$/;"	m	class:Spinnaker::Camera
ChunkScan3dInvalidDataValue	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode ChunkScan3dInvalidDataValue;$/;"	m	struct:_quickSpin
ChunkScan3dOutputMode	include/Camera.h	/^		GenApi::IEnumerationT<ChunkScan3dOutputModeEnums> &ChunkScan3dOutputMode;$/;"	m	class:Spinnaker::Camera
ChunkScan3dOutputMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ChunkScan3dOutputMode;$/;"	m	struct:_quickSpin
ChunkScan3dOutputModeEnums	include/CameraDefs.h	/^	enum ChunkScan3dOutputModeEnums	\/*!< Returns the Calibrated Mode of the payload image.*\/$/;"	g	namespace:Spinnaker
ChunkScan3dOutputMode_CalibratedABC_Grid	include/CameraDefs.h	/^		ChunkScan3dOutputMode_CalibratedABC_Grid,	\/*!< 3 Coordinates in grid organization. The full 3 coordinate data with the grid array organization from the sensor kept.*\/$/;"	e	enum:Spinnaker::ChunkScan3dOutputModeEnums
ChunkScan3dOutputMode_CalibratedABC_Grid	include/spinc/CameraDefsC.h	/^	ChunkScan3dOutputMode_CalibratedABC_Grid,	\/*!< 3 Coordinates in grid organization. The full 3 coordinate data with the grid array organization from the sensor kept.*\/$/;"	e	enum:_spinChunkScan3dOutputModeEnums
ChunkScan3dOutputMode_CalibratedABC_PointCloud	include/CameraDefs.h	/^		ChunkScan3dOutputMode_CalibratedABC_PointCloud,	\/*!< 3 Coordinates without organization. The full 3 coordinate data without any organization of data points. Typically only valid points transmitted giving varying image size.*\/$/;"	e	enum:Spinnaker::ChunkScan3dOutputModeEnums
ChunkScan3dOutputMode_CalibratedABC_PointCloud	include/spinc/CameraDefsC.h	/^	ChunkScan3dOutputMode_CalibratedABC_PointCloud,	\/*!< 3 Coordinates without organization. The full 3 coordinate data without any organization of data points. Typically only valid points transmitted giving varying image size.*\/$/;"	e	enum:_spinChunkScan3dOutputModeEnums
ChunkScan3dOutputMode_CalibratedAC	include/CameraDefs.h	/^		ChunkScan3dOutputMode_CalibratedAC,	\/*!< 2 Coordinates with fixed B sampling. The data is sent as a A and C coordinates (X,Z or Theta,Rho). The B (Y) axis uses the scale and offset parameters for the B axis.*\/$/;"	e	enum:Spinnaker::ChunkScan3dOutputModeEnums
ChunkScan3dOutputMode_CalibratedAC	include/spinc/CameraDefsC.h	/^	ChunkScan3dOutputMode_CalibratedAC,	\/*!< 2 Coordinates with fixed B sampling. The data is sent as a A and C coordinates (X,Z or Theta,Rho). The B (Y) axis uses the scale and offset parameters for the B axis.*\/$/;"	e	enum:_spinChunkScan3dOutputModeEnums
ChunkScan3dOutputMode_CalibratedAC_Linescan	include/CameraDefs.h	/^		ChunkScan3dOutputMode_CalibratedAC_Linescan,	\/*!< 2 Coordinates with varying sampling. The data is sent as a A and C coordinates (X,Z or Theta,Rho). The B (Y) axis comes from the encoder chunk value.*\/$/;"	e	enum:Spinnaker::ChunkScan3dOutputModeEnums
ChunkScan3dOutputMode_CalibratedAC_Linescan	include/spinc/CameraDefsC.h	/^	ChunkScan3dOutputMode_CalibratedAC_Linescan,	\/*!< 2 Coordinates with varying sampling. The data is sent as a A and C coordinates (X,Z or Theta,Rho). The B (Y) axis comes from the encoder chunk value.*\/$/;"	e	enum:_spinChunkScan3dOutputModeEnums
ChunkScan3dOutputMode_CalibratedC	include/CameraDefs.h	/^		ChunkScan3dOutputMode_CalibratedC,	\/*!< Calibrated 2.5D Depth map. The distance data is expressed in the chosen distance unit. The data is a 2.5D range map. No information on X-Y axes available.*\/$/;"	e	enum:Spinnaker::ChunkScan3dOutputModeEnums
ChunkScan3dOutputMode_CalibratedC	include/spinc/CameraDefsC.h	/^	ChunkScan3dOutputMode_CalibratedC,	\/*!< Calibrated 2.5D Depth map. The distance data is expressed in the chosen distance unit. The data is a 2.5D range map. No information on X-Y axes available.*\/$/;"	e	enum:_spinChunkScan3dOutputModeEnums
ChunkScan3dOutputMode_CalibratedC_Linescan	include/CameraDefs.h	/^		ChunkScan3dOutputMode_CalibratedC_Linescan,	\/*!< Depth Map with varying B sampling. The distance data is expressed in the chosen distance unit. The data is a 2.5D range map. The B (Y) axis comes from the encoder chunk value.*\/$/;"	e	enum:Spinnaker::ChunkScan3dOutputModeEnums
ChunkScan3dOutputMode_CalibratedC_Linescan	include/spinc/CameraDefsC.h	/^	ChunkScan3dOutputMode_CalibratedC_Linescan,	\/*!< Depth Map with varying B sampling. The distance data is expressed in the chosen distance unit. The data is a 2.5D range map. The B (Y) axis comes from the encoder chunk value.*\/$/;"	e	enum:_spinChunkScan3dOutputModeEnums
ChunkScan3dOutputMode_DisparityC	include/CameraDefs.h	/^		ChunkScan3dOutputMode_DisparityC,	\/*!< Disparity 2.5D Depth map. The distance is inversely proportional to the pixel (disparity) value.*\/$/;"	e	enum:Spinnaker::ChunkScan3dOutputModeEnums
ChunkScan3dOutputMode_DisparityC	include/spinc/CameraDefsC.h	/^	ChunkScan3dOutputMode_DisparityC,	\/*!< Disparity 2.5D Depth map. The distance is inversely proportional to the pixel (disparity) value.*\/$/;"	e	enum:_spinChunkScan3dOutputModeEnums
ChunkScan3dOutputMode_DisparityC_Linescan	include/CameraDefs.h	/^		ChunkScan3dOutputMode_DisparityC_Linescan,	\/*!< Disparity 2.5D Depth map with varying B sampling. The distance is inversely proportional to the pixel (disparity) value. The B (Y) axis comes from the encoder chunk value.*\/$/;"	e	enum:Spinnaker::ChunkScan3dOutputModeEnums
ChunkScan3dOutputMode_DisparityC_Linescan	include/spinc/CameraDefsC.h	/^	ChunkScan3dOutputMode_DisparityC_Linescan,	\/*!< Disparity 2.5D Depth map with varying B sampling. The distance is inversely proportional to the pixel (disparity) value. The B (Y) axis comes from the encoder chunk value.*\/$/;"	e	enum:_spinChunkScan3dOutputModeEnums
ChunkScan3dOutputMode_RectifiedC	include/CameraDefs.h	/^		ChunkScan3dOutputMode_RectifiedC,	\/*!< Rectified 2.5D Depth map. The distance data has been rectified to a uniform sampling pattern in the X and Y direction. The data is a 2.5D range map only. If a complete 3D point cloud is rectified but transmitted as explicit coordinates it should be transmitted as one of the "CalibratedABC" formats.*\/$/;"	e	enum:Spinnaker::ChunkScan3dOutputModeEnums
ChunkScan3dOutputMode_RectifiedC	include/spinc/CameraDefsC.h	/^	ChunkScan3dOutputMode_RectifiedC,	\/*!< Rectified 2.5D Depth map. The distance data has been rectified to a uniform sampling pattern in the X and Y direction. The data is a 2.5D range map only. If a complete 3D point cloud is rectified but transmitted as explicit coordinates it should be transmitted as one of the "CalibratedABC" formats.*\/$/;"	e	enum:_spinChunkScan3dOutputModeEnums
ChunkScan3dOutputMode_RectifiedC_Linescan	include/CameraDefs.h	/^		ChunkScan3dOutputMode_RectifiedC_Linescan,	\/*!< Rectified 2.5D Depth map with varying B sampling. The data is sent as rectified 1D profiles using Coord3D_C pixels. The B (Y) axis comes from the encoder chunk value.*\/$/;"	e	enum:Spinnaker::ChunkScan3dOutputModeEnums
ChunkScan3dOutputMode_RectifiedC_Linescan	include/spinc/CameraDefsC.h	/^	ChunkScan3dOutputMode_RectifiedC_Linescan,	\/*!< Rectified 2.5D Depth map with varying B sampling. The data is sent as rectified 1D profiles using Coord3D_C pixels. The B (Y) axis comes from the encoder chunk value.*\/$/;"	e	enum:_spinChunkScan3dOutputModeEnums
ChunkScan3dOutputMode_UncalibratedC	include/CameraDefs.h	/^		ChunkScan3dOutputMode_UncalibratedC,	\/*!< Uncalibrated 2.5D Depth map. The distance data does not represent a physical unit and may be non-linear. The data is a 2.5D range map only.*\/$/;"	e	enum:Spinnaker::ChunkScan3dOutputModeEnums
ChunkScan3dOutputMode_UncalibratedC	include/spinc/CameraDefsC.h	/^	ChunkScan3dOutputMode_UncalibratedC,	\/*!< Uncalibrated 2.5D Depth map. The distance data does not represent a physical unit and may be non-linear. The data is a 2.5D range map only.*\/$/;"	e	enum:_spinChunkScan3dOutputModeEnums
ChunkScan3dTransformValue	include/Camera.h	/^		GenApi::IFloat &ChunkScan3dTransformValue;$/;"	m	class:Spinnaker::Camera
ChunkScan3dTransformValue	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode ChunkScan3dTransformValue;$/;"	m	struct:_quickSpin
ChunkScanLineSelector	include/Camera.h	/^		GenApi::IInteger &ChunkScanLineSelector;$/;"	m	class:Spinnaker::Camera
ChunkScanLineSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode ChunkScanLineSelector;$/;"	m	struct:_quickSpin
ChunkSelector	include/Camera.h	/^		GenApi::IEnumerationT<ChunkSelectorEnums> &ChunkSelector;$/;"	m	class:Spinnaker::Camera
ChunkSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ChunkSelector;$/;"	m	struct:_quickSpin
ChunkSelectorEnums	include/CameraDefs.h	/^	enum ChunkSelectorEnums	\/*!< Selects which Chunk to enable or control.*\/$/;"	g	namespace:Spinnaker
ChunkSelector_BlackLevel	include/CameraDefs.h	/^		ChunkSelector_BlackLevel,	\/*!< Black Level*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_BlackLevel	include/spinc/CameraDefsC.h	/^	ChunkSelector_BlackLevel,	\/*!< Black Level*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_CounterValue	include/CameraDefs.h	/^		ChunkSelector_CounterValue,	\/*!< Counter Value*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_CounterValue	include/spinc/CameraDefsC.h	/^	ChunkSelector_CounterValue,	\/*!< Counter Value*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_CurrentBlockCount	include/CameraDefs.h	/^		ChunkSelector_CurrentBlockCount,	\/*!< Current Block Count*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_CurrentBlockCount	include/spinc/CameraDefsC.h	/^	ChunkSelector_CurrentBlockCount,	\/*!< Current Block Count*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_EncoderValue	include/CameraDefs.h	/^		ChunkSelector_EncoderValue,	\/*!< Encoder Value*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_EncoderValue	include/spinc/CameraDefsC.h	/^	ChunkSelector_EncoderValue,	\/*!< Encoder Value*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_ExposureTime	include/CameraDefs.h	/^		ChunkSelector_ExposureTime,	\/*!< Exposure Time*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_ExposureTime	include/spinc/CameraDefsC.h	/^	ChunkSelector_ExposureTime,	\/*!< Exposure Time*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_FrameID	include/CameraDefs.h	/^		ChunkSelector_FrameID,	\/*!< Frame ID*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_FrameID	include/spinc/CameraDefsC.h	/^	ChunkSelector_FrameID,	\/*!< Frame ID*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_Gain	include/CameraDefs.h	/^		ChunkSelector_Gain,	\/*!< Gain*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_Gain	include/spinc/CameraDefsC.h	/^	ChunkSelector_Gain,	\/*!< Gain*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_Height	include/CameraDefs.h	/^		ChunkSelector_Height,	\/*!< Height*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_Height	include/spinc/CameraDefsC.h	/^	ChunkSelector_Height,	\/*!< Height*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_Image	include/CameraDefs.h	/^		ChunkSelector_Image,	\/*!< Image*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_Image	include/spinc/CameraDefsC.h	/^	ChunkSelector_Image,	\/*!< Image*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_ImageComponent	include/CameraDefs.h	/^		ChunkSelector_ImageComponent,	\/*!< Image Component*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_ImageComponent	include/spinc/CameraDefsC.h	/^	ChunkSelector_ImageComponent,	\/*!< Image Component*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_LinePitch	include/CameraDefs.h	/^		ChunkSelector_LinePitch,	\/*!< Line Pitch*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_LinePitch	include/spinc/CameraDefsC.h	/^	ChunkSelector_LinePitch,	\/*!< Line Pitch*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_LineStatusAll	include/CameraDefs.h	/^		ChunkSelector_LineStatusAll,	\/*!< Line Status All*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_LineStatusAll	include/spinc/CameraDefsC.h	/^	ChunkSelector_LineStatusAll,	\/*!< Line Status All*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_OffsetX	include/CameraDefs.h	/^		ChunkSelector_OffsetX,	\/*!< Offset X*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_OffsetX	include/spinc/CameraDefsC.h	/^	ChunkSelector_OffsetX,	\/*!< Offset X*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_OffsetY	include/CameraDefs.h	/^		ChunkSelector_OffsetY,	\/*!< Offset Y*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_OffsetY	include/spinc/CameraDefsC.h	/^	ChunkSelector_OffsetY,	\/*!< Offset Y*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_PixelDynamicRangeMax	include/CameraDefs.h	/^		ChunkSelector_PixelDynamicRangeMax,	\/*!< Pixel Dynamic Range Max*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_PixelDynamicRangeMax	include/spinc/CameraDefsC.h	/^	ChunkSelector_PixelDynamicRangeMax,	\/*!< Pixel Dynamic Range Max*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_PixelDynamicRangeMin	include/CameraDefs.h	/^		ChunkSelector_PixelDynamicRangeMin,	\/*!< Pixel Dynamic Range Min*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_PixelDynamicRangeMin	include/spinc/CameraDefsC.h	/^	ChunkSelector_PixelDynamicRangeMin,	\/*!< Pixel Dynamic Range Min*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_PixelFormat	include/CameraDefs.h	/^		ChunkSelector_PixelFormat,	\/*!< Pixel Format*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_PixelFormat	include/spinc/CameraDefsC.h	/^	ChunkSelector_PixelFormat,	\/*!< Pixel Format*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_RegionID	include/CameraDefs.h	/^		ChunkSelector_RegionID,	\/*!< Region ID*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_RegionID	include/spinc/CameraDefsC.h	/^	ChunkSelector_RegionID,	\/*!< Region ID*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_Scan3dAxisMax	include/CameraDefs.h	/^		ChunkSelector_Scan3dAxisMax,	\/*!< Scan 3d Axis Max*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_Scan3dAxisMax	include/spinc/CameraDefsC.h	/^	ChunkSelector_Scan3dAxisMax,	\/*!< Scan 3d Axis Max*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_Scan3dAxisMin	include/CameraDefs.h	/^		ChunkSelector_Scan3dAxisMin,	\/*!< Scan 3d Axis Min*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_Scan3dAxisMin	include/spinc/CameraDefsC.h	/^	ChunkSelector_Scan3dAxisMin,	\/*!< Scan 3d Axis Min*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_Scan3dCoordinateOffset	include/CameraDefs.h	/^		ChunkSelector_Scan3dCoordinateOffset,	\/*!< Scan 3d Coordinate Offset*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_Scan3dCoordinateOffset	include/spinc/CameraDefsC.h	/^	ChunkSelector_Scan3dCoordinateOffset,	\/*!< Scan 3d Coordinate Offset*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_Scan3dCoordinateScale	include/CameraDefs.h	/^		ChunkSelector_Scan3dCoordinateScale,	\/*!< Scan 3d Coordinate Scale*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_Scan3dCoordinateScale	include/spinc/CameraDefsC.h	/^	ChunkSelector_Scan3dCoordinateScale,	\/*!< Scan 3d Coordinate Scale*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_Scan3dCoordinateSystem	include/CameraDefs.h	/^		ChunkSelector_Scan3dCoordinateSystem,	\/*!< Scan 3d Coordinate System*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_Scan3dCoordinateSystem	include/spinc/CameraDefsC.h	/^	ChunkSelector_Scan3dCoordinateSystem,	\/*!< Scan 3d Coordinate System*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_Scan3dCoordinateSystemReference	include/CameraDefs.h	/^		ChunkSelector_Scan3dCoordinateSystemReference,	\/*!< Scan 3d Coordinate System Reference*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_Scan3dCoordinateSystemReference	include/spinc/CameraDefsC.h	/^	ChunkSelector_Scan3dCoordinateSystemReference,	\/*!< Scan 3d Coordinate System Reference*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_Scan3dCoordinateTransformValueScan3dCoordinateReferenceValue	include/CameraDefs.h	/^		ChunkSelector_Scan3dCoordinateTransformValueScan3dCoordinateReferenceValue,	\/*!< Scan 3d Coordinate Transform Value Scan 3d Coordinate Reference Value*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_Scan3dCoordinateTransformValueScan3dCoordinateReferenceValue	include/spinc/CameraDefsC.h	/^	ChunkSelector_Scan3dCoordinateTransformValueScan3dCoordinateReferenceValue,	\/*!< Scan 3d Coordinate Transform Value Scan 3d Coordinate Reference Value*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_Scan3dDistanceUnit	include/CameraDefs.h	/^		ChunkSelector_Scan3dDistanceUnit,	\/*!< Scan 3d Distance Unit*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_Scan3dDistanceUnit	include/spinc/CameraDefsC.h	/^	ChunkSelector_Scan3dDistanceUnit,	\/*!< Scan 3d Distance Unit*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_Scan3dInvalidDataFlag	include/CameraDefs.h	/^		ChunkSelector_Scan3dInvalidDataFlag,	\/*!< Scan 3d Invalid Data Flag*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_Scan3dInvalidDataFlag	include/spinc/CameraDefsC.h	/^	ChunkSelector_Scan3dInvalidDataFlag,	\/*!< Scan 3d Invalid Data Flag*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_Scan3dInvalidDataValue	include/CameraDefs.h	/^		ChunkSelector_Scan3dInvalidDataValue,	\/*!< Scan 3d Invalid Data Value*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_Scan3dInvalidDataValue	include/spinc/CameraDefsC.h	/^	ChunkSelector_Scan3dInvalidDataValue,	\/*!< Scan 3d Invalid Data Value*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_Scan3dOutputMode	include/CameraDefs.h	/^		ChunkSelector_Scan3dOutputMode,	\/*!< Scan 3d Output Mode*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_Scan3dOutputMode	include/spinc/CameraDefsC.h	/^	ChunkSelector_Scan3dOutputMode,	\/*!< Scan 3d Output Mode*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_SourceID	include/CameraDefs.h	/^		ChunkSelector_SourceID,	\/*!< Source ID*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_SourceID	include/spinc/CameraDefsC.h	/^	ChunkSelector_SourceID,	\/*!< Source ID*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_StreamChannelID	include/CameraDefs.h	/^		ChunkSelector_StreamChannelID,	\/*!< Stream Channel ID*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_StreamChannelID	include/spinc/CameraDefsC.h	/^	ChunkSelector_StreamChannelID,	\/*!< Stream Channel ID*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_TimerValue	include/CameraDefs.h	/^		ChunkSelector_TimerValue,	\/*!< Timer Value*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_TimerValue	include/spinc/CameraDefsC.h	/^	ChunkSelector_TimerValue,	\/*!< Timer Value*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_Timestamp	include/CameraDefs.h	/^		ChunkSelector_Timestamp,	\/*!< Timestamp*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_Timestamp	include/spinc/CameraDefsC.h	/^	ChunkSelector_Timestamp,	\/*!< Timestamp*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_TransferBlockID	include/CameraDefs.h	/^		ChunkSelector_TransferBlockID,	\/*!< Transfer Block ID*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_TransferBlockID	include/spinc/CameraDefsC.h	/^	ChunkSelector_TransferBlockID,	\/*!< Transfer Block ID*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_TransferQueue	include/CameraDefs.h	/^		ChunkSelector_TransferQueue,	\/*!< Transfer Queue*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_TransferQueue	include/spinc/CameraDefsC.h	/^	ChunkSelector_TransferQueue,	\/*!< Transfer Queue*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_TransferStreamID	include/CameraDefs.h	/^		ChunkSelector_TransferStreamID,	\/*!< Transfer Stream ID*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_TransferStreamID	include/spinc/CameraDefsC.h	/^	ChunkSelector_TransferStreamID,	\/*!< Transfer Stream ID*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSelector_Width	include/CameraDefs.h	/^		ChunkSelector_Width,	\/*!< Width*\/$/;"	e	enum:Spinnaker::ChunkSelectorEnums
ChunkSelector_Width	include/spinc/CameraDefsC.h	/^	ChunkSelector_Width,	\/*!< Width*\/$/;"	e	enum:_spinChunkSelectorEnums
ChunkSequencerSetActive	include/Camera.h	/^		GenApi::IInteger &ChunkSequencerSetActive;$/;"	m	class:Spinnaker::Camera
ChunkSequencerSetActive	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode ChunkSequencerSetActive;$/;"	m	struct:_quickSpin
ChunkSourceID	include/Camera.h	/^		GenApi::IEnumerationT<ChunkSourceIDEnums> &ChunkSourceID;$/;"	m	class:Spinnaker::Camera
ChunkSourceID	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ChunkSourceID;$/;"	m	struct:_quickSpin
ChunkSourceIDEnums	include/CameraDefs.h	/^	enum ChunkSourceIDEnums	\/*!< Returns the identifier of Source that the image comes from.*\/$/;"	g	namespace:Spinnaker
ChunkSourceID_Source0	include/CameraDefs.h	/^		ChunkSourceID_Source0,	\/*!< Image comes from the Source 0.*\/$/;"	e	enum:Spinnaker::ChunkSourceIDEnums
ChunkSourceID_Source0	include/spinc/CameraDefsC.h	/^	ChunkSourceID_Source0,	\/*!< Image comes from the Source 0.*\/$/;"	e	enum:_spinChunkSourceIDEnums
ChunkSourceID_Source1	include/CameraDefs.h	/^		ChunkSourceID_Source1,	\/*!< Image comes from the Source 1.*\/$/;"	e	enum:Spinnaker::ChunkSourceIDEnums
ChunkSourceID_Source1	include/spinc/CameraDefsC.h	/^	ChunkSourceID_Source1,	\/*!< Image comes from the Source 1.*\/$/;"	e	enum:_spinChunkSourceIDEnums
ChunkSourceID_Source2	include/CameraDefs.h	/^		ChunkSourceID_Source2,	\/*!< Image comes from the Source 2.*\/$/;"	e	enum:Spinnaker::ChunkSourceIDEnums
ChunkSourceID_Source2	include/spinc/CameraDefsC.h	/^	ChunkSourceID_Source2,	\/*!< Image comes from the Source 2.*\/$/;"	e	enum:_spinChunkSourceIDEnums
ChunkStreamChannelID	include/Camera.h	/^		GenApi::IInteger &ChunkStreamChannelID;$/;"	m	class:Spinnaker::Camera
ChunkStreamChannelID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode ChunkStreamChannelID;$/;"	m	struct:_quickSpin
ChunkTimerSelector	include/Camera.h	/^		GenApi::IEnumerationT<ChunkTimerSelectorEnums> &ChunkTimerSelector;$/;"	m	class:Spinnaker::Camera
ChunkTimerSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ChunkTimerSelector;$/;"	m	struct:_quickSpin
ChunkTimerSelectorEnums	include/CameraDefs.h	/^	enum ChunkTimerSelectorEnums	\/*!< Selects which Timer to retrieve data from.*\/$/;"	g	namespace:Spinnaker
ChunkTimerSelector_Timer0	include/CameraDefs.h	/^		ChunkTimerSelector_Timer0,	\/*!< Selects the first Timer.*\/$/;"	e	enum:Spinnaker::ChunkTimerSelectorEnums
ChunkTimerSelector_Timer0	include/spinc/CameraDefsC.h	/^	ChunkTimerSelector_Timer0,	\/*!< Selects the first Timer.*\/$/;"	e	enum:_spinChunkTimerSelectorEnums
ChunkTimerSelector_Timer1	include/CameraDefs.h	/^		ChunkTimerSelector_Timer1,	\/*!< Selects the first Timer.*\/$/;"	e	enum:Spinnaker::ChunkTimerSelectorEnums
ChunkTimerSelector_Timer1	include/spinc/CameraDefsC.h	/^	ChunkTimerSelector_Timer1,	\/*!< Selects the first Timer.*\/$/;"	e	enum:_spinChunkTimerSelectorEnums
ChunkTimerSelector_Timer2	include/CameraDefs.h	/^		ChunkTimerSelector_Timer2,	\/*!< Selects the second Timer.*\/$/;"	e	enum:Spinnaker::ChunkTimerSelectorEnums
ChunkTimerSelector_Timer2	include/spinc/CameraDefsC.h	/^	ChunkTimerSelector_Timer2,	\/*!< Selects the second Timer.*\/$/;"	e	enum:_spinChunkTimerSelectorEnums
ChunkTimerValue	include/Camera.h	/^		GenApi::IFloat &ChunkTimerValue;$/;"	m	class:Spinnaker::Camera
ChunkTimerValue	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode ChunkTimerValue;$/;"	m	struct:_quickSpin
ChunkTimestamp	include/Camera.h	/^		GenApi::IInteger &ChunkTimestamp;$/;"	m	class:Spinnaker::Camera
ChunkTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode ChunkTimestamp;$/;"	m	struct:_quickSpin
ChunkTimestampLatchValue	include/Camera.h	/^		GenApi::IInteger &ChunkTimestampLatchValue;$/;"	m	class:Spinnaker::Camera
ChunkTimestampLatchValue	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode ChunkTimestampLatchValue;$/;"	m	struct:_quickSpin
ChunkTransferBlockID	include/Camera.h	/^		GenApi::IInteger &ChunkTransferBlockID;$/;"	m	class:Spinnaker::Camera
ChunkTransferBlockID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode ChunkTransferBlockID;$/;"	m	struct:_quickSpin
ChunkTransferQueueCurrentBlockCount	include/Camera.h	/^		GenApi::IInteger &ChunkTransferQueueCurrentBlockCount;$/;"	m	class:Spinnaker::Camera
ChunkTransferQueueCurrentBlockCount	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode ChunkTransferQueueCurrentBlockCount;$/;"	m	struct:_quickSpin
ChunkTransferStreamID	include/Camera.h	/^		GenApi::IEnumerationT<ChunkTransferStreamIDEnums> &ChunkTransferStreamID;$/;"	m	class:Spinnaker::Camera
ChunkTransferStreamID	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ChunkTransferStreamID;$/;"	m	struct:_quickSpin
ChunkTransferStreamIDEnums	include/CameraDefs.h	/^	enum ChunkTransferStreamIDEnums	\/*!< Returns identifier of the stream that generated this block.*\/$/;"	g	namespace:Spinnaker
ChunkTransferStreamID_Stream0	include/CameraDefs.h	/^		ChunkTransferStreamID_Stream0,	\/*!< Data comes from Stream0.*\/$/;"	e	enum:Spinnaker::ChunkTransferStreamIDEnums
ChunkTransferStreamID_Stream0	include/spinc/CameraDefsC.h	/^	ChunkTransferStreamID_Stream0,	\/*!< Data comes from Stream0.*\/$/;"	e	enum:_spinChunkTransferStreamIDEnums
ChunkTransferStreamID_Stream1	include/CameraDefs.h	/^		ChunkTransferStreamID_Stream1,	\/*!< Data comes from Stream1.*\/$/;"	e	enum:Spinnaker::ChunkTransferStreamIDEnums
ChunkTransferStreamID_Stream1	include/spinc/CameraDefsC.h	/^	ChunkTransferStreamID_Stream1,	\/*!< Data comes from Stream1.*\/$/;"	e	enum:_spinChunkTransferStreamIDEnums
ChunkTransferStreamID_Stream2	include/CameraDefs.h	/^		ChunkTransferStreamID_Stream2,	\/*!< Data comes from Stream2.*\/$/;"	e	enum:Spinnaker::ChunkTransferStreamIDEnums
ChunkTransferStreamID_Stream2	include/spinc/CameraDefsC.h	/^	ChunkTransferStreamID_Stream2,	\/*!< Data comes from Stream2.*\/$/;"	e	enum:_spinChunkTransferStreamIDEnums
ChunkTransferStreamID_Stream3	include/CameraDefs.h	/^		ChunkTransferStreamID_Stream3,	\/*!< Data comes from Stream3.*\/$/;"	e	enum:Spinnaker::ChunkTransferStreamIDEnums
ChunkTransferStreamID_Stream3	include/spinc/CameraDefsC.h	/^	ChunkTransferStreamID_Stream3,	\/*!< Data comes from Stream3.*\/$/;"	e	enum:_spinChunkTransferStreamIDEnums
ChunkWidth	include/Camera.h	/^		GenApi::IInteger &ChunkWidth;$/;"	m	class:Spinnaker::Camera
ChunkWidth	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode ChunkWidth;$/;"	m	struct:_quickSpin
ClConfiguration	include/Camera.h	/^		GenApi::IEnumerationT<ClConfigurationEnums> &ClConfiguration;$/;"	m	class:Spinnaker::Camera
ClConfiguration	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ClConfiguration;$/;"	m	struct:_quickSpin
ClConfigurationEnums	include/CameraDefs.h	/^	enum ClConfigurationEnums	\/*!< This Camera Link specific feature describes the configuration used by the camera. It helps especially when a camera is capable of operation in a non-standard configuration, and when the features PixelSize, SensorDigitizationTaps, and DeviceTapGeometry do not provide enough information for interpretation of the image data provided by the camera.*\/$/;"	g	namespace:Spinnaker
ClConfiguration_Base	include/CameraDefs.h	/^		ClConfiguration_Base,	\/*!< Standard base configuration described by the Camera Link standard.*\/$/;"	e	enum:Spinnaker::ClConfigurationEnums
ClConfiguration_Base	include/spinc/CameraDefsC.h	/^	ClConfiguration_Base,	\/*!< Standard base configuration described by the Camera Link standard.*\/$/;"	e	enum:_spinClConfigurationEnums
ClConfiguration_DualBase	include/CameraDefs.h	/^		ClConfiguration_DualBase,	\/*!< The camera streams the data from multiple taps (that do not fit in the standard base configuration) through two Camera Link base ports. It is responsibility of the application or frame grabber to reconstruct the full image. Only one of the ports (fixed) serves as the "master" for serial communication and triggering.*\/$/;"	e	enum:Spinnaker::ClConfigurationEnums
ClConfiguration_DualBase	include/spinc/CameraDefsC.h	/^	ClConfiguration_DualBase,	\/*!< The camera streams the data from multiple taps (that do not fit in the standard base configuration) through two Camera Link base ports. It is responsibility of the application or frame grabber to reconstruct the full image. Only one of the ports (fixed) serves as the "master" for serial communication and triggering.*\/$/;"	e	enum:_spinClConfigurationEnums
ClConfiguration_EightyBit	include/CameraDefs.h	/^		ClConfiguration_EightyBit,	\/*!< Standard 80-bit configuration with 10 taps of 8 bits or 8 taps of 10 bits, as described by the Camera Link standard.*\/$/;"	e	enum:Spinnaker::ClConfigurationEnums
ClConfiguration_EightyBit	include/spinc/CameraDefsC.h	/^	ClConfiguration_EightyBit,	\/*!< Standard 80-bit configuration with 10 taps of 8 bits or 8 taps of 10 bits, as described by the Camera Link standard.*\/$/;"	e	enum:_spinClConfigurationEnums
ClConfiguration_Full	include/CameraDefs.h	/^		ClConfiguration_Full,	\/*!< Standard full configuration described by the Camera Link standard.*\/$/;"	e	enum:Spinnaker::ClConfigurationEnums
ClConfiguration_Full	include/spinc/CameraDefsC.h	/^	ClConfiguration_Full,	\/*!< Standard full configuration described by the Camera Link standard.*\/$/;"	e	enum:_spinClConfigurationEnums
ClConfiguration_Medium	include/CameraDefs.h	/^		ClConfiguration_Medium,	\/*!< Standard medium configuration described by the Camera Link standard.*\/$/;"	e	enum:Spinnaker::ClConfigurationEnums
ClConfiguration_Medium	include/spinc/CameraDefsC.h	/^	ClConfiguration_Medium,	\/*!< Standard medium configuration described by the Camera Link standard.*\/$/;"	e	enum:_spinClConfigurationEnums
ClTimeSlotsCount	include/Camera.h	/^		GenApi::IEnumerationT<ClTimeSlotsCountEnums> &ClTimeSlotsCount;$/;"	m	class:Spinnaker::Camera
ClTimeSlotsCount	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ClTimeSlotsCount;$/;"	m	struct:_quickSpin
ClTimeSlotsCountEnums	include/CameraDefs.h	/^	enum ClTimeSlotsCountEnums	\/*!< This Camera Link specific feature describes the time multiplexing of the camera link connection to transfer more than the configuration allows, in one single clock.*\/$/;"	g	namespace:Spinnaker
ClTimeSlotsCount_One	include/CameraDefs.h	/^		ClTimeSlotsCount_One,	\/*!< One*\/$/;"	e	enum:Spinnaker::ClTimeSlotsCountEnums
ClTimeSlotsCount_One	include/spinc/CameraDefsC.h	/^	ClTimeSlotsCount_One,	\/*!< One*\/$/;"	e	enum:_spinClTimeSlotsCountEnums
ClTimeSlotsCount_Three	include/CameraDefs.h	/^		ClTimeSlotsCount_Three,	\/*!< Three*\/$/;"	e	enum:Spinnaker::ClTimeSlotsCountEnums
ClTimeSlotsCount_Three	include/spinc/CameraDefsC.h	/^	ClTimeSlotsCount_Three,	\/*!< Three*\/$/;"	e	enum:_spinClTimeSlotsCountEnums
ClTimeSlotsCount_Two	include/CameraDefs.h	/^		ClTimeSlotsCount_Two,	\/*!< Two*\/$/;"	e	enum:Spinnaker::ClTimeSlotsCountEnums
ClTimeSlotsCount_Two	include/spinc/CameraDefsC.h	/^	ClTimeSlotsCount_Two,	\/*!< Two*\/$/;"	e	enum:_spinClTimeSlotsCountEnums
ClickedEventCallback	include/GUI/SpinnakerGUI_WPF.h	/^		typedef void (*ClickedEventCallback)(bool isCamera, Spinnaker::CameraPtr* pCamera, Spinnaker::InterfacePtr* pInterface);$/;"	t	namespace:Spinnaker::GUI_WPF
ColorProcessingAlgorithm	include/SpinnakerDefs.h	/^    enum ColorProcessingAlgorithm$/;"	g	namespace:Spinnaker
ColorTransformationEnable	include/Camera.h	/^		GenApi::IBoolean &ColorTransformationEnable;$/;"	m	class:Spinnaker::Camera
ColorTransformationEnable	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode ColorTransformationEnable;$/;"	m	struct:_quickSpin
ColorTransformationSelector	include/Camera.h	/^		GenApi::IEnumerationT<ColorTransformationSelectorEnums> &ColorTransformationSelector;$/;"	m	class:Spinnaker::Camera
ColorTransformationSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ColorTransformationSelector;$/;"	m	struct:_quickSpin
ColorTransformationSelectorEnums	include/CameraDefs.h	/^	enum ColorTransformationSelectorEnums	\/*!< Selects which Color Transformation module is controlled by the various Color Transformation features.*\/$/;"	g	namespace:Spinnaker
ColorTransformationSelector_RGBtoRGB	include/CameraDefs.h	/^		ColorTransformationSelector_RGBtoRGB,	\/*!< RGB to RGB color transformation.*\/$/;"	e	enum:Spinnaker::ColorTransformationSelectorEnums
ColorTransformationSelector_RGBtoRGB	include/spinc/CameraDefsC.h	/^	ColorTransformationSelector_RGBtoRGB,	\/*!< RGB to RGB color transformation.*\/$/;"	e	enum:_spinColorTransformationSelectorEnums
ColorTransformationSelector_RGBtoYUV	include/CameraDefs.h	/^		ColorTransformationSelector_RGBtoYUV,	\/*!< RGB to YUV color transformation.*\/$/;"	e	enum:Spinnaker::ColorTransformationSelectorEnums
ColorTransformationSelector_RGBtoYUV	include/spinc/CameraDefsC.h	/^	ColorTransformationSelector_RGBtoYUV,	\/*!< RGB to YUV color transformation.*\/$/;"	e	enum:_spinColorTransformationSelectorEnums
ColorTransformationValue	include/Camera.h	/^		GenApi::IFloat &ColorTransformationValue;$/;"	m	class:Spinnaker::Camera
ColorTransformationValue	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode ColorTransformationValue;$/;"	m	struct:_quickSpin
ColorTransformationValueSelector	include/Camera.h	/^		GenApi::IEnumerationT<ColorTransformationValueSelectorEnums> &ColorTransformationValueSelector;$/;"	m	class:Spinnaker::Camera
ColorTransformationValueSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ColorTransformationValueSelector;$/;"	m	struct:_quickSpin
ColorTransformationValueSelectorEnums	include/CameraDefs.h	/^	enum ColorTransformationValueSelectorEnums	\/*!< Selects the Gain factor or Offset of the Transformation matrix to access in the selected Color Transformation module.*\/$/;"	g	namespace:Spinnaker
ColorTransformationValueSelector_Gain00	include/CameraDefs.h	/^		ColorTransformationValueSelector_Gain00,	\/*!< Gain 0,0 of the transformation matrix.*\/$/;"	e	enum:Spinnaker::ColorTransformationValueSelectorEnums
ColorTransformationValueSelector_Gain00	include/spinc/CameraDefsC.h	/^	ColorTransformationValueSelector_Gain00,	\/*!< Gain 0,0 of the transformation matrix.*\/$/;"	e	enum:_spinColorTransformationValueSelectorEnums
ColorTransformationValueSelector_Gain01	include/CameraDefs.h	/^		ColorTransformationValueSelector_Gain01,	\/*!< Gain 0,1 of the transformation matrix.*\/$/;"	e	enum:Spinnaker::ColorTransformationValueSelectorEnums
ColorTransformationValueSelector_Gain01	include/spinc/CameraDefsC.h	/^	ColorTransformationValueSelector_Gain01,	\/*!< Gain 0,1 of the transformation matrix.*\/$/;"	e	enum:_spinColorTransformationValueSelectorEnums
ColorTransformationValueSelector_Gain02	include/CameraDefs.h	/^		ColorTransformationValueSelector_Gain02,	\/*!< Gain 0,2 of the transformation matrix.*\/$/;"	e	enum:Spinnaker::ColorTransformationValueSelectorEnums
ColorTransformationValueSelector_Gain02	include/spinc/CameraDefsC.h	/^	ColorTransformationValueSelector_Gain02,	\/*!< Gain 0,2 of the transformation matrix.*\/$/;"	e	enum:_spinColorTransformationValueSelectorEnums
ColorTransformationValueSelector_Gain10	include/CameraDefs.h	/^		ColorTransformationValueSelector_Gain10,	\/*!< Gain 1,0 of the transformation matrix.*\/$/;"	e	enum:Spinnaker::ColorTransformationValueSelectorEnums
ColorTransformationValueSelector_Gain10	include/spinc/CameraDefsC.h	/^	ColorTransformationValueSelector_Gain10,	\/*!< Gain 1,0 of the transformation matrix.*\/$/;"	e	enum:_spinColorTransformationValueSelectorEnums
ColorTransformationValueSelector_Gain11	include/CameraDefs.h	/^		ColorTransformationValueSelector_Gain11,	\/*!< Gain 1,1 of the transformation matrix.*\/$/;"	e	enum:Spinnaker::ColorTransformationValueSelectorEnums
ColorTransformationValueSelector_Gain11	include/spinc/CameraDefsC.h	/^	ColorTransformationValueSelector_Gain11,	\/*!< Gain 1,1 of the transformation matrix.*\/$/;"	e	enum:_spinColorTransformationValueSelectorEnums
ColorTransformationValueSelector_Gain12	include/CameraDefs.h	/^		ColorTransformationValueSelector_Gain12,	\/*!< Gain 1,2 of the transformation matrix.*\/$/;"	e	enum:Spinnaker::ColorTransformationValueSelectorEnums
ColorTransformationValueSelector_Gain12	include/spinc/CameraDefsC.h	/^	ColorTransformationValueSelector_Gain12,	\/*!< Gain 1,2 of the transformation matrix.*\/$/;"	e	enum:_spinColorTransformationValueSelectorEnums
ColorTransformationValueSelector_Gain20	include/CameraDefs.h	/^		ColorTransformationValueSelector_Gain20,	\/*!< Gain 2,0 of the transformation matrix.*\/$/;"	e	enum:Spinnaker::ColorTransformationValueSelectorEnums
ColorTransformationValueSelector_Gain20	include/spinc/CameraDefsC.h	/^	ColorTransformationValueSelector_Gain20,	\/*!< Gain 2,0 of the transformation matrix.*\/$/;"	e	enum:_spinColorTransformationValueSelectorEnums
ColorTransformationValueSelector_Gain21	include/CameraDefs.h	/^		ColorTransformationValueSelector_Gain21,	\/*!< Gain 2,1 of the transformation matrix.*\/$/;"	e	enum:Spinnaker::ColorTransformationValueSelectorEnums
ColorTransformationValueSelector_Gain21	include/spinc/CameraDefsC.h	/^	ColorTransformationValueSelector_Gain21,	\/*!< Gain 2,1 of the transformation matrix.*\/$/;"	e	enum:_spinColorTransformationValueSelectorEnums
ColorTransformationValueSelector_Gain22	include/CameraDefs.h	/^		ColorTransformationValueSelector_Gain22,	\/*!< Gain 2,2 of the transformation matrix.*\/$/;"	e	enum:Spinnaker::ColorTransformationValueSelectorEnums
ColorTransformationValueSelector_Gain22	include/spinc/CameraDefsC.h	/^	ColorTransformationValueSelector_Gain22,	\/*!< Gain 2,2 of the transformation matrix.*\/$/;"	e	enum:_spinColorTransformationValueSelectorEnums
ColorTransformationValueSelector_Offset0	include/CameraDefs.h	/^		ColorTransformationValueSelector_Offset0,	\/*!< Offset 0 of the transformation matrix.*\/$/;"	e	enum:Spinnaker::ColorTransformationValueSelectorEnums
ColorTransformationValueSelector_Offset0	include/spinc/CameraDefsC.h	/^	ColorTransformationValueSelector_Offset0,	\/*!< Offset 0 of the transformation matrix.*\/$/;"	e	enum:_spinColorTransformationValueSelectorEnums
ColorTransformationValueSelector_Offset1	include/CameraDefs.h	/^		ColorTransformationValueSelector_Offset1,	\/*!< Offset 1 of the transformation matrix.*\/$/;"	e	enum:Spinnaker::ColorTransformationValueSelectorEnums
ColorTransformationValueSelector_Offset1	include/spinc/CameraDefsC.h	/^	ColorTransformationValueSelector_Offset1,	\/*!< Offset 1 of the transformation matrix.*\/$/;"	e	enum:_spinColorTransformationValueSelectorEnums
ColorTransformationValueSelector_Offset2	include/CameraDefs.h	/^		ColorTransformationValueSelector_Offset2,	\/*!< Offset 2 of the transformation matrix.*\/$/;"	e	enum:Spinnaker::ColorTransformationValueSelectorEnums
ColorTransformationValueSelector_Offset2	include/spinc/CameraDefsC.h	/^	ColorTransformationValueSelector_Offset2,	\/*!< Offset 2 of the transformation matrix.*\/$/;"	e	enum:_spinColorTransformationValueSelectorEnums
Combine	include/SpinGenApi/INode.h	/^		inline EAccessMode Combine(EAccessMode Peter, EAccessMode Paul)$/;"	f	namespace:Spinnaker::GenApi
Combine	include/SpinGenApi/INode.h	/^		inline ECachingMode Combine(ECachingMode Peter, ECachingMode Paul)$/;"	f	namespace:Spinnaker::GenApi
Combine	include/SpinGenApi/INode.h	/^		inline EVisibility Combine(EVisibility Peter, EVisibility Paul)$/;"	f	namespace:Spinnaker::GenApi
Command	include/SpinGenApi/EventAdapterGEV.h	/^        uint16_t Command;$/;"	m	struct:Spinnaker::GenApi::GVCP_REQUEST_HEADER
CommandHeader	include/SpinGenApi/EventAdapterU3V.h	/^			U3V_COMMAND_HEADER CommandHeader;$/;"	m	struct:Spinnaker::GenApi::U3V_EVENT_MESSAGE
CommandId	include/SpinGenApi/EventAdapterU3V.h	/^			uint16_t CommandId;$/;"	m	struct:Spinnaker::GenApi::U3V_COMMAND_HEADER
CommandNode	include/SpinGenApi/CommandNode.h	/^        class SPINNAKER_API CommandNode : virtual public ICommand, virtual public ValueNode$/;"	c	namespace:Spinnaker::GenApi
CommandNode	include/spinc/SpinnakerGenApiDefsC.h	/^	CommandNode,$/;"	e	enum:_spinNodeType
CompressionMethod	include/SpinnakerDefs.h	/^        enum CompressionMethod$/;"	g	struct:Spinnaker::TIFFOption
CompressionMethod	include/spinc/SpinnakerDefsC.h	/^typedef enum CompressionMethod$/;"	g
ConfigureCallbacks	SpinnakerTest/NodeMapCallback/NodeMapCallback.cpp	/^int ConfigureCallbacks(INodeMap & nodeMap, int64_t & callbackHeight, int64_t & callbackGain)$/;"	f
ConfigureCallbacks	SpinnakerTest/NodeMapCallback_C/NodeMapCallback_C.cpp	/^spinError ConfigureCallbacks(spinNodeMapHandle hNodeMap, spinNodeCallbackHandle* callbackHeight, spinNodeCallbackHandle* callbackGain)$/;"	f
ConfigureCallbacks	src/NodeMapCallback/NodeMapCallback.cpp	/^int ConfigureCallbacks(INodeMap & nodeMap, int64_t & callbackHeight, int64_t & callbackGain)$/;"	f
ConfigureCallbacks	src/NodeMapCallback_C/NodeMapCallback_C.cpp	/^spinError ConfigureCallbacks(spinNodeMapHandle hNodeMap, spinNodeCallbackHandle* callbackHeight, spinNodeCallbackHandle* callbackGain)$/;"	f
ConfigureCamera	Abhinay/Abhi_hardware/Abhi_hardware.cpp	/^int ConfigureCamera(CameraPtr pCam, INodeMap & nodeMap) {$/;"	f
ConfigureCamera	Abhinay/Abhi_test3/Abhi_test3.cpp	/^int ConfigureCamera(CameraPtr pCam, INodeMap & nodeMap) {$/;"	f
ConfigureCamera	src/Abhi_hardware/Abhi_hardware.cpp	/^int ConfigureCamera(CameraPtr pCam, INodeMap & nodeMap) {$/;"	f
ConfigureCamera	src/Abhi_test3/Abhi_test3.cpp	/^int ConfigureCamera(CameraPtr pCam, INodeMap & nodeMap) {$/;"	f
ConfigureChunkData	SpinnakerTest/ChunkData/ChunkData.cpp	/^int ConfigureChunkData(INodeMap & nodeMap)$/;"	f
ConfigureChunkData	SpinnakerTest/ChunkData_C/ChunkData_C.cpp	/^spinError ConfigureChunkData(spinNodeMapHandle hNodeMap)$/;"	f
ConfigureChunkData	src/ChunkData/ChunkData.cpp	/^int ConfigureChunkData(INodeMap & nodeMap)$/;"	f
ConfigureChunkData	src/ChunkData_C/ChunkData_C.cpp	/^spinError ConfigureChunkData(spinNodeMapHandle hNodeMap)$/;"	f
ConfigureCustomImageSettings	SpinnakerTest/ImageFormatControl/ImageFormatControl.cpp	/^int ConfigureCustomImageSettings(INodeMap & nodeMap)$/;"	f
ConfigureCustomImageSettings	SpinnakerTest/ImageFormatControl_C/ImageFormatControl_C.cpp	/^spinError ConfigureCustomImageSettings(spinNodeMapHandle hNodeMap)$/;"	f
ConfigureCustomImageSettings	SpinnakerTest/ImageFormatControl_C_QuickSpin/ImageFormatControl_C_QuickSpin.cpp	/^spinError ConfigureCustomImageSettings(quickSpin qs)$/;"	f
ConfigureCustomImageSettings	SpinnakerTest/ImageFormatControl_QuickSpin/ImageFormatControl_QuickSpin.cpp	/^int ConfigureCustomImageSettings(CameraPtr pCam)$/;"	f
ConfigureCustomImageSettings	src/ImageFormatControl/ImageFormatControl.cpp	/^int ConfigureCustomImageSettings(INodeMap & nodeMap)$/;"	f
ConfigureCustomImageSettings	src/ImageFormatControl_C/ImageFormatControl_C.cpp	/^spinError ConfigureCustomImageSettings(spinNodeMapHandle hNodeMap)$/;"	f
ConfigureCustomImageSettings	src/ImageFormatControl_C_QuickSpin/ImageFormatControl_C_QuickSpin.cpp	/^spinError ConfigureCustomImageSettings(quickSpin qs)$/;"	f
ConfigureCustomImageSettings	src/ImageFormatControl_QuickSpin/ImageFormatControl_QuickSpin.cpp	/^int ConfigureCustomImageSettings(CameraPtr pCam)$/;"	f
ConfigureDeviceEvents	SpinnakerTest/DeviceEvents/DeviceEvents.cpp	/^int ConfigureDeviceEvents(INodeMap & nodeMap, CameraPtr pCam, DeviceEventHandler*& deviceEventHandler)$/;"	f
ConfigureDeviceEvents	SpinnakerTest/DeviceEvents_C/DeviceEvents_C.cpp	/^spinError ConfigureDeviceEvents(spinNodeMapHandle hNodeMap, spinCamera hCam, spinDeviceEvent* deviceEvent, userData* eventInfo)$/;"	f
ConfigureDeviceEvents	src/DeviceEvents/DeviceEvents.cpp	/^int ConfigureDeviceEvents(INodeMap & nodeMap, CameraPtr pCam, DeviceEventHandler*& deviceEventHandler)$/;"	f
ConfigureDeviceEvents	src/DeviceEvents_C/DeviceEvents_C.cpp	/^spinError ConfigureDeviceEvents(spinNodeMapHandle hNodeMap, spinCamera hCam, spinDeviceEvent* deviceEvent, userData* eventInfo)$/;"	f
ConfigureExposure	SpinnakerTest/Exposure/Exposure.cpp	/^int ConfigureExposure(INodeMap & nodeMap)$/;"	f
ConfigureExposure	SpinnakerTest/Exposure_C/Exposure_C.cpp	/^spinError ConfigureExposure(spinNodeMapHandle hNodeMap)$/;"	f
ConfigureExposure	SpinnakerTest/Exposure_C_QuickSpin/Exposure_C_QuickSpin.cpp	/^spinError ConfigureExposure(quickSpin qs)$/;"	f
ConfigureExposure	SpinnakerTest/Exposure_QuickSpin/Exposure_QuickSpin.cpp	/^int ConfigureExposure(CameraPtr pCam)$/;"	f
ConfigureExposure	src/Exposure/Exposure.cpp	/^int ConfigureExposure(INodeMap & nodeMap)$/;"	f
ConfigureExposure	src/Exposure_C/Exposure_C.cpp	/^spinError ConfigureExposure(spinNodeMapHandle hNodeMap)$/;"	f
ConfigureExposure	src/Exposure_C_QuickSpin/Exposure_C_QuickSpin.cpp	/^spinError ConfigureExposure(quickSpin qs)$/;"	f
ConfigureExposure	src/Exposure_QuickSpin/Exposure_QuickSpin.cpp	/^int ConfigureExposure(CameraPtr pCam)$/;"	f
ConfigureImageEvents	SpinnakerTest/ImageEvents/ImageEvents.cpp	/^int ConfigureImageEvents(CameraPtr pCam, ImageEventHandler*& imageEventHandler)$/;"	f
ConfigureImageEvents	SpinnakerTest/ImageEvents_C/ImageEvents_C.cpp	/^spinError ConfigureImageEvents(spinCamera hCam, spinNodeMapHandle hNodeMapTLDevice, spinImageEvent* imageEvent, userData* imageEventInfo)$/;"	f
ConfigureImageEvents	src/ImageEvents/ImageEvents.cpp	/^int ConfigureImageEvents(CameraPtr pCam, ImageEventHandler*& imageEventHandler)$/;"	f
ConfigureImageEvents	src/ImageEvents_C/ImageEvents_C.cpp	/^spinError ConfigureImageEvents(spinCamera hCam, spinNodeMapHandle hNodeMapTLDevice, spinImageEvent* imageEvent, userData* imageEventInfo)$/;"	f
ConfigureLookupTables	SpinnakerTest/LookupTable/LookupTable.cpp	/^int ConfigureLookupTables(INodeMap & nodeMap)$/;"	f
ConfigureLookupTables	SpinnakerTest/LookupTable_C/LookupTable_C.cpp	/^spinError ConfigureLookupTables(spinNodeMapHandle hNodeMap)$/;"	f
ConfigureLookupTables	src/LookupTable/LookupTable.cpp	/^int ConfigureLookupTables(INodeMap & nodeMap)$/;"	f
ConfigureLookupTables	src/LookupTable_C/LookupTable_C.cpp	/^spinError ConfigureLookupTables(spinNodeMapHandle hNodeMap)$/;"	f
ConfigureSequencerPartOne	SpinnakerTest/Sequencer/Sequencer.cpp	/^int ConfigureSequencerPartOne(INodeMap & nodeMap)$/;"	f
ConfigureSequencerPartOne	SpinnakerTest/Sequencer_C/Sequencer_C.cpp	/^spinError ConfigureSequencerPartOne(spinNodeMapHandle hNodeMap)$/;"	f
ConfigureSequencerPartOne	src/Sequencer/Sequencer.cpp	/^int ConfigureSequencerPartOne(INodeMap & nodeMap)$/;"	f
ConfigureSequencerPartOne	src/Sequencer_C/Sequencer_C.cpp	/^spinError ConfigureSequencerPartOne(spinNodeMapHandle hNodeMap)$/;"	f
ConfigureSequencerPartTwo	SpinnakerTest/Sequencer/Sequencer.cpp	/^int ConfigureSequencerPartTwo(INodeMap & nodeMap)$/;"	f
ConfigureSequencerPartTwo	SpinnakerTest/Sequencer_C/Sequencer_C.cpp	/^spinError ConfigureSequencerPartTwo(spinNodeMapHandle hNodeMap)$/;"	f
ConfigureSequencerPartTwo	src/Sequencer/Sequencer.cpp	/^int ConfigureSequencerPartTwo(INodeMap & nodeMap)$/;"	f
ConfigureSequencerPartTwo	src/Sequencer_C/Sequencer_C.cpp	/^spinError ConfigureSequencerPartTwo(spinNodeMapHandle hNodeMap)$/;"	f
ConfigureTrigger	Abhinay/Abhi_hardware/Abhi_hardware.cpp	/^int ConfigureTrigger(INodeMap & nodeMap, bool isPrimary)$/;"	f
ConfigureTrigger	Abhinay/Abhi_test3/Abhi_test3.cpp	/^int ConfigureTrigger(INodeMap & nodeMap)$/;"	f
ConfigureTrigger	Abhinay/Abhi_trigger/Trigger.cpp	/^int ConfigureTrigger(INodeMap & nodeMap)$/;"	f
ConfigureTrigger	SpinnakerTest/Abhi_test3/Abhi_test3.cpp	/^int ConfigureTrigger(INodeMap & nodeMap)$/;"	f
ConfigureTrigger	SpinnakerTest/Abhi_trigger/Trigger.cpp	/^int ConfigureTrigger(INodeMap & nodeMap)$/;"	f
ConfigureTrigger	SpinnakerTest/Trigger/Trigger.cpp	/^int ConfigureTrigger(INodeMap & nodeMap)$/;"	f
ConfigureTrigger	SpinnakerTest/Trigger_C/Trigger_C.cpp	/^spinError ConfigureTrigger(spinNodeMapHandle hNodeMap)$/;"	f
ConfigureTrigger	SpinnakerTest/Trigger_C_QuickSpin/Trigger_C_QuickSpin.cpp	/^spinError ConfigureTrigger(quickSpin qs)$/;"	f
ConfigureTrigger	SpinnakerTest/Trigger_QuickSpin/Trigger_QuickSpin.cpp	/^int ConfigureTrigger(CameraPtr pCam)$/;"	f
ConfigureTrigger	src/Abhi_hardware/Abhi_hardware.cpp	/^int ConfigureTrigger(INodeMap & nodeMap, bool isPrimary)$/;"	f
ConfigureTrigger	src/Abhi_test3/Abhi_test3.cpp	/^int ConfigureTrigger(INodeMap & nodeMap)$/;"	f
ConfigureTrigger	src/Abhi_trigger/Trigger.cpp	/^int ConfigureTrigger(INodeMap & nodeMap)$/;"	f
ConfigureTrigger	src/Trigger/Trigger.cpp	/^int ConfigureTrigger(INodeMap & nodeMap)$/;"	f
ConfigureTrigger	src/Trigger_C/Trigger_C.cpp	/^spinError ConfigureTrigger(spinNodeMapHandle hNodeMap)$/;"	f
ConfigureTrigger	src/Trigger_C_QuickSpin/Trigger_C_QuickSpin.cpp	/^spinError ConfigureTrigger(quickSpin qs)$/;"	f
ConfigureTrigger	src/Trigger_QuickSpin/Trigger_QuickSpin.cpp	/^int ConfigureTrigger(CameraPtr pCam)$/;"	f
ContentType_Xml	include/SpinGenApi/NodeMapFactory.h	/^			ContentType_Xml, \/\/\/< XML camera description file text$/;"	e	enum:Spinnaker::GenApi::__anon2
ContentType_ZippedXml	include/SpinGenApi/NodeMapFactory.h	/^			ContentType_ZippedXml \/\/\/< Zipped XML camera description file text$/;"	e	enum:Spinnaker::GenApi::__anon2
Counter	include/SpinGenApi/Counter.h	/^			Counter() : m_value(0)$/;"	f	class:Spinnaker::GenApi::Counter
Counter	include/SpinGenApi/Counter.h	/^		class Counter$/;"	c	namespace:Spinnaker::GenApi
CounterDuration	include/Camera.h	/^		GenApi::IInteger &CounterDuration;$/;"	m	class:Spinnaker::Camera
CounterDuration	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode CounterDuration;$/;"	m	struct:_quickSpin
CounterEventActivation	include/Camera.h	/^		GenApi::IEnumerationT<CounterEventActivationEnums> &CounterEventActivation;$/;"	m	class:Spinnaker::Camera
CounterEventActivation	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode CounterEventActivation;$/;"	m	struct:_quickSpin
CounterEventActivationEnums	include/CameraDefs.h	/^	enum CounterEventActivationEnums	\/*!< Selects the Activation mode Event Source signal.*\/$/;"	g	namespace:Spinnaker
CounterEventActivation_AnyEdge	include/CameraDefs.h	/^		CounterEventActivation_AnyEdge,	\/*!< Counts on the Falling or rising Edge of the selected signal.*\/$/;"	e	enum:Spinnaker::CounterEventActivationEnums
CounterEventActivation_AnyEdge	include/spinc/CameraDefsC.h	/^	CounterEventActivation_AnyEdge,	\/*!< Counts on the Falling or rising Edge of the selected signal.*\/$/;"	e	enum:_spinCounterEventActivationEnums
CounterEventActivation_FallingEdge	include/CameraDefs.h	/^		CounterEventActivation_FallingEdge,	\/*!< Counts on the Falling Edge of the signal.*\/$/;"	e	enum:Spinnaker::CounterEventActivationEnums
CounterEventActivation_FallingEdge	include/spinc/CameraDefsC.h	/^	CounterEventActivation_FallingEdge,	\/*!< Counts on the Falling Edge of the signal.*\/$/;"	e	enum:_spinCounterEventActivationEnums
CounterEventActivation_RisingEdge	include/CameraDefs.h	/^		CounterEventActivation_RisingEdge,	\/*!< Counts on the Rising Edge of the signal.*\/$/;"	e	enum:Spinnaker::CounterEventActivationEnums
CounterEventActivation_RisingEdge	include/spinc/CameraDefsC.h	/^	CounterEventActivation_RisingEdge,	\/*!< Counts on the Rising Edge of the signal.*\/$/;"	e	enum:_spinCounterEventActivationEnums
CounterEventSource	include/Camera.h	/^		GenApi::IEnumerationT<CounterEventSourceEnums> &CounterEventSource;$/;"	m	class:Spinnaker::Camera
CounterEventSource	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode CounterEventSource;$/;"	m	struct:_quickSpin
CounterEventSourceEnums	include/CameraDefs.h	/^	enum CounterEventSourceEnums	\/*!< Select the events that will be the source to increment the Counter.*\/$/;"	g	namespace:Spinnaker
CounterEventSource_AcquisitionEnd	include/CameraDefs.h	/^		CounterEventSource_AcquisitionEnd,	\/*!< Counts the number of Acquisition End.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_AcquisitionEnd	include/spinc/CameraDefsC.h	/^	CounterEventSource_AcquisitionEnd,	\/*!< Counts the number of Acquisition End.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_AcquisitionStart	include/CameraDefs.h	/^		CounterEventSource_AcquisitionStart,	\/*!< Counts the number of Acquisition Start.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_AcquisitionStart	include/spinc/CameraDefsC.h	/^	CounterEventSource_AcquisitionStart,	\/*!< Counts the number of Acquisition Start.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_AcquisitionTrigger	include/CameraDefs.h	/^		CounterEventSource_AcquisitionTrigger,	\/*!< Counts the number of Acquisition Trigger.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_AcquisitionTrigger	include/spinc/CameraDefsC.h	/^	CounterEventSource_AcquisitionTrigger,	\/*!< Counts the number of Acquisition Trigger.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_Action0	include/CameraDefs.h	/^		CounterEventSource_Action0,	\/*!< Counts the number of assertions of the chosen action signal.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_Action0	include/spinc/CameraDefsC.h	/^	CounterEventSource_Action0,	\/*!< Counts the number of assertions of the chosen action signal.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_Action1	include/CameraDefs.h	/^		CounterEventSource_Action1,	\/*!< Counts the number of assertions of the chosen action signal.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_Action1	include/spinc/CameraDefsC.h	/^	CounterEventSource_Action1,	\/*!< Counts the number of assertions of the chosen action signal.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_Action2	include/CameraDefs.h	/^		CounterEventSource_Action2,	\/*!< Counts the number of assertions of the chosen action signal.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_Action2	include/spinc/CameraDefsC.h	/^	CounterEventSource_Action2,	\/*!< Counts the number of assertions of the chosen action signal.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_Counter0End	include/CameraDefs.h	/^		CounterEventSource_Counter0End,	\/*!< Counts the number of Counter End.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_Counter0End	include/spinc/CameraDefsC.h	/^	CounterEventSource_Counter0End,	\/*!< Counts the number of Counter End.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_Counter0Start	include/CameraDefs.h	/^		CounterEventSource_Counter0Start,	\/*!< Counts the number of Counter Start.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_Counter0Start	include/spinc/CameraDefsC.h	/^	CounterEventSource_Counter0Start,	\/*!< Counts the number of Counter Start.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_Counter1End	include/CameraDefs.h	/^		CounterEventSource_Counter1End,	\/*!< Counts the number of Counter End.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_Counter1End	include/spinc/CameraDefsC.h	/^	CounterEventSource_Counter1End,	\/*!< Counts the number of Counter End.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_Counter1Start	include/CameraDefs.h	/^		CounterEventSource_Counter1Start,	\/*!< Counts the number of Counter Start.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_Counter1Start	include/spinc/CameraDefsC.h	/^	CounterEventSource_Counter1Start,	\/*!< Counts the number of Counter Start.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_Counter2End	include/CameraDefs.h	/^		CounterEventSource_Counter2End,	\/*!< Counts the number of Counter End.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_Counter2End	include/spinc/CameraDefsC.h	/^	CounterEventSource_Counter2End,	\/*!< Counts the number of Counter End.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_Counter2Start	include/CameraDefs.h	/^		CounterEventSource_Counter2Start,	\/*!< Counts the number of Counter Start.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_Counter2Start	include/spinc/CameraDefsC.h	/^	CounterEventSource_Counter2Start,	\/*!< Counts the number of Counter Start.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_Encoder0	include/CameraDefs.h	/^		CounterEventSource_Encoder0,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_Encoder0	include/spinc/CameraDefsC.h	/^	CounterEventSource_Encoder0,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_Encoder1	include/CameraDefs.h	/^		CounterEventSource_Encoder1,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_Encoder1	include/spinc/CameraDefsC.h	/^	CounterEventSource_Encoder1,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_Encoder2	include/CameraDefs.h	/^		CounterEventSource_Encoder2,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_Encoder2	include/spinc/CameraDefsC.h	/^	CounterEventSource_Encoder2,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_ExposureEnd	include/CameraDefs.h	/^		CounterEventSource_ExposureEnd,	\/*!< Counts the number of Exposure End.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_ExposureEnd	include/spinc/CameraDefsC.h	/^	CounterEventSource_ExposureEnd,	\/*!< Counts the number of Exposure End.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_ExposureStart	include/CameraDefs.h	/^		CounterEventSource_ExposureStart,	\/*!< Counts the number of Exposure Start.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_ExposureStart	include/spinc/CameraDefsC.h	/^	CounterEventSource_ExposureStart,	\/*!< Counts the number of Exposure Start.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_FrameBurstEnd	include/CameraDefs.h	/^		CounterEventSource_FrameBurstEnd,	\/*!< Counts the number of Frame Burst End.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_FrameBurstEnd	include/spinc/CameraDefsC.h	/^	CounterEventSource_FrameBurstEnd,	\/*!< Counts the number of Frame Burst End.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_FrameBurstStart	include/CameraDefs.h	/^		CounterEventSource_FrameBurstStart,	\/*!< Counts the number of Frame Burst Start.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_FrameBurstStart	include/spinc/CameraDefsC.h	/^	CounterEventSource_FrameBurstStart,	\/*!< Counts the number of Frame Burst Start.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_FrameEnd	include/CameraDefs.h	/^		CounterEventSource_FrameEnd,	\/*!< Counts the number of Frame End.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_FrameEnd	include/spinc/CameraDefsC.h	/^	CounterEventSource_FrameEnd,	\/*!< Counts the number of Frame End.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_FrameStart	include/CameraDefs.h	/^		CounterEventSource_FrameStart,	\/*!< Counts the number of Frame Start.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_FrameStart	include/spinc/CameraDefsC.h	/^	CounterEventSource_FrameStart,	\/*!< Counts the number of Frame Start.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_FrameTrigger	include/CameraDefs.h	/^		CounterEventSource_FrameTrigger,	\/*!< Counts the number of Frame Start Trigger.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_FrameTrigger	include/spinc/CameraDefsC.h	/^	CounterEventSource_FrameTrigger,	\/*!< Counts the number of Frame Start Trigger.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_Line0	include/CameraDefs.h	/^		CounterEventSource_Line0,	\/*!< Counts the number of transitions on the chosen I\/O Line.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_Line0	include/spinc/CameraDefsC.h	/^	CounterEventSource_Line0,	\/*!< Counts the number of transitions on the chosen I\/O Line.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_Line1	include/CameraDefs.h	/^		CounterEventSource_Line1,	\/*!< Counts the number of transitions on the chosen I\/O Line.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_Line1	include/spinc/CameraDefsC.h	/^	CounterEventSource_Line1,	\/*!< Counts the number of transitions on the chosen I\/O Line.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_Line2	include/CameraDefs.h	/^		CounterEventSource_Line2,	\/*!< Counts the number of transitions on the chosen I\/O Line.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_Line2	include/spinc/CameraDefsC.h	/^	CounterEventSource_Line2,	\/*!< Counts the number of transitions on the chosen I\/O Line.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_LineEnd	include/CameraDefs.h	/^		CounterEventSource_LineEnd,	\/*!< Counts the number of Line End.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_LineEnd	include/spinc/CameraDefsC.h	/^	CounterEventSource_LineEnd,	\/*!< Counts the number of Line End.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_LineStart	include/CameraDefs.h	/^		CounterEventSource_LineStart,	\/*!< Counts the number of Line Start.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_LineStart	include/spinc/CameraDefsC.h	/^	CounterEventSource_LineStart,	\/*!< Counts the number of Line Start.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_LineTrigger	include/CameraDefs.h	/^		CounterEventSource_LineTrigger,	\/*!< Counts the number of Line Start Trigger.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_LineTrigger	include/spinc/CameraDefsC.h	/^	CounterEventSource_LineTrigger,	\/*!< Counts the number of Line Start Trigger.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_LinkTrigger0	include/CameraDefs.h	/^		CounterEventSource_LinkTrigger0,	\/*!< Counts the number of  Link Trigger.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_LinkTrigger0	include/spinc/CameraDefsC.h	/^	CounterEventSource_LinkTrigger0,	\/*!< Counts the number of  Link Trigger.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_LinkTrigger1	include/CameraDefs.h	/^		CounterEventSource_LinkTrigger1,	\/*!< Counts the number of  Link Trigger.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_LinkTrigger1	include/spinc/CameraDefsC.h	/^	CounterEventSource_LinkTrigger1,	\/*!< Counts the number of  Link Trigger.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_LinkTrigger2	include/CameraDefs.h	/^		CounterEventSource_LinkTrigger2,	\/*!< Counts the number of  Link Trigger.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_LinkTrigger2	include/spinc/CameraDefsC.h	/^	CounterEventSource_LinkTrigger2,	\/*!< Counts the number of  Link Trigger.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_Off	include/CameraDefs.h	/^		CounterEventSource_Off,	\/*!< Counter is stopped.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_Off	include/spinc/CameraDefsC.h	/^	CounterEventSource_Off,	\/*!< Counter is stopped.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_SoftwareSignal0	include/CameraDefs.h	/^		CounterEventSource_SoftwareSignal0,	\/*!< Counts the number of Software Signal.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_SoftwareSignal0	include/spinc/CameraDefsC.h	/^	CounterEventSource_SoftwareSignal0,	\/*!< Counts the number of Software Signal.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_SoftwareSignal1	include/CameraDefs.h	/^		CounterEventSource_SoftwareSignal1,	\/*!< Counts the number of Software Signal.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_SoftwareSignal1	include/spinc/CameraDefsC.h	/^	CounterEventSource_SoftwareSignal1,	\/*!< Counts the number of Software Signal.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_SoftwareSignal2	include/CameraDefs.h	/^		CounterEventSource_SoftwareSignal2,	\/*!< Counts the number of Software Signal.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_SoftwareSignal2	include/spinc/CameraDefsC.h	/^	CounterEventSource_SoftwareSignal2,	\/*!< Counts the number of Software Signal.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_Timer0End	include/CameraDefs.h	/^		CounterEventSource_Timer0End,	\/*!< Counts the number of Timer End pulses generated.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_Timer0End	include/spinc/CameraDefsC.h	/^	CounterEventSource_Timer0End,	\/*!< Counts the number of Timer End pulses generated.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_Timer0Start	include/CameraDefs.h	/^		CounterEventSource_Timer0Start,	\/*!< Counts the number of Timer Start pulses generated.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_Timer0Start	include/spinc/CameraDefsC.h	/^	CounterEventSource_Timer0Start,	\/*!< Counts the number of Timer Start pulses generated.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_Timer1End	include/CameraDefs.h	/^		CounterEventSource_Timer1End,	\/*!< Counts the number of Timer End pulses generated.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_Timer1End	include/spinc/CameraDefsC.h	/^	CounterEventSource_Timer1End,	\/*!< Counts the number of Timer End pulses generated.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_Timer1Start	include/CameraDefs.h	/^		CounterEventSource_Timer1Start,	\/*!< Counts the number of Timer Start pulses generated.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_Timer1Start	include/spinc/CameraDefsC.h	/^	CounterEventSource_Timer1Start,	\/*!< Counts the number of Timer Start pulses generated.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_Timer2End	include/CameraDefs.h	/^		CounterEventSource_Timer2End,	\/*!< Counts the number of Timer End pulses generated.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_Timer2End	include/spinc/CameraDefsC.h	/^	CounterEventSource_Timer2End,	\/*!< Counts the number of Timer End pulses generated.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_Timer2Start	include/CameraDefs.h	/^		CounterEventSource_Timer2Start,	\/*!< Counts the number of Timer Start pulses generated.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_Timer2Start	include/spinc/CameraDefsC.h	/^	CounterEventSource_Timer2Start,	\/*!< Counts the number of Timer Start pulses generated.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterEventSource_TimestampTick	include/CameraDefs.h	/^		CounterEventSource_TimestampTick,	\/*!< Counts the number of clock ticks of the Timestamp clock. Can be used to create a programmable timer.*\/$/;"	e	enum:Spinnaker::CounterEventSourceEnums
CounterEventSource_TimestampTick	include/spinc/CameraDefsC.h	/^	CounterEventSource_TimestampTick,	\/*!< Counts the number of clock ticks of the Timestamp clock. Can be used to create a programmable timer.*\/$/;"	e	enum:_spinCounterEventSourceEnums
CounterReset	include/Camera.h	/^		GenApi::ICommand &CounterReset;$/;"	m	class:Spinnaker::Camera
CounterReset	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode CounterReset;$/;"	m	struct:_quickSpin
CounterResetActivation	include/Camera.h	/^		GenApi::IEnumerationT<CounterResetActivationEnums> &CounterResetActivation;$/;"	m	class:Spinnaker::Camera
CounterResetActivation	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode CounterResetActivation;$/;"	m	struct:_quickSpin
CounterResetActivationEnums	include/CameraDefs.h	/^	enum CounterResetActivationEnums	\/*!< Selects the Activation mode of the Counter Reset Source signal.*\/$/;"	g	namespace:Spinnaker
CounterResetActivation_AnyEdge	include/CameraDefs.h	/^		CounterResetActivation_AnyEdge,	\/*!< Resets the counter on the Falling or rising Edge of the selected signal.*\/$/;"	e	enum:Spinnaker::CounterResetActivationEnums
CounterResetActivation_AnyEdge	include/spinc/CameraDefsC.h	/^	CounterResetActivation_AnyEdge,	\/*!< Resets the counter on the Falling or rising Edge of the selected signal.*\/$/;"	e	enum:_spinCounterResetActivationEnums
CounterResetActivation_FallingEdge	include/CameraDefs.h	/^		CounterResetActivation_FallingEdge,	\/*!< Resets the counter on the Falling Edge of the signal.*\/$/;"	e	enum:Spinnaker::CounterResetActivationEnums
CounterResetActivation_FallingEdge	include/spinc/CameraDefsC.h	/^	CounterResetActivation_FallingEdge,	\/*!< Resets the counter on the Falling Edge of the signal.*\/$/;"	e	enum:_spinCounterResetActivationEnums
CounterResetActivation_LevelHigh	include/CameraDefs.h	/^		CounterResetActivation_LevelHigh,	\/*!< Resets the counter as long as the selected signal level is High.*\/$/;"	e	enum:Spinnaker::CounterResetActivationEnums
CounterResetActivation_LevelHigh	include/spinc/CameraDefsC.h	/^	CounterResetActivation_LevelHigh,	\/*!< Resets the counter as long as the selected signal level is High.*\/$/;"	e	enum:_spinCounterResetActivationEnums
CounterResetActivation_LevelLow	include/CameraDefs.h	/^		CounterResetActivation_LevelLow,	\/*!< Resets the counter as long as the selected signal level is Low.*\/$/;"	e	enum:Spinnaker::CounterResetActivationEnums
CounterResetActivation_LevelLow	include/spinc/CameraDefsC.h	/^	CounterResetActivation_LevelLow,	\/*!< Resets the counter as long as the selected signal level is Low.*\/$/;"	e	enum:_spinCounterResetActivationEnums
CounterResetActivation_RisingEdge	include/CameraDefs.h	/^		CounterResetActivation_RisingEdge,	\/*!< Resets the counter on the Rising Edge of the signal.*\/$/;"	e	enum:Spinnaker::CounterResetActivationEnums
CounterResetActivation_RisingEdge	include/spinc/CameraDefsC.h	/^	CounterResetActivation_RisingEdge,	\/*!< Resets the counter on the Rising Edge of the signal.*\/$/;"	e	enum:_spinCounterResetActivationEnums
CounterResetSource	include/Camera.h	/^		GenApi::IEnumerationT<CounterResetSourceEnums> &CounterResetSource;$/;"	m	class:Spinnaker::Camera
CounterResetSource	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode CounterResetSource;$/;"	m	struct:_quickSpin
CounterResetSourceEnums	include/CameraDefs.h	/^	enum CounterResetSourceEnums	\/*!< Selects the signals that will be the source to reset the Counter.*\/$/;"	g	namespace:Spinnaker
CounterResetSource_AcquisitionEnd	include/CameraDefs.h	/^		CounterResetSource_AcquisitionEnd,	\/*!< Resets with the reception of the Acquisition End.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_AcquisitionEnd	include/spinc/CameraDefsC.h	/^	CounterResetSource_AcquisitionEnd,	\/*!< Resets with the reception of the Acquisition End.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_AcquisitionStart	include/CameraDefs.h	/^		CounterResetSource_AcquisitionStart,	\/*!< Resets with the reception of the Acquisition Start.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_AcquisitionStart	include/spinc/CameraDefsC.h	/^	CounterResetSource_AcquisitionStart,	\/*!< Resets with the reception of the Acquisition Start.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_AcquisitionTrigger	include/CameraDefs.h	/^		CounterResetSource_AcquisitionTrigger,	\/*!< Resets with the reception of the Acquisition Trigger.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_AcquisitionTrigger	include/spinc/CameraDefsC.h	/^	CounterResetSource_AcquisitionTrigger,	\/*!< Resets with the reception of the Acquisition Trigger.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_Action0	include/CameraDefs.h	/^		CounterResetSource_Action0,	\/*!< Resets on assertions of the chosen action signal (Broadcasted signal on the transport layer).*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_Action0	include/spinc/CameraDefsC.h	/^	CounterResetSource_Action0,	\/*!< Resets on assertions of the chosen action signal (Broadcasted signal on the transport layer).*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_Action1	include/CameraDefs.h	/^		CounterResetSource_Action1,	\/*!< Resets on assertions of the chosen action signal (Broadcasted signal on the transport layer).*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_Action1	include/spinc/CameraDefsC.h	/^	CounterResetSource_Action1,	\/*!< Resets on assertions of the chosen action signal (Broadcasted signal on the transport layer).*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_Action2	include/CameraDefs.h	/^		CounterResetSource_Action2,	\/*!< Resets on assertions of the chosen action signal (Broadcasted signal on the transport layer).*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_Action2	include/spinc/CameraDefsC.h	/^	CounterResetSource_Action2,	\/*!< Resets on assertions of the chosen action signal (Broadcasted signal on the transport layer).*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_Counter0End	include/CameraDefs.h	/^		CounterResetSource_Counter0End,	\/*!< Resets with the reception of the Counter End.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_Counter0End	include/spinc/CameraDefsC.h	/^	CounterResetSource_Counter0End,	\/*!< Resets with the reception of the Counter End.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_Counter0Start	include/CameraDefs.h	/^		CounterResetSource_Counter0Start,	\/*!< Resets with the reception of the Counter Start.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_Counter0Start	include/spinc/CameraDefsC.h	/^	CounterResetSource_Counter0Start,	\/*!< Resets with the reception of the Counter Start.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_Counter1End	include/CameraDefs.h	/^		CounterResetSource_Counter1End,	\/*!< Resets with the reception of the Counter End.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_Counter1End	include/spinc/CameraDefsC.h	/^	CounterResetSource_Counter1End,	\/*!< Resets with the reception of the Counter End.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_Counter1Start	include/CameraDefs.h	/^		CounterResetSource_Counter1Start,	\/*!< Resets with the reception of the Counter Start.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_Counter1Start	include/spinc/CameraDefsC.h	/^	CounterResetSource_Counter1Start,	\/*!< Resets with the reception of the Counter Start.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_Counter2End	include/CameraDefs.h	/^		CounterResetSource_Counter2End,	\/*!< Resets with the reception of the Counter End.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_Counter2End	include/spinc/CameraDefsC.h	/^	CounterResetSource_Counter2End,	\/*!< Resets with the reception of the Counter End.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_Counter2Start	include/CameraDefs.h	/^		CounterResetSource_Counter2Start,	\/*!< Resets with the reception of the Counter Start.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_Counter2Start	include/spinc/CameraDefsC.h	/^	CounterResetSource_Counter2Start,	\/*!< Resets with the reception of the Counter Start.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_CounterTrigger	include/CameraDefs.h	/^		CounterResetSource_CounterTrigger,	\/*!< Resets with the reception of a trigger on the CounterTriggerSource.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_CounterTrigger	include/spinc/CameraDefsC.h	/^	CounterResetSource_CounterTrigger,	\/*!< Resets with the reception of a trigger on the CounterTriggerSource.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_Encoder0	include/CameraDefs.h	/^		CounterResetSource_Encoder0,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_Encoder0	include/spinc/CameraDefsC.h	/^	CounterResetSource_Encoder0,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_Encoder1	include/CameraDefs.h	/^		CounterResetSource_Encoder1,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_Encoder1	include/spinc/CameraDefsC.h	/^	CounterResetSource_Encoder1,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_Encoder2	include/CameraDefs.h	/^		CounterResetSource_Encoder2,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_Encoder2	include/spinc/CameraDefsC.h	/^	CounterResetSource_Encoder2,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_ExposureEnd	include/CameraDefs.h	/^		CounterResetSource_ExposureEnd,	\/*!< Resets with the reception of the Exposure End.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_ExposureEnd	include/spinc/CameraDefsC.h	/^	CounterResetSource_ExposureEnd,	\/*!< Resets with the reception of the Exposure End.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_ExposureStart	include/CameraDefs.h	/^		CounterResetSource_ExposureStart,	\/*!< Resets with the reception of the Exposure Start.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_ExposureStart	include/spinc/CameraDefsC.h	/^	CounterResetSource_ExposureStart,	\/*!< Resets with the reception of the Exposure Start.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_FrameEnd	include/CameraDefs.h	/^		CounterResetSource_FrameEnd,	\/*!< Resets with the reception of the Frame End.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_FrameEnd	include/spinc/CameraDefsC.h	/^	CounterResetSource_FrameEnd,	\/*!< Resets with the reception of the Frame End.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_FrameStart	include/CameraDefs.h	/^		CounterResetSource_FrameStart,	\/*!< Resets with the reception of the Frame Start.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_FrameStart	include/spinc/CameraDefsC.h	/^	CounterResetSource_FrameStart,	\/*!< Resets with the reception of the Frame Start.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_FrameTrigger	include/CameraDefs.h	/^		CounterResetSource_FrameTrigger,	\/*!< Resets with the reception of the Frame Start Trigger.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_FrameTrigger	include/spinc/CameraDefsC.h	/^	CounterResetSource_FrameTrigger,	\/*!< Resets with the reception of the Frame Start Trigger.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_Line0	include/CameraDefs.h	/^		CounterResetSource_Line0,	\/*!< Resets by the chosen I\/O Line.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_Line0	include/spinc/CameraDefsC.h	/^	CounterResetSource_Line0,	\/*!< Resets by the chosen I\/O Line.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_Line1	include/CameraDefs.h	/^		CounterResetSource_Line1,	\/*!< Resets by the chosen I\/O Line.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_Line1	include/spinc/CameraDefsC.h	/^	CounterResetSource_Line1,	\/*!< Resets by the chosen I\/O Line.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_Line2	include/CameraDefs.h	/^		CounterResetSource_Line2,	\/*!< Resets by the chosen I\/O Line.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_Line2	include/spinc/CameraDefsC.h	/^	CounterResetSource_Line2,	\/*!< Resets by the chosen I\/O Line.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_LineEnd	include/CameraDefs.h	/^		CounterResetSource_LineEnd,	\/*!< Resets with the reception of the Line End.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_LineEnd	include/spinc/CameraDefsC.h	/^	CounterResetSource_LineEnd,	\/*!< Resets with the reception of the Line End.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_LineStart	include/CameraDefs.h	/^		CounterResetSource_LineStart,	\/*!< Resets with the reception of the Line Start.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_LineStart	include/spinc/CameraDefsC.h	/^	CounterResetSource_LineStart,	\/*!< Resets with the reception of the Line Start.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_LineTrigger	include/CameraDefs.h	/^		CounterResetSource_LineTrigger,	\/*!< Resets with the reception of the Line Start Trigger.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_LineTrigger	include/spinc/CameraDefsC.h	/^	CounterResetSource_LineTrigger,	\/*!< Resets with the reception of the Line Start Trigger.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_LinkTrigger0	include/CameraDefs.h	/^		CounterResetSource_LinkTrigger0,	\/*!< Resets on the reception of the chosen Link Trigger (received from the transport layer).*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_LinkTrigger0	include/spinc/CameraDefsC.h	/^	CounterResetSource_LinkTrigger0,	\/*!< Resets on the reception of the chosen Link Trigger (received from the transport layer).*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_LinkTrigger1	include/CameraDefs.h	/^		CounterResetSource_LinkTrigger1,	\/*!< Resets on the reception of the chosen Link Trigger (received from the transport layer).*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_LinkTrigger1	include/spinc/CameraDefsC.h	/^	CounterResetSource_LinkTrigger1,	\/*!< Resets on the reception of the chosen Link Trigger (received from the transport layer).*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_LinkTrigger2	include/CameraDefs.h	/^		CounterResetSource_LinkTrigger2,	\/*!< Resets on the reception of the chosen Link Trigger (received from the transport layer).*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_LinkTrigger2	include/spinc/CameraDefsC.h	/^	CounterResetSource_LinkTrigger2,	\/*!< Resets on the reception of the chosen Link Trigger (received from the transport layer).*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_Off	include/CameraDefs.h	/^		CounterResetSource_Off,	\/*!< Disable the Counter Reset trigger.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_Off	include/spinc/CameraDefsC.h	/^	CounterResetSource_Off,	\/*!< Disable the Counter Reset trigger.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_SoftwareSignal0	include/CameraDefs.h	/^		CounterResetSource_SoftwareSignal0,	\/*!< Resets on the reception of the Software Signal.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_SoftwareSignal0	include/spinc/CameraDefsC.h	/^	CounterResetSource_SoftwareSignal0,	\/*!< Resets on the reception of the Software Signal.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_SoftwareSignal1	include/CameraDefs.h	/^		CounterResetSource_SoftwareSignal1,	\/*!< Resets on the reception of the Software Signal.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_SoftwareSignal1	include/spinc/CameraDefsC.h	/^	CounterResetSource_SoftwareSignal1,	\/*!< Resets on the reception of the Software Signal.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_SoftwareSignal2	include/CameraDefs.h	/^		CounterResetSource_SoftwareSignal2,	\/*!< Resets on the reception of the Software Signal.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_SoftwareSignal2	include/spinc/CameraDefsC.h	/^	CounterResetSource_SoftwareSignal2,	\/*!< Resets on the reception of the Software Signal.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_Timer0End	include/CameraDefs.h	/^		CounterResetSource_Timer0End,	\/*!< Resets with the reception of the Timer End.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_Timer0End	include/spinc/CameraDefsC.h	/^	CounterResetSource_Timer0End,	\/*!< Resets with the reception of the Timer End.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_Timer0Start	include/CameraDefs.h	/^		CounterResetSource_Timer0Start,	\/*!< Resets with the reception of the Timer Start.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_Timer0Start	include/spinc/CameraDefsC.h	/^	CounterResetSource_Timer0Start,	\/*!< Resets with the reception of the Timer Start.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_Timer1End	include/CameraDefs.h	/^		CounterResetSource_Timer1End,	\/*!< Resets with the reception of the Timer End.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_Timer1End	include/spinc/CameraDefsC.h	/^	CounterResetSource_Timer1End,	\/*!< Resets with the reception of the Timer End.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_Timer1Start	include/CameraDefs.h	/^		CounterResetSource_Timer1Start,	\/*!< Resets with the reception of the Timer Start.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_Timer1Start	include/spinc/CameraDefsC.h	/^	CounterResetSource_Timer1Start,	\/*!< Resets with the reception of the Timer Start.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_Timer2End	include/CameraDefs.h	/^		CounterResetSource_Timer2End,	\/*!< Resets with the reception of the Timer End.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_Timer2End	include/spinc/CameraDefsC.h	/^	CounterResetSource_Timer2End,	\/*!< Resets with the reception of the Timer End.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_Timer2Start	include/CameraDefs.h	/^		CounterResetSource_Timer2Start,	\/*!< Resets with the reception of the Timer Start.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_Timer2Start	include/spinc/CameraDefsC.h	/^	CounterResetSource_Timer2Start,	\/*!< Resets with the reception of the Timer Start.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_UserOutput0	include/CameraDefs.h	/^		CounterResetSource_UserOutput0,	\/*!< Resets by the chosen User Output bit.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_UserOutput0	include/spinc/CameraDefsC.h	/^	CounterResetSource_UserOutput0,	\/*!< Resets by the chosen User Output bit.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_UserOutput1	include/CameraDefs.h	/^		CounterResetSource_UserOutput1,	\/*!< Resets by the chosen User Output bit.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_UserOutput1	include/spinc/CameraDefsC.h	/^	CounterResetSource_UserOutput1,	\/*!< Resets by the chosen User Output bit.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterResetSource_UserOutput2	include/CameraDefs.h	/^		CounterResetSource_UserOutput2,	\/*!< Resets by the chosen User Output bit.*\/$/;"	e	enum:Spinnaker::CounterResetSourceEnums
CounterResetSource_UserOutput2	include/spinc/CameraDefsC.h	/^	CounterResetSource_UserOutput2,	\/*!< Resets by the chosen User Output bit.*\/$/;"	e	enum:_spinCounterResetSourceEnums
CounterSelector	include/Camera.h	/^		GenApi::IEnumerationT<CounterSelectorEnums> &CounterSelector;$/;"	m	class:Spinnaker::Camera
CounterSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode CounterSelector;$/;"	m	struct:_quickSpin
CounterSelectorEnums	include/CameraDefs.h	/^	enum CounterSelectorEnums	\/*!< Selects which Counter to configure.*\/$/;"	g	namespace:Spinnaker
CounterSelector_Counter0	include/CameraDefs.h	/^		CounterSelector_Counter0,	\/*!< Selects the counter 0.*\/$/;"	e	enum:Spinnaker::CounterSelectorEnums
CounterSelector_Counter0	include/spinc/CameraDefsC.h	/^	CounterSelector_Counter0,	\/*!< Selects the counter 0.*\/$/;"	e	enum:_spinCounterSelectorEnums
CounterSelector_Counter1	include/CameraDefs.h	/^		CounterSelector_Counter1,	\/*!< Selects the counter 1.*\/$/;"	e	enum:Spinnaker::CounterSelectorEnums
CounterSelector_Counter1	include/spinc/CameraDefsC.h	/^	CounterSelector_Counter1,	\/*!< Selects the counter 1.*\/$/;"	e	enum:_spinCounterSelectorEnums
CounterSelector_Counter2	include/CameraDefs.h	/^		CounterSelector_Counter2,	\/*!< Selects the counter 2.*\/$/;"	e	enum:Spinnaker::CounterSelectorEnums
CounterSelector_Counter2	include/spinc/CameraDefsC.h	/^	CounterSelector_Counter2,	\/*!< Selects the counter 2.*\/$/;"	e	enum:_spinCounterSelectorEnums
CounterStatus	include/Camera.h	/^		GenApi::IEnumerationT<CounterStatusEnums> &CounterStatus;$/;"	m	class:Spinnaker::Camera
CounterStatus	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode CounterStatus;$/;"	m	struct:_quickSpin
CounterStatusEnums	include/CameraDefs.h	/^	enum CounterStatusEnums	\/*!< Returns the current status of the Counter.*\/$/;"	g	namespace:Spinnaker
CounterStatus_CounterActive	include/CameraDefs.h	/^		CounterStatus_CounterActive,	\/*!< The counter is counting for the specified duration.*\/$/;"	e	enum:Spinnaker::CounterStatusEnums
CounterStatus_CounterActive	include/spinc/CameraDefsC.h	/^	CounterStatus_CounterActive,	\/*!< The counter is counting for the specified duration.*\/$/;"	e	enum:_spinCounterStatusEnums
CounterStatus_CounterCompleted	include/CameraDefs.h	/^		CounterStatus_CounterCompleted,	\/*!< The counter reached the CounterDuration count.*\/$/;"	e	enum:Spinnaker::CounterStatusEnums
CounterStatus_CounterCompleted	include/spinc/CameraDefsC.h	/^	CounterStatus_CounterCompleted,	\/*!< The counter reached the CounterDuration count.*\/$/;"	e	enum:_spinCounterStatusEnums
CounterStatus_CounterIdle	include/CameraDefs.h	/^		CounterStatus_CounterIdle,	\/*!< The counter is idle.*\/$/;"	e	enum:Spinnaker::CounterStatusEnums
CounterStatus_CounterIdle	include/spinc/CameraDefsC.h	/^	CounterStatus_CounterIdle,	\/*!< The counter is idle.*\/$/;"	e	enum:_spinCounterStatusEnums
CounterStatus_CounterOverflow	include/CameraDefs.h	/^		CounterStatus_CounterOverflow,	\/*!< The counter reached its maximum possible count.*\/$/;"	e	enum:Spinnaker::CounterStatusEnums
CounterStatus_CounterOverflow	include/spinc/CameraDefsC.h	/^	CounterStatus_CounterOverflow,	\/*!< The counter reached its maximum possible count.*\/$/;"	e	enum:_spinCounterStatusEnums
CounterStatus_CounterTriggerWait	include/CameraDefs.h	/^		CounterStatus_CounterTriggerWait,	\/*!< The counter is waiting for a start trigger.*\/$/;"	e	enum:Spinnaker::CounterStatusEnums
CounterStatus_CounterTriggerWait	include/spinc/CameraDefsC.h	/^	CounterStatus_CounterTriggerWait,	\/*!< The counter is waiting for a start trigger.*\/$/;"	e	enum:_spinCounterStatusEnums
CounterTriggerActivation	include/Camera.h	/^		GenApi::IEnumerationT<CounterTriggerActivationEnums> &CounterTriggerActivation;$/;"	m	class:Spinnaker::Camera
CounterTriggerActivation	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode CounterTriggerActivation;$/;"	m	struct:_quickSpin
CounterTriggerActivationEnums	include/CameraDefs.h	/^	enum CounterTriggerActivationEnums	\/*!< Selects the activation mode of the trigger to start the Counter.*\/$/;"	g	namespace:Spinnaker
CounterTriggerActivation_AnyEdge	include/CameraDefs.h	/^		CounterTriggerActivation_AnyEdge,	\/*!< Starts counting on the Falling or rising Edge of the selected trigger signal.*\/$/;"	e	enum:Spinnaker::CounterTriggerActivationEnums
CounterTriggerActivation_AnyEdge	include/spinc/CameraDefsC.h	/^	CounterTriggerActivation_AnyEdge,	\/*!< Starts counting on the Falling or rising Edge of the selected trigger signal.*\/$/;"	e	enum:_spinCounterTriggerActivationEnums
CounterTriggerActivation_FallingEdge	include/CameraDefs.h	/^		CounterTriggerActivation_FallingEdge,	\/*!< Starts counting on the Falling Edge of the selected trigger signal.*\/$/;"	e	enum:Spinnaker::CounterTriggerActivationEnums
CounterTriggerActivation_FallingEdge	include/spinc/CameraDefsC.h	/^	CounterTriggerActivation_FallingEdge,	\/*!< Starts counting on the Falling Edge of the selected trigger signal.*\/$/;"	e	enum:_spinCounterTriggerActivationEnums
CounterTriggerActivation_LevelHigh	include/CameraDefs.h	/^		CounterTriggerActivation_LevelHigh,	\/*!< Counts as long as the selected trigger signal level is High.*\/$/;"	e	enum:Spinnaker::CounterTriggerActivationEnums
CounterTriggerActivation_LevelHigh	include/spinc/CameraDefsC.h	/^	CounterTriggerActivation_LevelHigh,	\/*!< Counts as long as the selected trigger signal level is High.*\/$/;"	e	enum:_spinCounterTriggerActivationEnums
CounterTriggerActivation_LevelLow	include/CameraDefs.h	/^		CounterTriggerActivation_LevelLow,	\/*!< Counts as long as the selected trigger signal level is Low.*\/$/;"	e	enum:Spinnaker::CounterTriggerActivationEnums
CounterTriggerActivation_LevelLow	include/spinc/CameraDefsC.h	/^	CounterTriggerActivation_LevelLow,	\/*!< Counts as long as the selected trigger signal level is Low.*\/$/;"	e	enum:_spinCounterTriggerActivationEnums
CounterTriggerActivation_RisingEdge	include/CameraDefs.h	/^		CounterTriggerActivation_RisingEdge,	\/*!< Starts counting on the Rising Edge of the selected trigger signal.*\/$/;"	e	enum:Spinnaker::CounterTriggerActivationEnums
CounterTriggerActivation_RisingEdge	include/spinc/CameraDefsC.h	/^	CounterTriggerActivation_RisingEdge,	\/*!< Starts counting on the Rising Edge of the selected trigger signal.*\/$/;"	e	enum:_spinCounterTriggerActivationEnums
CounterTriggerSource	include/Camera.h	/^		GenApi::IEnumerationT<CounterTriggerSourceEnums> &CounterTriggerSource;$/;"	m	class:Spinnaker::Camera
CounterTriggerSource	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode CounterTriggerSource;$/;"	m	struct:_quickSpin
CounterTriggerSourceEnums	include/CameraDefs.h	/^	enum CounterTriggerSourceEnums	\/*!< Selects the source to start the Counter.*\/$/;"	g	namespace:Spinnaker
CounterTriggerSource_AcquisitionEnd	include/CameraDefs.h	/^		CounterTriggerSource_AcquisitionEnd,	\/*!< Starts with the reception of the Acquisition End.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_AcquisitionEnd	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_AcquisitionEnd,	\/*!< Starts with the reception of the Acquisition End.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_AcquisitionStart	include/CameraDefs.h	/^		CounterTriggerSource_AcquisitionStart,	\/*!< Starts with the reception of the Acquisition Start.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_AcquisitionStart	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_AcquisitionStart,	\/*!< Starts with the reception of the Acquisition Start.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_AcquisitionTrigger	include/CameraDefs.h	/^		CounterTriggerSource_AcquisitionTrigger,	\/*!< Starts with the reception of the Acquisition Trigger.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_AcquisitionTrigger	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_AcquisitionTrigger,	\/*!< Starts with the reception of the Acquisition Trigger.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_Action0	include/CameraDefs.h	/^		CounterTriggerSource_Action0,	\/*!< Starts with the assertion of the chosen action signal.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_Action0	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_Action0,	\/*!< Starts with the assertion of the chosen action signal.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_Action1	include/CameraDefs.h	/^		CounterTriggerSource_Action1,	\/*!< Starts with the assertion of the chosen action signal.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_Action1	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_Action1,	\/*!< Starts with the assertion of the chosen action signal.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_Action2	include/CameraDefs.h	/^		CounterTriggerSource_Action2,	\/*!< Starts with the assertion of the chosen action signal.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_Action2	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_Action2,	\/*!< Starts with the assertion of the chosen action signal.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_Counter0End	include/CameraDefs.h	/^		CounterTriggerSource_Counter0End,	\/*!< Starts with the reception of the Counter End.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_Counter0End	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_Counter0End,	\/*!< Starts with the reception of the Counter End.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_Counter0Start	include/CameraDefs.h	/^		CounterTriggerSource_Counter0Start,	\/*!< Starts with the reception of the Counter Start.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_Counter0Start	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_Counter0Start,	\/*!< Starts with the reception of the Counter Start.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_Counter1End	include/CameraDefs.h	/^		CounterTriggerSource_Counter1End,	\/*!< Starts with the reception of the Counter End.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_Counter1End	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_Counter1End,	\/*!< Starts with the reception of the Counter End.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_Counter1Start	include/CameraDefs.h	/^		CounterTriggerSource_Counter1Start,	\/*!< Starts with the reception of the Counter Start.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_Counter1Start	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_Counter1Start,	\/*!< Starts with the reception of the Counter Start.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_Counter2End	include/CameraDefs.h	/^		CounterTriggerSource_Counter2End,	\/*!< Starts with the reception of the Counter End.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_Counter2End	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_Counter2End,	\/*!< Starts with the reception of the Counter End.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_Counter2Start	include/CameraDefs.h	/^		CounterTriggerSource_Counter2Start,	\/*!< Starts with the reception of the Counter Start.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_Counter2Start	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_Counter2Start,	\/*!< Starts with the reception of the Counter Start.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_Encoder0	include/CameraDefs.h	/^		CounterTriggerSource_Encoder0,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_Encoder0	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_Encoder0,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_Encoder1	include/CameraDefs.h	/^		CounterTriggerSource_Encoder1,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_Encoder1	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_Encoder1,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_Encoder2	include/CameraDefs.h	/^		CounterTriggerSource_Encoder2,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_Encoder2	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_Encoder2,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_ExposureEnd	include/CameraDefs.h	/^		CounterTriggerSource_ExposureEnd,	\/*!< Starts with the reception of the Exposure End.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_ExposureEnd	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_ExposureEnd,	\/*!< Starts with the reception of the Exposure End.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_ExposureStart	include/CameraDefs.h	/^		CounterTriggerSource_ExposureStart,	\/*!< Starts with the reception of the Exposure Start.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_ExposureStart	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_ExposureStart,	\/*!< Starts with the reception of the Exposure Start.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_FrameBurstEnd	include/CameraDefs.h	/^		CounterTriggerSource_FrameBurstEnd,	\/*!< Starts with the reception of the Frame Burst End.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_FrameBurstEnd	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_FrameBurstEnd,	\/*!< Starts with the reception of the Frame Burst End.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_FrameBurstStart	include/CameraDefs.h	/^		CounterTriggerSource_FrameBurstStart,	\/*!< Starts with the reception of the Frame Burst Start.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_FrameBurstStart	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_FrameBurstStart,	\/*!< Starts with the reception of the Frame Burst Start.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_FrameEnd	include/CameraDefs.h	/^		CounterTriggerSource_FrameEnd,	\/*!< Starts with the reception of the Frame End.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_FrameEnd	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_FrameEnd,	\/*!< Starts with the reception of the Frame End.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_FrameStart	include/CameraDefs.h	/^		CounterTriggerSource_FrameStart,	\/*!< Starts with the reception of the Frame Start.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_FrameStart	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_FrameStart,	\/*!< Starts with the reception of the Frame Start.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_FrameTrigger	include/CameraDefs.h	/^		CounterTriggerSource_FrameTrigger,	\/*!< Starts with the reception of the Frame Start Trigger.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_FrameTrigger	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_FrameTrigger,	\/*!< Starts with the reception of the Frame Start Trigger.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_Line0	include/CameraDefs.h	/^		CounterTriggerSource_Line0,	\/*!< Starts when the specified CounterTriggerActivation condition is met on the chosen I\/O Line.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_Line0	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_Line0,	\/*!< Starts when the specified CounterTriggerActivation condition is met on the chosen I\/O Line.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_Line1	include/CameraDefs.h	/^		CounterTriggerSource_Line1,	\/*!< Starts when the specified CounterTriggerActivation condition is met on the chosen I\/O Line.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_Line1	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_Line1,	\/*!< Starts when the specified CounterTriggerActivation condition is met on the chosen I\/O Line.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_Line2	include/CameraDefs.h	/^		CounterTriggerSource_Line2,	\/*!< Starts when the specified CounterTriggerActivation condition is met on the chosen I\/O Line.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_Line2	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_Line2,	\/*!< Starts when the specified CounterTriggerActivation condition is met on the chosen I\/O Line.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_LineEnd	include/CameraDefs.h	/^		CounterTriggerSource_LineEnd,	\/*!< Starts with the reception of the Line End.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_LineEnd	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_LineEnd,	\/*!< Starts with the reception of the Line End.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_LineStart	include/CameraDefs.h	/^		CounterTriggerSource_LineStart,	\/*!< Starts with the reception of the Line Start.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_LineStart	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_LineStart,	\/*!< Starts with the reception of the Line Start.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_LineTrigger	include/CameraDefs.h	/^		CounterTriggerSource_LineTrigger,	\/*!< Starts with the reception of the Line Start Trigger.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_LineTrigger	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_LineTrigger,	\/*!< Starts with the reception of the Line Start Trigger.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_LinkTrigger0	include/CameraDefs.h	/^		CounterTriggerSource_LinkTrigger0,	\/*!< Starts with the reception of the chosen Link Trigger signal.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_LinkTrigger0	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_LinkTrigger0,	\/*!< Starts with the reception of the chosen Link Trigger signal.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_LinkTrigger1	include/CameraDefs.h	/^		CounterTriggerSource_LinkTrigger1,	\/*!< Starts with the reception of the chosen Link Trigger signal.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_LinkTrigger1	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_LinkTrigger1,	\/*!< Starts with the reception of the chosen Link Trigger signal.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_LinkTrigger2	include/CameraDefs.h	/^		CounterTriggerSource_LinkTrigger2,	\/*!< Starts with the reception of the chosen Link Trigger signal.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_LinkTrigger2	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_LinkTrigger2,	\/*!< Starts with the reception of the chosen Link Trigger signal.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_Off	include/CameraDefs.h	/^		CounterTriggerSource_Off,	\/*!< Disables the Counter trigger.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_Off	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_Off,	\/*!< Disables the Counter trigger.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_SoftwareSignal0	include/CameraDefs.h	/^		CounterTriggerSource_SoftwareSignal0,	\/*!< Starts on the reception of the Software Signal.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_SoftwareSignal0	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_SoftwareSignal0,	\/*!< Starts on the reception of the Software Signal.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_SoftwareSignal1	include/CameraDefs.h	/^		CounterTriggerSource_SoftwareSignal1,	\/*!< Starts on the reception of the Software Signal.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_SoftwareSignal1	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_SoftwareSignal1,	\/*!< Starts on the reception of the Software Signal.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_SoftwareSignal2	include/CameraDefs.h	/^		CounterTriggerSource_SoftwareSignal2,	\/*!< Starts on the reception of the Software Signal.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_SoftwareSignal2	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_SoftwareSignal2,	\/*!< Starts on the reception of the Software Signal.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_Timer0End	include/CameraDefs.h	/^		CounterTriggerSource_Timer0End,	\/*!< Starts with the reception of the Timer End.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_Timer0End	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_Timer0End,	\/*!< Starts with the reception of the Timer End.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_Timer0Start	include/CameraDefs.h	/^		CounterTriggerSource_Timer0Start,	\/*!< Starts with the reception of the Timer Start.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_Timer0Start	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_Timer0Start,	\/*!< Starts with the reception of the Timer Start.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_Timer1End	include/CameraDefs.h	/^		CounterTriggerSource_Timer1End,	\/*!< Starts with the reception of the Timer End.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_Timer1End	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_Timer1End,	\/*!< Starts with the reception of the Timer End.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_Timer1Start	include/CameraDefs.h	/^		CounterTriggerSource_Timer1Start,	\/*!< Starts with the reception of the Timer Start.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_Timer1Start	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_Timer1Start,	\/*!< Starts with the reception of the Timer Start.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_Timer2End	include/CameraDefs.h	/^		CounterTriggerSource_Timer2End,	\/*!< Starts with the reception of the Timer End.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_Timer2End	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_Timer2End,	\/*!< Starts with the reception of the Timer End.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_Timer2Start	include/CameraDefs.h	/^		CounterTriggerSource_Timer2Start,	\/*!< Starts with the reception of the Timer Start.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_Timer2Start	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_Timer2Start,	\/*!< Starts with the reception of the Timer Start.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_UserOutput0	include/CameraDefs.h	/^		CounterTriggerSource_UserOutput0,	\/*!< Specifies which User Output bit signal to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_UserOutput0	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_UserOutput0,	\/*!< Specifies which User Output bit signal to use as internal source for the trigger.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_UserOutput1	include/CameraDefs.h	/^		CounterTriggerSource_UserOutput1,	\/*!< Specifies which User Output bit signal to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_UserOutput1	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_UserOutput1,	\/*!< Specifies which User Output bit signal to use as internal source for the trigger.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterTriggerSource_UserOutput2	include/CameraDefs.h	/^		CounterTriggerSource_UserOutput2,	\/*!< Specifies which User Output bit signal to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
CounterTriggerSource_UserOutput2	include/spinc/CameraDefsC.h	/^	CounterTriggerSource_UserOutput2,	\/*!< Specifies which User Output bit signal to use as internal source for the trigger.*\/$/;"	e	enum:_spinCounterTriggerSourceEnums
CounterValue	include/Camera.h	/^		GenApi::IInteger &CounterValue;$/;"	m	class:Spinnaker::Camera
CounterValue	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode CounterValue;$/;"	m	struct:_quickSpin
CounterValueAtReset	include/Camera.h	/^		GenApi::IInteger &CounterValueAtReset;$/;"	m	class:Spinnaker::Camera
CounterValueAtReset	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode CounterValueAtReset;$/;"	m	struct:_quickSpin
Custom	include/SpinGenApi/Types.h	/^			Custom,             \/\/!< name resides in custom namespace$/;"	e	enum:Spinnaker::GenApi::_ENameSpace
Custom	include/spinc/SpinnakerGenApiDefsC.h	/^	Custom,             \/\/!< name resides in custom namespace$/;"	e	enum:_spinNameSpace
CxpConnectionSelector	include/Camera.h	/^		GenApi::IInteger &CxpConnectionSelector;$/;"	m	class:Spinnaker::Camera
CxpConnectionSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode CxpConnectionSelector;$/;"	m	struct:_quickSpin
CxpConnectionTestErrorCount	include/Camera.h	/^		GenApi::IInteger &CxpConnectionTestErrorCount;$/;"	m	class:Spinnaker::Camera
CxpConnectionTestErrorCount	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode CxpConnectionTestErrorCount;$/;"	m	struct:_quickSpin
CxpConnectionTestMode	include/Camera.h	/^		GenApi::IEnumerationT<CxpConnectionTestModeEnums> &CxpConnectionTestMode;$/;"	m	class:Spinnaker::Camera
CxpConnectionTestMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode CxpConnectionTestMode;$/;"	m	struct:_quickSpin
CxpConnectionTestModeEnums	include/CameraDefs.h	/^	enum CxpConnectionTestModeEnums	\/*!< Enables the test mode for an individual physical connection of the Device.*\/$/;"	g	namespace:Spinnaker
CxpConnectionTestMode_Mode1	include/CameraDefs.h	/^		CxpConnectionTestMode_Mode1,	\/*!< Mode 1*\/$/;"	e	enum:Spinnaker::CxpConnectionTestModeEnums
CxpConnectionTestMode_Mode1	include/spinc/CameraDefsC.h	/^	CxpConnectionTestMode_Mode1,	\/*!< Mode 1*\/$/;"	e	enum:_spinCxpConnectionTestModeEnums
CxpConnectionTestMode_Off	include/CameraDefs.h	/^		CxpConnectionTestMode_Off,	\/*!< Off*\/$/;"	e	enum:Spinnaker::CxpConnectionTestModeEnums
CxpConnectionTestMode_Off	include/spinc/CameraDefsC.h	/^	CxpConnectionTestMode_Off,	\/*!< Off*\/$/;"	e	enum:_spinCxpConnectionTestModeEnums
CxpConnectionTestPacketCount	include/Camera.h	/^		GenApi::IInteger &CxpConnectionTestPacketCount;$/;"	m	class:Spinnaker::Camera
CxpConnectionTestPacketCount	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode CxpConnectionTestPacketCount;$/;"	m	struct:_quickSpin
CxpLinkConfiguration	include/Camera.h	/^		GenApi::IEnumerationT<CxpLinkConfigurationEnums> &CxpLinkConfiguration;$/;"	m	class:Spinnaker::Camera
CxpLinkConfiguration	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode CxpLinkConfiguration;$/;"	m	struct:_quickSpin
CxpLinkConfigurationEnums	include/CameraDefs.h	/^	enum CxpLinkConfigurationEnums	\/*!< This feature allows specifying the Link configuration for the communication between the Receiver and Transmitter Device. In most cases this feature does not need to be written because automatic discovery will set configuration correctly to the value returned by CxpLinkConfigurationPreferred. Note that the currently active configuration of the Link can be read using CxpLinkConfigurationStatus.*\/$/;"	g	namespace:Spinnaker
CxpLinkConfigurationPreferred	include/Camera.h	/^		GenApi::IEnumerationT<CxpLinkConfigurationPreferredEnums> &CxpLinkConfigurationPreferred;$/;"	m	class:Spinnaker::Camera
CxpLinkConfigurationPreferred	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode CxpLinkConfigurationPreferred;$/;"	m	struct:_quickSpin
CxpLinkConfigurationPreferredEnums	include/CameraDefs.h	/^	enum CxpLinkConfigurationPreferredEnums	\/*!< Provides the Link configuration that allows the Transmitter Device to operate in its default mode.*\/$/;"	g	namespace:Spinnaker
CxpLinkConfigurationPreferred_CXP1_X1	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP1_X1,	\/*!< 1 Connection operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP1_X1	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP1_X1,	\/*!< 1 Connection operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP1_X2	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP1_X2,	\/*!< 2 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP1_X2	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP1_X2,	\/*!< 2 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP1_X3	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP1_X3,	\/*!< 3 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP1_X3	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP1_X3,	\/*!< 3 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP1_X4	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP1_X4,	\/*!< 4 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP1_X4	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP1_X4,	\/*!< 4 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP1_X5	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP1_X5,	\/*!< 5 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP1_X5	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP1_X5,	\/*!< 5 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP1_X6	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP1_X6,	\/*!< 6 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP1_X6	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP1_X6,	\/*!< 6 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP2_X1	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP2_X1,	\/*!< 1 Connection operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP2_X1	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP2_X1,	\/*!< 1 Connection operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP2_X2	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP2_X2,	\/*!< 2 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP2_X2	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP2_X2,	\/*!< 2 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP2_X3	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP2_X3,	\/*!< 3 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP2_X3	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP2_X3,	\/*!< 3 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP2_X4	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP2_X4,	\/*!< 4 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP2_X4	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP2_X4,	\/*!< 4 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP2_X5	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP2_X5,	\/*!< 5 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP2_X5	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP2_X5,	\/*!< 5 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP2_X6	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP2_X6,	\/*!< 6 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP2_X6	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP2_X6,	\/*!< 6 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP3_X1	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP3_X1,	\/*!< 1 Connection operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP3_X1	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP3_X1,	\/*!< 1 Connection operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP3_X2	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP3_X2,	\/*!< 2 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP3_X2	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP3_X2,	\/*!< 2 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP3_X3	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP3_X3,	\/*!< 3 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP3_X3	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP3_X3,	\/*!< 3 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP3_X4	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP3_X4,	\/*!< 4 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP3_X4	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP3_X4,	\/*!< 4 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP3_X5	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP3_X5,	\/*!< 5 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP3_X5	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP3_X5,	\/*!< 5 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP3_X6	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP3_X6,	\/*!< 6 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP3_X6	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP3_X6,	\/*!< 6 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP5_X1	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP5_X1,	\/*!< 1 Connection operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP5_X1	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP5_X1,	\/*!< 1 Connection operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP5_X2	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP5_X2,	\/*!< 2 Connections operating at CXP-4 speed (5.00 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP5_X2	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP5_X2,	\/*!< 2 Connections operating at CXP-4 speed (5.00 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP5_X3	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP5_X3,	\/*!< 3 Connections operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP5_X3	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP5_X3,	\/*!< 3 Connections operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP5_X4	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP5_X4,	\/*!< 4 Connections operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP5_X4	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP5_X4,	\/*!< 4 Connections operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP5_X5	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP5_X5,	\/*!< 5 Connections operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP5_X5	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP5_X5,	\/*!< 5 Connections operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP5_X6	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP5_X6,	\/*!< 6 Connections operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP5_X6	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP5_X6,	\/*!< 6 Connections operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP6_X1	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP6_X1,	\/*!< 1 Connection operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP6_X1	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP6_X1,	\/*!< 1 Connection operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP6_X2	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP6_X2,	\/*!< 3 Connections operating at CXP-5 speed (6.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP6_X2	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP6_X2,	\/*!< 3 Connections operating at CXP-5 speed (6.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP6_X3	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP6_X3,	\/*!< 3 Connections operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP6_X3	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP6_X3,	\/*!< 3 Connections operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP6_X4	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP6_X4,	\/*!< 4 Connections operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP6_X4	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP6_X4,	\/*!< 4 Connections operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP6_X5	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP6_X5,	\/*!< 5 Connections operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP6_X5	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP6_X5,	\/*!< 5 Connections operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP6_X6	include/CameraDefs.h	/^		CxpLinkConfigurationPreferred_CXP6_X6,	\/*!< 6 Connections operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
CxpLinkConfigurationPreferred_CXP6_X6	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationPreferred_CXP6_X6,	\/*!< 6 Connections operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
CxpLinkConfigurationStatus	include/Camera.h	/^		GenApi::IEnumerationT<CxpLinkConfigurationStatusEnums> &CxpLinkConfigurationStatus;$/;"	m	class:Spinnaker::Camera
CxpLinkConfigurationStatus	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode CxpLinkConfigurationStatus;$/;"	m	struct:_quickSpin
CxpLinkConfigurationStatusEnums	include/CameraDefs.h	/^	enum CxpLinkConfigurationStatusEnums	\/*!< This feature indicates the current and active Link configuration used by the Device.*\/$/;"	g	namespace:Spinnaker
CxpLinkConfigurationStatus_CXP1_X1	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP1_X1,	\/*!< 1 Connection operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP1_X1	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP1_X1,	\/*!< 1 Connection operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP1_X2	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP1_X2,	\/*!< 2 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP1_X2	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP1_X2,	\/*!< 2 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP1_X3	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP1_X3,	\/*!< 3 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP1_X3	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP1_X3,	\/*!< 3 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP1_X4	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP1_X4,	\/*!< 4 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP1_X4	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP1_X4,	\/*!< 4 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP1_X5	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP1_X5,	\/*!< 5 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP1_X5	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP1_X5,	\/*!< 5 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP1_X6	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP1_X6,	\/*!< 6 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP1_X6	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP1_X6,	\/*!< 6 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP2_X1	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP2_X1,	\/*!< 1 Connection operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP2_X1	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP2_X1,	\/*!< 1 Connection operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP2_X2	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP2_X2,	\/*!< 2 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP2_X2	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP2_X2,	\/*!< 2 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP2_X3	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP2_X3,	\/*!< 3 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP2_X3	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP2_X3,	\/*!< 3 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP2_X4	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP2_X4,	\/*!< 4 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP2_X4	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP2_X4,	\/*!< 4 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP2_X5	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP2_X5,	\/*!< 5 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP2_X5	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP2_X5,	\/*!< 5 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP2_X6	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP2_X6,	\/*!< 6 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP2_X6	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP2_X6,	\/*!< 6 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP3_X1	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP3_X1,	\/*!< 1 Connection operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP3_X1	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP3_X1,	\/*!< 1 Connection operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP3_X2	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP3_X2,	\/*!< 2 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP3_X2	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP3_X2,	\/*!< 2 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP3_X3	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP3_X3,	\/*!< 3 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP3_X3	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP3_X3,	\/*!< 3 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP3_X4	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP3_X4,	\/*!< 4 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP3_X4	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP3_X4,	\/*!< 4 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP3_X5	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP3_X5,	\/*!< 5 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP3_X5	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP3_X5,	\/*!< 5 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP3_X6	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP3_X6,	\/*!< 6 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP3_X6	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP3_X6,	\/*!< 6 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP5_X1	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP5_X1,	\/*!< 1 Connection operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP5_X1	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP5_X1,	\/*!< 1 Connection operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP5_X2	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP5_X2,	\/*!< 2 Connections operating at CXP-4 speed (5.00 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP5_X2	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP5_X2,	\/*!< 2 Connections operating at CXP-4 speed (5.00 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP5_X3	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP5_X3,	\/*!< 3 Connections operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP5_X3	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP5_X3,	\/*!< 3 Connections operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP5_X4	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP5_X4,	\/*!< 4 Connections operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP5_X4	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP5_X4,	\/*!< 4 Connections operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP5_X5	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP5_X5,	\/*!< 5 Connections operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP5_X5	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP5_X5,	\/*!< 5 Connections operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP5_X6	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP5_X6,	\/*!< 6 Connections operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP5_X6	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP5_X6,	\/*!< 6 Connections operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP6_X1	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP6_X1,	\/*!< 1 Connection operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP6_X1	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP6_X1,	\/*!< 1 Connection operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP6_X2	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP6_X2,	\/*!< 3 Connections operating at CXP-5 speed (6.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP6_X2	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP6_X2,	\/*!< 3 Connections operating at CXP-5 speed (6.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP6_X3	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP6_X3,	\/*!< 3 Connections operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP6_X3	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP6_X3,	\/*!< 3 Connections operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP6_X4	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP6_X4,	\/*!< 4 Connections operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP6_X4	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP6_X4,	\/*!< 4 Connections operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP6_X5	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP6_X5,	\/*!< 5 Connections operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP6_X5	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP6_X5,	\/*!< 5 Connections operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP6_X6	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_CXP6_X6,	\/*!< 6 Connections operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_CXP6_X6	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_CXP6_X6,	\/*!< 6 Connections operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_None	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_None,	\/*!< The Link configuration of the Device is unknown. Either the configuration operation has failed or there is nothing connected.*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_None	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_None,	\/*!< The Link configuration of the Device is unknown. Either the configuration operation has failed or there is nothing connected.*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_Pending	include/CameraDefs.h	/^		CxpLinkConfigurationStatus_Pending,	\/*!< The Device is in the process of configuring the Link. The Link cannot be used yet.*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
CxpLinkConfigurationStatus_Pending	include/spinc/CameraDefsC.h	/^	CxpLinkConfigurationStatus_Pending,	\/*!< The Device is in the process of configuring the Link. The Link cannot be used yet.*\/$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
CxpLinkConfiguration_Auto	include/CameraDefs.h	/^		CxpLinkConfiguration_Auto,	\/*!< Sets Automatic discovery for the Link Configuration.*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_Auto	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_Auto,	\/*!< Sets Automatic discovery for the Link Configuration.*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP1_X1	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP1_X1,	\/*!< Force the Link to 1 Connection operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP1_X1	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP1_X1,	\/*!< Force the Link to 1 Connection operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP1_X2	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP1_X2,	\/*!< Force the Link to 2 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP1_X2	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP1_X2,	\/*!< Force the Link to 2 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP1_X3	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP1_X3,	\/*!< Force the Link to 3 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP1_X3	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP1_X3,	\/*!< Force the Link to 3 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP1_X4	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP1_X4,	\/*!< Force the Link to 4 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP1_X4	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP1_X4,	\/*!< Force the Link to 4 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP1_X5	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP1_X5,	\/*!< Force the Link to 5 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP1_X5	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP1_X5,	\/*!< Force the Link to 5 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP1_X6	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP1_X6,	\/*!< Force the Link to 6 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP1_X6	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP1_X6,	\/*!< Force the Link to 6 Connections operating at CXP-1 speed (1.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP2_X1	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP2_X1,	\/*!< Force the Link to 1 Connection operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP2_X1	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP2_X1,	\/*!< Force the Link to 1 Connection operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP2_X2	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP2_X2,	\/*!< Force the Link to 2 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP2_X2	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP2_X2,	\/*!< Force the Link to 2 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP2_X3	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP2_X3,	\/*!< Force the Link to 3 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP2_X3	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP2_X3,	\/*!< Force the Link to 3 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP2_X4	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP2_X4,	\/*!< Force the Link to 4 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP2_X4	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP2_X4,	\/*!< Force the Link to 4 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP2_X5	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP2_X5,	\/*!< Force the Link to 5 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP2_X5	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP2_X5,	\/*!< Force the Link to 5 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP2_X6	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP2_X6,	\/*!< Force the Link to 6 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP2_X6	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP2_X6,	\/*!< Force the Link to 6 Connections operating at CXP-2 speed (2.50 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP3_X1	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP3_X1,	\/*!< Force the Link to 1 Connection operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP3_X1	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP3_X1,	\/*!< Force the Link to 1 Connection operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP3_X2	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP3_X2,	\/*!< Force the Link to 2 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP3_X2	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP3_X2,	\/*!< Force the Link to 2 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP3_X3	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP3_X3,	\/*!< Force the Link to 3 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP3_X3	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP3_X3,	\/*!< Force the Link to 3 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP3_X4	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP3_X4,	\/*!< Force the Link to 4 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP3_X4	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP3_X4,	\/*!< Force the Link to 4 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP3_X5	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP3_X5,	\/*!< Force the Link to 5 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP3_X5	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP3_X5,	\/*!< Force the Link to 5 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP3_X6	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP3_X6,	\/*!< Force the Link to 6 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP3_X6	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP3_X6,	\/*!< Force the Link to 6 Connections operating at CXP-3 speed (3.125 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP5_X1	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP5_X1,	\/*!< Force the Link to 1 Connection operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP5_X1	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP5_X1,	\/*!< Force the Link to 1 Connection operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP5_X2	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP5_X2,	\/*!< Force the Link to 2 Connections operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP5_X2	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP5_X2,	\/*!< Force the Link to 2 Connections operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP5_X3	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP5_X3,	\/*!< Force the Link to 3 Connections operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP5_X3	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP5_X3,	\/*!< Force the Link to 3 Connections operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP5_X4	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP5_X4,	\/*!< Force the Link to 4 Connections operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP5_X4	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP5_X4,	\/*!< Force the Link to 4 Connections operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP5_X5	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP5_X5,	\/*!< Force the Link to 5 Connections operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP5_X5	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP5_X5,	\/*!< Force the Link to 5 Connections operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP5_X6	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP5_X6,	\/*!< Force the Link to 6 Connections operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP5_X6	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP5_X6,	\/*!< Force the Link to 6 Connections operating at CXP-5 speed (5.00 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP6_X1	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP6_X1,	\/*!< Force the Link to 1 Connection operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP6_X1	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP6_X1,	\/*!< Force the Link to 1 Connection operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP6_X2	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP6_X2,	\/*!< Force the Link to 3 Connections operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP6_X2	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP6_X2,	\/*!< Force the Link to 3 Connections operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP6_X3	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP6_X3,	\/*!< Force the Link to 3 Connections operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP6_X3	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP6_X3,	\/*!< Force the Link to 3 Connections operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP6_X4	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP6_X4,	\/*!< Force the Link to 4 Connections operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP6_X4	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP6_X4,	\/*!< Force the Link to 4 Connections operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP6_X5	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP6_X5,	\/*!< Force the Link to 5 Connections operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP6_X5	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP6_X5,	\/*!< Force the Link to 5 Connections operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpLinkConfiguration_CXP6_X6	include/CameraDefs.h	/^		CxpLinkConfiguration_CXP6_X6,	\/*!< Force the Link to 6 Connections operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
CxpLinkConfiguration_CXP6_X6	include/spinc/CameraDefsC.h	/^	CxpLinkConfiguration_CXP6_X6,	\/*!< Force the Link to 6 Connections operating at CXP-6 speed (6.25 Gbps).*\/$/;"	e	enum:_spinCxpLinkConfigurationEnums
CxpPoCxpAuto	include/Camera.h	/^		GenApi::ICommand &CxpPoCxpAuto;$/;"	m	class:Spinnaker::Camera
CxpPoCxpAuto	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode CxpPoCxpAuto;$/;"	m	struct:_quickSpin
CxpPoCxpStatus	include/Camera.h	/^		GenApi::IEnumerationT<CxpPoCxpStatusEnums> &CxpPoCxpStatus;$/;"	m	class:Spinnaker::Camera
CxpPoCxpStatus	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode CxpPoCxpStatus;$/;"	m	struct:_quickSpin
CxpPoCxpStatusEnums	include/CameraDefs.h	/^	enum CxpPoCxpStatusEnums	\/*!< Returns the Power over CoaXPress (PoCXP) status of the Device.*\/$/;"	g	namespace:Spinnaker
CxpPoCxpStatus_Auto	include/CameraDefs.h	/^		CxpPoCxpStatus_Auto,	\/*!< Normal automatic PoCXP operation.*\/$/;"	e	enum:Spinnaker::CxpPoCxpStatusEnums
CxpPoCxpStatus_Auto	include/spinc/CameraDefsC.h	/^	CxpPoCxpStatus_Auto,	\/*!< Normal automatic PoCXP operation.*\/$/;"	e	enum:_spinCxpPoCxpStatusEnums
CxpPoCxpStatus_Off	include/CameraDefs.h	/^		CxpPoCxpStatus_Off,	\/*!< PoCXP is forced off.*\/$/;"	e	enum:Spinnaker::CxpPoCxpStatusEnums
CxpPoCxpStatus_Off	include/spinc/CameraDefsC.h	/^	CxpPoCxpStatus_Off,	\/*!< PoCXP is forced off.*\/$/;"	e	enum:_spinCxpPoCxpStatusEnums
CxpPoCxpStatus_Tripped	include/CameraDefs.h	/^		CxpPoCxpStatus_Tripped,	\/*!< The Link has shut down because of an over-current trip.*\/$/;"	e	enum:Spinnaker::CxpPoCxpStatusEnums
CxpPoCxpStatus_Tripped	include/spinc/CameraDefsC.h	/^	CxpPoCxpStatus_Tripped,	\/*!< The Link has shut down because of an over-current trip.*\/$/;"	e	enum:_spinCxpPoCxpStatusEnums
CxpPoCxpTripReset	include/Camera.h	/^		GenApi::ICommand &CxpPoCxpTripReset;$/;"	m	class:Spinnaker::Camera
CxpPoCxpTripReset	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode CxpPoCxpTripReset;$/;"	m	struct:_quickSpin
CxpPoCxpTurnOff	include/Camera.h	/^		GenApi::ICommand &CxpPoCxpTurnOff;$/;"	m	class:Spinnaker::Camera
CxpPoCxpTurnOff	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode CxpPoCxpTurnOff;$/;"	m	struct:_quickSpin
DCAM_CHECKSUM	include/SpinGenApi/ChunkAdapterDcam.h	/^		typedef struct DCAM_CHECKSUM$/;"	s	namespace:Spinnaker::GenApi
DCAM_CHECKSUM	include/SpinGenApi/ChunkAdapterDcam.h	/^		} DCAM_CHECKSUM;$/;"	t	namespace:Spinnaker::GenApi	typeref:struct:Spinnaker::GenApi::DCAM_CHECKSUM
DCAM_CHUNK_TRAILER	include/SpinGenApi/ChunkAdapterDcam.h	/^		typedef struct DCAM_CHUNK_TRAILER$/;"	s	namespace:Spinnaker::GenApi
DCAM_CHUNK_TRAILER	include/SpinGenApi/ChunkAdapterDcam.h	/^		} DCAM_CHUNK_TRAILER;$/;"	t	namespace:Spinnaker::GenApi	typeref:struct:Spinnaker::GenApi::DCAM_CHUNK_TRAILER
DEFAULT	include/SpinnakerDefs.h	/^        DEFAULT,$/;"	e	enum:Spinnaker::ColorProcessingAlgorithm
DEFAULT	include/spinc/SpinnakerDefsC.h	/^	DEFAULT,$/;"	e	enum:_spinColorProcessingAlgorithm
DEFLATE	include/SpinnakerDefs.h	/^            DEFLATE, \/**< Save using DEFLATE compression (ZLIB compression). *\/$/;"	e	enum:Spinnaker::TIFFOption::CompressionMethod
DEFLATE	include/spinc/SpinnakerDefsC.h	/^	DEFLATE, \/\/ Save using DEFLATE compression (ZLIB compression). $/;"	e	enum:CompressionMethod
DIRECTIONAL_FILTER	include/SpinnakerDefs.h	/^        DIRECTIONAL_FILTER$/;"	e	enum:Spinnaker::ColorProcessingAlgorithm
DIRECTIONAL_FILTER	include/spinc/SpinnakerDefsC.h	/^	DIRECTIONAL_FILTER$/;"	e	enum:_spinColorProcessingAlgorithm
Data	include/SpinGenApi/EventAdapterGEV.h	/^        uint32_t Data[ 1 ];$/;"	m	struct:Spinnaker::GenApi::GVCP_EVENTDATA_REQUEST
Data	include/SpinGenApi/EventAdapterGEV.h	/^        uint32_t Data[ 1 ];$/;"	m	struct:Spinnaker::GenApi::GVCP_EVENTDATA_REQUEST_EXTENDED_ID
Data1	include/SpinGenApi/Compatibility.h	/^	unsigned long  Data1;$/;"	m	struct:_SPIN_GUID
Data1	include/SpinGenApi/Compatibility.h	/^    uint32_t Data1;$/;"	m	struct:_SPIN_GUID
Data2	include/SpinGenApi/Compatibility.h	/^	unsigned short Data2;$/;"	m	struct:_SPIN_GUID
Data2	include/SpinGenApi/Compatibility.h	/^    uint16_t Data2;$/;"	m	struct:_SPIN_GUID
Data3	include/SpinGenApi/Compatibility.h	/^	unsigned short Data3;$/;"	m	struct:_SPIN_GUID
Data3	include/SpinGenApi/Compatibility.h	/^    uint16_t Data3;$/;"	m	struct:_SPIN_GUID
Data4	include/SpinGenApi/Compatibility.h	/^	byte           Data4[8];$/;"	m	struct:_SPIN_GUID
Data4	include/SpinGenApi/Compatibility.h	/^    uint8_t  Data4[ 8 ];$/;"	m	struct:_SPIN_GUID
DecimationHorizontal	include/Camera.h	/^		GenApi::IInteger &DecimationHorizontal;$/;"	m	class:Spinnaker::Camera
DecimationHorizontal	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode DecimationHorizontal;$/;"	m	struct:_quickSpin
DecimationHorizontalMode	include/Camera.h	/^		GenApi::IEnumerationT<DecimationHorizontalModeEnums> &DecimationHorizontalMode;$/;"	m	class:Spinnaker::Camera
DecimationHorizontalMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode DecimationHorizontalMode;$/;"	m	struct:_quickSpin
DecimationHorizontalModeEnums	include/CameraDefs.h	/^	enum DecimationHorizontalModeEnums	\/*!< Sets the mode used to reduce the horizontal resolution when DecimationHorizontal is used.*\/$/;"	g	namespace:Spinnaker
DecimationHorizontalMode_Average	include/CameraDefs.h	/^		DecimationHorizontalMode_Average,	\/*!< The value of a group of N adjacents pixels are averaged.*\/$/;"	e	enum:Spinnaker::DecimationHorizontalModeEnums
DecimationHorizontalMode_Average	include/spinc/CameraDefsC.h	/^	DecimationHorizontalMode_Average,	\/*!< The value of a group of N adjacents pixels are averaged.*\/$/;"	e	enum:_spinDecimationHorizontalModeEnums
DecimationHorizontalMode_Discard	include/CameraDefs.h	/^		DecimationHorizontalMode_Discard,	\/*!< The value of every Nth pixel is kept, others are discarded.*\/$/;"	e	enum:Spinnaker::DecimationHorizontalModeEnums
DecimationHorizontalMode_Discard	include/spinc/CameraDefsC.h	/^	DecimationHorizontalMode_Discard,	\/*!< The value of every Nth pixel is kept, others are discarded.*\/$/;"	e	enum:_spinDecimationHorizontalModeEnums
DecimationVertical	include/Camera.h	/^		GenApi::IInteger &DecimationVertical;$/;"	m	class:Spinnaker::Camera
DecimationVertical	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode DecimationVertical;$/;"	m	struct:_quickSpin
DecimationVerticalMode	include/Camera.h	/^		GenApi::IEnumerationT<DecimationVerticalModeEnums> &DecimationVerticalMode;$/;"	m	class:Spinnaker::Camera
DecimationVerticalMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode DecimationVerticalMode;$/;"	m	struct:_quickSpin
DecimationVerticalModeEnums	include/CameraDefs.h	/^	enum DecimationVerticalModeEnums	\/*!< Sets the mode used to reduce the Vertical resolution when DecimationVertical is used.*\/$/;"	g	namespace:Spinnaker
DecimationVerticalMode_Average	include/CameraDefs.h	/^		DecimationVerticalMode_Average,	\/*!< The value of a group of N adjacents pixels are averaged.*\/$/;"	e	enum:Spinnaker::DecimationVerticalModeEnums
DecimationVerticalMode_Average	include/spinc/CameraDefsC.h	/^	DecimationVerticalMode_Average,	\/*!< The value of a group of N adjacents pixels are averaged.*\/$/;"	e	enum:_spinDecimationVerticalModeEnums
DecimationVerticalMode_Discard	include/CameraDefs.h	/^		DecimationVerticalMode_Discard,	\/*!< The value of every Nth pixel is kept, others are discarded.*\/$/;"	e	enum:Spinnaker::DecimationVerticalModeEnums
DecimationVerticalMode_Discard	include/spinc/CameraDefsC.h	/^	DecimationVerticalMode_Discard,	\/*!< The value of every Nth pixel is kept, others are discarded.*\/$/;"	e	enum:_spinDecimationVerticalModeEnums
Decreasing	include/SpinGenApi/Types.h	/^			Decreasing,      \/\/!> strictly monotonous decreasing$/;"	e	enum:Spinnaker::GenApi::_ESlope
Decreasing	include/spinc/SpinnakerGenApiDefsC.h	/^	Decreasing,      \/\/!> strictly monotonous decreasing$/;"	e	enum:_spinSlope
Deinterlacing	include/Camera.h	/^		GenApi::IEnumerationT<DeinterlacingEnums> &Deinterlacing;$/;"	m	class:Spinnaker::Camera
Deinterlacing	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode Deinterlacing;$/;"	m	struct:_quickSpin
DeinterlacingEnums	include/CameraDefs.h	/^	enum DeinterlacingEnums	\/*!< Controls how the device performs de-interlacing.*\/$/;"	g	namespace:Spinnaker
Deinterlacing_LineDuplication	include/CameraDefs.h	/^		Deinterlacing_LineDuplication,	\/*!< The device performs de-interlacing by outputting each line of each field twice.*\/$/;"	e	enum:Spinnaker::DeinterlacingEnums
Deinterlacing_LineDuplication	include/spinc/CameraDefsC.h	/^	Deinterlacing_LineDuplication,	\/*!< The device performs de-interlacing by outputting each line of each field twice.*\/$/;"	e	enum:_spinDeinterlacingEnums
Deinterlacing_Off	include/CameraDefs.h	/^		Deinterlacing_Off,	\/*!< The device doesn't perform de-interlacing.*\/$/;"	e	enum:Spinnaker::DeinterlacingEnums
Deinterlacing_Off	include/spinc/CameraDefsC.h	/^	Deinterlacing_Off,	\/*!< The device doesn't perform de-interlacing.*\/$/;"	e	enum:_spinDeinterlacingEnums
Deinterlacing_Weave	include/CameraDefs.h	/^		Deinterlacing_Weave,	\/*!< The device performs de-interlacing by interleaving the lines of all fields.*\/$/;"	e	enum:Spinnaker::DeinterlacingEnums
Deinterlacing_Weave	include/spinc/CameraDefsC.h	/^	Deinterlacing_Weave,	\/*!< The device performs de-interlacing by interleaving the lines of all fields.*\/$/;"	e	enum:_spinDeinterlacingEnums
Destroy	include/SpinGenApi/NodeCallback.h	/^			virtual void Destroy()$/;"	f	class:Spinnaker::GenApi::Function_NodeCallback
Destroy	include/SpinGenApi/NodeCallback.h	/^			virtual void Destroy()$/;"	f	class:Spinnaker::GenApi::Member_NodeCallback
DeviceAccessStatus	include/TransportLayerDevice.h	/^		GenApi::IEnumerationT<DeviceAccessStatusEnum> &DeviceAccessStatus;$/;"	m	class:Spinnaker::TransportLayerDevice
DeviceAccessStatus	include/TransportLayerInterface.h	/^		GenApi::IEnumerationT<DeviceAccessStatusEnum> &DeviceAccessStatus;$/;"	m	class:Spinnaker::TransportLayerInterface
DeviceAccessStatus	include/spinc/TransportLayerDeviceC.h	/^	quickSpinEnumerationNode DeviceAccessStatus;$/;"	m	struct:_quickSpinTLDevice
DeviceAccessStatus	include/spinc/TransportLayerInterfaceC.h	/^	quickSpinEnumerationNode DeviceAccessStatus;$/;"	m	struct:_quickSpinTLInterface
DeviceAccessStatusEnum	include/TransportLayerDefs.h	/^	enum DeviceAccessStatusEnum	\/*!< Gets the access status the transport layer Producer has on the device.*\/$/;"	g	namespace:Spinnaker
DeviceAccessStatus_NoAccess	include/TransportLayerDefs.h	/^		DeviceAccessStatus_NoAccess,	\/*!< Non-available devices*\/$/;"	e	enum:Spinnaker::DeviceAccessStatusEnum
DeviceAccessStatus_NoAccess	include/spinc/TransportLayerDefsC.h	/^	DeviceAccessStatus_NoAccess,\/*!< Non-available devices*\/$/;"	e	enum:_spinTLDeviceAccessStatusEnums
DeviceAccessStatus_ReadOnly	include/TransportLayerDefs.h	/^		DeviceAccessStatus_ReadOnly,	\/*!< Read-only access*\/$/;"	e	enum:Spinnaker::DeviceAccessStatusEnum
DeviceAccessStatus_ReadOnly	include/spinc/TransportLayerDefsC.h	/^	DeviceAccessStatus_ReadOnly,\/*!< Read-only access*\/$/;"	e	enum:_spinTLDeviceAccessStatusEnums
DeviceAccessStatus_ReadWrite	include/TransportLayerDefs.h	/^		DeviceAccessStatus_ReadWrite,	\/*!< Full access*\/$/;"	e	enum:Spinnaker::DeviceAccessStatusEnum
DeviceAccessStatus_ReadWrite	include/spinc/TransportLayerDefsC.h	/^	DeviceAccessStatus_ReadWrite,\/*!< Full access*\/$/;"	e	enum:_spinTLDeviceAccessStatusEnums
DeviceAccessStatus_Unknown	include/TransportLayerDefs.h	/^		DeviceAccessStatus_Unknown,	\/*!< Unknown status*\/$/;"	e	enum:Spinnaker::DeviceAccessStatusEnum
DeviceAccessStatus_Unknown	include/spinc/TransportLayerDefsC.h	/^	DeviceAccessStatus_Unknown,\/*!< Unknown status*\/$/;"	e	enum:_spinTLDeviceAccessStatusEnums
DeviceCharacterSet	include/Camera.h	/^		GenApi::IEnumerationT<DeviceCharacterSetEnums> &DeviceCharacterSet;$/;"	m	class:Spinnaker::Camera
DeviceCharacterSet	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode DeviceCharacterSet;$/;"	m	struct:_quickSpin
DeviceCharacterSetEnums	include/CameraDefs.h	/^	enum DeviceCharacterSetEnums	\/*!< Character set used by the strings of the device's bootstrap registers.*\/$/;"	g	namespace:Spinnaker
DeviceCharacterSet_ASCII	include/CameraDefs.h	/^		DeviceCharacterSet_ASCII,	\/*!< Device use ASCII character set.*\/$/;"	e	enum:Spinnaker::DeviceCharacterSetEnums
DeviceCharacterSet_ASCII	include/spinc/CameraDefsC.h	/^	DeviceCharacterSet_ASCII,	\/*!< Device use ASCII character set.*\/$/;"	e	enum:_spinDeviceCharacterSetEnums
DeviceCharacterSet_UTF8	include/CameraDefs.h	/^		DeviceCharacterSet_UTF8,	\/*!< Device use UTF8 character set.*\/$/;"	e	enum:Spinnaker::DeviceCharacterSetEnums
DeviceCharacterSet_UTF8	include/spinc/CameraDefsC.h	/^	DeviceCharacterSet_UTF8,	\/*!< Device use UTF8 character set.*\/$/;"	e	enum:_spinDeviceCharacterSetEnums
DeviceClockFrequency	include/Camera.h	/^		GenApi::IFloat &DeviceClockFrequency;$/;"	m	class:Spinnaker::Camera
DeviceClockFrequency	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode DeviceClockFrequency;$/;"	m	struct:_quickSpin
DeviceClockSelector	include/Camera.h	/^		GenApi::IEnumerationT<DeviceClockSelectorEnums> &DeviceClockSelector;$/;"	m	class:Spinnaker::Camera
DeviceClockSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode DeviceClockSelector;$/;"	m	struct:_quickSpin
DeviceClockSelectorEnums	include/CameraDefs.h	/^	enum DeviceClockSelectorEnums	\/*!< Selects the clock frequency to access from the device.*\/$/;"	g	namespace:Spinnaker
DeviceClockSelector_CameraLink	include/CameraDefs.h	/^		DeviceClockSelector_CameraLink,	\/*!< Frequency of the Camera Link clock.*\/$/;"	e	enum:Spinnaker::DeviceClockSelectorEnums
DeviceClockSelector_CameraLink	include/spinc/CameraDefsC.h	/^	DeviceClockSelector_CameraLink,	\/*!< Frequency of the Camera Link clock.*\/$/;"	e	enum:_spinDeviceClockSelectorEnums
DeviceClockSelector_Sensor	include/CameraDefs.h	/^		DeviceClockSelector_Sensor,	\/*!< Clock frequency of the image sensor of the camera.*\/$/;"	e	enum:Spinnaker::DeviceClockSelectorEnums
DeviceClockSelector_Sensor	include/spinc/CameraDefsC.h	/^	DeviceClockSelector_Sensor,	\/*!< Clock frequency of the image sensor of the camera.*\/$/;"	e	enum:_spinDeviceClockSelectorEnums
DeviceClockSelector_SensorDigitization	include/CameraDefs.h	/^		DeviceClockSelector_SensorDigitization,	\/*!< Clock frequency of the camera A\/D conversion stage.*\/$/;"	e	enum:Spinnaker::DeviceClockSelectorEnums
DeviceClockSelector_SensorDigitization	include/spinc/CameraDefsC.h	/^	DeviceClockSelector_SensorDigitization,	\/*!< Clock frequency of the camera A\/D conversion stage.*\/$/;"	e	enum:_spinDeviceClockSelectorEnums
DeviceConnectionSelector	include/Camera.h	/^		GenApi::IInteger &DeviceConnectionSelector;$/;"	m	class:Spinnaker::Camera
DeviceConnectionSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode DeviceConnectionSelector;$/;"	m	struct:_quickSpin
DeviceConnectionSpeed	include/Camera.h	/^		GenApi::IInteger &DeviceConnectionSpeed;$/;"	m	class:Spinnaker::Camera
DeviceConnectionSpeed	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode DeviceConnectionSpeed;$/;"	m	struct:_quickSpin
DeviceConnectionStatus	include/Camera.h	/^		GenApi::IEnumerationT<DeviceConnectionStatusEnums> &DeviceConnectionStatus;$/;"	m	class:Spinnaker::Camera
DeviceConnectionStatus	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode DeviceConnectionStatus;$/;"	m	struct:_quickSpin
DeviceConnectionStatusEnums	include/CameraDefs.h	/^	enum DeviceConnectionStatusEnums	\/*!< Indicates the status of the specified Connection.*\/$/;"	g	namespace:Spinnaker
DeviceConnectionStatus_Active	include/CameraDefs.h	/^		DeviceConnectionStatus_Active,	\/*!< Connection is in use.*\/$/;"	e	enum:Spinnaker::DeviceConnectionStatusEnums
DeviceConnectionStatus_Active	include/spinc/CameraDefsC.h	/^	DeviceConnectionStatus_Active,	\/*!< Connection is in use.*\/$/;"	e	enum:_spinDeviceConnectionStatusEnums
DeviceConnectionStatus_Inactive	include/CameraDefs.h	/^		DeviceConnectionStatus_Inactive,	\/*!< Connection is not in use.*\/$/;"	e	enum:Spinnaker::DeviceConnectionStatusEnums
DeviceConnectionStatus_Inactive	include/spinc/CameraDefsC.h	/^	DeviceConnectionStatus_Inactive,	\/*!< Connection is not in use.*\/$/;"	e	enum:_spinDeviceConnectionStatusEnums
DeviceCount	include/TransportLayerInterface.h	/^		GenApi::IInteger &DeviceCount;$/;"	m	class:Spinnaker::TransportLayerInterface
DeviceCount	include/spinc/TransportLayerInterfaceC.h	/^	quickSpinIntegerNode DeviceCount;$/;"	m	struct:_quickSpinTLInterface
DeviceCurrentSpeed	include/TransportLayerDevice.h	/^		GenApi::IEnumerationT<DeviceCurrentSpeedEnum> &DeviceCurrentSpeed;$/;"	m	class:Spinnaker::TransportLayerDevice
DeviceCurrentSpeed	include/spinc/TransportLayerDeviceC.h	/^	quickSpinEnumerationNode DeviceCurrentSpeed;$/;"	m	struct:_quickSpinTLDevice
DeviceCurrentSpeedEnum	include/TransportLayerDefs.h	/^	enum DeviceCurrentSpeedEnum	\/*!< The USB Speed that the device is currently operating at.*\/$/;"	g	namespace:Spinnaker
DeviceCurrentSpeed_FullSpeed	include/TransportLayerDefs.h	/^		DeviceCurrentSpeed_FullSpeed,	\/*!< Full-Speed.*\/$/;"	e	enum:Spinnaker::DeviceCurrentSpeedEnum
DeviceCurrentSpeed_FullSpeed	include/spinc/TransportLayerDefsC.h	/^	DeviceCurrentSpeed_FullSpeed,\/*!< Full-Speed.*\/$/;"	e	enum:_spinTLDeviceCurrentSpeedEnums
DeviceCurrentSpeed_HighSpeed	include/TransportLayerDefs.h	/^		DeviceCurrentSpeed_HighSpeed,	\/*!< High-Speed.*\/$/;"	e	enum:Spinnaker::DeviceCurrentSpeedEnum
DeviceCurrentSpeed_HighSpeed	include/spinc/TransportLayerDefsC.h	/^	DeviceCurrentSpeed_HighSpeed,\/*!< High-Speed.*\/$/;"	e	enum:_spinTLDeviceCurrentSpeedEnums
DeviceCurrentSpeed_LowSpeed	include/TransportLayerDefs.h	/^		DeviceCurrentSpeed_LowSpeed,	\/*!< Low-Speed.*\/$/;"	e	enum:Spinnaker::DeviceCurrentSpeedEnum
DeviceCurrentSpeed_LowSpeed	include/spinc/TransportLayerDefsC.h	/^	DeviceCurrentSpeed_LowSpeed,\/*!< Low-Speed.*\/$/;"	e	enum:_spinTLDeviceCurrentSpeedEnums
DeviceCurrentSpeed_SuperSpeed	include/TransportLayerDefs.h	/^		DeviceCurrentSpeed_SuperSpeed,	\/*!< Super-Speed.*\/$/;"	e	enum:Spinnaker::DeviceCurrentSpeedEnum
DeviceCurrentSpeed_SuperSpeed	include/spinc/TransportLayerDefsC.h	/^	DeviceCurrentSpeed_SuperSpeed,\/*!< Super-Speed.*\/$/;"	e	enum:_spinTLDeviceCurrentSpeedEnums
DeviceCurrentSpeed_UnknownSpeed	include/TransportLayerDefs.h	/^		DeviceCurrentSpeed_UnknownSpeed,	\/*!< Unknown-Speed.*\/$/;"	e	enum:Spinnaker::DeviceCurrentSpeedEnum
DeviceCurrentSpeed_UnknownSpeed	include/spinc/TransportLayerDefsC.h	/^	DeviceCurrentSpeed_UnknownSpeed,\/*!< Unknown-Speed.*\/$/;"	e	enum:_spinTLDeviceCurrentSpeedEnums
DeviceDisplayName	include/TransportLayerDevice.h	/^		GenApi::IString &DeviceDisplayName;$/;"	m	class:Spinnaker::TransportLayerDevice
DeviceDisplayName	include/spinc/TransportLayerDeviceC.h	/^	quickSpinStringNode DeviceDisplayName;$/;"	m	struct:_quickSpinTLDevice
DeviceDriverVersion	include/TransportLayerDevice.h	/^		GenApi::IString &DeviceDriverVersion;$/;"	m	class:Spinnaker::TransportLayerDevice
DeviceDriverVersion	include/spinc/TransportLayerDeviceC.h	/^	quickSpinStringNode DeviceDriverVersion;$/;"	m	struct:_quickSpinTLDevice
DeviceEndianessMechanism	include/TransportLayerDevice.h	/^		GenApi::IEnumerationT<DeviceEndianessMechanismEnum> &DeviceEndianessMechanism;$/;"	m	class:Spinnaker::TransportLayerDevice
DeviceEndianessMechanism	include/spinc/TransportLayerDeviceC.h	/^	quickSpinEnumerationNode DeviceEndianessMechanism;$/;"	m	struct:_quickSpinTLDevice
DeviceEndianessMechanismEnum	include/TransportLayerDefs.h	/^	enum DeviceEndianessMechanismEnum	\/*!< Identifies the endianness handling mode.*\/$/;"	g	namespace:Spinnaker
DeviceEndianessMechanism_Legacy	include/TransportLayerDefs.h	/^		DeviceEndianessMechanism_Legacy,	\/*!< Handling the device endianness according to GenICam Schema 1.0*\/$/;"	e	enum:Spinnaker::DeviceEndianessMechanismEnum
DeviceEndianessMechanism_Legacy	include/spinc/TransportLayerDefsC.h	/^	DeviceEndianessMechanism_Legacy,\/*!< Handling the device endianness according to GenICam Schema 1.0*\/$/;"	e	enum:_spinTLDeviceEndianessMechanismEnums
DeviceEndianessMechanism_Standard	include/TransportLayerDefs.h	/^		DeviceEndianessMechanism_Standard,	\/*!< Handling the device endianness according to GenICam Schema 1.1 and later*\/$/;"	e	enum:Spinnaker::DeviceEndianessMechanismEnum
DeviceEndianessMechanism_Standard	include/spinc/TransportLayerDefsC.h	/^	DeviceEndianessMechanism_Standard,\/*!< Handling the device endianness according to GenICam Schema 1.1 and later*\/$/;"	e	enum:_spinTLDeviceEndianessMechanismEnums
DeviceEvent	include/DeviceEvent.h	/^	class SPINNAKER_API DeviceEvent : public virtual Event$/;"	c	namespace:Spinnaker
DeviceEventChannelCount	include/Camera.h	/^		GenApi::IInteger &DeviceEventChannelCount;$/;"	m	class:Spinnaker::Camera
DeviceEventChannelCount	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode DeviceEventChannelCount;$/;"	m	struct:_quickSpin
DeviceEventHandler	SpinnakerTest/DeviceEvents/DeviceEvents.cpp	/^	DeviceEventHandler(gcstring eventName) { m_eventName = eventName; m_count = 0; }$/;"	f	class:DeviceEventHandler
DeviceEventHandler	SpinnakerTest/DeviceEvents/DeviceEvents.cpp	/^class DeviceEventHandler : public DeviceEvent$/;"	c	file:
DeviceEventHandler	src/DeviceEvents/DeviceEvents.cpp	/^	DeviceEventHandler(gcstring eventName) { m_eventName = eventName; m_count = 0; }$/;"	f	class:DeviceEventHandler
DeviceEventHandler	src/DeviceEvents/DeviceEvents.cpp	/^class DeviceEventHandler : public DeviceEvent$/;"	c	file:
DeviceFamilyName	include/Camera.h	/^		GenApi::IString &DeviceFamilyName;$/;"	m	class:Spinnaker::Camera
DeviceFamilyName	include/spinc/QuickSpinDefsC.h	/^	quickSpinStringNode DeviceFamilyName;$/;"	m	struct:_quickSpin
DeviceFeaturePersistenceEnd	include/Camera.h	/^		GenApi::ICommand &DeviceFeaturePersistenceEnd;$/;"	m	class:Spinnaker::Camera
DeviceFeaturePersistenceEnd	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode DeviceFeaturePersistenceEnd;$/;"	m	struct:_quickSpin
DeviceFeaturePersistenceStart	include/Camera.h	/^		GenApi::ICommand &DeviceFeaturePersistenceStart;$/;"	m	class:Spinnaker::Camera
DeviceFeaturePersistenceStart	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode DeviceFeaturePersistenceStart;$/;"	m	struct:_quickSpin
DeviceFirmwareVersion	include/Camera.h	/^		GenApi::IString &DeviceFirmwareVersion;$/;"	m	class:Spinnaker::Camera
DeviceFirmwareVersion	include/spinc/QuickSpinDefsC.h	/^	quickSpinStringNode DeviceFirmwareVersion;$/;"	m	struct:_quickSpin
DeviceGenCPVersionMajor	include/Camera.h	/^		GenApi::IInteger &DeviceGenCPVersionMajor;$/;"	m	class:Spinnaker::Camera
DeviceGenCPVersionMajor	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode DeviceGenCPVersionMajor;$/;"	m	struct:_quickSpin
DeviceGenCPVersionMinor	include/Camera.h	/^		GenApi::IInteger &DeviceGenCPVersionMinor;$/;"	m	class:Spinnaker::Camera
DeviceGenCPVersionMinor	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode DeviceGenCPVersionMinor;$/;"	m	struct:_quickSpin
DeviceID	include/TransportLayerDevice.h	/^		GenApi::IString &DeviceID;$/;"	m	class:Spinnaker::TransportLayerDevice
DeviceID	include/TransportLayerInterface.h	/^		GenApi::IString &DeviceID;$/;"	m	class:Spinnaker::TransportLayerInterface
DeviceID	include/spinc/TransportLayerDeviceC.h	/^	quickSpinStringNode DeviceID;$/;"	m	struct:_quickSpinTLDevice
DeviceID	include/spinc/TransportLayerInterfaceC.h	/^	quickSpinStringNode DeviceID;$/;"	m	struct:_quickSpinTLInterface
DeviceIndicatorMode	include/Camera.h	/^		GenApi::IEnumerationT<DeviceIndicatorModeEnums> &DeviceIndicatorMode;$/;"	m	class:Spinnaker::Camera
DeviceIndicatorMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode DeviceIndicatorMode;$/;"	m	struct:_quickSpin
DeviceIndicatorModeEnums	include/CameraDefs.h	/^	enum DeviceIndicatorModeEnums	\/*!< Controls the behavior of the indicators (such as LEDs) showing the status of the Device.*\/$/;"	g	namespace:Spinnaker
DeviceIndicatorMode_Active	include/CameraDefs.h	/^		DeviceIndicatorMode_Active,	\/*!< Device's indicators are active showing their respective status.*\/$/;"	e	enum:Spinnaker::DeviceIndicatorModeEnums
DeviceIndicatorMode_Active	include/spinc/CameraDefsC.h	/^	DeviceIndicatorMode_Active,	\/*!< Device's indicators are active showing their respective status.*\/$/;"	e	enum:_spinDeviceIndicatorModeEnums
DeviceIndicatorMode_ErrorStatus	include/CameraDefs.h	/^		DeviceIndicatorMode_ErrorStatus,	\/*!< Device's indicators are inactive unless an error occurs.*\/$/;"	e	enum:Spinnaker::DeviceIndicatorModeEnums
DeviceIndicatorMode_ErrorStatus	include/spinc/CameraDefsC.h	/^	DeviceIndicatorMode_ErrorStatus,	\/*!< Device's indicators are inactive unless an error occurs.*\/$/;"	e	enum:_spinDeviceIndicatorModeEnums
DeviceIndicatorMode_Inactive	include/CameraDefs.h	/^		DeviceIndicatorMode_Inactive,	\/*!< Device's indicators are inactive (Off).*\/$/;"	e	enum:Spinnaker::DeviceIndicatorModeEnums
DeviceIndicatorMode_Inactive	include/spinc/CameraDefsC.h	/^	DeviceIndicatorMode_Inactive,	\/*!< Device's indicators are inactive (Off).*\/$/;"	e	enum:_spinDeviceIndicatorModeEnums
DeviceInformationStruct	include/GUI/SpinnakerGUI_WPF.h	/^		struct DeviceInformationStruct$/;"	s	namespace:Spinnaker::GUI_WPF
DeviceInstanceId	include/TransportLayerDevice.h	/^		GenApi::IString &DeviceInstanceId;$/;"	m	class:Spinnaker::TransportLayerDevice
DeviceInstanceId	include/spinc/TransportLayerDeviceC.h	/^	quickSpinStringNode DeviceInstanceId;$/;"	m	struct:_quickSpinTLDevice
DeviceLinkCommandTimeout	include/Camera.h	/^		GenApi::IFloat &DeviceLinkCommandTimeout;$/;"	m	class:Spinnaker::Camera
DeviceLinkCommandTimeout	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode DeviceLinkCommandTimeout;$/;"	m	struct:_quickSpin
DeviceLinkConnectionCount	include/Camera.h	/^		GenApi::IInteger &DeviceLinkConnectionCount;$/;"	m	class:Spinnaker::Camera
DeviceLinkConnectionCount	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode DeviceLinkConnectionCount;$/;"	m	struct:_quickSpin
DeviceLinkHeartbeatMode	include/Camera.h	/^		GenApi::IEnumerationT<DeviceLinkHeartbeatModeEnums> &DeviceLinkHeartbeatMode;$/;"	m	class:Spinnaker::Camera
DeviceLinkHeartbeatMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode DeviceLinkHeartbeatMode;$/;"	m	struct:_quickSpin
DeviceLinkHeartbeatModeEnums	include/CameraDefs.h	/^	enum DeviceLinkHeartbeatModeEnums	\/*!< Activate or deactivate the Link's heartbeat.*\/$/;"	g	namespace:Spinnaker
DeviceLinkHeartbeatMode_Off	include/CameraDefs.h	/^		DeviceLinkHeartbeatMode_Off,	\/*!< Disables the Link heartbeat.*\/$/;"	e	enum:Spinnaker::DeviceLinkHeartbeatModeEnums
DeviceLinkHeartbeatMode_Off	include/spinc/CameraDefsC.h	/^	DeviceLinkHeartbeatMode_Off,	\/*!< Disables the Link heartbeat.*\/$/;"	e	enum:_spinDeviceLinkHeartbeatModeEnums
DeviceLinkHeartbeatMode_On	include/CameraDefs.h	/^		DeviceLinkHeartbeatMode_On,	\/*!< Enables the Link heartbeat.*\/$/;"	e	enum:Spinnaker::DeviceLinkHeartbeatModeEnums
DeviceLinkHeartbeatMode_On	include/spinc/CameraDefsC.h	/^	DeviceLinkHeartbeatMode_On,	\/*!< Enables the Link heartbeat.*\/$/;"	e	enum:_spinDeviceLinkHeartbeatModeEnums
DeviceLinkHeartbeatTimeout	include/Camera.h	/^		GenApi::IFloat &DeviceLinkHeartbeatTimeout;$/;"	m	class:Spinnaker::Camera
DeviceLinkHeartbeatTimeout	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode DeviceLinkHeartbeatTimeout;$/;"	m	struct:_quickSpin
DeviceLinkSelector	include/Camera.h	/^		GenApi::IInteger &DeviceLinkSelector;$/;"	m	class:Spinnaker::Camera
DeviceLinkSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode DeviceLinkSelector;$/;"	m	struct:_quickSpin
DeviceLinkSpeed	include/Camera.h	/^		GenApi::IInteger &DeviceLinkSpeed;$/;"	m	class:Spinnaker::Camera
DeviceLinkSpeed	include/TransportLayerDevice.h	/^		GenApi::IInteger &DeviceLinkSpeed;$/;"	m	class:Spinnaker::TransportLayerDevice
DeviceLinkSpeed	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode DeviceLinkSpeed;$/;"	m	struct:_quickSpin
DeviceLinkSpeed	include/spinc/TransportLayerDeviceC.h	/^	quickSpinIntegerNode DeviceLinkSpeed;$/;"	m	struct:_quickSpinTLDevice
DeviceLinkThroughputLimit	include/Camera.h	/^		GenApi::IInteger &DeviceLinkThroughputLimit;$/;"	m	class:Spinnaker::Camera
DeviceLinkThroughputLimit	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode DeviceLinkThroughputLimit;$/;"	m	struct:_quickSpin
DeviceLinkThroughputLimitMode	include/Camera.h	/^		GenApi::IEnumerationT<DeviceLinkThroughputLimitModeEnums> &DeviceLinkThroughputLimitMode;$/;"	m	class:Spinnaker::Camera
DeviceLinkThroughputLimitMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode DeviceLinkThroughputLimitMode;$/;"	m	struct:_quickSpin
DeviceLinkThroughputLimitModeEnums	include/CameraDefs.h	/^	enum DeviceLinkThroughputLimitModeEnums	\/*!< Controls if the DeviceLinkThroughputLimit is active. When disabled, lower level TL specific features are expected to control the throughput. When enabled, DeviceLinkThroughputLimit controls the overall throughput.*\/$/;"	g	namespace:Spinnaker
DeviceLinkThroughputLimitMode_Off	include/CameraDefs.h	/^		DeviceLinkThroughputLimitMode_Off,	\/*!< Disables the DeviceLinkThroughputLimit feature.*\/$/;"	e	enum:Spinnaker::DeviceLinkThroughputLimitModeEnums
DeviceLinkThroughputLimitMode_Off	include/spinc/CameraDefsC.h	/^	DeviceLinkThroughputLimitMode_Off,	\/*!< Disables the DeviceLinkThroughputLimit feature.*\/$/;"	e	enum:_spinDeviceLinkThroughputLimitModeEnums
DeviceLinkThroughputLimitMode_On	include/CameraDefs.h	/^		DeviceLinkThroughputLimitMode_On,	\/*!< Enables the DeviceLinkThroughputLimit feature.*\/$/;"	e	enum:Spinnaker::DeviceLinkThroughputLimitModeEnums
DeviceLinkThroughputLimitMode_On	include/spinc/CameraDefsC.h	/^	DeviceLinkThroughputLimitMode_On,	\/*!< Enables the DeviceLinkThroughputLimit feature.*\/$/;"	e	enum:_spinDeviceLinkThroughputLimitModeEnums
DeviceManifestEntrySelector	include/Camera.h	/^		GenApi::IInteger &DeviceManifestEntrySelector;$/;"	m	class:Spinnaker::Camera
DeviceManifestEntrySelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode DeviceManifestEntrySelector;$/;"	m	struct:_quickSpin
DeviceManifestPrimaryURL	include/Camera.h	/^		GenApi::IString &DeviceManifestPrimaryURL;$/;"	m	class:Spinnaker::Camera
DeviceManifestPrimaryURL	include/spinc/QuickSpinDefsC.h	/^	quickSpinStringNode DeviceManifestPrimaryURL;$/;"	m	struct:_quickSpin
DeviceManifestSchemaMajorVersion	include/Camera.h	/^		GenApi::IInteger &DeviceManifestSchemaMajorVersion;$/;"	m	class:Spinnaker::Camera
DeviceManifestSchemaMajorVersion	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode DeviceManifestSchemaMajorVersion;$/;"	m	struct:_quickSpin
DeviceManifestSchemaMinorVersion	include/Camera.h	/^		GenApi::IInteger &DeviceManifestSchemaMinorVersion;$/;"	m	class:Spinnaker::Camera
DeviceManifestSchemaMinorVersion	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode DeviceManifestSchemaMinorVersion;$/;"	m	struct:_quickSpin
DeviceManifestSecondaryURL	include/Camera.h	/^		GenApi::IString &DeviceManifestSecondaryURL;$/;"	m	class:Spinnaker::Camera
DeviceManifestSecondaryURL	include/spinc/QuickSpinDefsC.h	/^	quickSpinStringNode DeviceManifestSecondaryURL;$/;"	m	struct:_quickSpin
DeviceManifestXMLMajorVersion	include/Camera.h	/^		GenApi::IInteger &DeviceManifestXMLMajorVersion;$/;"	m	class:Spinnaker::Camera
DeviceManifestXMLMajorVersion	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode DeviceManifestXMLMajorVersion;$/;"	m	struct:_quickSpin
DeviceManifestXMLMinorVersion	include/Camera.h	/^		GenApi::IInteger &DeviceManifestXMLMinorVersion;$/;"	m	class:Spinnaker::Camera
DeviceManifestXMLMinorVersion	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode DeviceManifestXMLMinorVersion;$/;"	m	struct:_quickSpin
DeviceManifestXMLSubMinorVersion	include/Camera.h	/^		GenApi::IInteger &DeviceManifestXMLSubMinorVersion;$/;"	m	class:Spinnaker::Camera
DeviceManifestXMLSubMinorVersion	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode DeviceManifestXMLSubMinorVersion;$/;"	m	struct:_quickSpin
DeviceManufacturerInfo	include/Camera.h	/^		GenApi::IString &DeviceManufacturerInfo;$/;"	m	class:Spinnaker::Camera
DeviceManufacturerInfo	include/spinc/QuickSpinDefsC.h	/^	quickSpinStringNode DeviceManufacturerInfo;$/;"	m	struct:_quickSpin
DeviceMaxThroughput	include/Camera.h	/^		GenApi::IInteger &DeviceMaxThroughput;$/;"	m	class:Spinnaker::Camera
DeviceMaxThroughput	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode DeviceMaxThroughput;$/;"	m	struct:_quickSpin
DeviceModelName	include/Camera.h	/^		GenApi::IString &DeviceModelName;$/;"	m	class:Spinnaker::Camera
DeviceModelName	include/TransportLayerDevice.h	/^		GenApi::IString &DeviceModelName;$/;"	m	class:Spinnaker::TransportLayerDevice
DeviceModelName	include/TransportLayerInterface.h	/^		GenApi::IString &DeviceModelName;$/;"	m	class:Spinnaker::TransportLayerInterface
DeviceModelName	include/spinc/QuickSpinDefsC.h	/^	quickSpinStringNode DeviceModelName;$/;"	m	struct:_quickSpin
DeviceModelName	include/spinc/TransportLayerDeviceC.h	/^	quickSpinStringNode DeviceModelName;$/;"	m	struct:_quickSpinTLDevice
DeviceModelName	include/spinc/TransportLayerInterfaceC.h	/^	quickSpinStringNode DeviceModelName;$/;"	m	struct:_quickSpinTLInterface
DeviceMulticastMonitorMode	include/TransportLayerDevice.h	/^		GenApi::IBoolean &DeviceMulticastMonitorMode;$/;"	m	class:Spinnaker::TransportLayerDevice
DeviceMulticastMonitorMode	include/spinc/TransportLayerDeviceC.h	/^	quickSpinBooleanNode DeviceMulticastMonitorMode;$/;"	m	struct:_quickSpinTLDevice
DeviceRegistersCheck	include/Camera.h	/^		GenApi::ICommand &DeviceRegistersCheck;$/;"	m	class:Spinnaker::Camera
DeviceRegistersCheck	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode DeviceRegistersCheck;$/;"	m	struct:_quickSpin
DeviceRegistersEndianness	include/Camera.h	/^		GenApi::IEnumerationT<DeviceRegistersEndiannessEnums> &DeviceRegistersEndianness;$/;"	m	class:Spinnaker::Camera
DeviceRegistersEndianness	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode DeviceRegistersEndianness;$/;"	m	struct:_quickSpin
DeviceRegistersEndiannessEnums	include/CameraDefs.h	/^	enum DeviceRegistersEndiannessEnums	\/*!< Endianess of the registers of the device.*\/$/;"	g	namespace:Spinnaker
DeviceRegistersEndianness_Big	include/CameraDefs.h	/^		DeviceRegistersEndianness_Big,	\/*!< Device's registers are big Endian.*\/$/;"	e	enum:Spinnaker::DeviceRegistersEndiannessEnums
DeviceRegistersEndianness_Big	include/spinc/CameraDefsC.h	/^	DeviceRegistersEndianness_Big,	\/*!< Device's registers are big Endian.*\/$/;"	e	enum:_spinDeviceRegistersEndiannessEnums
DeviceRegistersEndianness_Little	include/CameraDefs.h	/^		DeviceRegistersEndianness_Little,	\/*!< Device's registers are little Endian.*\/$/;"	e	enum:Spinnaker::DeviceRegistersEndiannessEnums
DeviceRegistersEndianness_Little	include/spinc/CameraDefsC.h	/^	DeviceRegistersEndianness_Little,	\/*!< Device's registers are little Endian.*\/$/;"	e	enum:_spinDeviceRegistersEndiannessEnums
DeviceRegistersStreamingEnd	include/Camera.h	/^		GenApi::ICommand &DeviceRegistersStreamingEnd;$/;"	m	class:Spinnaker::Camera
DeviceRegistersStreamingEnd	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode DeviceRegistersStreamingEnd;$/;"	m	struct:_quickSpin
DeviceRegistersStreamingStart	include/Camera.h	/^		GenApi::ICommand &DeviceRegistersStreamingStart;$/;"	m	class:Spinnaker::Camera
DeviceRegistersStreamingStart	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode DeviceRegistersStreamingStart;$/;"	m	struct:_quickSpin
DeviceRegistersValid	include/Camera.h	/^		GenApi::IBoolean &DeviceRegistersValid;$/;"	m	class:Spinnaker::Camera
DeviceRegistersValid	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode DeviceRegistersValid;$/;"	m	struct:_quickSpin
DeviceReset	include/Camera.h	/^		GenApi::ICommand &DeviceReset;$/;"	m	class:Spinnaker::Camera
DeviceReset	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode DeviceReset;$/;"	m	struct:_quickSpin
DeviceSFNCVersionMajor	include/Camera.h	/^		GenApi::IInteger &DeviceSFNCVersionMajor;$/;"	m	class:Spinnaker::Camera
DeviceSFNCVersionMajor	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode DeviceSFNCVersionMajor;$/;"	m	struct:_quickSpin
DeviceSFNCVersionMinor	include/Camera.h	/^		GenApi::IInteger &DeviceSFNCVersionMinor;$/;"	m	class:Spinnaker::Camera
DeviceSFNCVersionMinor	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode DeviceSFNCVersionMinor;$/;"	m	struct:_quickSpin
DeviceSFNCVersionSubMinor	include/Camera.h	/^		GenApi::IInteger &DeviceSFNCVersionSubMinor;$/;"	m	class:Spinnaker::Camera
DeviceSFNCVersionSubMinor	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode DeviceSFNCVersionSubMinor;$/;"	m	struct:_quickSpin
DeviceScanType	include/Camera.h	/^		GenApi::IEnumerationT<DeviceScanTypeEnums> &DeviceScanType;$/;"	m	class:Spinnaker::Camera
DeviceScanType	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode DeviceScanType;$/;"	m	struct:_quickSpin
DeviceScanTypeEnums	include/CameraDefs.h	/^	enum DeviceScanTypeEnums	\/*!< Scan type of the sensor of the device.*\/$/;"	g	namespace:Spinnaker
DeviceScanType_Areascan	include/CameraDefs.h	/^		DeviceScanType_Areascan,	\/*!< 2D sensor.*\/$/;"	e	enum:Spinnaker::DeviceScanTypeEnums
DeviceScanType_Areascan	include/spinc/CameraDefsC.h	/^	DeviceScanType_Areascan,	\/*!< 2D sensor.*\/$/;"	e	enum:_spinDeviceScanTypeEnums
DeviceScanType_Areascan3D	include/CameraDefs.h	/^		DeviceScanType_Areascan3D,	\/*!< device outputs 2D range image.*\/$/;"	e	enum:Spinnaker::DeviceScanTypeEnums
DeviceScanType_Areascan3D	include/spinc/CameraDefsC.h	/^	DeviceScanType_Areascan3D,	\/*!< device outputs 2D range image.*\/$/;"	e	enum:_spinDeviceScanTypeEnums
DeviceScanType_Linescan	include/CameraDefs.h	/^		DeviceScanType_Linescan,	\/*!< 1D sensor.*\/$/;"	e	enum:Spinnaker::DeviceScanTypeEnums
DeviceScanType_Linescan	include/spinc/CameraDefsC.h	/^	DeviceScanType_Linescan,	\/*!< 1D sensor.*\/$/;"	e	enum:_spinDeviceScanTypeEnums
DeviceScanType_Linescan3D	include/CameraDefs.h	/^		DeviceScanType_Linescan3D,	\/*!< device outputs 1D range image.*\/$/;"	e	enum:Spinnaker::DeviceScanTypeEnums
DeviceScanType_Linescan3D	include/spinc/CameraDefsC.h	/^	DeviceScanType_Linescan3D,	\/*!< device outputs 1D range image.*\/$/;"	e	enum:_spinDeviceScanTypeEnums
DeviceSelector	include/TransportLayerInterface.h	/^		GenApi::IInteger &DeviceSelector;$/;"	m	class:Spinnaker::TransportLayerInterface
DeviceSelector	include/spinc/TransportLayerInterfaceC.h	/^	quickSpinIntegerNode DeviceSelector;$/;"	m	struct:_quickSpinTLInterface
DeviceSerialNumber	include/Camera.h	/^		GenApi::IString &DeviceSerialNumber;$/;"	m	class:Spinnaker::Camera
DeviceSerialNumber	include/TransportLayerDevice.h	/^		GenApi::IString &DeviceSerialNumber;$/;"	m	class:Spinnaker::TransportLayerDevice
DeviceSerialNumber	include/spinc/QuickSpinDefsC.h	/^	quickSpinStringNode DeviceSerialNumber;$/;"	m	struct:_quickSpin
DeviceSerialNumber	include/spinc/TransportLayerDeviceC.h	/^	quickSpinStringNode DeviceSerialNumber;$/;"	m	struct:_quickSpinTLDevice
DeviceSerialPortBaudRate	include/Camera.h	/^		GenApi::IEnumerationT<DeviceSerialPortBaudRateEnums> &DeviceSerialPortBaudRate;$/;"	m	class:Spinnaker::Camera
DeviceSerialPortBaudRate	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode DeviceSerialPortBaudRate;$/;"	m	struct:_quickSpin
DeviceSerialPortBaudRateEnums	include/CameraDefs.h	/^	enum DeviceSerialPortBaudRateEnums	\/*!< This feature controls the baud rate used by the selected serial port.*\/$/;"	g	namespace:Spinnaker
DeviceSerialPortBaudRate_Baud115200	include/CameraDefs.h	/^		DeviceSerialPortBaudRate_Baud115200,	\/*!< Serial port speed of 115200 baud.*\/$/;"	e	enum:Spinnaker::DeviceSerialPortBaudRateEnums
DeviceSerialPortBaudRate_Baud115200	include/spinc/CameraDefsC.h	/^	DeviceSerialPortBaudRate_Baud115200,	\/*!< Serial port speed of 115200 baud.*\/$/;"	e	enum:_spinDeviceSerialPortBaudRateEnums
DeviceSerialPortBaudRate_Baud19200	include/CameraDefs.h	/^		DeviceSerialPortBaudRate_Baud19200,	\/*!< Serial port speed of 19200 baud.*\/$/;"	e	enum:Spinnaker::DeviceSerialPortBaudRateEnums
DeviceSerialPortBaudRate_Baud19200	include/spinc/CameraDefsC.h	/^	DeviceSerialPortBaudRate_Baud19200,	\/*!< Serial port speed of 19200 baud.*\/$/;"	e	enum:_spinDeviceSerialPortBaudRateEnums
DeviceSerialPortBaudRate_Baud230400	include/CameraDefs.h	/^		DeviceSerialPortBaudRate_Baud230400,	\/*!< Serial port speed of 230400 baud.*\/$/;"	e	enum:Spinnaker::DeviceSerialPortBaudRateEnums
DeviceSerialPortBaudRate_Baud230400	include/spinc/CameraDefsC.h	/^	DeviceSerialPortBaudRate_Baud230400,	\/*!< Serial port speed of 230400 baud.*\/$/;"	e	enum:_spinDeviceSerialPortBaudRateEnums
DeviceSerialPortBaudRate_Baud38400	include/CameraDefs.h	/^		DeviceSerialPortBaudRate_Baud38400,	\/*!< Serial port speed of 38400 baud.*\/$/;"	e	enum:Spinnaker::DeviceSerialPortBaudRateEnums
DeviceSerialPortBaudRate_Baud38400	include/spinc/CameraDefsC.h	/^	DeviceSerialPortBaudRate_Baud38400,	\/*!< Serial port speed of 38400 baud.*\/$/;"	e	enum:_spinDeviceSerialPortBaudRateEnums
DeviceSerialPortBaudRate_Baud460800	include/CameraDefs.h	/^		DeviceSerialPortBaudRate_Baud460800,	\/*!< Serial port speed of 460800 baud.*\/$/;"	e	enum:Spinnaker::DeviceSerialPortBaudRateEnums
DeviceSerialPortBaudRate_Baud460800	include/spinc/CameraDefsC.h	/^	DeviceSerialPortBaudRate_Baud460800,	\/*!< Serial port speed of 460800 baud.*\/$/;"	e	enum:_spinDeviceSerialPortBaudRateEnums
DeviceSerialPortBaudRate_Baud57600	include/CameraDefs.h	/^		DeviceSerialPortBaudRate_Baud57600,	\/*!< Serial port speed of 57600 baud.*\/$/;"	e	enum:Spinnaker::DeviceSerialPortBaudRateEnums
DeviceSerialPortBaudRate_Baud57600	include/spinc/CameraDefsC.h	/^	DeviceSerialPortBaudRate_Baud57600,	\/*!< Serial port speed of 57600 baud.*\/$/;"	e	enum:_spinDeviceSerialPortBaudRateEnums
DeviceSerialPortBaudRate_Baud921600	include/CameraDefs.h	/^		DeviceSerialPortBaudRate_Baud921600,	\/*!< Serial port speed of 921600 baud.*\/$/;"	e	enum:Spinnaker::DeviceSerialPortBaudRateEnums
DeviceSerialPortBaudRate_Baud921600	include/spinc/CameraDefsC.h	/^	DeviceSerialPortBaudRate_Baud921600,	\/*!< Serial port speed of 921600 baud.*\/$/;"	e	enum:_spinDeviceSerialPortBaudRateEnums
DeviceSerialPortBaudRate_Baud9600	include/CameraDefs.h	/^		DeviceSerialPortBaudRate_Baud9600,	\/*!< Serial port speed of 9600 baud.*\/$/;"	e	enum:Spinnaker::DeviceSerialPortBaudRateEnums
DeviceSerialPortBaudRate_Baud9600	include/spinc/CameraDefsC.h	/^	DeviceSerialPortBaudRate_Baud9600,	\/*!< Serial port speed of 9600 baud.*\/$/;"	e	enum:_spinDeviceSerialPortBaudRateEnums
DeviceSerialPortSelector	include/Camera.h	/^		GenApi::IEnumerationT<DeviceSerialPortSelectorEnums> &DeviceSerialPortSelector;$/;"	m	class:Spinnaker::Camera
DeviceSerialPortSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode DeviceSerialPortSelector;$/;"	m	struct:_quickSpin
DeviceSerialPortSelectorEnums	include/CameraDefs.h	/^	enum DeviceSerialPortSelectorEnums	\/*!< Selects which serial port of the device to control.*\/$/;"	g	namespace:Spinnaker
DeviceSerialPortSelector_CameraLink	include/CameraDefs.h	/^		DeviceSerialPortSelector_CameraLink,	\/*!< Serial port associated to the Camera link connection.*\/$/;"	e	enum:Spinnaker::DeviceSerialPortSelectorEnums
DeviceSerialPortSelector_CameraLink	include/spinc/CameraDefsC.h	/^	DeviceSerialPortSelector_CameraLink,	\/*!< Serial port associated to the Camera link connection.*\/$/;"	e	enum:_spinDeviceSerialPortSelectorEnums
DeviceStreamChannelCount	include/Camera.h	/^		GenApi::IInteger &DeviceStreamChannelCount;$/;"	m	class:Spinnaker::Camera
DeviceStreamChannelCount	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode DeviceStreamChannelCount;$/;"	m	struct:_quickSpin
DeviceStreamChannelEndianness	include/Camera.h	/^		GenApi::IEnumerationT<DeviceStreamChannelEndiannessEnums> &DeviceStreamChannelEndianness;$/;"	m	class:Spinnaker::Camera
DeviceStreamChannelEndianness	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode DeviceStreamChannelEndianness;$/;"	m	struct:_quickSpin
DeviceStreamChannelEndiannessEnums	include/CameraDefs.h	/^	enum DeviceStreamChannelEndiannessEnums	\/*!< Endianess of multi-byte pixel data for this stream.*\/$/;"	g	namespace:Spinnaker
DeviceStreamChannelEndianness_Big	include/CameraDefs.h	/^		DeviceStreamChannelEndianness_Big,	\/*!< Stream channel data is big Endian.*\/$/;"	e	enum:Spinnaker::DeviceStreamChannelEndiannessEnums
DeviceStreamChannelEndianness_Big	include/spinc/CameraDefsC.h	/^	DeviceStreamChannelEndianness_Big,	\/*!< Stream channel data is big Endian.*\/$/;"	e	enum:_spinDeviceStreamChannelEndiannessEnums
DeviceStreamChannelEndianness_Little	include/CameraDefs.h	/^		DeviceStreamChannelEndianness_Little,	\/*!< Stream channel data is little Endian.*\/$/;"	e	enum:Spinnaker::DeviceStreamChannelEndiannessEnums
DeviceStreamChannelEndianness_Little	include/spinc/CameraDefsC.h	/^	DeviceStreamChannelEndianness_Little,	\/*!< Stream channel data is little Endian.*\/$/;"	e	enum:_spinDeviceStreamChannelEndiannessEnums
DeviceStreamChannelLink	include/Camera.h	/^		GenApi::IInteger &DeviceStreamChannelLink;$/;"	m	class:Spinnaker::Camera
DeviceStreamChannelLink	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode DeviceStreamChannelLink;$/;"	m	struct:_quickSpin
DeviceStreamChannelPacketSize	include/Camera.h	/^		GenApi::IInteger &DeviceStreamChannelPacketSize;$/;"	m	class:Spinnaker::Camera
DeviceStreamChannelPacketSize	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode DeviceStreamChannelPacketSize;$/;"	m	struct:_quickSpin
DeviceStreamChannelSelector	include/Camera.h	/^		GenApi::IInteger &DeviceStreamChannelSelector;$/;"	m	class:Spinnaker::Camera
DeviceStreamChannelSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode DeviceStreamChannelSelector;$/;"	m	struct:_quickSpin
DeviceStreamChannelType	include/Camera.h	/^		GenApi::IEnumerationT<DeviceStreamChannelTypeEnums> &DeviceStreamChannelType;$/;"	m	class:Spinnaker::Camera
DeviceStreamChannelType	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode DeviceStreamChannelType;$/;"	m	struct:_quickSpin
DeviceStreamChannelTypeEnums	include/CameraDefs.h	/^	enum DeviceStreamChannelTypeEnums	\/*!< Reports the type of the stream channel.*\/$/;"	g	namespace:Spinnaker
DeviceStreamChannelType_Receiver	include/CameraDefs.h	/^		DeviceStreamChannelType_Receiver,	\/*!< Data stream receiver channel.*\/$/;"	e	enum:Spinnaker::DeviceStreamChannelTypeEnums
DeviceStreamChannelType_Receiver	include/spinc/CameraDefsC.h	/^	DeviceStreamChannelType_Receiver,	\/*!< Data stream receiver channel.*\/$/;"	e	enum:_spinDeviceStreamChannelTypeEnums
DeviceStreamChannelType_Transmitter	include/CameraDefs.h	/^		DeviceStreamChannelType_Transmitter,	\/*!< Data stream transmitter channel.*\/$/;"	e	enum:Spinnaker::DeviceStreamChannelTypeEnums
DeviceStreamChannelType_Transmitter	include/spinc/CameraDefsC.h	/^	DeviceStreamChannelType_Transmitter,	\/*!< Data stream transmitter channel.*\/$/;"	e	enum:_spinDeviceStreamChannelTypeEnums
DeviceTLType	include/Camera.h	/^		GenApi::IEnumerationT<DeviceTLTypeEnums> &DeviceTLType;$/;"	m	class:Spinnaker::Camera
DeviceTLType	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode DeviceTLType;$/;"	m	struct:_quickSpin
DeviceTLTypeEnums	include/CameraDefs.h	/^	enum DeviceTLTypeEnums	\/*!< Transport Layer type of the device.*\/$/;"	g	namespace:Spinnaker
DeviceTLType_CameraLink	include/CameraDefs.h	/^		DeviceTLType_CameraLink,	\/*!< Camera Link.*\/$/;"	e	enum:Spinnaker::DeviceTLTypeEnums
DeviceTLType_CameraLink	include/spinc/CameraDefsC.h	/^	DeviceTLType_CameraLink,	\/*!< Camera Link.*\/$/;"	e	enum:_spinDeviceTLTypeEnums
DeviceTLType_CameraLinkHS	include/CameraDefs.h	/^		DeviceTLType_CameraLinkHS,	\/*!< Camera Link High Speed.*\/$/;"	e	enum:Spinnaker::DeviceTLTypeEnums
DeviceTLType_CameraLinkHS	include/spinc/CameraDefsC.h	/^	DeviceTLType_CameraLinkHS,	\/*!< Camera Link High Speed.*\/$/;"	e	enum:_spinDeviceTLTypeEnums
DeviceTLType_CoaXPress	include/CameraDefs.h	/^		DeviceTLType_CoaXPress,	\/*!< CoaXPress.*\/$/;"	e	enum:Spinnaker::DeviceTLTypeEnums
DeviceTLType_CoaXPress	include/spinc/CameraDefsC.h	/^	DeviceTLType_CoaXPress,	\/*!< CoaXPress.*\/$/;"	e	enum:_spinDeviceTLTypeEnums
DeviceTLType_Custom	include/CameraDefs.h	/^		DeviceTLType_Custom,	\/*!< Custom Transport Layer.*\/$/;"	e	enum:Spinnaker::DeviceTLTypeEnums
DeviceTLType_Custom	include/spinc/CameraDefsC.h	/^	DeviceTLType_Custom,	\/*!< Custom Transport Layer.*\/$/;"	e	enum:_spinDeviceTLTypeEnums
DeviceTLType_GigEVision	include/CameraDefs.h	/^		DeviceTLType_GigEVision,	\/*!< GigE Vision.*\/$/;"	e	enum:Spinnaker::DeviceTLTypeEnums
DeviceTLType_GigEVision	include/spinc/CameraDefsC.h	/^	DeviceTLType_GigEVision,	\/*!< GigE Vision.*\/$/;"	e	enum:_spinDeviceTLTypeEnums
DeviceTLType_USB3Vision	include/CameraDefs.h	/^		DeviceTLType_USB3Vision,	\/*!< USB3 Vision.*\/$/;"	e	enum:Spinnaker::DeviceTLTypeEnums
DeviceTLType_USB3Vision	include/spinc/CameraDefsC.h	/^	DeviceTLType_USB3Vision,	\/*!< USB3 Vision.*\/$/;"	e	enum:_spinDeviceTLTypeEnums
DeviceTLVersionMajor	include/Camera.h	/^		GenApi::IInteger &DeviceTLVersionMajor;$/;"	m	class:Spinnaker::Camera
DeviceTLVersionMajor	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode DeviceTLVersionMajor;$/;"	m	struct:_quickSpin
DeviceTLVersionMinor	include/Camera.h	/^		GenApi::IInteger &DeviceTLVersionMinor;$/;"	m	class:Spinnaker::Camera
DeviceTLVersionMinor	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode DeviceTLVersionMinor;$/;"	m	struct:_quickSpin
DeviceTLVersionSubMinor	include/Camera.h	/^		GenApi::IInteger &DeviceTLVersionSubMinor;$/;"	m	class:Spinnaker::Camera
DeviceTLVersionSubMinor	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode DeviceTLVersionSubMinor;$/;"	m	struct:_quickSpin
DeviceTapGeometry	include/Camera.h	/^		GenApi::IEnumerationT<DeviceTapGeometryEnums> &DeviceTapGeometry;$/;"	m	class:Spinnaker::Camera
DeviceTapGeometry	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode DeviceTapGeometry;$/;"	m	struct:_quickSpin
DeviceTapGeometryEnums	include/CameraDefs.h	/^	enum DeviceTapGeometryEnums	\/*!< This device tap geometry feature describes the geometrical properties characterizing the taps of a camera as presented at the output of the device.*\/$/;"	g	namespace:Spinnaker
DeviceTapGeometry_Geometry_10X	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_10X,	\/*!< Geometry_10X*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_10X	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_10X,	\/*!< Geometry_10X*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_10X_1Y	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_10X_1Y,	\/*!< Geometry_10X_1Y*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_10X_1Y	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_10X_1Y,	\/*!< Geometry_10X_1Y*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_1X,	\/*!< Geometry_1X*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_1X,	\/*!< Geometry_1X*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X10	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_1X10,	\/*!< Geometry_1X10*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X10	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_1X10,	\/*!< Geometry_1X10*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X10_1Y	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_1X10_1Y,	\/*!< Geometry_1X10_1Y*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X10_1Y	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_1X10_1Y,	\/*!< Geometry_1X10_1Y*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X2	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_1X2,	\/*!< Geometry_1X2*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X2	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_1X2,	\/*!< Geometry_1X2*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X2_1Y	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_1X2_1Y,	\/*!< Geometry_1X2_1Y*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X2_1Y	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_1X2_1Y,	\/*!< Geometry_1X2_1Y*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X2_1Y2	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_1X2_1Y2,	\/*!< Geometry_1X2_1Y2*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X2_1Y2	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_1X2_1Y2,	\/*!< Geometry_1X2_1Y2*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X2_2YE	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_1X2_2YE,	\/*!< Geometry_1X2_2YE*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X2_2YE	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_1X2_2YE,	\/*!< Geometry_1X2_2YE*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X3	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_1X3,	\/*!< Geometry_1X3*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X3	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_1X3,	\/*!< Geometry_1X3*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X3_1Y	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_1X3_1Y,	\/*!< Geometry_1X3_1Y*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X3_1Y	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_1X3_1Y,	\/*!< Geometry_1X3_1Y*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X4	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_1X4,	\/*!< Geometry_1X4*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X4	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_1X4,	\/*!< Geometry_1X4*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X4_1Y	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_1X4_1Y,	\/*!< Geometry_1X4_1Y*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X4_1Y	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_1X4_1Y,	\/*!< Geometry_1X4_1Y*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X8	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_1X8,	\/*!< Geometry_1X8*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X8	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_1X8,	\/*!< Geometry_1X8*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X8_1Y	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_1X8_1Y,	\/*!< Geometry_1X8_1Y*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X8_1Y	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_1X8_1Y,	\/*!< Geometry_1X8_1Y*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X_1Y	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_1X_1Y,	\/*!< Geometry_1X_1Y*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X_1Y	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_1X_1Y,	\/*!< Geometry_1X_1Y*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X_1Y2	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_1X_1Y2,	\/*!< Geometry_1X_1Y2*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X_1Y2	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_1X_1Y2,	\/*!< Geometry_1X_1Y2*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X_2YE	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_1X_2YE,	\/*!< Geometry_1X_2YE*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_1X_2YE	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_1X_2YE,	\/*!< Geometry_1X_2YE*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2X	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_2X,	\/*!< Geometry_2X*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2X	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_2X,	\/*!< Geometry_2X*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2X2	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_2X2,	\/*!< Geometry_2X2*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2X2	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_2X2,	\/*!< Geometry_2X2*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2X2E	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_2X2E,	\/*!< Geometry_2X2E*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2X2E	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_2X2E,	\/*!< Geometry_2X2E*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2X2E_1YGeometry_2X2M_1Y	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_2X2E_1YGeometry_2X2M_1Y,	\/*!< Geometry_2X2E_1YGeometry_2X2M_1Y*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2X2E_1YGeometry_2X2M_1Y	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_2X2E_1YGeometry_2X2M_1Y,	\/*!< Geometry_2X2E_1YGeometry_2X2M_1Y*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2X2E_2YE	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_2X2E_2YE,	\/*!< Geometry_2X2E_2YE*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2X2E_2YE	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_2X2E_2YE,	\/*!< Geometry_2X2E_2YE*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2X2M	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_2X2M,	\/*!< Geometry_2X2M*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2X2M	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_2X2M,	\/*!< Geometry_2X2M*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2X2_1Y	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_2X2_1Y,	\/*!< Geometry_2X2_1Y*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2X2_1Y	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_2X2_1Y,	\/*!< Geometry_2X2_1Y*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2XE	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_2XE,	\/*!< Geometry_2XE*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2XE	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_2XE,	\/*!< Geometry_2XE*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2XE_1Y2	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_2XE_1Y2,	\/*!< Geometry_2XE_1Y2*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2XE_1Y2	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_2XE_1Y2,	\/*!< Geometry_2XE_1Y2*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2XE_2YE	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_2XE_2YE,	\/*!< Geometry_2XE_2YE*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2XE_2YE	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_2XE_2YE,	\/*!< Geometry_2XE_2YE*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2XM	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_2XM,	\/*!< Geometry_2XM*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2XM	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_2XM,	\/*!< Geometry_2XM*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2XM_1Y	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_2XM_1Y,	\/*!< Geometry_2XM_1Y*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2XM_1Y	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_2XM_1Y,	\/*!< Geometry_2XM_1Y*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2XM_1Y2	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_2XM_1Y2,	\/*!< Geometry_2XM_1Y2*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2XM_1Y2	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_2XM_1Y2,	\/*!< Geometry_2XM_1Y2*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2XM_2YE	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_2XM_2YE,	\/*!< Geometry_2XM_2YE*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2XM_2YE	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_2XM_2YE,	\/*!< Geometry_2XM_2YE*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2X_1Y	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_2X_1Y,	\/*!< Geometry_2X_1Y*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2X_1Y	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_2X_1Y,	\/*!< Geometry_2X_1Y*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2X_1Y2Geometry_2XE_1Y	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_2X_1Y2Geometry_2XE_1Y,	\/*!< Geometry_2X_1Y2Geometry_2XE_1Y*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2X_1Y2Geometry_2XE_1Y	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_2X_1Y2Geometry_2XE_1Y,	\/*!< Geometry_2X_1Y2Geometry_2XE_1Y*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2X_2YE	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_2X_2YE,	\/*!< Geometry_2X_2YE*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_2X_2YE	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_2X_2YE,	\/*!< Geometry_2X_2YE*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_3X	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_3X,	\/*!< Geometry_3X*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_3X	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_3X,	\/*!< Geometry_3X*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_3X_1Y	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_3X_1Y,	\/*!< Geometry_3X_1Y*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_3X_1Y	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_3X_1Y,	\/*!< Geometry_3X_1Y*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_4X	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_4X,	\/*!< Geometry_4X*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_4X	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_4X,	\/*!< Geometry_4X*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_4X2	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_4X2,	\/*!< Geometry_4X2*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_4X2	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_4X2,	\/*!< Geometry_4X2*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_4X2E	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_4X2E,	\/*!< Geometry_4X2E*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_4X2E	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_4X2E,	\/*!< Geometry_4X2E*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_4X2E_1Y	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_4X2E_1Y,	\/*!< Geometry_4X2E_1Y*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_4X2E_1Y	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_4X2E_1Y,	\/*!< Geometry_4X2E_1Y*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_4X2_1Y	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_4X2_1Y,	\/*!< Geometry_4X2_1Y*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_4X2_1Y	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_4X2_1Y,	\/*!< Geometry_4X2_1Y*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_4X_1Y	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_4X_1Y,	\/*!< Geometry_4X_1Y*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_4X_1Y	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_4X_1Y,	\/*!< Geometry_4X_1Y*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_8X	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_8X,	\/*!< Geometry_8X*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_8X	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_8X,	\/*!< Geometry_8X*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTapGeometry_Geometry_8X_1Y	include/CameraDefs.h	/^		DeviceTapGeometry_Geometry_8X_1Y,	\/*!< Geometry_8X_1Y*\/$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
DeviceTapGeometry_Geometry_8X_1Y	include/spinc/CameraDefsC.h	/^	DeviceTapGeometry_Geometry_8X_1Y,	\/*!< Geometry_8X_1Y*\/$/;"	e	enum:_spinDeviceTapGeometryEnums
DeviceTemperature	include/Camera.h	/^		GenApi::IFloat &DeviceTemperature;$/;"	m	class:Spinnaker::Camera
DeviceTemperature	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode DeviceTemperature;$/;"	m	struct:_quickSpin
DeviceTemperatureSelector	include/Camera.h	/^		GenApi::IEnumerationT<DeviceTemperatureSelectorEnums> &DeviceTemperatureSelector;$/;"	m	class:Spinnaker::Camera
DeviceTemperatureSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode DeviceTemperatureSelector;$/;"	m	struct:_quickSpin
DeviceTemperatureSelectorEnums	include/CameraDefs.h	/^	enum DeviceTemperatureSelectorEnums	\/*!< Selects the location within the device, where the temperature will be measured.*\/$/;"	g	namespace:Spinnaker
DeviceTemperatureSelector_Mainboard	include/CameraDefs.h	/^		DeviceTemperatureSelector_Mainboard,	\/*!< Temperature of the device's mainboard.*\/$/;"	e	enum:Spinnaker::DeviceTemperatureSelectorEnums
DeviceTemperatureSelector_Mainboard	include/spinc/CameraDefsC.h	/^	DeviceTemperatureSelector_Mainboard,	\/*!< Temperature of the device's mainboard.*\/$/;"	e	enum:_spinDeviceTemperatureSelectorEnums
DeviceTemperatureSelector_Sensor	include/CameraDefs.h	/^		DeviceTemperatureSelector_Sensor,	\/*!< Temperature of the image sensor of the camera.*\/$/;"	e	enum:Spinnaker::DeviceTemperatureSelectorEnums
DeviceTemperatureSelector_Sensor	include/spinc/CameraDefsC.h	/^	DeviceTemperatureSelector_Sensor,	\/*!< Temperature of the image sensor of the camera.*\/$/;"	e	enum:_spinDeviceTemperatureSelectorEnums
DeviceType	include/Camera.h	/^		GenApi::IEnumerationT<DeviceTypeEnums> &DeviceType;$/;"	m	class:Spinnaker::Camera
DeviceType	include/TransportLayerDevice.h	/^		GenApi::IEnumerationT<DeviceTypeEnum> &DeviceType;$/;"	m	class:Spinnaker::TransportLayerDevice
DeviceType	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode DeviceType;$/;"	m	struct:_quickSpin
DeviceType	include/spinc/TransportLayerDeviceC.h	/^	quickSpinEnumerationNode DeviceType;$/;"	m	struct:_quickSpinTLDevice
DeviceTypeEnum	include/TransportLayerDefs.h	/^	enum DeviceTypeEnum	\/*!< Transport layer type of the device.*\/$/;"	g	namespace:Spinnaker
DeviceTypeEnums	include/CameraDefs.h	/^	enum DeviceTypeEnums	\/*!< Returns the device type.*\/$/;"	g	namespace:Spinnaker
DeviceType_CL	include/TransportLayerDefs.h	/^		DeviceType_CL,	\/*!< TL - CL*\/$/;"	e	enum:Spinnaker::DeviceTypeEnum
DeviceType_CL	include/spinc/TransportLayerDefsC.h	/^	DeviceType_CL,\/*!< TL - CL*\/$/;"	e	enum:_spinTLDeviceTypeEnums
DeviceType_CLHS	include/TransportLayerDefs.h	/^		DeviceType_CLHS,	\/*!< TL - CLHS*\/$/;"	e	enum:Spinnaker::DeviceTypeEnum
DeviceType_CLHS	include/spinc/TransportLayerDefsC.h	/^	DeviceType_CLHS,\/*!< TL - CLHS*\/$/;"	e	enum:_spinTLDeviceTypeEnums
DeviceType_CXP	include/TransportLayerDefs.h	/^		DeviceType_CXP,	\/*!< TL - CXP*\/$/;"	e	enum:Spinnaker::DeviceTypeEnum
DeviceType_CXP	include/spinc/TransportLayerDefsC.h	/^	DeviceType_CXP,\/*!< TL - CXP*\/$/;"	e	enum:_spinTLDeviceTypeEnums
DeviceType_Custom	include/TransportLayerDefs.h	/^		DeviceType_Custom,	\/*!< TL - Custom*\/$/;"	e	enum:Spinnaker::DeviceTypeEnum
DeviceType_Custom	include/spinc/TransportLayerDefsC.h	/^	DeviceType_Custom,\/*!< TL - Custom*\/$/;"	e	enum:_spinTLDeviceTypeEnums
DeviceType_ETHERNET	include/TransportLayerDefs.h	/^		DeviceType_ETHERNET,	\/*!< TL - ETHERNET*\/$/;"	e	enum:Spinnaker::DeviceTypeEnum
DeviceType_ETHERNET	include/spinc/TransportLayerDefsC.h	/^	DeviceType_ETHERNET,\/*!< TL - ETHERNET*\/$/;"	e	enum:_spinTLDeviceTypeEnums
DeviceType_GEV	include/TransportLayerDefs.h	/^		DeviceType_GEV,	\/*!< TL - GEV*\/$/;"	e	enum:Spinnaker::DeviceTypeEnum
DeviceType_GEV	include/spinc/TransportLayerDefsC.h	/^	DeviceType_GEV,\/*!< TL - GEV*\/$/;"	e	enum:_spinTLDeviceTypeEnums
DeviceType_IIDC	include/TransportLayerDefs.h	/^		DeviceType_IIDC,	\/*!< TL - IIDC*\/$/;"	e	enum:Spinnaker::DeviceTypeEnum
DeviceType_IIDC	include/spinc/TransportLayerDefsC.h	/^	DeviceType_IIDC,\/*!< TL - IIDC*\/$/;"	e	enum:_spinTLDeviceTypeEnums
DeviceType_Mixed	include/TransportLayerDefs.h	/^		DeviceType_Mixed,	\/*!< TL - Mixed*\/$/;"	e	enum:Spinnaker::DeviceTypeEnum
DeviceType_Mixed	include/spinc/TransportLayerDefsC.h	/^	DeviceType_Mixed,\/*!< TL - Mixed*\/$/;"	e	enum:_spinTLDeviceTypeEnums
DeviceType_PCI	include/TransportLayerDefs.h	/^		DeviceType_PCI,	\/*!< TL - PCI*\/$/;"	e	enum:Spinnaker::DeviceTypeEnum
DeviceType_PCI	include/spinc/TransportLayerDefsC.h	/^	DeviceType_PCI,\/*!< TL - PCI*\/$/;"	e	enum:_spinTLDeviceTypeEnums
DeviceType_Peripheral	include/CameraDefs.h	/^		DeviceType_Peripheral,	\/*!< Controllable device (with no data stream handling).*\/$/;"	e	enum:Spinnaker::DeviceTypeEnums
DeviceType_Peripheral	include/spinc/CameraDefsC.h	/^	DeviceType_Peripheral,	\/*!< Controllable device (with no data stream handling).*\/$/;"	e	enum:_spinDeviceTypeEnums
DeviceType_Receiver	include/CameraDefs.h	/^		DeviceType_Receiver,	\/*!< Data stream receiver device.*\/$/;"	e	enum:Spinnaker::DeviceTypeEnums
DeviceType_Receiver	include/spinc/CameraDefsC.h	/^	DeviceType_Receiver,	\/*!< Data stream receiver device.*\/$/;"	e	enum:_spinDeviceTypeEnums
DeviceType_Transceiver	include/CameraDefs.h	/^		DeviceType_Transceiver,	\/*!< Data stream receiver and transmitter device.*\/$/;"	e	enum:Spinnaker::DeviceTypeEnums
DeviceType_Transceiver	include/spinc/CameraDefsC.h	/^	DeviceType_Transceiver,	\/*!< Data stream receiver and transmitter device.*\/$/;"	e	enum:_spinDeviceTypeEnums
DeviceType_Transmitter	include/CameraDefs.h	/^		DeviceType_Transmitter,	\/*!< Data stream transmitter device.*\/$/;"	e	enum:Spinnaker::DeviceTypeEnums
DeviceType_Transmitter	include/spinc/CameraDefsC.h	/^	DeviceType_Transmitter,	\/*!< Data stream transmitter device.*\/$/;"	e	enum:_spinDeviceTypeEnums
DeviceType_U3V	include/TransportLayerDefs.h	/^		DeviceType_U3V,	\/*!< TL - U3V*\/$/;"	e	enum:Spinnaker::DeviceTypeEnum
DeviceType_U3V	include/spinc/TransportLayerDefsC.h	/^	DeviceType_U3V,\/*!< TL - U3V*\/$/;"	e	enum:_spinTLDeviceTypeEnums
DeviceType_UVC	include/TransportLayerDefs.h	/^		DeviceType_UVC,	\/*!< TL - UVC*\/$/;"	e	enum:Spinnaker::DeviceTypeEnum
DeviceType_UVC	include/spinc/TransportLayerDefsC.h	/^	DeviceType_UVC,\/*!< TL - UVC*\/$/;"	e	enum:_spinTLDeviceTypeEnums
DeviceUnlock	include/TransportLayerInterface.h	/^		GenApi::IString &DeviceUnlock;$/;"	m	class:Spinnaker::TransportLayerInterface
DeviceUnlock	include/spinc/TransportLayerInterfaceC.h	/^	quickSpinStringNode DeviceUnlock;$/;"	m	struct:_quickSpinTLInterface
DeviceUpdateList	include/TransportLayerInterface.h	/^		GenApi::ICommand &DeviceUpdateList;$/;"	m	class:Spinnaker::TransportLayerInterface
DeviceUpdateList	include/spinc/TransportLayerInterfaceC.h	/^	quickSpinCommandNode DeviceUpdateList;$/;"	m	struct:_quickSpinTLInterface
DeviceUserID	include/Camera.h	/^		GenApi::IString &DeviceUserID;$/;"	m	class:Spinnaker::Camera
DeviceUserID	include/TransportLayerDevice.h	/^		GenApi::IString &DeviceUserID;$/;"	m	class:Spinnaker::TransportLayerDevice
DeviceUserID	include/spinc/QuickSpinDefsC.h	/^	quickSpinStringNode DeviceUserID;$/;"	m	struct:_quickSpin
DeviceUserID	include/spinc/TransportLayerDeviceC.h	/^	quickSpinStringNode DeviceUserID;$/;"	m	struct:_quickSpinTLDevice
DeviceVendorName	include/Camera.h	/^		GenApi::IString &DeviceVendorName;$/;"	m	class:Spinnaker::Camera
DeviceVendorName	include/TransportLayerDevice.h	/^		GenApi::IString &DeviceVendorName;$/;"	m	class:Spinnaker::TransportLayerDevice
DeviceVendorName	include/TransportLayerInterface.h	/^		GenApi::IString &DeviceVendorName;$/;"	m	class:Spinnaker::TransportLayerInterface
DeviceVendorName	include/spinc/QuickSpinDefsC.h	/^	quickSpinStringNode DeviceVendorName;$/;"	m	struct:_quickSpin
DeviceVendorName	include/spinc/TransportLayerDeviceC.h	/^	quickSpinStringNode DeviceVendorName;$/;"	m	struct:_quickSpinTLDevice
DeviceVendorName	include/spinc/TransportLayerInterfaceC.h	/^	quickSpinStringNode DeviceVendorName;$/;"	m	struct:_quickSpinTLInterface
DeviceVersion	include/Camera.h	/^		GenApi::IString &DeviceVersion;$/;"	m	class:Spinnaker::Camera
DeviceVersion	include/TransportLayerDevice.h	/^		GenApi::IString &DeviceVersion;$/;"	m	class:Spinnaker::TransportLayerDevice
DeviceVersion	include/spinc/QuickSpinDefsC.h	/^	quickSpinStringNode DeviceVersion;$/;"	m	struct:_quickSpin
DeviceVersion	include/spinc/TransportLayerDeviceC.h	/^	quickSpinStringNode DeviceVersion;$/;"	m	struct:_quickSpinTLDevice
DisplayChunkData	SpinnakerTest/ChunkData/ChunkData.cpp	/^int DisplayChunkData(INodeMap & nodeMap)$/;"	f
DisplayChunkData	SpinnakerTest/ChunkData/ChunkData.cpp	/^int DisplayChunkData(ImagePtr pImage)$/;"	f
DisplayChunkData	src/ChunkData/ChunkData.cpp	/^int DisplayChunkData(INodeMap & nodeMap)$/;"	f
DisplayChunkData	src/ChunkData/ChunkData.cpp	/^int DisplayChunkData(ImagePtr pImage)$/;"	f
DisplayChunkDataFromImage	SpinnakerTest/ChunkData_C/ChunkData_C.cpp	/^spinError DisplayChunkDataFromImage(spinImage hImage)$/;"	f
DisplayChunkDataFromImage	src/ChunkData_C/ChunkData_C.cpp	/^spinError DisplayChunkDataFromImage(spinImage hImage)$/;"	f
DisplayChunkDataFromNodeMap	SpinnakerTest/ChunkData_C/ChunkData_C.cpp	/^spinError DisplayChunkDataFromNodeMap(spinNodeMapHandle hNodeMap)$/;"	f
DisplayChunkDataFromNodeMap	src/ChunkData_C/ChunkData_C.cpp	/^spinError DisplayChunkDataFromNodeMap(spinNodeMapHandle hNodeMap)$/;"	f
EAccessMode	include/SpinGenApi/Types.h	/^		} EAccessMode;$/;"	t	namespace:Spinnaker::GenApi	typeref:enum:Spinnaker::GenApi::_EAccessMode
EAccessModeClass	include/SpinGenApi/EnumClasses.h	/^		class SPINNAKER_API EAccessModeClass$/;"	c	namespace:Spinnaker::GenApi
ECacheUsage_t	include/SpinGenApi/NodeMapFactory.h	/^		} ECacheUsage_t;$/;"	t	namespace:Spinnaker::GenApi	typeref:enum:Spinnaker::GenApi::__anon1
ECachingMode	include/SpinGenApi/Types.h	/^		} ECachingMode;$/;"	t	namespace:Spinnaker::GenApi	typeref:enum:Spinnaker::GenApi::_ECachingMode
ECachingModeClass	include/SpinGenApi/EnumClasses.h	/^	  class SPINNAKER_API ECachingModeClass$/;"	c	namespace:Spinnaker::GenApi
ECallbackType	include/SpinGenApi/NodeCallback.h	/^		} ECallbackType;$/;"	t	namespace:Spinnaker::GenApi	typeref:enum:Spinnaker::GenApi::_ECallbackType
EContentType_t	include/SpinGenApi/NodeMapFactory.h	/^		} EContentType_t;$/;"	t	namespace:Spinnaker::GenApi	typeref:enum:Spinnaker::GenApi::__anon2
EDGE_SENSING	include/SpinnakerDefs.h	/^        EDGE_SENSING,$/;"	e	enum:Spinnaker::ColorProcessingAlgorithm
EDGE_SENSING	include/spinc/SpinnakerDefsC.h	/^	EDGE_SENSING,$/;"	e	enum:_spinColorProcessingAlgorithm
EDisplayNotation	include/SpinGenApi/Types.h	/^		} EDisplayNotation;$/;"	t	namespace:Spinnaker::GenApi	typeref:enum:Spinnaker::GenApi::_EDisplayNotation
EDisplayNotationClass	include/SpinGenApi/EnumClasses.h	/^		class SPINNAKER_API EDisplayNotationClass$/;"	c	namespace:Spinnaker::GenApi
EEndianess	include/SpinGenApi/Types.h	/^		} EEndianess;$/;"	t	namespace:Spinnaker::GenApi	typeref:enum:Spinnaker::GenApi::_EEndianess
EEndianessClass	include/SpinGenApi/EnumClasses.h	/^		class SPINNAKER_API EEndianessClass$/;"	c	namespace:Spinnaker::GenApi
EGenApiSchemaVersion	include/SpinGenApi/Types.h	/^		} EGenApiSchemaVersion;$/;"	t	namespace:Spinnaker::GenApi	typeref:enum:Spinnaker::GenApi::_EGenApiSchemaVersion
EGenApiSchemaVersionClass	include/SpinGenApi/EnumClasses.h	/^		class SPINNAKER_API EGenApiSchemaVersionClass$/;"	c	namespace:Spinnaker::GenApi
EIncMode	include/SpinGenApi/Types.h	/^		} EIncMode;$/;"	t	namespace:Spinnaker::GenApi	typeref:enum:Spinnaker::GenApi::_EIncMode
EInputDirection	include/SpinGenApi/Types.h	/^		} EInputDirection;$/;"	t	namespace:Spinnaker::GenApi	typeref:enum:Spinnaker::GenApi::_EInputDirection
EInputDirectionClass	include/SpinGenApi/EnumClasses.h	/^		class SPINNAKER_API EInputDirectionClass$/;"	c	namespace:Spinnaker::GenApi
EInterfaceType	include/SpinGenApi/Types.h	/^		} EInterfaceType;$/;"	t	namespace:Spinnaker::GenApi	typeref:enum:Spinnaker::GenApi::_EInterfaceType
ELinkType	include/SpinGenApi/Types.h	/^		} ELinkType;$/;"	t	namespace:Spinnaker::GenApi	typeref:enum:Spinnaker::GenApi::_ELinkType
ENameSpace	include/SpinGenApi/Types.h	/^		} ENameSpace;$/;"	t	namespace:Spinnaker::GenApi	typeref:enum:Spinnaker::GenApi::_ENameSpace
ENameSpaceClass	include/SpinGenApi/EnumClasses.h	/^		class SPINNAKER_API ENameSpaceClass$/;"	c	namespace:Spinnaker::GenApi
ERepresentation	include/SpinGenApi/Types.h	/^		} ERepresentation;$/;"	t	namespace:Spinnaker::GenApi	typeref:enum:Spinnaker::GenApi::_ERepresentation
ERepresentationClass	include/SpinGenApi/EnumClasses.h	/^		class SPINNAKER_API ERepresentationClass$/;"	c	namespace:Spinnaker::GenApi
ESign	include/SpinGenApi/Types.h	/^		} ESign;$/;"	t	namespace:Spinnaker::GenApi	typeref:enum:Spinnaker::GenApi::_ESign
ESignClass	include/SpinGenApi/EnumClasses.h	/^		class SPINNAKER_API ESignClass$/;"	c	namespace:Spinnaker::GenApi
ESlope	include/SpinGenApi/Types.h	/^		} ESlope;$/;"	t	namespace:Spinnaker::GenApi	typeref:enum:Spinnaker::GenApi::_ESlope
ESlopeClass	include/SpinGenApi/EnumClasses.h	/^		class SPINNAKER_API ESlopeClass$/;"	c	namespace:Spinnaker::GenApi
EStandardNameSpace	include/SpinGenApi/Types.h	/^		} EStandardNameSpace;$/;"	t	namespace:Spinnaker::GenApi	typeref:enum:Spinnaker::GenApi::_EStandardNameSpace
EStandardNameSpaceClass	include/SpinGenApi/EnumClasses.h	/^		class SPINNAKER_API EStandardNameSpaceClass$/;"	c	namespace:Spinnaker::GenApi
EVENT_TIMEOUT_INFINITE	include/SpinnakerDefs.h	/^	const uint64_t EVENT_TIMEOUT_INFINITE = 0xFFFFFFFFFFFFFFFF;	\/\/ Never timeout.  GetNextImage will wait indefinitely.$/;"	m	namespace:Spinnaker
EVENT_TIMEOUT_NONE	include/SpinnakerDefs.h	/^	const uint64_t EVENT_TIMEOUT_NONE		= 0;					\/\/ Do not wait.  GetNextImage will return immediately. $/;"	m	namespace:Spinnaker
EVisibility	include/SpinGenApi/Types.h	/^		} EVisibility;$/;"	t	namespace:Spinnaker::GenApi	typeref:enum:Spinnaker::GenApi::_EVisibility
EVisibilityClass	include/SpinGenApi/EnumClasses.h	/^		class SPINNAKER_API EVisibilityClass$/;"	c	namespace:Spinnaker::GenApi
EXMLValidation	include/SpinGenApi/Types.h	/^		} EXMLValidation;$/;"	t	namespace:Spinnaker::GenApi	typeref:enum:Spinnaker::GenApi::_EXMLValidation
EXPAND_TO_STRINGISE	include/SpinGenApi/GCUtilities.h	203;"	d
EXTERN_C	include/spinc/SpinnakerPlatformC.h	67;"	d
EXTERN_C	include/spinc/SpinnakerPlatformC.h	80;"	d
EYesNo	include/SpinGenApi/Types.h	/^		} EYesNo;$/;"	t	namespace:Spinnaker::GenApi	typeref:enum:Spinnaker::GenApi::_EYesNo
EYesNoClass	include/SpinGenApi/EnumClasses.h	/^		class SPINNAKER_API EYesNoClass$/;"	c	namespace:Spinnaker::GenApi
EncoderDivider	include/Camera.h	/^		GenApi::IInteger &EncoderDivider;$/;"	m	class:Spinnaker::Camera
EncoderDivider	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EncoderDivider;$/;"	m	struct:_quickSpin
EncoderMode	include/Camera.h	/^		GenApi::IEnumerationT<EncoderModeEnums> &EncoderMode;$/;"	m	class:Spinnaker::Camera
EncoderMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode EncoderMode;$/;"	m	struct:_quickSpin
EncoderModeEnums	include/CameraDefs.h	/^	enum EncoderModeEnums	\/*!< Selects if the count of encoder uses FourPhase mode with jitter filtering or the HighResolution mode without jitter filtering.*\/$/;"	g	namespace:Spinnaker
EncoderMode_FourPhase	include/CameraDefs.h	/^		EncoderMode_FourPhase,	\/*!< The counter increments or decrements 1 for every full quadrature cycle with jitter filtering.*\/$/;"	e	enum:Spinnaker::EncoderModeEnums
EncoderMode_FourPhase	include/spinc/CameraDefsC.h	/^	EncoderMode_FourPhase,	\/*!< The counter increments or decrements 1 for every full quadrature cycle with jitter filtering.*\/$/;"	e	enum:_spinEncoderModeEnums
EncoderMode_HighResolution	include/CameraDefs.h	/^		EncoderMode_HighResolution,	\/*!< The counter increments or decrements every quadrature phase for high resolution counting, but without jitter filtering.*\/$/;"	e	enum:Spinnaker::EncoderModeEnums
EncoderMode_HighResolution	include/spinc/CameraDefsC.h	/^	EncoderMode_HighResolution,	\/*!< The counter increments or decrements every quadrature phase for high resolution counting, but without jitter filtering.*\/$/;"	e	enum:_spinEncoderModeEnums
EncoderOutputMode	include/Camera.h	/^		GenApi::IEnumerationT<EncoderOutputModeEnums> &EncoderOutputMode;$/;"	m	class:Spinnaker::Camera
EncoderOutputMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode EncoderOutputMode;$/;"	m	struct:_quickSpin
EncoderOutputModeEnums	include/CameraDefs.h	/^	enum EncoderOutputModeEnums	\/*!< Selects the conditions for the Encoder interface to generate a valid Encoder output signal.*\/$/;"	g	namespace:Spinnaker
EncoderOutputMode_DirectionDown	include/CameraDefs.h	/^		EncoderOutputMode_DirectionDown,	\/*!< Output pulses are generated at all position increments in the negative direction while ignoring positive direction motion.*\/$/;"	e	enum:Spinnaker::EncoderOutputModeEnums
EncoderOutputMode_DirectionDown	include/spinc/CameraDefsC.h	/^	EncoderOutputMode_DirectionDown,	\/*!< Output pulses are generated at all position increments in the negative direction while ignoring positive direction motion.*\/$/;"	e	enum:_spinEncoderOutputModeEnums
EncoderOutputMode_DirectionUp	include/CameraDefs.h	/^		EncoderOutputMode_DirectionUp,	\/*!< Output pulses are generated at all position increments in the positive direction while ignoring negative direction motion.*\/$/;"	e	enum:Spinnaker::EncoderOutputModeEnums
EncoderOutputMode_DirectionUp	include/spinc/CameraDefsC.h	/^	EncoderOutputMode_DirectionUp,	\/*!< Output pulses are generated at all position increments in the positive direction while ignoring negative direction motion.*\/$/;"	e	enum:_spinEncoderOutputModeEnums
EncoderOutputMode_Motion	include/CameraDefs.h	/^		EncoderOutputMode_Motion,	\/*!< Output pulses are generated at all motion increments in both directions.*\/$/;"	e	enum:Spinnaker::EncoderOutputModeEnums
EncoderOutputMode_Motion	include/spinc/CameraDefsC.h	/^	EncoderOutputMode_Motion,	\/*!< Output pulses are generated at all motion increments in both directions.*\/$/;"	e	enum:_spinEncoderOutputModeEnums
EncoderOutputMode_Off	include/CameraDefs.h	/^		EncoderOutputMode_Off,	\/*!< No output pulse are generated.*\/$/;"	e	enum:Spinnaker::EncoderOutputModeEnums
EncoderOutputMode_Off	include/spinc/CameraDefsC.h	/^	EncoderOutputMode_Off,	\/*!< No output pulse are generated.*\/$/;"	e	enum:_spinEncoderOutputModeEnums
EncoderOutputMode_PositionDown	include/CameraDefs.h	/^		EncoderOutputMode_PositionDown,	\/*!< Output pulses are generated at all new positions in the negative direction. If the encoder reverses no output pulse are generated until it has again passed the position where the reversal started.*\/$/;"	e	enum:Spinnaker::EncoderOutputModeEnums
EncoderOutputMode_PositionDown	include/spinc/CameraDefsC.h	/^	EncoderOutputMode_PositionDown,	\/*!< Output pulses are generated at all new positions in the negative direction. If the encoder reverses no output pulse are generated until it has again passed the position where the reversal started.*\/$/;"	e	enum:_spinEncoderOutputModeEnums
EncoderOutputMode_PositionUp	include/CameraDefs.h	/^		EncoderOutputMode_PositionUp,	\/*!< Output pulses are generated at all new positions in the positive direction. If the encoder reverses no output pulse are generated until it has again passed the position where the reversal started.*\/$/;"	e	enum:Spinnaker::EncoderOutputModeEnums
EncoderOutputMode_PositionUp	include/spinc/CameraDefsC.h	/^	EncoderOutputMode_PositionUp,	\/*!< Output pulses are generated at all new positions in the positive direction. If the encoder reverses no output pulse are generated until it has again passed the position where the reversal started.*\/$/;"	e	enum:_spinEncoderOutputModeEnums
EncoderReset	include/Camera.h	/^		GenApi::ICommand &EncoderReset;$/;"	m	class:Spinnaker::Camera
EncoderReset	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode EncoderReset;$/;"	m	struct:_quickSpin
EncoderResetActivation	include/Camera.h	/^		GenApi::IEnumerationT<EncoderResetActivationEnums> &EncoderResetActivation;$/;"	m	class:Spinnaker::Camera
EncoderResetActivation	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode EncoderResetActivation;$/;"	m	struct:_quickSpin
EncoderResetActivationEnums	include/CameraDefs.h	/^	enum EncoderResetActivationEnums	\/*!< Selects the Activation mode of the Encoder Reset Source signal.*\/$/;"	g	namespace:Spinnaker
EncoderResetActivation_AnyEdge	include/CameraDefs.h	/^		EncoderResetActivation_AnyEdge,	\/*!< Resets the Encoder on the Falling or rising Edge of the selected signal.*\/$/;"	e	enum:Spinnaker::EncoderResetActivationEnums
EncoderResetActivation_AnyEdge	include/spinc/CameraDefsC.h	/^	EncoderResetActivation_AnyEdge,	\/*!< Resets the Encoder on the Falling or rising Edge of the selected signal.*\/$/;"	e	enum:_spinEncoderResetActivationEnums
EncoderResetActivation_FallingEdge	include/CameraDefs.h	/^		EncoderResetActivation_FallingEdge,	\/*!< Resets the Encoder on the Falling Edge of the signal.*\/$/;"	e	enum:Spinnaker::EncoderResetActivationEnums
EncoderResetActivation_FallingEdge	include/spinc/CameraDefsC.h	/^	EncoderResetActivation_FallingEdge,	\/*!< Resets the Encoder on the Falling Edge of the signal.*\/$/;"	e	enum:_spinEncoderResetActivationEnums
EncoderResetActivation_LevelHigh	include/CameraDefs.h	/^		EncoderResetActivation_LevelHigh,	\/*!< Resets the Encoder as long as the selected signal level is High.*\/$/;"	e	enum:Spinnaker::EncoderResetActivationEnums
EncoderResetActivation_LevelHigh	include/spinc/CameraDefsC.h	/^	EncoderResetActivation_LevelHigh,	\/*!< Resets the Encoder as long as the selected signal level is High.*\/$/;"	e	enum:_spinEncoderResetActivationEnums
EncoderResetActivation_LevelLow	include/CameraDefs.h	/^		EncoderResetActivation_LevelLow,	\/*!< Resets the Encoder as long as the selected signal level is Low.*\/$/;"	e	enum:Spinnaker::EncoderResetActivationEnums
EncoderResetActivation_LevelLow	include/spinc/CameraDefsC.h	/^	EncoderResetActivation_LevelLow,	\/*!< Resets the Encoder as long as the selected signal level is Low.*\/$/;"	e	enum:_spinEncoderResetActivationEnums
EncoderResetActivation_RisingEdge	include/CameraDefs.h	/^		EncoderResetActivation_RisingEdge,	\/*!< Resets the Encoder on the Rising Edge of the signal.*\/$/;"	e	enum:Spinnaker::EncoderResetActivationEnums
EncoderResetActivation_RisingEdge	include/spinc/CameraDefsC.h	/^	EncoderResetActivation_RisingEdge,	\/*!< Resets the Encoder on the Rising Edge of the signal.*\/$/;"	e	enum:_spinEncoderResetActivationEnums
EncoderResetSource	include/Camera.h	/^		GenApi::IEnumerationT<EncoderResetSourceEnums> &EncoderResetSource;$/;"	m	class:Spinnaker::Camera
EncoderResetSource	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode EncoderResetSource;$/;"	m	struct:_quickSpin
EncoderResetSourceEnums	include/CameraDefs.h	/^	enum EncoderResetSourceEnums	\/*!< Selects the signals that will be the source to reset the Encoder.*\/$/;"	g	namespace:Spinnaker
EncoderResetSource_AcquisitionEnd	include/CameraDefs.h	/^		EncoderResetSource_AcquisitionEnd,	\/*!< Resets with the reception of the Acquisition End.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_AcquisitionEnd	include/spinc/CameraDefsC.h	/^	EncoderResetSource_AcquisitionEnd,	\/*!< Resets with the reception of the Acquisition End.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_AcquisitionStart	include/CameraDefs.h	/^		EncoderResetSource_AcquisitionStart,	\/*!< Resets with the reception of the Acquisition Start.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_AcquisitionStart	include/spinc/CameraDefsC.h	/^	EncoderResetSource_AcquisitionStart,	\/*!< Resets with the reception of the Acquisition Start.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_AcquisitionTrigger	include/CameraDefs.h	/^		EncoderResetSource_AcquisitionTrigger,	\/*!< Resets with the reception of the Acquisition Trigger.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_AcquisitionTrigger	include/spinc/CameraDefsC.h	/^	EncoderResetSource_AcquisitionTrigger,	\/*!< Resets with the reception of the Acquisition Trigger.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_Action0	include/CameraDefs.h	/^		EncoderResetSource_Action0,	\/*!< Resets on assertions of the chosen action signal (Broadcasted signal on the transport layer).*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_Action0	include/spinc/CameraDefsC.h	/^	EncoderResetSource_Action0,	\/*!< Resets on assertions of the chosen action signal (Broadcasted signal on the transport layer).*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_Action1	include/CameraDefs.h	/^		EncoderResetSource_Action1,	\/*!< Resets on assertions of the chosen action signal (Broadcasted signal on the transport layer).*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_Action1	include/spinc/CameraDefsC.h	/^	EncoderResetSource_Action1,	\/*!< Resets on assertions of the chosen action signal (Broadcasted signal on the transport layer).*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_Action2	include/CameraDefs.h	/^		EncoderResetSource_Action2,	\/*!< Resets on assertions of the chosen action signal (Broadcasted signal on the transport layer).*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_Action2	include/spinc/CameraDefsC.h	/^	EncoderResetSource_Action2,	\/*!< Resets on assertions of the chosen action signal (Broadcasted signal on the transport layer).*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_Counter0End	include/CameraDefs.h	/^		EncoderResetSource_Counter0End,	\/*!< Resets with the reception of the Counter End.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_Counter0End	include/spinc/CameraDefsC.h	/^	EncoderResetSource_Counter0End,	\/*!< Resets with the reception of the Counter End.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_Counter0Start	include/CameraDefs.h	/^		EncoderResetSource_Counter0Start,	\/*!< Resets with the reception of the Counter Start.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_Counter0Start	include/spinc/CameraDefsC.h	/^	EncoderResetSource_Counter0Start,	\/*!< Resets with the reception of the Counter Start.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_Counter1End	include/CameraDefs.h	/^		EncoderResetSource_Counter1End,	\/*!< Resets with the reception of the Counter End.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_Counter1End	include/spinc/CameraDefsC.h	/^	EncoderResetSource_Counter1End,	\/*!< Resets with the reception of the Counter End.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_Counter1Start	include/CameraDefs.h	/^		EncoderResetSource_Counter1Start,	\/*!< Resets with the reception of the Counter Start.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_Counter1Start	include/spinc/CameraDefsC.h	/^	EncoderResetSource_Counter1Start,	\/*!< Resets with the reception of the Counter Start.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_Counter2End	include/CameraDefs.h	/^		EncoderResetSource_Counter2End,	\/*!< Resets with the reception of the Counter End.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_Counter2End	include/spinc/CameraDefsC.h	/^	EncoderResetSource_Counter2End,	\/*!< Resets with the reception of the Counter End.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_Counter2Start	include/CameraDefs.h	/^		EncoderResetSource_Counter2Start,	\/*!< Resets with the reception of the Counter Start.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_Counter2Start	include/spinc/CameraDefsC.h	/^	EncoderResetSource_Counter2Start,	\/*!< Resets with the reception of the Counter Start.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_ExposureEnd	include/CameraDefs.h	/^		EncoderResetSource_ExposureEnd,	\/*!< Resets with the reception of the Exposure End.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_ExposureEnd	include/spinc/CameraDefsC.h	/^	EncoderResetSource_ExposureEnd,	\/*!< Resets with the reception of the Exposure End.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_ExposureStart	include/CameraDefs.h	/^		EncoderResetSource_ExposureStart,	\/*!< Resets with the reception of the Exposure Start.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_ExposureStart	include/spinc/CameraDefsC.h	/^	EncoderResetSource_ExposureStart,	\/*!< Resets with the reception of the Exposure Start.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_FrameEnd	include/CameraDefs.h	/^		EncoderResetSource_FrameEnd,	\/*!< Resets with the reception of the Frame End.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_FrameEnd	include/spinc/CameraDefsC.h	/^	EncoderResetSource_FrameEnd,	\/*!< Resets with the reception of the Frame End.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_FrameStart	include/CameraDefs.h	/^		EncoderResetSource_FrameStart,	\/*!< Resets with the reception of the Frame Start.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_FrameStart	include/spinc/CameraDefsC.h	/^	EncoderResetSource_FrameStart,	\/*!< Resets with the reception of the Frame Start.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_FrameTrigger	include/CameraDefs.h	/^		EncoderResetSource_FrameTrigger,	\/*!< Resets with the reception of the Frame Start Trigger.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_FrameTrigger	include/spinc/CameraDefsC.h	/^	EncoderResetSource_FrameTrigger,	\/*!< Resets with the reception of the Frame Start Trigger.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_Line0	include/CameraDefs.h	/^		EncoderResetSource_Line0,	\/*!< Resets by the chosen I\/O Line.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_Line0	include/spinc/CameraDefsC.h	/^	EncoderResetSource_Line0,	\/*!< Resets by the chosen I\/O Line.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_Line1	include/CameraDefs.h	/^		EncoderResetSource_Line1,	\/*!< Resets by the chosen I\/O Line.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_Line1	include/spinc/CameraDefsC.h	/^	EncoderResetSource_Line1,	\/*!< Resets by the chosen I\/O Line.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_Line2	include/CameraDefs.h	/^		EncoderResetSource_Line2,	\/*!< Resets by the chosen I\/O Line.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_Line2	include/spinc/CameraDefsC.h	/^	EncoderResetSource_Line2,	\/*!< Resets by the chosen I\/O Line.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_LinkTrigger0	include/CameraDefs.h	/^		EncoderResetSource_LinkTrigger0,	\/*!< Resets on the reception of the chosen Link Trigger (received from the transport layer).*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_LinkTrigger0	include/spinc/CameraDefsC.h	/^	EncoderResetSource_LinkTrigger0,	\/*!< Resets on the reception of the chosen Link Trigger (received from the transport layer).*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_LinkTrigger1	include/CameraDefs.h	/^		EncoderResetSource_LinkTrigger1,	\/*!< Resets on the reception of the chosen Link Trigger (received from the transport layer).*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_LinkTrigger1	include/spinc/CameraDefsC.h	/^	EncoderResetSource_LinkTrigger1,	\/*!< Resets on the reception of the chosen Link Trigger (received from the transport layer).*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_LinkTrigger2	include/CameraDefs.h	/^		EncoderResetSource_LinkTrigger2,	\/*!< Resets on the reception of the chosen Link Trigger (received from the transport layer).*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_LinkTrigger2	include/spinc/CameraDefsC.h	/^	EncoderResetSource_LinkTrigger2,	\/*!< Resets on the reception of the chosen Link Trigger (received from the transport layer).*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_Off	include/CameraDefs.h	/^		EncoderResetSource_Off,	\/*!< Disable the Encoder Reset trigger.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_Off	include/spinc/CameraDefsC.h	/^	EncoderResetSource_Off,	\/*!< Disable the Encoder Reset trigger.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_SoftwareSignal0	include/CameraDefs.h	/^		EncoderResetSource_SoftwareSignal0,	\/*!< Resets on the reception of the Software Signal.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_SoftwareSignal0	include/spinc/CameraDefsC.h	/^	EncoderResetSource_SoftwareSignal0,	\/*!< Resets on the reception of the Software Signal.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_SoftwareSignal1	include/CameraDefs.h	/^		EncoderResetSource_SoftwareSignal1,	\/*!< Resets on the reception of the Software Signal.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_SoftwareSignal1	include/spinc/CameraDefsC.h	/^	EncoderResetSource_SoftwareSignal1,	\/*!< Resets on the reception of the Software Signal.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_SoftwareSignal2	include/CameraDefs.h	/^		EncoderResetSource_SoftwareSignal2,	\/*!< Resets on the reception of the Software Signal.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_SoftwareSignal2	include/spinc/CameraDefsC.h	/^	EncoderResetSource_SoftwareSignal2,	\/*!< Resets on the reception of the Software Signal.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_Timer0End	include/CameraDefs.h	/^		EncoderResetSource_Timer0End,	\/*!< Resets with the reception of the Timer End.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_Timer0End	include/spinc/CameraDefsC.h	/^	EncoderResetSource_Timer0End,	\/*!< Resets with the reception of the Timer End.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_Timer0Start	include/CameraDefs.h	/^		EncoderResetSource_Timer0Start,	\/*!< Resets with the reception of the Timer Start.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_Timer0Start	include/spinc/CameraDefsC.h	/^	EncoderResetSource_Timer0Start,	\/*!< Resets with the reception of the Timer Start.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_Timer1End	include/CameraDefs.h	/^		EncoderResetSource_Timer1End,	\/*!< Resets with the reception of the Timer End.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_Timer1End	include/spinc/CameraDefsC.h	/^	EncoderResetSource_Timer1End,	\/*!< Resets with the reception of the Timer End.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_Timer1Start	include/CameraDefs.h	/^		EncoderResetSource_Timer1Start,	\/*!< Resets with the reception of the Timer Start.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_Timer1Start	include/spinc/CameraDefsC.h	/^	EncoderResetSource_Timer1Start,	\/*!< Resets with the reception of the Timer Start.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_Timer2End	include/CameraDefs.h	/^		EncoderResetSource_Timer2End,	\/*!< Resets with the reception of the Timer End.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_Timer2End	include/spinc/CameraDefsC.h	/^	EncoderResetSource_Timer2End,	\/*!< Resets with the reception of the Timer End.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_Timer2Start	include/CameraDefs.h	/^		EncoderResetSource_Timer2Start,	\/*!< Resets with the reception of the Timer Start.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_Timer2Start	include/spinc/CameraDefsC.h	/^	EncoderResetSource_Timer2Start,	\/*!< Resets with the reception of the Timer Start.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_UserOutput0	include/CameraDefs.h	/^		EncoderResetSource_UserOutput0,	\/*!< Resets by the chosen User Output bit.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_UserOutput0	include/spinc/CameraDefsC.h	/^	EncoderResetSource_UserOutput0,	\/*!< Resets by the chosen User Output bit.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_UserOutput1	include/CameraDefs.h	/^		EncoderResetSource_UserOutput1,	\/*!< Resets by the chosen User Output bit.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_UserOutput1	include/spinc/CameraDefsC.h	/^	EncoderResetSource_UserOutput1,	\/*!< Resets by the chosen User Output bit.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderResetSource_UserOutput2	include/CameraDefs.h	/^		EncoderResetSource_UserOutput2,	\/*!< Resets by the chosen User Output bit.*\/$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
EncoderResetSource_UserOutput2	include/spinc/CameraDefsC.h	/^	EncoderResetSource_UserOutput2,	\/*!< Resets by the chosen User Output bit.*\/$/;"	e	enum:_spinEncoderResetSourceEnums
EncoderSelector	include/Camera.h	/^		GenApi::IEnumerationT<EncoderSelectorEnums> &EncoderSelector;$/;"	m	class:Spinnaker::Camera
EncoderSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode EncoderSelector;$/;"	m	struct:_quickSpin
EncoderSelectorEnums	include/CameraDefs.h	/^	enum EncoderSelectorEnums	\/*!< Selects which Encoder to configure.*\/$/;"	g	namespace:Spinnaker
EncoderSelector_Encoder0	include/CameraDefs.h	/^		EncoderSelector_Encoder0,	\/*!< Selects Encoder 0.*\/$/;"	e	enum:Spinnaker::EncoderSelectorEnums
EncoderSelector_Encoder0	include/spinc/CameraDefsC.h	/^	EncoderSelector_Encoder0,	\/*!< Selects Encoder 0.*\/$/;"	e	enum:_spinEncoderSelectorEnums
EncoderSelector_Encoder1	include/CameraDefs.h	/^		EncoderSelector_Encoder1,	\/*!< Selects Encoder 1.*\/$/;"	e	enum:Spinnaker::EncoderSelectorEnums
EncoderSelector_Encoder1	include/spinc/CameraDefsC.h	/^	EncoderSelector_Encoder1,	\/*!< Selects Encoder 1.*\/$/;"	e	enum:_spinEncoderSelectorEnums
EncoderSelector_Encoder2	include/CameraDefs.h	/^		EncoderSelector_Encoder2,	\/*!< Selects Encoder 2.*\/$/;"	e	enum:Spinnaker::EncoderSelectorEnums
EncoderSelector_Encoder2	include/spinc/CameraDefsC.h	/^	EncoderSelector_Encoder2,	\/*!< Selects Encoder 2.*\/$/;"	e	enum:_spinEncoderSelectorEnums
EncoderSourceA	include/Camera.h	/^		GenApi::IEnumerationT<EncoderSourceAEnums> &EncoderSourceA;$/;"	m	class:Spinnaker::Camera
EncoderSourceA	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode EncoderSourceA;$/;"	m	struct:_quickSpin
EncoderSourceAEnums	include/CameraDefs.h	/^	enum EncoderSourceAEnums	\/*!< Selects the signal which will be the source of the A input of the Encoder.*\/$/;"	g	namespace:Spinnaker
EncoderSourceA_Line0	include/CameraDefs.h	/^		EncoderSourceA_Line0,	\/*!< Encoder Forward input is taken from the chosen I\/O Line.*\/$/;"	e	enum:Spinnaker::EncoderSourceAEnums
EncoderSourceA_Line0	include/spinc/CameraDefsC.h	/^	EncoderSourceA_Line0,	\/*!< Encoder Forward input is taken from the chosen I\/O Line.*\/$/;"	e	enum:_spinEncoderSourceAEnums
EncoderSourceA_Line1	include/CameraDefs.h	/^		EncoderSourceA_Line1,	\/*!< Encoder Forward input is taken from the chosen I\/O Line.*\/$/;"	e	enum:Spinnaker::EncoderSourceAEnums
EncoderSourceA_Line1	include/spinc/CameraDefsC.h	/^	EncoderSourceA_Line1,	\/*!< Encoder Forward input is taken from the chosen I\/O Line.*\/$/;"	e	enum:_spinEncoderSourceAEnums
EncoderSourceA_Line2	include/CameraDefs.h	/^		EncoderSourceA_Line2,	\/*!< Encoder Forward input is taken from the chosen I\/O Line.*\/$/;"	e	enum:Spinnaker::EncoderSourceAEnums
EncoderSourceA_Line2	include/spinc/CameraDefsC.h	/^	EncoderSourceA_Line2,	\/*!< Encoder Forward input is taken from the chosen I\/O Line.*\/$/;"	e	enum:_spinEncoderSourceAEnums
EncoderSourceA_Off	include/CameraDefs.h	/^		EncoderSourceA_Off,	\/*!< Counter is stopped.*\/$/;"	e	enum:Spinnaker::EncoderSourceAEnums
EncoderSourceA_Off	include/spinc/CameraDefsC.h	/^	EncoderSourceA_Off,	\/*!< Counter is stopped.*\/$/;"	e	enum:_spinEncoderSourceAEnums
EncoderSourceB	include/Camera.h	/^		GenApi::IEnumerationT<EncoderSourceBEnums> &EncoderSourceB;$/;"	m	class:Spinnaker::Camera
EncoderSourceB	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode EncoderSourceB;$/;"	m	struct:_quickSpin
EncoderSourceBEnums	include/CameraDefs.h	/^	enum EncoderSourceBEnums	\/*!< Selects the signal which will be the source of the B input of the Encoder.*\/$/;"	g	namespace:Spinnaker
EncoderSourceB_Line0	include/CameraDefs.h	/^		EncoderSourceB_Line0,	\/*!< Encoder Reverse input is taken from the chosen I\/O Line..*\/$/;"	e	enum:Spinnaker::EncoderSourceBEnums
EncoderSourceB_Line0	include/spinc/CameraDefsC.h	/^	EncoderSourceB_Line0,	\/*!< Encoder Reverse input is taken from the chosen I\/O Line..*\/$/;"	e	enum:_spinEncoderSourceBEnums
EncoderSourceB_Line1	include/CameraDefs.h	/^		EncoderSourceB_Line1,	\/*!< Encoder Reverse input is taken from the chosen I\/O Line..*\/$/;"	e	enum:Spinnaker::EncoderSourceBEnums
EncoderSourceB_Line1	include/spinc/CameraDefsC.h	/^	EncoderSourceB_Line1,	\/*!< Encoder Reverse input is taken from the chosen I\/O Line..*\/$/;"	e	enum:_spinEncoderSourceBEnums
EncoderSourceB_Line2	include/CameraDefs.h	/^		EncoderSourceB_Line2,	\/*!< Encoder Reverse input is taken from the chosen I\/O Line..*\/$/;"	e	enum:Spinnaker::EncoderSourceBEnums
EncoderSourceB_Line2	include/spinc/CameraDefsC.h	/^	EncoderSourceB_Line2,	\/*!< Encoder Reverse input is taken from the chosen I\/O Line..*\/$/;"	e	enum:_spinEncoderSourceBEnums
EncoderSourceB_Off	include/CameraDefs.h	/^		EncoderSourceB_Off,	\/*!< Counter is stopped.*\/$/;"	e	enum:Spinnaker::EncoderSourceBEnums
EncoderSourceB_Off	include/spinc/CameraDefsC.h	/^	EncoderSourceB_Off,	\/*!< Counter is stopped.*\/$/;"	e	enum:_spinEncoderSourceBEnums
EncoderStatus	include/Camera.h	/^		GenApi::IEnumerationT<EncoderStatusEnums> &EncoderStatus;$/;"	m	class:Spinnaker::Camera
EncoderStatus	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode EncoderStatus;$/;"	m	struct:_quickSpin
EncoderStatusEnums	include/CameraDefs.h	/^	enum EncoderStatusEnums	\/*!< Returns the motion status of the encoder.*\/$/;"	g	namespace:Spinnaker
EncoderStatus_EncoderDown	include/CameraDefs.h	/^		EncoderStatus_EncoderDown,	\/*!< The encoder counter last decremented.*\/$/;"	e	enum:Spinnaker::EncoderStatusEnums
EncoderStatus_EncoderDown	include/spinc/CameraDefsC.h	/^	EncoderStatus_EncoderDown,	\/*!< The encoder counter last decremented.*\/$/;"	e	enum:_spinEncoderStatusEnums
EncoderStatus_EncoderIdle	include/CameraDefs.h	/^		EncoderStatus_EncoderIdle,	\/*!< The encoder is not active.*\/$/;"	e	enum:Spinnaker::EncoderStatusEnums
EncoderStatus_EncoderIdle	include/spinc/CameraDefsC.h	/^	EncoderStatus_EncoderIdle,	\/*!< The encoder is not active.*\/$/;"	e	enum:_spinEncoderStatusEnums
EncoderStatus_EncoderStatic	include/CameraDefs.h	/^		EncoderStatus_EncoderStatic,	\/*!< No motion within the EncoderTimeout time.*\/$/;"	e	enum:Spinnaker::EncoderStatusEnums
EncoderStatus_EncoderStatic	include/spinc/CameraDefsC.h	/^	EncoderStatus_EncoderStatic,	\/*!< No motion within the EncoderTimeout time.*\/$/;"	e	enum:_spinEncoderStatusEnums
EncoderStatus_EncoderUp	include/CameraDefs.h	/^		EncoderStatus_EncoderUp,	\/*!< The encoder counter last incremented.*\/$/;"	e	enum:Spinnaker::EncoderStatusEnums
EncoderStatus_EncoderUp	include/spinc/CameraDefsC.h	/^	EncoderStatus_EncoderUp,	\/*!< The encoder counter last incremented.*\/$/;"	e	enum:_spinEncoderStatusEnums
EncoderTimeout	include/Camera.h	/^		GenApi::IFloat &EncoderTimeout;$/;"	m	class:Spinnaker::Camera
EncoderTimeout	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode EncoderTimeout;$/;"	m	struct:_quickSpin
EncoderValue	include/Camera.h	/^		GenApi::IInteger &EncoderValue;$/;"	m	class:Spinnaker::Camera
EncoderValue	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EncoderValue;$/;"	m	struct:_quickSpin
EncoderValueAtReset	include/Camera.h	/^		GenApi::IInteger &EncoderValueAtReset;$/;"	m	class:Spinnaker::Camera
EncoderValueAtReset	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EncoderValueAtReset;$/;"	m	struct:_quickSpin
EnumEntryNode	include/SpinGenApi/EnumEntryNode.h	/^        class SPINNAKER_API EnumEntryNode : virtual public IEnumEntry, virtual public ValueNode$/;"	c	namespace:Spinnaker::GenApi
EnumEntryNode	include/spinc/SpinnakerGenApiDefsC.h	/^	EnumEntryNode,$/;"	e	enum:_spinNodeType
EnumNode	include/SpinGenApi/EnumNode.h	/^        class SPINNAKER_API EnumNode : virtual public IEnumeration, virtual public ValueNode$/;"	c	namespace:Spinnaker::GenApi
EnumerationNode	include/spinc/SpinnakerGenApiDefsC.h	/^	EnumerationNode,$/;"	e	enum:_spinNodeType
Error	include/SpinnakerDefs.h	/^	enum Error$/;"	g	namespace:Spinnaker
Event	include/Event.h	/^	class SPINNAKER_API Event$/;"	c	namespace:Spinnaker
Event	include/SpinGenApi/EventAdapterGEV.h	/^        GVCP_EVENT_ITEM Event;$/;"	m	struct:Spinnaker::GenApi::GVCP_EVENTDATA_REQUEST
Event	include/SpinGenApi/EventAdapterGEV.h	/^        GVCP_EVENT_ITEM_EXTENDED_ID Event;$/;"	m	struct:Spinnaker::GenApi::GVCP_EVENTDATA_REQUEST_EXTENDED_ID
EventAcquisitionEnd	include/Camera.h	/^		GenApi::IInteger &EventAcquisitionEnd;$/;"	m	class:Spinnaker::Camera
EventAcquisitionEnd	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventAcquisitionEnd;$/;"	m	struct:_quickSpin
EventAcquisitionEndFrameID	include/Camera.h	/^		GenApi::IInteger &EventAcquisitionEndFrameID;$/;"	m	class:Spinnaker::Camera
EventAcquisitionEndFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventAcquisitionEndFrameID;$/;"	m	struct:_quickSpin
EventAcquisitionEndTimestamp	include/Camera.h	/^		GenApi::IInteger &EventAcquisitionEndTimestamp;$/;"	m	class:Spinnaker::Camera
EventAcquisitionEndTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventAcquisitionEndTimestamp;$/;"	m	struct:_quickSpin
EventAcquisitionError	include/Camera.h	/^		GenApi::IInteger &EventAcquisitionError;$/;"	m	class:Spinnaker::Camera
EventAcquisitionError	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventAcquisitionError;$/;"	m	struct:_quickSpin
EventAcquisitionErrorFrameID	include/Camera.h	/^		GenApi::IInteger &EventAcquisitionErrorFrameID;$/;"	m	class:Spinnaker::Camera
EventAcquisitionErrorFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventAcquisitionErrorFrameID;$/;"	m	struct:_quickSpin
EventAcquisitionErrorTimestamp	include/Camera.h	/^		GenApi::IInteger &EventAcquisitionErrorTimestamp;$/;"	m	class:Spinnaker::Camera
EventAcquisitionErrorTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventAcquisitionErrorTimestamp;$/;"	m	struct:_quickSpin
EventAcquisitionStart	include/Camera.h	/^		GenApi::IInteger &EventAcquisitionStart;$/;"	m	class:Spinnaker::Camera
EventAcquisitionStart	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventAcquisitionStart;$/;"	m	struct:_quickSpin
EventAcquisitionStartFrameID	include/Camera.h	/^		GenApi::IInteger &EventAcquisitionStartFrameID;$/;"	m	class:Spinnaker::Camera
EventAcquisitionStartFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventAcquisitionStartFrameID;$/;"	m	struct:_quickSpin
EventAcquisitionStartTimestamp	include/Camera.h	/^		GenApi::IInteger &EventAcquisitionStartTimestamp;$/;"	m	class:Spinnaker::Camera
EventAcquisitionStartTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventAcquisitionStartTimestamp;$/;"	m	struct:_quickSpin
EventAcquisitionTransferEnd	include/Camera.h	/^		GenApi::IInteger &EventAcquisitionTransferEnd;$/;"	m	class:Spinnaker::Camera
EventAcquisitionTransferEnd	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventAcquisitionTransferEnd;$/;"	m	struct:_quickSpin
EventAcquisitionTransferEndFrameID	include/Camera.h	/^		GenApi::IInteger &EventAcquisitionTransferEndFrameID;$/;"	m	class:Spinnaker::Camera
EventAcquisitionTransferEndFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventAcquisitionTransferEndFrameID;$/;"	m	struct:_quickSpin
EventAcquisitionTransferEndTimestamp	include/Camera.h	/^		GenApi::IInteger &EventAcquisitionTransferEndTimestamp;$/;"	m	class:Spinnaker::Camera
EventAcquisitionTransferEndTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventAcquisitionTransferEndTimestamp;$/;"	m	struct:_quickSpin
EventAcquisitionTransferStart	include/Camera.h	/^		GenApi::IInteger &EventAcquisitionTransferStart;$/;"	m	class:Spinnaker::Camera
EventAcquisitionTransferStart	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventAcquisitionTransferStart;$/;"	m	struct:_quickSpin
EventAcquisitionTransferStartFrameID	include/Camera.h	/^		GenApi::IInteger &EventAcquisitionTransferStartFrameID;$/;"	m	class:Spinnaker::Camera
EventAcquisitionTransferStartFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventAcquisitionTransferStartFrameID;$/;"	m	struct:_quickSpin
EventAcquisitionTransferStartTimestamp	include/Camera.h	/^		GenApi::IInteger &EventAcquisitionTransferStartTimestamp;$/;"	m	class:Spinnaker::Camera
EventAcquisitionTransferStartTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventAcquisitionTransferStartTimestamp;$/;"	m	struct:_quickSpin
EventAcquisitionTrigger	include/Camera.h	/^		GenApi::IInteger &EventAcquisitionTrigger;$/;"	m	class:Spinnaker::Camera
EventAcquisitionTrigger	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventAcquisitionTrigger;$/;"	m	struct:_quickSpin
EventAcquisitionTriggerFrameID	include/Camera.h	/^		GenApi::IInteger &EventAcquisitionTriggerFrameID;$/;"	m	class:Spinnaker::Camera
EventAcquisitionTriggerFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventAcquisitionTriggerFrameID;$/;"	m	struct:_quickSpin
EventAcquisitionTriggerTimestamp	include/Camera.h	/^		GenApi::IInteger &EventAcquisitionTriggerTimestamp;$/;"	m	class:Spinnaker::Camera
EventAcquisitionTriggerTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventAcquisitionTriggerTimestamp;$/;"	m	struct:_quickSpin
EventActionLate	include/Camera.h	/^		GenApi::IInteger &EventActionLate;$/;"	m	class:Spinnaker::Camera
EventActionLate	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventActionLate;$/;"	m	struct:_quickSpin
EventActionLateFrameID	include/Camera.h	/^		GenApi::IInteger &EventActionLateFrameID;$/;"	m	class:Spinnaker::Camera
EventActionLateFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventActionLateFrameID;$/;"	m	struct:_quickSpin
EventActionLateTimestamp	include/Camera.h	/^		GenApi::IInteger &EventActionLateTimestamp;$/;"	m	class:Spinnaker::Camera
EventActionLateTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventActionLateTimestamp;$/;"	m	struct:_quickSpin
EventCounter0End	include/Camera.h	/^		GenApi::IInteger &EventCounter0End;$/;"	m	class:Spinnaker::Camera
EventCounter0End	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventCounter0End;$/;"	m	struct:_quickSpin
EventCounter0EndFrameID	include/Camera.h	/^		GenApi::IInteger &EventCounter0EndFrameID;$/;"	m	class:Spinnaker::Camera
EventCounter0EndFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventCounter0EndFrameID;$/;"	m	struct:_quickSpin
EventCounter0EndTimestamp	include/Camera.h	/^		GenApi::IInteger &EventCounter0EndTimestamp;$/;"	m	class:Spinnaker::Camera
EventCounter0EndTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventCounter0EndTimestamp;$/;"	m	struct:_quickSpin
EventCounter0Start	include/Camera.h	/^		GenApi::IInteger &EventCounter0Start;$/;"	m	class:Spinnaker::Camera
EventCounter0Start	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventCounter0Start;$/;"	m	struct:_quickSpin
EventCounter0StartFrameID	include/Camera.h	/^		GenApi::IInteger &EventCounter0StartFrameID;$/;"	m	class:Spinnaker::Camera
EventCounter0StartFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventCounter0StartFrameID;$/;"	m	struct:_quickSpin
EventCounter0StartTimestamp	include/Camera.h	/^		GenApi::IInteger &EventCounter0StartTimestamp;$/;"	m	class:Spinnaker::Camera
EventCounter0StartTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventCounter0StartTimestamp;$/;"	m	struct:_quickSpin
EventCounter1End	include/Camera.h	/^		GenApi::IInteger &EventCounter1End;$/;"	m	class:Spinnaker::Camera
EventCounter1End	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventCounter1End;$/;"	m	struct:_quickSpin
EventCounter1EndFrameID	include/Camera.h	/^		GenApi::IInteger &EventCounter1EndFrameID;$/;"	m	class:Spinnaker::Camera
EventCounter1EndFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventCounter1EndFrameID;$/;"	m	struct:_quickSpin
EventCounter1EndTimestamp	include/Camera.h	/^		GenApi::IInteger &EventCounter1EndTimestamp;$/;"	m	class:Spinnaker::Camera
EventCounter1EndTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventCounter1EndTimestamp;$/;"	m	struct:_quickSpin
EventCounter1Start	include/Camera.h	/^		GenApi::IInteger &EventCounter1Start;$/;"	m	class:Spinnaker::Camera
EventCounter1Start	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventCounter1Start;$/;"	m	struct:_quickSpin
EventCounter1StartFrameID	include/Camera.h	/^		GenApi::IInteger &EventCounter1StartFrameID;$/;"	m	class:Spinnaker::Camera
EventCounter1StartFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventCounter1StartFrameID;$/;"	m	struct:_quickSpin
EventCounter1StartTimestamp	include/Camera.h	/^		GenApi::IInteger &EventCounter1StartTimestamp;$/;"	m	class:Spinnaker::Camera
EventCounter1StartTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventCounter1StartTimestamp;$/;"	m	struct:_quickSpin
EventData	include/SpinGenApi/EventAdapterU3V.h	/^			U3V_EVENT_DATA EventData;$/;"	m	struct:Spinnaker::GenApi::U3V_EVENT_MESSAGE
EventEncoder0Restarted	include/Camera.h	/^		GenApi::IInteger &EventEncoder0Restarted;$/;"	m	class:Spinnaker::Camera
EventEncoder0Restarted	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventEncoder0Restarted;$/;"	m	struct:_quickSpin
EventEncoder0RestartedFrameID	include/Camera.h	/^		GenApi::IInteger &EventEncoder0RestartedFrameID;$/;"	m	class:Spinnaker::Camera
EventEncoder0RestartedFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventEncoder0RestartedFrameID;$/;"	m	struct:_quickSpin
EventEncoder0RestartedTimestamp	include/Camera.h	/^		GenApi::IInteger &EventEncoder0RestartedTimestamp;$/;"	m	class:Spinnaker::Camera
EventEncoder0RestartedTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventEncoder0RestartedTimestamp;$/;"	m	struct:_quickSpin
EventEncoder0Stopped	include/Camera.h	/^		GenApi::IInteger &EventEncoder0Stopped;$/;"	m	class:Spinnaker::Camera
EventEncoder0Stopped	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventEncoder0Stopped;$/;"	m	struct:_quickSpin
EventEncoder0StoppedFrameID	include/Camera.h	/^		GenApi::IInteger &EventEncoder0StoppedFrameID;$/;"	m	class:Spinnaker::Camera
EventEncoder0StoppedFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventEncoder0StoppedFrameID;$/;"	m	struct:_quickSpin
EventEncoder0StoppedTimestamp	include/Camera.h	/^		GenApi::IInteger &EventEncoder0StoppedTimestamp;$/;"	m	class:Spinnaker::Camera
EventEncoder0StoppedTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventEncoder0StoppedTimestamp;$/;"	m	struct:_quickSpin
EventEncoder1Restarted	include/Camera.h	/^		GenApi::IInteger &EventEncoder1Restarted;$/;"	m	class:Spinnaker::Camera
EventEncoder1Restarted	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventEncoder1Restarted;$/;"	m	struct:_quickSpin
EventEncoder1RestartedFrameID	include/Camera.h	/^		GenApi::IInteger &EventEncoder1RestartedFrameID;$/;"	m	class:Spinnaker::Camera
EventEncoder1RestartedFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventEncoder1RestartedFrameID;$/;"	m	struct:_quickSpin
EventEncoder1RestartedTimestamp	include/Camera.h	/^		GenApi::IInteger &EventEncoder1RestartedTimestamp;$/;"	m	class:Spinnaker::Camera
EventEncoder1RestartedTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventEncoder1RestartedTimestamp;$/;"	m	struct:_quickSpin
EventEncoder1Stopped	include/Camera.h	/^		GenApi::IInteger &EventEncoder1Stopped;$/;"	m	class:Spinnaker::Camera
EventEncoder1Stopped	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventEncoder1Stopped;$/;"	m	struct:_quickSpin
EventEncoder1StoppedFrameID	include/Camera.h	/^		GenApi::IInteger &EventEncoder1StoppedFrameID;$/;"	m	class:Spinnaker::Camera
EventEncoder1StoppedFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventEncoder1StoppedFrameID;$/;"	m	struct:_quickSpin
EventEncoder1StoppedTimestamp	include/Camera.h	/^		GenApi::IInteger &EventEncoder1StoppedTimestamp;$/;"	m	class:Spinnaker::Camera
EventEncoder1StoppedTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventEncoder1StoppedTimestamp;$/;"	m	struct:_quickSpin
EventError	include/Camera.h	/^		GenApi::IInteger &EventError;$/;"	m	class:Spinnaker::Camera
EventError	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventError;$/;"	m	struct:_quickSpin
EventErrorCode	include/Camera.h	/^		GenApi::IInteger &EventErrorCode;$/;"	m	class:Spinnaker::Camera
EventErrorCode	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventErrorCode;$/;"	m	struct:_quickSpin
EventErrorFrameID	include/Camera.h	/^		GenApi::IInteger &EventErrorFrameID;$/;"	m	class:Spinnaker::Camera
EventErrorFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventErrorFrameID;$/;"	m	struct:_quickSpin
EventErrorTimestamp	include/Camera.h	/^		GenApi::IInteger &EventErrorTimestamp;$/;"	m	class:Spinnaker::Camera
EventErrorTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventErrorTimestamp;$/;"	m	struct:_quickSpin
EventExposureEnd	include/Camera.h	/^		GenApi::IInteger &EventExposureEnd;$/;"	m	class:Spinnaker::Camera
EventExposureEnd	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventExposureEnd;$/;"	m	struct:_quickSpin
EventExposureEndFrameID	include/Camera.h	/^		GenApi::IInteger &EventExposureEndFrameID;$/;"	m	class:Spinnaker::Camera
EventExposureEndFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventExposureEndFrameID;$/;"	m	struct:_quickSpin
EventExposureEndTimestamp	include/Camera.h	/^		GenApi::IInteger &EventExposureEndTimestamp;$/;"	m	class:Spinnaker::Camera
EventExposureEndTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventExposureEndTimestamp;$/;"	m	struct:_quickSpin
EventExposureStart	include/Camera.h	/^		GenApi::IInteger &EventExposureStart;$/;"	m	class:Spinnaker::Camera
EventExposureStart	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventExposureStart;$/;"	m	struct:_quickSpin
EventExposureStartFrameID	include/Camera.h	/^		GenApi::IInteger &EventExposureStartFrameID;$/;"	m	class:Spinnaker::Camera
EventExposureStartFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventExposureStartFrameID;$/;"	m	struct:_quickSpin
EventExposureStartTimestamp	include/Camera.h	/^		GenApi::IInteger &EventExposureStartTimestamp;$/;"	m	class:Spinnaker::Camera
EventExposureStartTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventExposureStartTimestamp;$/;"	m	struct:_quickSpin
EventFrameBurstEnd	include/Camera.h	/^		GenApi::IInteger &EventFrameBurstEnd;$/;"	m	class:Spinnaker::Camera
EventFrameBurstEnd	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventFrameBurstEnd;$/;"	m	struct:_quickSpin
EventFrameBurstEndFrameID	include/Camera.h	/^		GenApi::IInteger &EventFrameBurstEndFrameID;$/;"	m	class:Spinnaker::Camera
EventFrameBurstEndFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventFrameBurstEndFrameID;$/;"	m	struct:_quickSpin
EventFrameBurstEndTimestamp	include/Camera.h	/^		GenApi::IInteger &EventFrameBurstEndTimestamp;$/;"	m	class:Spinnaker::Camera
EventFrameBurstEndTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventFrameBurstEndTimestamp;$/;"	m	struct:_quickSpin
EventFrameBurstStart	include/Camera.h	/^		GenApi::IInteger &EventFrameBurstStart;$/;"	m	class:Spinnaker::Camera
EventFrameBurstStart	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventFrameBurstStart;$/;"	m	struct:_quickSpin
EventFrameBurstStartFrameID	include/Camera.h	/^		GenApi::IInteger &EventFrameBurstStartFrameID;$/;"	m	class:Spinnaker::Camera
EventFrameBurstStartFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventFrameBurstStartFrameID;$/;"	m	struct:_quickSpin
EventFrameBurstStartTimestamp	include/Camera.h	/^		GenApi::IInteger &EventFrameBurstStartTimestamp;$/;"	m	class:Spinnaker::Camera
EventFrameBurstStartTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventFrameBurstStartTimestamp;$/;"	m	struct:_quickSpin
EventFrameEnd	include/Camera.h	/^		GenApi::IInteger &EventFrameEnd;$/;"	m	class:Spinnaker::Camera
EventFrameEnd	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventFrameEnd;$/;"	m	struct:_quickSpin
EventFrameEndFrameID	include/Camera.h	/^		GenApi::IInteger &EventFrameEndFrameID;$/;"	m	class:Spinnaker::Camera
EventFrameEndFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventFrameEndFrameID;$/;"	m	struct:_quickSpin
EventFrameEndTimestamp	include/Camera.h	/^		GenApi::IInteger &EventFrameEndTimestamp;$/;"	m	class:Spinnaker::Camera
EventFrameEndTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventFrameEndTimestamp;$/;"	m	struct:_quickSpin
EventFrameStart	include/Camera.h	/^		GenApi::IInteger &EventFrameStart;$/;"	m	class:Spinnaker::Camera
EventFrameStart	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventFrameStart;$/;"	m	struct:_quickSpin
EventFrameStartFrameID	include/Camera.h	/^		GenApi::IInteger &EventFrameStartFrameID;$/;"	m	class:Spinnaker::Camera
EventFrameStartFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventFrameStartFrameID;$/;"	m	struct:_quickSpin
EventFrameStartTimestamp	include/Camera.h	/^		GenApi::IInteger &EventFrameStartTimestamp;$/;"	m	class:Spinnaker::Camera
EventFrameStartTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventFrameStartTimestamp;$/;"	m	struct:_quickSpin
EventFrameTransferEnd	include/Camera.h	/^		GenApi::IInteger &EventFrameTransferEnd;$/;"	m	class:Spinnaker::Camera
EventFrameTransferEnd	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventFrameTransferEnd;$/;"	m	struct:_quickSpin
EventFrameTransferEndFrameID	include/Camera.h	/^		GenApi::IInteger &EventFrameTransferEndFrameID;$/;"	m	class:Spinnaker::Camera
EventFrameTransferEndFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventFrameTransferEndFrameID;$/;"	m	struct:_quickSpin
EventFrameTransferEndTimestamp	include/Camera.h	/^		GenApi::IInteger &EventFrameTransferEndTimestamp;$/;"	m	class:Spinnaker::Camera
EventFrameTransferEndTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventFrameTransferEndTimestamp;$/;"	m	struct:_quickSpin
EventFrameTransferStart	include/Camera.h	/^		GenApi::IInteger &EventFrameTransferStart;$/;"	m	class:Spinnaker::Camera
EventFrameTransferStart	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventFrameTransferStart;$/;"	m	struct:_quickSpin
EventFrameTransferStartFrameID	include/Camera.h	/^		GenApi::IInteger &EventFrameTransferStartFrameID;$/;"	m	class:Spinnaker::Camera
EventFrameTransferStartFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventFrameTransferStartFrameID;$/;"	m	struct:_quickSpin
EventFrameTransferStartTimestamp	include/Camera.h	/^		GenApi::IInteger &EventFrameTransferStartTimestamp;$/;"	m	class:Spinnaker::Camera
EventFrameTransferStartTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventFrameTransferStartTimestamp;$/;"	m	struct:_quickSpin
EventFrameTrigger	include/Camera.h	/^		GenApi::IInteger &EventFrameTrigger;$/;"	m	class:Spinnaker::Camera
EventFrameTrigger	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventFrameTrigger;$/;"	m	struct:_quickSpin
EventFrameTriggerFrameID	include/Camera.h	/^		GenApi::IInteger &EventFrameTriggerFrameID;$/;"	m	class:Spinnaker::Camera
EventFrameTriggerFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventFrameTriggerFrameID;$/;"	m	struct:_quickSpin
EventFrameTriggerTimestamp	include/Camera.h	/^		GenApi::IInteger &EventFrameTriggerTimestamp;$/;"	m	class:Spinnaker::Camera
EventFrameTriggerTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventFrameTriggerTimestamp;$/;"	m	struct:_quickSpin
EventId	include/SpinGenApi/EventAdapterGEV.h	/^        uint16_t EventId;$/;"	m	struct:Spinnaker::GenApi::GVCP_EVENT_ITEM
EventId	include/SpinGenApi/EventAdapterGEV.h	/^        uint16_t EventId;$/;"	m	struct:Spinnaker::GenApi::GVCP_EVENT_ITEM_BASIC
EventId	include/SpinGenApi/EventAdapterGEV.h	/^        uint16_t EventId;$/;"	m	struct:Spinnaker::GenApi::GVCP_EVENT_ITEM_EXTENDED_ID
EventId	include/SpinGenApi/EventAdapterU3V.h	/^			uint16_t EventId;$/;"	m	struct:Spinnaker::GenApi::U3V_EVENT_DATA
EventLine0AnyEdge	include/Camera.h	/^		GenApi::IInteger &EventLine0AnyEdge;$/;"	m	class:Spinnaker::Camera
EventLine0AnyEdge	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventLine0AnyEdge;$/;"	m	struct:_quickSpin
EventLine0AnyEdgeFrameID	include/Camera.h	/^		GenApi::IInteger &EventLine0AnyEdgeFrameID;$/;"	m	class:Spinnaker::Camera
EventLine0AnyEdgeFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventLine0AnyEdgeFrameID;$/;"	m	struct:_quickSpin
EventLine0AnyEdgeTimestamp	include/Camera.h	/^		GenApi::IInteger &EventLine0AnyEdgeTimestamp;$/;"	m	class:Spinnaker::Camera
EventLine0AnyEdgeTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventLine0AnyEdgeTimestamp;$/;"	m	struct:_quickSpin
EventLine0FallingEdge	include/Camera.h	/^		GenApi::IInteger &EventLine0FallingEdge;$/;"	m	class:Spinnaker::Camera
EventLine0FallingEdge	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventLine0FallingEdge;$/;"	m	struct:_quickSpin
EventLine0FallingEdgeFrameID	include/Camera.h	/^		GenApi::IInteger &EventLine0FallingEdgeFrameID;$/;"	m	class:Spinnaker::Camera
EventLine0FallingEdgeFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventLine0FallingEdgeFrameID;$/;"	m	struct:_quickSpin
EventLine0FallingEdgeTimestamp	include/Camera.h	/^		GenApi::IInteger &EventLine0FallingEdgeTimestamp;$/;"	m	class:Spinnaker::Camera
EventLine0FallingEdgeTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventLine0FallingEdgeTimestamp;$/;"	m	struct:_quickSpin
EventLine0RisingEdge	include/Camera.h	/^		GenApi::IInteger &EventLine0RisingEdge;$/;"	m	class:Spinnaker::Camera
EventLine0RisingEdge	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventLine0RisingEdge;$/;"	m	struct:_quickSpin
EventLine0RisingEdgeFrameID	include/Camera.h	/^		GenApi::IInteger &EventLine0RisingEdgeFrameID;$/;"	m	class:Spinnaker::Camera
EventLine0RisingEdgeFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventLine0RisingEdgeFrameID;$/;"	m	struct:_quickSpin
EventLine0RisingEdgeTimestamp	include/Camera.h	/^		GenApi::IInteger &EventLine0RisingEdgeTimestamp;$/;"	m	class:Spinnaker::Camera
EventLine0RisingEdgeTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventLine0RisingEdgeTimestamp;$/;"	m	struct:_quickSpin
EventLine1AnyEdge	include/Camera.h	/^		GenApi::IInteger &EventLine1AnyEdge;$/;"	m	class:Spinnaker::Camera
EventLine1AnyEdge	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventLine1AnyEdge;$/;"	m	struct:_quickSpin
EventLine1AnyEdgeFrameID	include/Camera.h	/^		GenApi::IInteger &EventLine1AnyEdgeFrameID;$/;"	m	class:Spinnaker::Camera
EventLine1AnyEdgeFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventLine1AnyEdgeFrameID;$/;"	m	struct:_quickSpin
EventLine1AnyEdgeTimestamp	include/Camera.h	/^		GenApi::IInteger &EventLine1AnyEdgeTimestamp;$/;"	m	class:Spinnaker::Camera
EventLine1AnyEdgeTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventLine1AnyEdgeTimestamp;$/;"	m	struct:_quickSpin
EventLine1FallingEdge	include/Camera.h	/^		GenApi::IInteger &EventLine1FallingEdge;$/;"	m	class:Spinnaker::Camera
EventLine1FallingEdge	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventLine1FallingEdge;$/;"	m	struct:_quickSpin
EventLine1FallingEdgeFrameID	include/Camera.h	/^		GenApi::IInteger &EventLine1FallingEdgeFrameID;$/;"	m	class:Spinnaker::Camera
EventLine1FallingEdgeFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventLine1FallingEdgeFrameID;$/;"	m	struct:_quickSpin
EventLine1FallingEdgeTimestamp	include/Camera.h	/^		GenApi::IInteger &EventLine1FallingEdgeTimestamp;$/;"	m	class:Spinnaker::Camera
EventLine1FallingEdgeTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventLine1FallingEdgeTimestamp;$/;"	m	struct:_quickSpin
EventLine1RisingEdge	include/Camera.h	/^		GenApi::IInteger &EventLine1RisingEdge;$/;"	m	class:Spinnaker::Camera
EventLine1RisingEdge	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventLine1RisingEdge;$/;"	m	struct:_quickSpin
EventLine1RisingEdgeFrameID	include/Camera.h	/^		GenApi::IInteger &EventLine1RisingEdgeFrameID;$/;"	m	class:Spinnaker::Camera
EventLine1RisingEdgeFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventLine1RisingEdgeFrameID;$/;"	m	struct:_quickSpin
EventLine1RisingEdgeTimestamp	include/Camera.h	/^		GenApi::IInteger &EventLine1RisingEdgeTimestamp;$/;"	m	class:Spinnaker::Camera
EventLine1RisingEdgeTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventLine1RisingEdgeTimestamp;$/;"	m	struct:_quickSpin
EventLinkSpeedChange	include/Camera.h	/^		GenApi::IInteger &EventLinkSpeedChange;$/;"	m	class:Spinnaker::Camera
EventLinkSpeedChange	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventLinkSpeedChange;$/;"	m	struct:_quickSpin
EventLinkSpeedChangeFrameID	include/Camera.h	/^		GenApi::IInteger &EventLinkSpeedChangeFrameID;$/;"	m	class:Spinnaker::Camera
EventLinkSpeedChangeFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventLinkSpeedChangeFrameID;$/;"	m	struct:_quickSpin
EventLinkSpeedChangeTimestamp	include/Camera.h	/^		GenApi::IInteger &EventLinkSpeedChangeTimestamp;$/;"	m	class:Spinnaker::Camera
EventLinkSpeedChangeTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventLinkSpeedChangeTimestamp;$/;"	m	struct:_quickSpin
EventLinkTrigger0	include/Camera.h	/^		GenApi::IInteger &EventLinkTrigger0;$/;"	m	class:Spinnaker::Camera
EventLinkTrigger0	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventLinkTrigger0;$/;"	m	struct:_quickSpin
EventLinkTrigger0FrameID	include/Camera.h	/^		GenApi::IInteger &EventLinkTrigger0FrameID;$/;"	m	class:Spinnaker::Camera
EventLinkTrigger0FrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventLinkTrigger0FrameID;$/;"	m	struct:_quickSpin
EventLinkTrigger0Timestamp	include/Camera.h	/^		GenApi::IInteger &EventLinkTrigger0Timestamp;$/;"	m	class:Spinnaker::Camera
EventLinkTrigger0Timestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventLinkTrigger0Timestamp;$/;"	m	struct:_quickSpin
EventLinkTrigger1	include/Camera.h	/^		GenApi::IInteger &EventLinkTrigger1;$/;"	m	class:Spinnaker::Camera
EventLinkTrigger1	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventLinkTrigger1;$/;"	m	struct:_quickSpin
EventLinkTrigger1FrameID	include/Camera.h	/^		GenApi::IInteger &EventLinkTrigger1FrameID;$/;"	m	class:Spinnaker::Camera
EventLinkTrigger1FrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventLinkTrigger1FrameID;$/;"	m	struct:_quickSpin
EventLinkTrigger1Timestamp	include/Camera.h	/^		GenApi::IInteger &EventLinkTrigger1Timestamp;$/;"	m	class:Spinnaker::Camera
EventLinkTrigger1Timestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventLinkTrigger1Timestamp;$/;"	m	struct:_quickSpin
EventNotification	include/Camera.h	/^		GenApi::IEnumerationT<EventNotificationEnums> &EventNotification;$/;"	m	class:Spinnaker::Camera
EventNotification	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode EventNotification;$/;"	m	struct:_quickSpin
EventNotificationEnums	include/CameraDefs.h	/^	enum EventNotificationEnums	\/*!< Activate or deactivate the notification to the host application of the occurrence of the selected Event.*\/$/;"	g	namespace:Spinnaker
EventNotification_Off	include/CameraDefs.h	/^		EventNotification_Off,	\/*!< The selected Event notification is disabled.*\/$/;"	e	enum:Spinnaker::EventNotificationEnums
EventNotification_Off	include/spinc/CameraDefsC.h	/^	EventNotification_Off,	\/*!< The selected Event notification is disabled.*\/$/;"	e	enum:_spinEventNotificationEnums
EventNotification_On	include/CameraDefs.h	/^		EventNotification_On,	\/*!< The selected Event notification is enabled.*\/$/;"	e	enum:Spinnaker::EventNotificationEnums
EventNotification_On	include/spinc/CameraDefsC.h	/^	EventNotification_On,	\/*!< The selected Event notification is enabled.*\/$/;"	e	enum:_spinEventNotificationEnums
EventSelector	include/Camera.h	/^		GenApi::IEnumerationT<EventSelectorEnums> &EventSelector;$/;"	m	class:Spinnaker::Camera
EventSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode EventSelector;$/;"	m	struct:_quickSpin
EventSelectorEnums	include/CameraDefs.h	/^	enum EventSelectorEnums	\/*!< Selects which Event to signal to the host application.*\/$/;"	g	namespace:Spinnaker
EventSelector_AcquisitionEnd	include/CameraDefs.h	/^		EventSelector_AcquisitionEnd,	\/*!< Device just completed the Acquisition of one or many Frames.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_AcquisitionEnd	include/spinc/CameraDefsC.h	/^	EventSelector_AcquisitionEnd,	\/*!< Device just completed the Acquisition of one or many Frames.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_AcquisitionError	include/CameraDefs.h	/^		EventSelector_AcquisitionError,	\/*!< Device just detected an error during the active Acquisition.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_AcquisitionError	include/spinc/CameraDefsC.h	/^	EventSelector_AcquisitionError,	\/*!< Device just detected an error during the active Acquisition.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_AcquisitionStart	include/CameraDefs.h	/^		EventSelector_AcquisitionStart,	\/*!< Device just started the Acquisition of one or many Frames.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_AcquisitionStart	include/spinc/CameraDefsC.h	/^	EventSelector_AcquisitionStart,	\/*!< Device just started the Acquisition of one or many Frames.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_AcquisitionTransferEnd	include/CameraDefs.h	/^		EventSelector_AcquisitionTransferEnd,	\/*!< Device just completed the transfer of one or many Frames.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_AcquisitionTransferEnd	include/spinc/CameraDefsC.h	/^	EventSelector_AcquisitionTransferEnd,	\/*!< Device just completed the transfer of one or many Frames.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_AcquisitionTransferStart	include/CameraDefs.h	/^		EventSelector_AcquisitionTransferStart,	\/*!< Device just started the transfer of one or many Frames.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_AcquisitionTransferStart	include/spinc/CameraDefsC.h	/^	EventSelector_AcquisitionTransferStart,	\/*!< Device just started the transfer of one or many Frames.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_AcquisitionTrigger	include/CameraDefs.h	/^		EventSelector_AcquisitionTrigger,	\/*!< Device just received a trigger for the Acquisition of one or many Frames.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_AcquisitionTrigger	include/spinc/CameraDefsC.h	/^	EventSelector_AcquisitionTrigger,	\/*!< Device just received a trigger for the Acquisition of one or many Frames.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_ActionLate	include/CameraDefs.h	/^		EventSelector_ActionLate,	\/*!< Then event will be generated when a valid scheduled action command is received and is scheduled to be executed at a time that is already past.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_ActionLate	include/spinc/CameraDefsC.h	/^	EventSelector_ActionLate,	\/*!< Then event will be generated when a valid scheduled action command is received and is scheduled to be executed at a time that is already past.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Counter0End	include/CameraDefs.h	/^		EventSelector_Counter0End,	\/*!< The event will be generated when counter 0 ends counting.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Counter0End	include/spinc/CameraDefsC.h	/^	EventSelector_Counter0End,	\/*!< The event will be generated when counter 0 ends counting.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Counter0Start	include/CameraDefs.h	/^		EventSelector_Counter0Start,	\/*!< The event will be generated when counter 0 starts counting.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Counter0Start	include/spinc/CameraDefsC.h	/^	EventSelector_Counter0Start,	\/*!< The event will be generated when counter 0 starts counting.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Counter1End	include/CameraDefs.h	/^		EventSelector_Counter1End,	\/*!< The event will be generated when counter 1 ends counting.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Counter1End	include/spinc/CameraDefsC.h	/^	EventSelector_Counter1End,	\/*!< The event will be generated when counter 1 ends counting.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Counter1Start	include/CameraDefs.h	/^		EventSelector_Counter1Start,	\/*!< The event will be generated when counter 1 starts counting.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Counter1Start	include/spinc/CameraDefsC.h	/^	EventSelector_Counter1Start,	\/*!< The event will be generated when counter 1 starts counting.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Encoder0Restarted	include/CameraDefs.h	/^		EventSelector_Encoder0Restarted,	\/*!< The event will be generated when the Encoder 0 restarts moving.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Encoder0Restarted	include/spinc/CameraDefsC.h	/^	EventSelector_Encoder0Restarted,	\/*!< The event will be generated when the Encoder 0 restarts moving.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Encoder0Stopped	include/CameraDefs.h	/^		EventSelector_Encoder0Stopped,	\/*!< The event will be generated when the Encoder 0 stops for longer than EncoderTimeout.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Encoder0Stopped	include/spinc/CameraDefsC.h	/^	EventSelector_Encoder0Stopped,	\/*!< The event will be generated when the Encoder 0 stops for longer than EncoderTimeout.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Encoder1Restarted	include/CameraDefs.h	/^		EventSelector_Encoder1Restarted,	\/*!< The event will be generated when the Encoder 1 restarts moving.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Encoder1Restarted	include/spinc/CameraDefsC.h	/^	EventSelector_Encoder1Restarted,	\/*!< The event will be generated when the Encoder 1 restarts moving.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Encoder1Stopped	include/CameraDefs.h	/^		EventSelector_Encoder1Stopped,	\/*!< The event will be generated when the Encoder 1 stops for longer than EncoderTimeout.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Encoder1Stopped	include/spinc/CameraDefsC.h	/^	EventSelector_Encoder1Stopped,	\/*!< The event will be generated when the Encoder 1 stops for longer than EncoderTimeout.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Error	include/CameraDefs.h	/^		EventSelector_Error,	\/*!< Device just detected an error during the active Acquisition.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Error	include/spinc/CameraDefsC.h	/^	EventSelector_Error,	\/*!< Device just detected an error during the active Acquisition.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_ExposureEnd	include/CameraDefs.h	/^		EventSelector_ExposureEnd,	\/*!< Device just completed the exposure of one Frame (or Line).*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_ExposureEnd	include/spinc/CameraDefsC.h	/^	EventSelector_ExposureEnd,	\/*!< Device just completed the exposure of one Frame (or Line).*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_ExposureStart	include/CameraDefs.h	/^		EventSelector_ExposureStart,	\/*!< Device just started the exposure of one Frame (or Line).*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_ExposureStart	include/spinc/CameraDefsC.h	/^	EventSelector_ExposureStart,	\/*!< Device just started the exposure of one Frame (or Line).*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_FrameBurstEnd	include/CameraDefs.h	/^		EventSelector_FrameBurstEnd,	\/*!< Device just completed the capture of a burst of Frames.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_FrameBurstEnd	include/spinc/CameraDefsC.h	/^	EventSelector_FrameBurstEnd,	\/*!< Device just completed the capture of a burst of Frames.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_FrameBurstStart	include/CameraDefs.h	/^		EventSelector_FrameBurstStart,	\/*!< Device just started the capture of a burst of Frames.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_FrameBurstStart	include/spinc/CameraDefsC.h	/^	EventSelector_FrameBurstStart,	\/*!< Device just started the capture of a burst of Frames.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_FrameEnd	include/CameraDefs.h	/^		EventSelector_FrameEnd,	\/*!< Device just completed the capture of one Frame.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_FrameEnd	include/spinc/CameraDefsC.h	/^	EventSelector_FrameEnd,	\/*!< Device just completed the capture of one Frame.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_FrameStart	include/CameraDefs.h	/^		EventSelector_FrameStart,	\/*!< Device just started the capture of one Frame.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_FrameStart	include/spinc/CameraDefsC.h	/^	EventSelector_FrameStart,	\/*!< Device just started the capture of one Frame.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_FrameTransferEnd	include/CameraDefs.h	/^		EventSelector_FrameTransferEnd,	\/*!< Device just completed the transfer of one Frame.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_FrameTransferEnd	include/spinc/CameraDefsC.h	/^	EventSelector_FrameTransferEnd,	\/*!< Device just completed the transfer of one Frame.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_FrameTransferStart	include/CameraDefs.h	/^		EventSelector_FrameTransferStart,	\/*!< Device just started the transfer of one Frame.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_FrameTransferStart	include/spinc/CameraDefsC.h	/^	EventSelector_FrameTransferStart,	\/*!< Device just started the transfer of one Frame.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_FrameTrigger	include/CameraDefs.h	/^		EventSelector_FrameTrigger,	\/*!< Device just received a trigger to start the capture of one Frame.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_FrameTrigger	include/spinc/CameraDefsC.h	/^	EventSelector_FrameTrigger,	\/*!< Device just received a trigger to start the capture of one Frame.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Line0AnyEdge	include/CameraDefs.h	/^		EventSelector_Line0AnyEdge,	\/*!< The event will be generated when a Falling or Rising Edge is detected on the Line 0.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Line0AnyEdge	include/spinc/CameraDefsC.h	/^	EventSelector_Line0AnyEdge,	\/*!< The event will be generated when a Falling or Rising Edge is detected on the Line 0.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Line0FallingEdge	include/CameraDefs.h	/^		EventSelector_Line0FallingEdge,	\/*!< The event will be generated when a Falling Edge is detected on the Line 0.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Line0FallingEdge	include/spinc/CameraDefsC.h	/^	EventSelector_Line0FallingEdge,	\/*!< The event will be generated when a Falling Edge is detected on the Line 0.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Line0RisingEdge	include/CameraDefs.h	/^		EventSelector_Line0RisingEdge,	\/*!< The event will be generated when a Rising Edge is detected on the Line 0.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Line0RisingEdge	include/spinc/CameraDefsC.h	/^	EventSelector_Line0RisingEdge,	\/*!< The event will be generated when a Rising Edge is detected on the Line 0.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Line1AnyEdge	include/CameraDefs.h	/^		EventSelector_Line1AnyEdge,	\/*!< The event will be generated when a Falling or Rising Edge is detected on the Line 1.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Line1AnyEdge	include/spinc/CameraDefsC.h	/^	EventSelector_Line1AnyEdge,	\/*!< The event will be generated when a Falling or Rising Edge is detected on the Line 1.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Line1FallingEdge	include/CameraDefs.h	/^		EventSelector_Line1FallingEdge,	\/*!< The event will be generated when a Falling Edge is detected on the Line 1.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Line1FallingEdge	include/spinc/CameraDefsC.h	/^	EventSelector_Line1FallingEdge,	\/*!< The event will be generated when a Falling Edge is detected on the Line 1.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Line1RisingEdge	include/CameraDefs.h	/^		EventSelector_Line1RisingEdge,	\/*!< The event will be generated when a Rising Edge is detected on the Line 1.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Line1RisingEdge	include/spinc/CameraDefsC.h	/^	EventSelector_Line1RisingEdge,	\/*!< The event will be generated when a Rising Edge is detected on the Line 1.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_LinkSpeedChange	include/CameraDefs.h	/^		EventSelector_LinkSpeedChange,	\/*!< Then event will be generated when the link speed has changed.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_LinkSpeedChange	include/spinc/CameraDefsC.h	/^	EventSelector_LinkSpeedChange,	\/*!< Then event will be generated when the link speed has changed.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_LinkTrigger0	include/CameraDefs.h	/^		EventSelector_LinkTrigger0,	\/*!< The event will be generated when a Rising Edge is detected on the LinkTrigger 0.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_LinkTrigger0	include/spinc/CameraDefsC.h	/^	EventSelector_LinkTrigger0,	\/*!< The event will be generated when a Rising Edge is detected on the LinkTrigger 0.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_LinkTrigger1	include/CameraDefs.h	/^		EventSelector_LinkTrigger1,	\/*!< The event will be generated when a Rising Edge is detected on the LinkTrigger 1.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_LinkTrigger1	include/spinc/CameraDefsC.h	/^	EventSelector_LinkTrigger1,	\/*!< The event will be generated when a Rising Edge is detected on the LinkTrigger 1.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_PrimaryApplicationSwitch	include/CameraDefs.h	/^		EventSelector_PrimaryApplicationSwitch,	\/*!< Then event will be generated when a primary application switchover has been granted.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_PrimaryApplicationSwitch	include/spinc/CameraDefsC.h	/^	EventSelector_PrimaryApplicationSwitch,	\/*!< Then event will be generated when a primary application switchover has been granted.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_SequencerSetChange	include/CameraDefs.h	/^		EventSelector_SequencerSetChange,	\/*!< Device sequencer set has changed.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_SequencerSetChange	include/spinc/CameraDefsC.h	/^	EventSelector_SequencerSetChange,	\/*!< Device sequencer set has changed.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Stream0TransferBlockEnd	include/CameraDefs.h	/^		EventSelector_Stream0TransferBlockEnd,	\/*!< Device just completed the transfer of one Block.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Stream0TransferBlockEnd	include/spinc/CameraDefsC.h	/^	EventSelector_Stream0TransferBlockEnd,	\/*!< Device just completed the transfer of one Block.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Stream0TransferBlockStart	include/CameraDefs.h	/^		EventSelector_Stream0TransferBlockStart,	\/*!< Device just started the transfer of one Block.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Stream0TransferBlockStart	include/spinc/CameraDefsC.h	/^	EventSelector_Stream0TransferBlockStart,	\/*!< Device just started the transfer of one Block.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Stream0TransferBlockTrigger	include/CameraDefs.h	/^		EventSelector_Stream0TransferBlockTrigger,	\/*!< Device just received a trigger to start the transfer of one Block.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Stream0TransferBlockTrigger	include/spinc/CameraDefsC.h	/^	EventSelector_Stream0TransferBlockTrigger,	\/*!< Device just received a trigger to start the transfer of one Block.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Stream0TransferBurstEnd	include/CameraDefs.h	/^		EventSelector_Stream0TransferBurstEnd,	\/*!< Device just completed the transfer of a burst of Blocks.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Stream0TransferBurstEnd	include/spinc/CameraDefsC.h	/^	EventSelector_Stream0TransferBurstEnd,	\/*!< Device just completed the transfer of a burst of Blocks.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Stream0TransferBurstStart	include/CameraDefs.h	/^		EventSelector_Stream0TransferBurstStart,	\/*!< Device just started the transfer of a burst of Blocks.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Stream0TransferBurstStart	include/spinc/CameraDefsC.h	/^	EventSelector_Stream0TransferBurstStart,	\/*!< Device just started the transfer of a burst of Blocks.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Stream0TransferEnd	include/CameraDefs.h	/^		EventSelector_Stream0TransferEnd,	\/*!< Device just completed the transfer of one or many Blocks.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Stream0TransferEnd	include/spinc/CameraDefsC.h	/^	EventSelector_Stream0TransferEnd,	\/*!< Device just completed the transfer of one or many Blocks.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Stream0TransferOverflow	include/CameraDefs.h	/^		EventSelector_Stream0TransferOverflow,	\/*!< Device transfer queue overflowed.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Stream0TransferOverflow	include/spinc/CameraDefsC.h	/^	EventSelector_Stream0TransferOverflow,	\/*!< Device transfer queue overflowed.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Stream0TransferPause	include/CameraDefs.h	/^		EventSelector_Stream0TransferPause,	\/*!< Device just paused the transfer.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Stream0TransferPause	include/spinc/CameraDefsC.h	/^	EventSelector_Stream0TransferPause,	\/*!< Device just paused the transfer.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Stream0TransferResume	include/CameraDefs.h	/^		EventSelector_Stream0TransferResume,	\/*!< Device just resumed the transfer.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Stream0TransferResume	include/spinc/CameraDefsC.h	/^	EventSelector_Stream0TransferResume,	\/*!< Device just resumed the transfer.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Stream0TransferStart	include/CameraDefs.h	/^		EventSelector_Stream0TransferStart,	\/*!< Device just started the transfer of one or many Blocks.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Stream0TransferStart	include/spinc/CameraDefsC.h	/^	EventSelector_Stream0TransferStart,	\/*!< Device just started the transfer of one or many Blocks.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Test	include/CameraDefs.h	/^		EventSelector_Test,	\/*!< The test event will be generated when the device receives the TestEventGenerate command(EventNotification for the Test event is always On).*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Test	include/spinc/CameraDefsC.h	/^	EventSelector_Test,	\/*!< The test event will be generated when the device receives the TestEventGenerate command(EventNotification for the Test event is always On).*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Timer0End	include/CameraDefs.h	/^		EventSelector_Timer0End,	\/*!< The event will be generated when Timer 0 ends counting.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Timer0End	include/spinc/CameraDefsC.h	/^	EventSelector_Timer0End,	\/*!< The event will be generated when Timer 0 ends counting.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Timer0Start	include/CameraDefs.h	/^		EventSelector_Timer0Start,	\/*!< The event will be generated when Timer 0 starts counting.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Timer0Start	include/spinc/CameraDefsC.h	/^	EventSelector_Timer0Start,	\/*!< The event will be generated when Timer 0 starts counting.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Timer1End	include/CameraDefs.h	/^		EventSelector_Timer1End,	\/*!< The event will be generated when Timer 1 ends counting.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Timer1End	include/spinc/CameraDefsC.h	/^	EventSelector_Timer1End,	\/*!< The event will be generated when Timer 1 ends counting.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSelector_Timer1Start	include/CameraDefs.h	/^		EventSelector_Timer1Start,	\/*!< The event will be generated when Timer 1 starts counting.*\/$/;"	e	enum:Spinnaker::EventSelectorEnums
EventSelector_Timer1Start	include/spinc/CameraDefsC.h	/^	EventSelector_Timer1Start,	\/*!< The event will be generated when Timer 1 starts counting.*\/$/;"	e	enum:_spinEventSelectorEnums
EventSequencerSetChange	include/Camera.h	/^		GenApi::IInteger &EventSequencerSetChange;$/;"	m	class:Spinnaker::Camera
EventSequencerSetChange	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventSequencerSetChange;$/;"	m	struct:_quickSpin
EventSequencerSetChangeFrameID	include/Camera.h	/^		GenApi::IInteger &EventSequencerSetChangeFrameID;$/;"	m	class:Spinnaker::Camera
EventSequencerSetChangeFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventSequencerSetChangeFrameID;$/;"	m	struct:_quickSpin
EventSequencerSetChangeTimestamp	include/Camera.h	/^		GenApi::IInteger &EventSequencerSetChangeTimestamp;$/;"	m	class:Spinnaker::Camera
EventSequencerSetChangeTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventSequencerSetChangeTimestamp;$/;"	m	struct:_quickSpin
EventStream0TransferBlockEnd	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferBlockEnd;$/;"	m	class:Spinnaker::Camera
EventStream0TransferBlockEnd	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferBlockEnd;$/;"	m	struct:_quickSpin
EventStream0TransferBlockEndFrameID	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferBlockEndFrameID;$/;"	m	class:Spinnaker::Camera
EventStream0TransferBlockEndFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferBlockEndFrameID;$/;"	m	struct:_quickSpin
EventStream0TransferBlockEndTimestamp	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferBlockEndTimestamp;$/;"	m	class:Spinnaker::Camera
EventStream0TransferBlockEndTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferBlockEndTimestamp;$/;"	m	struct:_quickSpin
EventStream0TransferBlockStart	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferBlockStart;$/;"	m	class:Spinnaker::Camera
EventStream0TransferBlockStart	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferBlockStart;$/;"	m	struct:_quickSpin
EventStream0TransferBlockStartFrameID	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferBlockStartFrameID;$/;"	m	class:Spinnaker::Camera
EventStream0TransferBlockStartFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferBlockStartFrameID;$/;"	m	struct:_quickSpin
EventStream0TransferBlockStartTimestamp	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferBlockStartTimestamp;$/;"	m	class:Spinnaker::Camera
EventStream0TransferBlockStartTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferBlockStartTimestamp;$/;"	m	struct:_quickSpin
EventStream0TransferBlockTrigger	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferBlockTrigger;$/;"	m	class:Spinnaker::Camera
EventStream0TransferBlockTrigger	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferBlockTrigger;$/;"	m	struct:_quickSpin
EventStream0TransferBlockTriggerFrameID	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferBlockTriggerFrameID;$/;"	m	class:Spinnaker::Camera
EventStream0TransferBlockTriggerFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferBlockTriggerFrameID;$/;"	m	struct:_quickSpin
EventStream0TransferBlockTriggerTimestamp	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferBlockTriggerTimestamp;$/;"	m	class:Spinnaker::Camera
EventStream0TransferBlockTriggerTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferBlockTriggerTimestamp;$/;"	m	struct:_quickSpin
EventStream0TransferBurstEnd	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferBurstEnd;$/;"	m	class:Spinnaker::Camera
EventStream0TransferBurstEnd	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferBurstEnd;$/;"	m	struct:_quickSpin
EventStream0TransferBurstEndFrameID	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferBurstEndFrameID;$/;"	m	class:Spinnaker::Camera
EventStream0TransferBurstEndFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferBurstEndFrameID;$/;"	m	struct:_quickSpin
EventStream0TransferBurstEndTimestamp	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferBurstEndTimestamp;$/;"	m	class:Spinnaker::Camera
EventStream0TransferBurstEndTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferBurstEndTimestamp;$/;"	m	struct:_quickSpin
EventStream0TransferBurstStart	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferBurstStart;$/;"	m	class:Spinnaker::Camera
EventStream0TransferBurstStart	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferBurstStart;$/;"	m	struct:_quickSpin
EventStream0TransferBurstStartFrameID	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferBurstStartFrameID;$/;"	m	class:Spinnaker::Camera
EventStream0TransferBurstStartFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferBurstStartFrameID;$/;"	m	struct:_quickSpin
EventStream0TransferBurstStartTimestamp	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferBurstStartTimestamp;$/;"	m	class:Spinnaker::Camera
EventStream0TransferBurstStartTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferBurstStartTimestamp;$/;"	m	struct:_quickSpin
EventStream0TransferEnd	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferEnd;$/;"	m	class:Spinnaker::Camera
EventStream0TransferEnd	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferEnd;$/;"	m	struct:_quickSpin
EventStream0TransferEndFrameID	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferEndFrameID;$/;"	m	class:Spinnaker::Camera
EventStream0TransferEndFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferEndFrameID;$/;"	m	struct:_quickSpin
EventStream0TransferEndTimestamp	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferEndTimestamp;$/;"	m	class:Spinnaker::Camera
EventStream0TransferEndTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferEndTimestamp;$/;"	m	struct:_quickSpin
EventStream0TransferOverflow	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferOverflow;$/;"	m	class:Spinnaker::Camera
EventStream0TransferOverflow	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferOverflow;$/;"	m	struct:_quickSpin
EventStream0TransferOverflowFrameID	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferOverflowFrameID;$/;"	m	class:Spinnaker::Camera
EventStream0TransferOverflowFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferOverflowFrameID;$/;"	m	struct:_quickSpin
EventStream0TransferOverflowTimestamp	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferOverflowTimestamp;$/;"	m	class:Spinnaker::Camera
EventStream0TransferOverflowTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferOverflowTimestamp;$/;"	m	struct:_quickSpin
EventStream0TransferPause	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferPause;$/;"	m	class:Spinnaker::Camera
EventStream0TransferPause	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferPause;$/;"	m	struct:_quickSpin
EventStream0TransferPauseFrameID	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferPauseFrameID;$/;"	m	class:Spinnaker::Camera
EventStream0TransferPauseFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferPauseFrameID;$/;"	m	struct:_quickSpin
EventStream0TransferPauseTimestamp	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferPauseTimestamp;$/;"	m	class:Spinnaker::Camera
EventStream0TransferPauseTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferPauseTimestamp;$/;"	m	struct:_quickSpin
EventStream0TransferResume	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferResume;$/;"	m	class:Spinnaker::Camera
EventStream0TransferResume	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferResume;$/;"	m	struct:_quickSpin
EventStream0TransferResumeFrameID	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferResumeFrameID;$/;"	m	class:Spinnaker::Camera
EventStream0TransferResumeFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferResumeFrameID;$/;"	m	struct:_quickSpin
EventStream0TransferResumeTimestamp	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferResumeTimestamp;$/;"	m	class:Spinnaker::Camera
EventStream0TransferResumeTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferResumeTimestamp;$/;"	m	struct:_quickSpin
EventStream0TransferStart	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferStart;$/;"	m	class:Spinnaker::Camera
EventStream0TransferStart	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferStart;$/;"	m	struct:_quickSpin
EventStream0TransferStartFrameID	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferStartFrameID;$/;"	m	class:Spinnaker::Camera
EventStream0TransferStartFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferStartFrameID;$/;"	m	struct:_quickSpin
EventStream0TransferStartTimestamp	include/Camera.h	/^		GenApi::IInteger &EventStream0TransferStartTimestamp;$/;"	m	class:Spinnaker::Camera
EventStream0TransferStartTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventStream0TransferStartTimestamp;$/;"	m	struct:_quickSpin
EventTimer0End	include/Camera.h	/^		GenApi::IInteger &EventTimer0End;$/;"	m	class:Spinnaker::Camera
EventTimer0End	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventTimer0End;$/;"	m	struct:_quickSpin
EventTimer0EndFrameID	include/Camera.h	/^		GenApi::IInteger &EventTimer0EndFrameID;$/;"	m	class:Spinnaker::Camera
EventTimer0EndFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventTimer0EndFrameID;$/;"	m	struct:_quickSpin
EventTimer0EndTimestamp	include/Camera.h	/^		GenApi::IInteger &EventTimer0EndTimestamp;$/;"	m	class:Spinnaker::Camera
EventTimer0EndTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventTimer0EndTimestamp;$/;"	m	struct:_quickSpin
EventTimer0Start	include/Camera.h	/^		GenApi::IInteger &EventTimer0Start;$/;"	m	class:Spinnaker::Camera
EventTimer0Start	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventTimer0Start;$/;"	m	struct:_quickSpin
EventTimer0StartFrameID	include/Camera.h	/^		GenApi::IInteger &EventTimer0StartFrameID;$/;"	m	class:Spinnaker::Camera
EventTimer0StartFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventTimer0StartFrameID;$/;"	m	struct:_quickSpin
EventTimer0StartTimestamp	include/Camera.h	/^		GenApi::IInteger &EventTimer0StartTimestamp;$/;"	m	class:Spinnaker::Camera
EventTimer0StartTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventTimer0StartTimestamp;$/;"	m	struct:_quickSpin
EventTimer1End	include/Camera.h	/^		GenApi::IInteger &EventTimer1End;$/;"	m	class:Spinnaker::Camera
EventTimer1End	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventTimer1End;$/;"	m	struct:_quickSpin
EventTimer1EndFrameID	include/Camera.h	/^		GenApi::IInteger &EventTimer1EndFrameID;$/;"	m	class:Spinnaker::Camera
EventTimer1EndFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventTimer1EndFrameID;$/;"	m	struct:_quickSpin
EventTimer1EndTimestamp	include/Camera.h	/^		GenApi::IInteger &EventTimer1EndTimestamp;$/;"	m	class:Spinnaker::Camera
EventTimer1EndTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventTimer1EndTimestamp;$/;"	m	struct:_quickSpin
EventTimer1Start	include/Camera.h	/^		GenApi::IInteger &EventTimer1Start;$/;"	m	class:Spinnaker::Camera
EventTimer1Start	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventTimer1Start;$/;"	m	struct:_quickSpin
EventTimer1StartFrameID	include/Camera.h	/^		GenApi::IInteger &EventTimer1StartFrameID;$/;"	m	class:Spinnaker::Camera
EventTimer1StartFrameID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventTimer1StartFrameID;$/;"	m	struct:_quickSpin
EventTimer1StartTimestamp	include/Camera.h	/^		GenApi::IInteger &EventTimer1StartTimestamp;$/;"	m	class:Spinnaker::Camera
EventTimer1StartTimestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode EventTimer1StartTimestamp;$/;"	m	struct:_quickSpin
EventType	include/SpinnakerDefs.h	/^	enum EventType$/;"	g	namespace:Spinnaker
Exception	include/Exception.h	/^    class SPINNAKER_API Exception : public virtual std::exception$/;"	c	namespace:Spinnaker
Expert	include/SpinGenApi/Types.h	/^			Expert = 1,                \/\/!< Visible for experts or Gurus$/;"	e	enum:Spinnaker::GenApi::_EVisibility
Expert	include/spinc/SpinnakerGenApiDefsC.h	/^	Expert = 1,$/;"	e	enum:_spinVisibility
ExposureAuto	include/Camera.h	/^		GenApi::IEnumerationT<ExposureAutoEnums> &ExposureAuto;$/;"	m	class:Spinnaker::Camera
ExposureAuto	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ExposureAuto;$/;"	m	struct:_quickSpin
ExposureAutoEnums	include/CameraDefs.h	/^	enum ExposureAutoEnums	\/*!< Sets the automatic exposure mode when ExposureMode is Timed. The exact algorithm used to implement this control is device-specific.*\/$/;"	g	namespace:Spinnaker
ExposureAuto_Continuous	include/CameraDefs.h	/^		ExposureAuto_Continuous,	\/*!< Exposure duration is constantly adapted by the device to maximize the dynamic range.*\/$/;"	e	enum:Spinnaker::ExposureAutoEnums
ExposureAuto_Continuous	include/spinc/CameraDefsC.h	/^	ExposureAuto_Continuous,	\/*!< Exposure duration is constantly adapted by the device to maximize the dynamic range.*\/$/;"	e	enum:_spinExposureAutoEnums
ExposureAuto_Off	include/CameraDefs.h	/^		ExposureAuto_Off,	\/*!< Exposure duration is user controlled using ExposureTime.*\/$/;"	e	enum:Spinnaker::ExposureAutoEnums
ExposureAuto_Off	include/spinc/CameraDefsC.h	/^	ExposureAuto_Off,	\/*!< Exposure duration is user controlled using ExposureTime.*\/$/;"	e	enum:_spinExposureAutoEnums
ExposureAuto_Once	include/CameraDefs.h	/^		ExposureAuto_Once,	\/*!< Exposure duration is adapted once by the device. Once it has converged, it returns to the Off state.*\/$/;"	e	enum:Spinnaker::ExposureAutoEnums
ExposureAuto_Once	include/spinc/CameraDefsC.h	/^	ExposureAuto_Once,	\/*!< Exposure duration is adapted once by the device. Once it has converged, it returns to the Off state.*\/$/;"	e	enum:_spinExposureAutoEnums
ExposureMode	include/Camera.h	/^		GenApi::IEnumerationT<ExposureModeEnums> &ExposureMode;$/;"	m	class:Spinnaker::Camera
ExposureMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ExposureMode;$/;"	m	struct:_quickSpin
ExposureModeEnums	include/CameraDefs.h	/^	enum ExposureModeEnums	\/*!< Sets the operation mode of the Exposure.*\/$/;"	g	namespace:Spinnaker
ExposureMode_Off	include/CameraDefs.h	/^		ExposureMode_Off,	\/*!< Disables the Exposure and let the shutter open.*\/$/;"	e	enum:Spinnaker::ExposureModeEnums
ExposureMode_Off	include/spinc/CameraDefsC.h	/^	ExposureMode_Off,	\/*!< Disables the Exposure and let the shutter open.*\/$/;"	e	enum:_spinExposureModeEnums
ExposureMode_Timed	include/CameraDefs.h	/^		ExposureMode_Timed,	\/*!< Timed exposure. The exposure duration time is set using the ExposureTime or ExposureAuto features and the exposure starts with the FrameStart or LineStart.*\/$/;"	e	enum:Spinnaker::ExposureModeEnums
ExposureMode_Timed	include/spinc/CameraDefsC.h	/^	ExposureMode_Timed,	\/*!< Timed exposure. The exposure duration time is set using the ExposureTime or ExposureAuto features and the exposure starts with the FrameStart or LineStart.*\/$/;"	e	enum:_spinExposureModeEnums
ExposureMode_TriggerControlled	include/CameraDefs.h	/^		ExposureMode_TriggerControlled,	\/*!< Uses one or more trigger signal(s) to control the exposure duration independently from the current Frame or Line triggers. See ExposureStart, ExposureEnd and ExposureActive of the TriggerSelector feature.*\/$/;"	e	enum:Spinnaker::ExposureModeEnums
ExposureMode_TriggerControlled	include/spinc/CameraDefsC.h	/^	ExposureMode_TriggerControlled,	\/*!< Uses one or more trigger signal(s) to control the exposure duration independently from the current Frame or Line triggers. See ExposureStart, ExposureEnd and ExposureActive of the TriggerSelector feature.*\/$/;"	e	enum:_spinExposureModeEnums
ExposureMode_TriggerWidth	include/CameraDefs.h	/^		ExposureMode_TriggerWidth,	\/*!< Uses the width of the current Frame or Line trigger signal(s) pulse to control the exposure duration. Note that if the Frame or Line TriggerActivation is RisingEdge or LevelHigh, the exposure duration will be the time the trigger stays High. If TriggerActivation is FallingEdge or LevelLow, the exposure time will last as long as the trigger stays Low.*\/$/;"	e	enum:Spinnaker::ExposureModeEnums
ExposureMode_TriggerWidth	include/spinc/CameraDefsC.h	/^	ExposureMode_TriggerWidth,	\/*!< Uses the width of the current Frame or Line trigger signal(s) pulse to control the exposure duration. Note that if the Frame or Line TriggerActivation is RisingEdge or LevelHigh, the exposure duration will be the time the trigger stays High. If TriggerActivation is FallingEdge or LevelLow, the exposure time will last as long as the trigger stays Low.*\/$/;"	e	enum:_spinExposureModeEnums
ExposureTime	include/Camera.h	/^		GenApi::IFloat &ExposureTime;$/;"	m	class:Spinnaker::Camera
ExposureTime	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode ExposureTime;$/;"	m	struct:_quickSpin
ExposureTimeMode	include/Camera.h	/^		GenApi::IEnumerationT<ExposureTimeModeEnums> &ExposureTimeMode;$/;"	m	class:Spinnaker::Camera
ExposureTimeMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ExposureTimeMode;$/;"	m	struct:_quickSpin
ExposureTimeModeEnums	include/CameraDefs.h	/^	enum ExposureTimeModeEnums	\/*!< Sets the configuration mode of the ExposureTime feature.*\/$/;"	g	namespace:Spinnaker
ExposureTimeMode_Common	include/CameraDefs.h	/^		ExposureTimeMode_Common,	\/*!< The exposure time is common to all the color components. The common ExposureTime value to use can be set selecting it with ExposureTimeSelector[Common].*\/$/;"	e	enum:Spinnaker::ExposureTimeModeEnums
ExposureTimeMode_Common	include/spinc/CameraDefsC.h	/^	ExposureTimeMode_Common,	\/*!< The exposure time is common to all the color components. The common ExposureTime value to use can be set selecting it with ExposureTimeSelector[Common].*\/$/;"	e	enum:_spinExposureTimeModeEnums
ExposureTimeMode_Individual	include/CameraDefs.h	/^		ExposureTimeMode_Individual,	\/*!< The exposure time is individual for each color component. Each individual ExposureTime values to use can be set by selecting them with ExposureTimeSelector.*\/$/;"	e	enum:Spinnaker::ExposureTimeModeEnums
ExposureTimeMode_Individual	include/spinc/CameraDefsC.h	/^	ExposureTimeMode_Individual,	\/*!< The exposure time is individual for each color component. Each individual ExposureTime values to use can be set by selecting them with ExposureTimeSelector.*\/$/;"	e	enum:_spinExposureTimeModeEnums
ExposureTimeSelector	include/Camera.h	/^		GenApi::IEnumerationT<ExposureTimeSelectorEnums> &ExposureTimeSelector;$/;"	m	class:Spinnaker::Camera
ExposureTimeSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ExposureTimeSelector;$/;"	m	struct:_quickSpin
ExposureTimeSelectorEnums	include/CameraDefs.h	/^	enum ExposureTimeSelectorEnums	\/*!< Selects which exposure time is controlled by the ExposureTime feature. This allows for independent control over the exposure components.*\/$/;"	g	namespace:Spinnaker
ExposureTimeSelector_Blue	include/CameraDefs.h	/^		ExposureTimeSelector_Blue,	\/*!< Selects the blue ExposureTime.*\/$/;"	e	enum:Spinnaker::ExposureTimeSelectorEnums
ExposureTimeSelector_Blue	include/spinc/CameraDefsC.h	/^	ExposureTimeSelector_Blue,	\/*!< Selects the blue ExposureTime.*\/$/;"	e	enum:_spinExposureTimeSelectorEnums
ExposureTimeSelector_Common	include/CameraDefs.h	/^		ExposureTimeSelector_Common,	\/*!< Selects the common ExposureTime.*\/$/;"	e	enum:Spinnaker::ExposureTimeSelectorEnums
ExposureTimeSelector_Common	include/spinc/CameraDefsC.h	/^	ExposureTimeSelector_Common,	\/*!< Selects the common ExposureTime.*\/$/;"	e	enum:_spinExposureTimeSelectorEnums
ExposureTimeSelector_Cyan	include/CameraDefs.h	/^		ExposureTimeSelector_Cyan,	\/*!< Selects the cyan common ExposureTime.*\/$/;"	e	enum:Spinnaker::ExposureTimeSelectorEnums
ExposureTimeSelector_Cyan	include/spinc/CameraDefsC.h	/^	ExposureTimeSelector_Cyan,	\/*!< Selects the cyan common ExposureTime.*\/$/;"	e	enum:_spinExposureTimeSelectorEnums
ExposureTimeSelector_Green	include/CameraDefs.h	/^		ExposureTimeSelector_Green,	\/*!< Selects the green ExposureTime.*\/$/;"	e	enum:Spinnaker::ExposureTimeSelectorEnums
ExposureTimeSelector_Green	include/spinc/CameraDefsC.h	/^	ExposureTimeSelector_Green,	\/*!< Selects the green ExposureTime.*\/$/;"	e	enum:_spinExposureTimeSelectorEnums
ExposureTimeSelector_Infrared	include/CameraDefs.h	/^		ExposureTimeSelector_Infrared,	\/*!< Selects the infrared ExposureTime.*\/$/;"	e	enum:Spinnaker::ExposureTimeSelectorEnums
ExposureTimeSelector_Infrared	include/spinc/CameraDefsC.h	/^	ExposureTimeSelector_Infrared,	\/*!< Selects the infrared ExposureTime.*\/$/;"	e	enum:_spinExposureTimeSelectorEnums
ExposureTimeSelector_Magenta	include/CameraDefs.h	/^		ExposureTimeSelector_Magenta,	\/*!< Selects the magenta ExposureTime.*\/$/;"	e	enum:Spinnaker::ExposureTimeSelectorEnums
ExposureTimeSelector_Magenta	include/spinc/CameraDefsC.h	/^	ExposureTimeSelector_Magenta,	\/*!< Selects the magenta ExposureTime.*\/$/;"	e	enum:_spinExposureTimeSelectorEnums
ExposureTimeSelector_Red	include/CameraDefs.h	/^		ExposureTimeSelector_Red,	\/*!< Selects the red common ExposureTime.*\/$/;"	e	enum:Spinnaker::ExposureTimeSelectorEnums
ExposureTimeSelector_Red	include/spinc/CameraDefsC.h	/^	ExposureTimeSelector_Red,	\/*!< Selects the red common ExposureTime.*\/$/;"	e	enum:_spinExposureTimeSelectorEnums
ExposureTimeSelector_Stage1	include/CameraDefs.h	/^		ExposureTimeSelector_Stage1,	\/*!< Selects the first stage ExposureTime.*\/$/;"	e	enum:Spinnaker::ExposureTimeSelectorEnums
ExposureTimeSelector_Stage1	include/spinc/CameraDefsC.h	/^	ExposureTimeSelector_Stage1,	\/*!< Selects the first stage ExposureTime.*\/$/;"	e	enum:_spinExposureTimeSelectorEnums
ExposureTimeSelector_Stage2	include/CameraDefs.h	/^		ExposureTimeSelector_Stage2,	\/*!< Selects the second stage ExposureTime.*\/$/;"	e	enum:Spinnaker::ExposureTimeSelectorEnums
ExposureTimeSelector_Stage2	include/spinc/CameraDefsC.h	/^	ExposureTimeSelector_Stage2,	\/*!< Selects the second stage ExposureTime.*\/$/;"	e	enum:_spinExposureTimeSelectorEnums
ExposureTimeSelector_Ultraviolet	include/CameraDefs.h	/^		ExposureTimeSelector_Ultraviolet,	\/*!< Selects the ultraviolet ExposureTime.*\/$/;"	e	enum:Spinnaker::ExposureTimeSelectorEnums
ExposureTimeSelector_Ultraviolet	include/spinc/CameraDefsC.h	/^	ExposureTimeSelector_Ultraviolet,	\/*!< Selects the ultraviolet ExposureTime.*\/$/;"	e	enum:_spinExposureTimeSelectorEnums
ExposureTimeSelector_Yellow	include/CameraDefs.h	/^		ExposureTimeSelector_Yellow,	\/*!< Selects the yellow ExposureTime.*\/$/;"	e	enum:Spinnaker::ExposureTimeSelectorEnums
ExposureTimeSelector_Yellow	include/spinc/CameraDefsC.h	/^	ExposureTimeSelector_Yellow,	\/*!< Selects the yellow ExposureTime.*\/$/;"	e	enum:_spinExposureTimeSelectorEnums
FALSE	include/PtGreyVideoEncoder.h	30;"	d
FILENAME_MAX	include/PtGreyVideoEncoder.h	42;"	d
FLUSH_QUEUE_TYPE	include/SpinnakerDefs.h	/^	enum FLUSH_QUEUE_TYPE$/;"	g	namespace:Spinnaker
FMT_I64	include/SpinGenApi/Compatibility.h	67;"	d
FMT_I64	include/SpinGenApi/Compatibility.h	69;"	d
FPS_DEN	include/PtGreyVideoEncoder.h	/^	int FPS_DEN;						\/* Desired frame rate (frames per second) denominator. *\/$/;"	m	struct:PtGreyVideoEncoderOptions
FPS_NUM	include/PtGreyVideoEncoder.h	/^	int FPS_NUM;						\/* Desired frame rate (frames per second) numerator. *\/$/;"	m	struct:PtGreyVideoEncoderOptions
FROM_FILE_EXT	include/SpinnakerDefs.h	/^		FROM_FILE_EXT = -1, \/**< Determine file format from file extension. *\/$/;"	e	enum:Spinnaker::ImageFileFormat
FROM_FILE_EXT	include/spinc/SpinnakerDefsC.h	/^	FROM_FILE_EXT = -1, \/**< Determine file format from file extension. *\/$/;"	e	enum:_spinImageFileFormat
False	include/spinc/SpinnakerDefsC.h	/^static const bool8_t False = 0;$/;"	v
FeatureList_t	include/SpinGenApi/Container.h	/^		typedef value_vector FeatureList_t;$/;"	t	namespace:Spinnaker::GenApi
FileAccessBuffer	include/Camera.h	/^		GenApi::IRegister &FileAccessBuffer;$/;"	m	class:Spinnaker::Camera
FileAccessBuffer	include/spinc/QuickSpinDefsC.h	/^	quickSpinRegisterNode FileAccessBuffer;$/;"	m	struct:_quickSpin
FileAccessLength	include/Camera.h	/^		GenApi::IInteger &FileAccessLength;$/;"	m	class:Spinnaker::Camera
FileAccessLength	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode FileAccessLength;$/;"	m	struct:_quickSpin
FileAccessOffset	include/Camera.h	/^		GenApi::IInteger &FileAccessOffset;$/;"	m	class:Spinnaker::Camera
FileAccessOffset	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode FileAccessOffset;$/;"	m	struct:_quickSpin
FileOpenMode	include/Camera.h	/^		GenApi::IEnumerationT<FileOpenModeEnums> &FileOpenMode;$/;"	m	class:Spinnaker::Camera
FileOpenMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode FileOpenMode;$/;"	m	struct:_quickSpin
FileOpenModeEnums	include/CameraDefs.h	/^	enum FileOpenModeEnums	\/*!< Selects the access mode in which a file is opened in the device.*\/$/;"	g	namespace:Spinnaker
FileOpenMode_Read	include/CameraDefs.h	/^		FileOpenMode_Read,	\/*!< This mode selects read-only open mode.*\/$/;"	e	enum:Spinnaker::FileOpenModeEnums
FileOpenMode_Read	include/spinc/CameraDefsC.h	/^	FileOpenMode_Read,	\/*!< This mode selects read-only open mode.*\/$/;"	e	enum:_spinFileOpenModeEnums
FileOpenMode_ReadWrite	include/CameraDefs.h	/^		FileOpenMode_ReadWrite,	\/*!< This mode selects read and write open mode.*\/$/;"	e	enum:Spinnaker::FileOpenModeEnums
FileOpenMode_ReadWrite	include/spinc/CameraDefsC.h	/^	FileOpenMode_ReadWrite,	\/*!< This mode selects read and write open mode.*\/$/;"	e	enum:_spinFileOpenModeEnums
FileOpenMode_Write	include/CameraDefs.h	/^		FileOpenMode_Write,	\/*!< This mode selects write-only open mode.*\/$/;"	e	enum:Spinnaker::FileOpenModeEnums
FileOpenMode_Write	include/spinc/CameraDefsC.h	/^	FileOpenMode_Write,	\/*!< This mode selects write-only open mode.*\/$/;"	e	enum:_spinFileOpenModeEnums
FileOperationExecute	include/Camera.h	/^		GenApi::ICommand &FileOperationExecute;$/;"	m	class:Spinnaker::Camera
FileOperationExecute	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode FileOperationExecute;$/;"	m	struct:_quickSpin
FileOperationResult	include/Camera.h	/^		GenApi::IInteger &FileOperationResult;$/;"	m	class:Spinnaker::Camera
FileOperationResult	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode FileOperationResult;$/;"	m	struct:_quickSpin
FileOperationSelector	include/Camera.h	/^		GenApi::IEnumerationT<FileOperationSelectorEnums> &FileOperationSelector;$/;"	m	class:Spinnaker::Camera
FileOperationSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode FileOperationSelector;$/;"	m	struct:_quickSpin
FileOperationSelectorEnums	include/CameraDefs.h	/^	enum FileOperationSelectorEnums	\/*!< Selects the target operation for the selected file in the device. This Operation is executed when the FileOperationExecute feature is called.*\/$/;"	g	namespace:Spinnaker
FileOperationSelector_Close	include/CameraDefs.h	/^		FileOperationSelector_Close,	\/*!< Closes the file selected by FileSelector in the device.*\/$/;"	e	enum:Spinnaker::FileOperationSelectorEnums
FileOperationSelector_Close	include/spinc/CameraDefsC.h	/^	FileOperationSelector_Close,	\/*!< Closes the file selected by FileSelector in the device.*\/$/;"	e	enum:_spinFileOperationSelectorEnums
FileOperationSelector_Delete	include/CameraDefs.h	/^		FileOperationSelector_Delete,	\/*!< Deletes the file selected by FileSelector in the device. Note that deleting a device file should not remove the associated FileSelector entry to allow future operation on this file.*\/$/;"	e	enum:Spinnaker::FileOperationSelectorEnums
FileOperationSelector_Delete	include/spinc/CameraDefsC.h	/^	FileOperationSelector_Delete,	\/*!< Deletes the file selected by FileSelector in the device. Note that deleting a device file should not remove the associated FileSelector entry to allow future operation on this file.*\/$/;"	e	enum:_spinFileOperationSelectorEnums
FileOperationSelector_Open	include/CameraDefs.h	/^		FileOperationSelector_Open,	\/*!< Opens the file selected by FileSelector in the device. The access mode in which the file is opened is selected by FileOpenMode.*\/$/;"	e	enum:Spinnaker::FileOperationSelectorEnums
FileOperationSelector_Open	include/spinc/CameraDefsC.h	/^	FileOperationSelector_Open,	\/*!< Opens the file selected by FileSelector in the device. The access mode in which the file is opened is selected by FileOpenMode.*\/$/;"	e	enum:_spinFileOperationSelectorEnums
FileOperationSelector_Read	include/CameraDefs.h	/^		FileOperationSelector_Read,	\/*!< Reads FileAccessLength bytes from the device storage at the file relative offset FileAccessOffset into FileAccessBuffer.*\/$/;"	e	enum:Spinnaker::FileOperationSelectorEnums
FileOperationSelector_Read	include/spinc/CameraDefsC.h	/^	FileOperationSelector_Read,	\/*!< Reads FileAccessLength bytes from the device storage at the file relative offset FileAccessOffset into FileAccessBuffer.*\/$/;"	e	enum:_spinFileOperationSelectorEnums
FileOperationSelector_Write	include/CameraDefs.h	/^		FileOperationSelector_Write,	\/*!< Writes FileAccessLength bytes taken from the FileAccessBuffer into the device storage at the file relative offset FileAccessOffset.*\/$/;"	e	enum:Spinnaker::FileOperationSelectorEnums
FileOperationSelector_Write	include/spinc/CameraDefsC.h	/^	FileOperationSelector_Write,	\/*!< Writes FileAccessLength bytes taken from the FileAccessBuffer into the device storage at the file relative offset FileAccessOffset.*\/$/;"	e	enum:_spinFileOperationSelectorEnums
FileOperationStatus	include/Camera.h	/^		GenApi::IEnumerationT<FileOperationStatusEnums> &FileOperationStatus;$/;"	m	class:Spinnaker::Camera
FileOperationStatus	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode FileOperationStatus;$/;"	m	struct:_quickSpin
FileOperationStatusEnums	include/CameraDefs.h	/^	enum FileOperationStatusEnums	\/*!< Represents the file operation execution status.*\/$/;"	g	namespace:Spinnaker
FileOperationStatus_Failure	include/CameraDefs.h	/^		FileOperationStatus_Failure,	\/*!< File Operation failed.*\/$/;"	e	enum:Spinnaker::FileOperationStatusEnums
FileOperationStatus_Failure	include/spinc/CameraDefsC.h	/^	FileOperationStatus_Failure,	\/*!< File Operation failed.*\/$/;"	e	enum:_spinFileOperationStatusEnums
FileOperationStatus_Success	include/CameraDefs.h	/^		FileOperationStatus_Success,	\/*!< File Operation was sucessful.*\/$/;"	e	enum:Spinnaker::FileOperationStatusEnums
FileOperationStatus_Success	include/spinc/CameraDefsC.h	/^	FileOperationStatus_Success,	\/*!< File Operation was sucessful.*\/$/;"	e	enum:_spinFileOperationStatusEnums
FileProtocolAdapter	include/SpinGenApi/Filestream.h	/^		class SPINNAKER_API FileProtocolAdapter {$/;"	c	namespace:Spinnaker::GenApi
FileSelector	include/Camera.h	/^		GenApi::IEnumerationT<FileSelectorEnums> &FileSelector;$/;"	m	class:Spinnaker::Camera
FileSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode FileSelector;$/;"	m	struct:_quickSpin
FileSelectorEnums	include/CameraDefs.h	/^	enum FileSelectorEnums	\/*!< Selects the target file in the device.*\/$/;"	g	namespace:Spinnaker
FileSelector_LUTBlue	include/CameraDefs.h	/^		FileSelector_LUTBlue,	\/*!< The Blue LUT of the camera.*\/$/;"	e	enum:Spinnaker::FileSelectorEnums
FileSelector_LUTBlue	include/spinc/CameraDefsC.h	/^	FileSelector_LUTBlue,	\/*!< The Blue LUT of the camera.*\/$/;"	e	enum:_spinFileSelectorEnums
FileSelector_LUTGreen	include/CameraDefs.h	/^		FileSelector_LUTGreen,	\/*!< The Green LUT of the camera.*\/$/;"	e	enum:Spinnaker::FileSelectorEnums
FileSelector_LUTGreen	include/spinc/CameraDefsC.h	/^	FileSelector_LUTGreen,	\/*!< The Green LUT of the camera.*\/$/;"	e	enum:_spinFileSelectorEnums
FileSelector_LUTLuminance	include/CameraDefs.h	/^		FileSelector_LUTLuminance,	\/*!< The Luminance LUT of the camera.*\/$/;"	e	enum:Spinnaker::FileSelectorEnums
FileSelector_LUTLuminance	include/spinc/CameraDefsC.h	/^	FileSelector_LUTLuminance,	\/*!< The Luminance LUT of the camera.*\/$/;"	e	enum:_spinFileSelectorEnums
FileSelector_LUTRed	include/CameraDefs.h	/^		FileSelector_LUTRed,	\/*!< The Red LUT of the camera.*\/$/;"	e	enum:Spinnaker::FileSelectorEnums
FileSelector_LUTRed	include/spinc/CameraDefsC.h	/^	FileSelector_LUTRed,	\/*!< The Red LUT of the camera.*\/$/;"	e	enum:_spinFileSelectorEnums
FileSelector_UserSet1	include/CameraDefs.h	/^		FileSelector_UserSet1,	\/*!< The first user set of the device.*\/$/;"	e	enum:Spinnaker::FileSelectorEnums
FileSelector_UserSet1	include/spinc/CameraDefsC.h	/^	FileSelector_UserSet1,	\/*!< The first user set of the device.*\/$/;"	e	enum:_spinFileSelectorEnums
FileSelector_UserSet2	include/CameraDefs.h	/^		FileSelector_UserSet2,	\/*!< The second user set of the device.*\/$/;"	e	enum:Spinnaker::FileSelectorEnums
FileSelector_UserSet2	include/spinc/CameraDefsC.h	/^	FileSelector_UserSet2,	\/*!< The second user set of the device.*\/$/;"	e	enum:_spinFileSelectorEnums
FileSelector_UserSet3	include/CameraDefs.h	/^		FileSelector_UserSet3,	\/*!< The third user set of the device.*\/$/;"	e	enum:Spinnaker::FileSelectorEnums
FileSelector_UserSet3	include/spinc/CameraDefsC.h	/^	FileSelector_UserSet3,	\/*!< The third user set of the device.*\/$/;"	e	enum:_spinFileSelectorEnums
FileSelector_UserSetDefault	include/CameraDefs.h	/^		FileSelector_UserSetDefault,	\/*!< The default user set of the device.*\/$/;"	e	enum:Spinnaker::FileSelectorEnums
FileSelector_UserSetDefault	include/spinc/CameraDefsC.h	/^	FileSelector_UserSetDefault,	\/*!< The default user set of the device.*\/$/;"	e	enum:_spinFileSelectorEnums
FileSize	include/Camera.h	/^		GenApi::IInteger &FileSize;$/;"	m	class:Spinnaker::Camera
FileSize	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode FileSize;$/;"	m	struct:_quickSpin
FirmwareUpdateEventCallback	include/GUI/SpinnakerGUI_WPF.h	/^		typedef void(*FirmwareUpdateEventCallback)(bool isStarting, bool isFinished, bool isSuccessful, const char* pErrorMessage, Spinnaker::CameraPtr* pCamera);$/;"	t	namespace:Spinnaker::GUI_WPF
Flags	include/SpinGenApi/EventAdapterGEV.h	/^        uint8_t  Flags;$/;"	m	struct:Spinnaker::GenApi::GVCP_REQUEST_HEADER
Flags	include/SpinGenApi/EventAdapterU3V.h	/^			uint16_t Flags;$/;"	m	struct:Spinnaker::GenApi::U3V_COMMAND_HEADER
FloatNode	include/SpinGenApi/FloatNode.h	/^        class SPINNAKER_API FloatNode : virtual public IFloat, virtual public ValueNode$/;"	c	namespace:Spinnaker::GenApi
FloatNode	include/spinc/SpinnakerGenApiDefsC.h	/^	FloatNode,$/;"	e	enum:_spinNodeType
FloatRegNode	include/SpinGenApi/FloatRegNode.h	/^		class SPINNAKER_API FloatRegNode : virtual public FloatNode, virtual public RegisterNode$/;"	c	namespace:Spinnaker::GenApi
Function_NodeCallback	include/SpinGenApi/NodeCallback.h	/^			Function_NodeCallback(INode* pNode, const Function& function, ECallbackType CallbackType) :$/;"	f	class:Spinnaker::GenApi::Function_NodeCallback
Function_NodeCallback	include/SpinGenApi/NodeCallback.h	/^		class Function_NodeCallback : public CNodeCallback$/;"	c	namespace:Spinnaker::GenApi
GCBASE_API	include/SpinGenApi/GCTypes.h	242;"	d
GCBASE_API	include/SpinGenApi/GCTypes.h	245;"	d
GCBASE_API	include/SpinGenApi/GCTypes.h	250;"	d
GCBASE_API	include/SpinGenApi/GCTypes.h	253;"	d
GCBASE_RTTI_CLASS_API	include/SpinGenApi/GCTypes.h	243;"	d
GCBASE_RTTI_CLASS_API	include/SpinGenApi/GCTypes.h	246;"	d
GCBASE_RTTI_CLASS_API	include/SpinGenApi/GCTypes.h	251;"	d
GCBASE_RTTI_CLASS_API	include/SpinGenApi/GCTypes.h	256;"	d
GCSTRING_NPOS	include/SpinGenApi/GCString.h	36;"	d
GC_COUNTOF	include/SpinGenApi/GCUtilities.h	84;"	d
GC_INT32_MAX	include/SpinGenApi/GCTypes.h	174;"	d
GC_INT32_MAX	include/SpinGenApi/GCTypes.h	176;"	d
GC_INT32_MIN	include/SpinGenApi/GCTypes.h	182;"	d
GC_INT32_MIN	include/SpinGenApi/GCTypes.h	184;"	d
GC_INT64_MAX	include/SpinGenApi/GCTypes.h	150;"	d
GC_INT64_MAX	include/SpinGenApi/GCTypes.h	152;"	d
GC_INT64_MIN	include/SpinGenApi/GCTypes.h	158;"	d
GC_INT64_MIN	include/SpinGenApi/GCTypes.h	160;"	d
GC_INT8_MAX	include/SpinGenApi/GCTypes.h	198;"	d
GC_INT8_MAX	include/SpinGenApi/GCTypes.h	200;"	d
GC_INT8_MIN	include/SpinGenApi/GCTypes.h	206;"	d
GC_INT8_MIN	include/SpinGenApi/GCTypes.h	208;"	d
GC_UINT32_MAX	include/SpinGenApi/GCTypes.h	190;"	d
GC_UINT32_MAX	include/SpinGenApi/GCTypes.h	192;"	d
GC_UINT64_MAX	include/SpinGenApi/GCTypes.h	166;"	d
GC_UINT64_MAX	include/SpinGenApi/GCTypes.h	168;"	d
GC_UINT8_MAX	include/SpinGenApi/GCTypes.h	214;"	d
GC_UINT8_MAX	include/SpinGenApi/GCTypes.h	216;"	d
GC_UNUSED	include/SpinGenApi/GCTypes.h	278;"	d
GC_W64	include/SpinGenApi/GCTypes.h	62;"	d
GC_W64	include/SpinGenApi/GCTypes.h	64;"	d
GENCP_COMMAND_HEADER_SIZE	include/SpinGenApi/EventAdapterU3V.h	/^		const size_t GENCP_COMMAND_HEADER_SIZE = sizeof(U3V_COMMAND_HEADER);$/;"	m	namespace:Spinnaker::GenApi
GENCP_EVENT_BASIC_SIZE	include/SpinGenApi/EventAdapterU3V.h	/^		const size_t GENCP_EVENT_BASIC_SIZE = sizeof(U3V_EVENT_MESSAGE);$/;"	m	namespace:Spinnaker::GenApi
GENCP_EVENT_CMD_ID	include/SpinGenApi/EventAdapterU3V.h	/^		const uint16_t GENCP_EVENT_CMD_ID = 0x0C00;$/;"	m	namespace:Spinnaker::GenApi
GENERIC	SpinnakerTest/DeviceEvents/DeviceEvents.cpp	/^	GENERIC,$/;"	e	enum:eventType	file:
GENERIC	SpinnakerTest/DeviceEvents_C/DeviceEvents_C.cpp	/^	GENERIC,$/;"	e	enum:_deviceEventType	file:
GENERIC	src/DeviceEvents/DeviceEvents.cpp	/^	GENERIC,$/;"	e	enum:eventType	file:
GENERIC	src/DeviceEvents_C/DeviceEvents_C.cpp	/^	GENERIC,$/;"	e	enum:_deviceEventType	file:
GENICAM_DEPRECATED	include/SpinGenApi/GCUtilities.h	185;"	d
GENICAM_ERR_ACCESS	include/SpinnakerDefs.h	/^        GENICAM_ERR_ACCESS                = -2006,$/;"	e	enum:Spinnaker::Error
GENICAM_ERR_ACCESS	include/spinc/SpinnakerDefsC.h	/^	GENICAM_ERR_ACCESS = -2006,$/;"	e	enum:_spinError
GENICAM_ERR_BAD_ALLOCATION	include/SpinnakerDefs.h	/^        GENICAM_ERR_BAD_ALLOCATION        = -2010,$/;"	e	enum:Spinnaker::Error
GENICAM_ERR_BAD_ALLOCATION	include/spinc/SpinnakerDefsC.h	/^	GENICAM_ERR_BAD_ALLOCATION = -2010,$/;"	e	enum:_spinError
GENICAM_ERR_DYNAMIC_CAST	include/SpinnakerDefs.h	/^        GENICAM_ERR_DYNAMIC_CAST          = -2008,$/;"	e	enum:Spinnaker::Error
GENICAM_ERR_DYNAMIC_CAST	include/spinc/SpinnakerDefsC.h	/^	GENICAM_ERR_DYNAMIC_CAST = -2008,$/;"	e	enum:_spinError
GENICAM_ERR_GENERIC	include/SpinnakerDefs.h	/^        GENICAM_ERR_GENERIC               = -2009,$/;"	e	enum:Spinnaker::Error
GENICAM_ERR_GENERIC	include/spinc/SpinnakerDefsC.h	/^	GENICAM_ERR_GENERIC = -2009,$/;"	e	enum:_spinError
GENICAM_ERR_INVALID_ARGUMENT	include/SpinnakerDefs.h	/^        GENICAM_ERR_INVALID_ARGUMENT      = -2001,$/;"	e	enum:Spinnaker::Error
GENICAM_ERR_INVALID_ARGUMENT	include/spinc/SpinnakerDefsC.h	/^	GENICAM_ERR_INVALID_ARGUMENT = -2001,$/;"	e	enum:_spinError
GENICAM_ERR_LOGICAL	include/SpinnakerDefs.h	/^        GENICAM_ERR_LOGICAL               = -2005,$/;"	e	enum:Spinnaker::Error
GENICAM_ERR_LOGICAL	include/spinc/SpinnakerDefsC.h	/^	GENICAM_ERR_LOGICAL = -2005,$/;"	e	enum:_spinError
GENICAM_ERR_OUT_OF_RANGE	include/SpinnakerDefs.h	/^        GENICAM_ERR_OUT_OF_RANGE          = -2002,$/;"	e	enum:Spinnaker::Error
GENICAM_ERR_OUT_OF_RANGE	include/spinc/SpinnakerDefsC.h	/^	GENICAM_ERR_OUT_OF_RANGE = -2002,$/;"	e	enum:_spinError
GENICAM_ERR_PROPERTY	include/SpinnakerDefs.h	/^        GENICAM_ERR_PROPERTY              = -2003,$/;"	e	enum:Spinnaker::Error
GENICAM_ERR_PROPERTY	include/spinc/SpinnakerDefsC.h	/^	GENICAM_ERR_PROPERTY = -2003,$/;"	e	enum:_spinError
GENICAM_ERR_RUN_TIME	include/SpinnakerDefs.h	/^        GENICAM_ERR_RUN_TIME              = -2004,$/;"	e	enum:Spinnaker::Error
GENICAM_ERR_RUN_TIME	include/spinc/SpinnakerDefsC.h	/^	GENICAM_ERR_RUN_TIME = -2004,$/;"	e	enum:_spinError
GENICAM_ERR_TIMEOUT	include/SpinnakerDefs.h	/^        GENICAM_ERR_TIMEOUT               = -2007,$/;"	e	enum:Spinnaker::Error
GENICAM_ERR_TIMEOUT	include/spinc/SpinnakerDefsC.h	/^	GENICAM_ERR_TIMEOUT = -2007,$/;"	e	enum:_spinError
GENICAM_GCC_VERSION	include/SpinGenApi/GCUtilities.h	59;"	d
GENICAM_UNUSED	include/SpinGenApi/GCUtilities.h	181;"	d
GEV	include/SpinGenApi/Types.h	/^			GEV,             \/\/!< name resides in GigE Vision namespace$/;"	e	enum:Spinnaker::GenApi::_EStandardNameSpace
GEV	include/spinc/SpinnakerGenApiDefsC.h	/^	GEV,             \/\/!< name resides in GigE Vision namespace$/;"	e	enum:_spinStandardNameSpace
GOB	include/PtGreyVideoEncoder.h	/^	int GOB;							\/* Number of I-frames per P frame. Increasing this value$/;"	m	struct:PtGreyVideoEncoderOptions
GREEN	include/SpinnakerDefs.h	/^		GREEN,$/;"	e	enum:Spinnaker::StatisticsChannel
GREEN	include/spinc/SpinnakerDefsC.h	/^	GREEN,$/;"	e	enum:_spinStatisticsChannel
GREY	include/SpinnakerDefs.h	/^		GREY,$/;"	e	enum:Spinnaker::StatisticsChannel
GREY	include/spinc/SpinnakerDefsC.h	/^	GREY,$/;"	e	enum:_spinStatisticsChannel
GUI	include/GUI/CameraSelectionDlg.h	/^	namespace GUI$/;"	n	namespace:Spinnaker
GUI	include/GUI/PropertyGridDlg.h	/^	namespace GUI$/;"	n	namespace:Spinnaker
GUI	include/GUI/SpinnakerGUI.h	/^	namespace GUI$/;"	n	namespace:Spinnaker
GUI	include/GUI/ViewerDlg.h	/^	namespace GUI$/;"	n	namespace:Spinnaker
GUIFactory	include/GUI/SpinnakerGUI.h	/^		class SPINNAKER_API GUIFactory$/;"	c	namespace:Spinnaker::GUI
GUIFactory	include/GUI/SpinnakerGUI_GTKmm.h	/^		class SPINNAKER_API GUIFactory$/;"	c	namespace:Spinnaker::GUI_GTKmm
GUIFactory	include/GUI/SpinnakerGUI_WPF.h	/^		class SPINNAKER_API GUIFactory$/;"	c	namespace:Spinnaker::GUI_WPF
GUIXMLLocation	include/TransportLayerDevice.h	/^		GenApi::IEnumerationT<GUIXMLLocationEnum> &GUIXMLLocation;$/;"	m	class:Spinnaker::TransportLayerDevice
GUIXMLLocation	include/spinc/TransportLayerDeviceC.h	/^	quickSpinEnumerationNode GUIXMLLocation;$/;"	m	struct:_quickSpinTLDevice
GUIXMLLocationEnum	include/TransportLayerDefs.h	/^	enum GUIXMLLocationEnum	\/*!< Sets the location to load GUI XML.*\/$/;"	g	namespace:Spinnaker
GUIXMLLocation_Device	include/TransportLayerDefs.h	/^		GUIXMLLocation_Device,	\/*!< Load XML from device*\/$/;"	e	enum:Spinnaker::GUIXMLLocationEnum
GUIXMLLocation_Device	include/spinc/TransportLayerDefsC.h	/^	GUIXMLLocation_Device,\/*!< Load XML from device*\/$/;"	e	enum:_spinTLGUIXMLLocationEnums
GUIXMLLocation_Host	include/TransportLayerDefs.h	/^		GUIXMLLocation_Host,	\/*!< Load XML from host*\/$/;"	e	enum:Spinnaker::GUIXMLLocationEnum
GUIXMLLocation_Host	include/spinc/TransportLayerDefsC.h	/^	GUIXMLLocation_Host,\/*!< Load XML from host*\/$/;"	e	enum:_spinTLGUIXMLLocationEnums
GUIXMLPath	include/TransportLayerDevice.h	/^		GenApi::IString &GUIXMLPath;$/;"	m	class:Spinnaker::TransportLayerDevice
GUIXMLPath	include/spinc/TransportLayerDeviceC.h	/^	quickSpinStringNode GUIXMLPath;$/;"	m	struct:_quickSpinTLDevice
GUI_GTKmm	include/GUI/CameraSelection.h	/^	namespace GUI_GTKmm$/;"	n	namespace:Spinnaker
GUI_GTKmm	include/GUI/CameraSelectionWidget.h	/^	namespace GUI_GTKmm$/;"	n	namespace:Spinnaker
GUI_GTKmm	include/GUI/PropertyGrid.h	/^	namespace GUI_GTKmm$/;"	n	namespace:Spinnaker
GUI_GTKmm	include/GUI/PropertyGridWidget.h	/^	namespace GUI_GTKmm$/;"	n	namespace:Spinnaker
GUI_GTKmm	include/GUI/SpinnakerGUI_GTKmm.h	/^	namespace GUI_GTKmm$/;"	n	namespace:Spinnaker
GUI_GTKmm	include/GUI/Viewer.h	/^	namespace GUI_GTKmm$/;"	n	namespace:Spinnaker
GUI_GTKmm	include/GUI/ViewerWidget.h	/^	namespace GUI_GTKmm$/;"	n	namespace:Spinnaker
GUI_WPF	include/GUI/SpinnakerGUI_WPF.h	/^	namespace GUI_WPF$/;"	n	namespace:Spinnaker
GVCP_CHUNK_TRAILER	include/SpinGenApi/ChunkAdapterGEV.h	/^		typedef struct GVCP_CHUNK_TRAILER$/;"	s	namespace:Spinnaker::GenApi
GVCP_CHUNK_TRAILER	include/SpinGenApi/ChunkAdapterGEV.h	/^		} GVCP_CHUNK_TRAILER;$/;"	t	namespace:Spinnaker::GenApi	typeref:struct:Spinnaker::GenApi::GVCP_CHUNK_TRAILER
GVCP_EVENTDATA_REQUEST	include/SpinGenApi/EventAdapterGEV.h	/^    typedef struct PACK_STRUCT GVCP_EVENTDATA_REQUEST$/;"	s	namespace:Spinnaker::GenApi
GVCP_EVENTDATA_REQUEST	include/SpinGenApi/EventAdapterGEV.h	/^    } GVCP_EVENTDATA_REQUEST;$/;"	t	namespace:Spinnaker::GenApi	typeref:struct:Spinnaker::GenApi::GVCP_EVENTDATA_REQUEST
GVCP_EVENTDATA_REQUEST_EXTENDED_ID	include/SpinGenApi/EventAdapterGEV.h	/^    typedef struct PACK_STRUCT GVCP_EVENTDATA_REQUEST_EXTENDED_ID$/;"	s	namespace:Spinnaker::GenApi
GVCP_EVENTDATA_REQUEST_EXTENDED_ID	include/SpinGenApi/EventAdapterGEV.h	/^    } GVCP_EVENTDATA_REQUEST_EXTENDED_ID;$/;"	t	namespace:Spinnaker::GenApi	typeref:struct:Spinnaker::GenApi::GVCP_EVENTDATA_REQUEST_EXTENDED_ID
GVCP_EVENT_ITEM	include/SpinGenApi/EventAdapterGEV.h	/^    typedef struct PACK_STRUCT GVCP_EVENT_ITEM$/;"	s	namespace:Spinnaker::GenApi
GVCP_EVENT_ITEM	include/SpinGenApi/EventAdapterGEV.h	/^    } GVCP_EVENT_ITEM;$/;"	t	namespace:Spinnaker::GenApi	typeref:struct:Spinnaker::GenApi::GVCP_EVENT_ITEM
GVCP_EVENT_ITEM_BASIC	include/SpinGenApi/EventAdapterGEV.h	/^    typedef struct PACK_STRUCT GVCP_EVENT_ITEM_BASIC$/;"	s	namespace:Spinnaker::GenApi
GVCP_EVENT_ITEM_BASIC	include/SpinGenApi/EventAdapterGEV.h	/^    } GVCP_EVENT_ITEM_BASIC;$/;"	t	namespace:Spinnaker::GenApi	typeref:struct:Spinnaker::GenApi::GVCP_EVENT_ITEM_BASIC
GVCP_EVENT_ITEM_EXTENDED_ID	include/SpinGenApi/EventAdapterGEV.h	/^    typedef struct PACK_STRUCT GVCP_EVENT_ITEM_EXTENDED_ID$/;"	s	namespace:Spinnaker::GenApi
GVCP_EVENT_ITEM_EXTENDED_ID	include/SpinGenApi/EventAdapterGEV.h	/^    } GVCP_EVENT_ITEM_EXTENDED_ID;$/;"	t	namespace:Spinnaker::GenApi	typeref:struct:Spinnaker::GenApi::GVCP_EVENT_ITEM_EXTENDED_ID
GVCP_EVENT_REQUEST	include/SpinGenApi/EventAdapterGEV.h	/^    typedef struct PACK_STRUCT GVCP_EVENT_REQUEST$/;"	s	namespace:Spinnaker::GenApi
GVCP_EVENT_REQUEST	include/SpinGenApi/EventAdapterGEV.h	/^    } GVCP_EVENT_REQUEST;$/;"	t	namespace:Spinnaker::GenApi	typeref:struct:Spinnaker::GenApi::GVCP_EVENT_REQUEST
GVCP_EVENT_REQUEST_EXTENDED_ID	include/SpinGenApi/EventAdapterGEV.h	/^    typedef struct PACK_STRUCT GVCP_EVENT_REQUEST_EXTENDED_ID$/;"	s	namespace:Spinnaker::GenApi
GVCP_EVENT_REQUEST_EXTENDED_ID	include/SpinGenApi/EventAdapterGEV.h	/^    } GVCP_EVENT_REQUEST_EXTENDED_ID;$/;"	t	namespace:Spinnaker::GenApi	typeref:struct:Spinnaker::GenApi::GVCP_EVENT_REQUEST_EXTENDED_ID
GVCP_MESSAGE_TAGS	include/SpinGenApi/EventAdapterGEV.h	/^    typedef enum GVCP_MESSAGE_TAGS$/;"	g	namespace:Spinnaker::GenApi
GVCP_MESSAGE_TAGS	include/SpinGenApi/EventAdapterGEV.h	/^    } GVCP_MESSAGE_TAGS;$/;"	t	namespace:Spinnaker::GenApi	typeref:enum:Spinnaker::GenApi::GVCP_MESSAGE_TAGS
GVCP_REQUEST_HEADER	include/SpinGenApi/EventAdapterGEV.h	/^    typedef struct PACK_STRUCT GVCP_REQUEST_HEADER$/;"	s	namespace:Spinnaker::GenApi
GVCP_REQUEST_HEADER	include/SpinGenApi/EventAdapterGEV.h	/^    } GVCP_REQUEST_HEADER;$/;"	t	namespace:Spinnaker::GenApi	typeref:struct:Spinnaker::GenApi::GVCP_REQUEST_HEADER
Gain	include/Camera.h	/^		GenApi::IFloat &Gain;$/;"	m	class:Spinnaker::Camera
Gain	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode Gain;$/;"	m	struct:_quickSpin
GainAuto	include/Camera.h	/^		GenApi::IEnumerationT<GainAutoEnums> &GainAuto;$/;"	m	class:Spinnaker::Camera
GainAuto	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode GainAuto;$/;"	m	struct:_quickSpin
GainAutoBalance	include/Camera.h	/^		GenApi::IEnumerationT<GainAutoBalanceEnums> &GainAutoBalance;$/;"	m	class:Spinnaker::Camera
GainAutoBalance	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode GainAutoBalance;$/;"	m	struct:_quickSpin
GainAutoBalanceEnums	include/CameraDefs.h	/^	enum GainAutoBalanceEnums	\/*!< Sets the mode for automatic gain balancing between the sensor color channels or taps. The gain coefficients of each channel or tap are adjusted so they are matched.*\/$/;"	g	namespace:Spinnaker
GainAutoBalance_Continuous	include/CameraDefs.h	/^		GainAutoBalance_Continuous,	\/*!< Gain tap balancing is constantly adjusted by the device.*\/$/;"	e	enum:Spinnaker::GainAutoBalanceEnums
GainAutoBalance_Continuous	include/spinc/CameraDefsC.h	/^	GainAutoBalance_Continuous,	\/*!< Gain tap balancing is constantly adjusted by the device.*\/$/;"	e	enum:_spinGainAutoBalanceEnums
GainAutoBalance_Off	include/CameraDefs.h	/^		GainAutoBalance_Off,	\/*!< Gain tap balancing is user controlled using Gain .*\/$/;"	e	enum:Spinnaker::GainAutoBalanceEnums
GainAutoBalance_Off	include/spinc/CameraDefsC.h	/^	GainAutoBalance_Off,	\/*!< Gain tap balancing is user controlled using Gain .*\/$/;"	e	enum:_spinGainAutoBalanceEnums
GainAutoBalance_Once	include/CameraDefs.h	/^		GainAutoBalance_Once,	\/*!< Gain tap balancing is automatically adjusted once by the device. Once it has converged, it automatically returns to the Off state.*\/$/;"	e	enum:Spinnaker::GainAutoBalanceEnums
GainAutoBalance_Once	include/spinc/CameraDefsC.h	/^	GainAutoBalance_Once,	\/*!< Gain tap balancing is automatically adjusted once by the device. Once it has converged, it automatically returns to the Off state.*\/$/;"	e	enum:_spinGainAutoBalanceEnums
GainAutoEnums	include/CameraDefs.h	/^	enum GainAutoEnums	\/*!< Sets the automatic gain control (AGC) mode. The exact algorithm used to implement AGC is device-specific.*\/$/;"	g	namespace:Spinnaker
GainAuto_Continuous	include/CameraDefs.h	/^		GainAuto_Continuous,	\/*!< Gain is constantly adjusted by the device.*\/$/;"	e	enum:Spinnaker::GainAutoEnums
GainAuto_Continuous	include/spinc/CameraDefsC.h	/^	GainAuto_Continuous,	\/*!< Gain is constantly adjusted by the device.*\/$/;"	e	enum:_spinGainAutoEnums
GainAuto_Off	include/CameraDefs.h	/^		GainAuto_Off,	\/*!< Gain is User controlled using Gain.*\/$/;"	e	enum:Spinnaker::GainAutoEnums
GainAuto_Off	include/spinc/CameraDefsC.h	/^	GainAuto_Off,	\/*!< Gain is User controlled using Gain.*\/$/;"	e	enum:_spinGainAutoEnums
GainAuto_Once	include/CameraDefs.h	/^		GainAuto_Once,	\/*!< Gain is automatically adjusted once by the device. Once it has converged, it automatically returns to the Off state.*\/$/;"	e	enum:Spinnaker::GainAutoEnums
GainAuto_Once	include/spinc/CameraDefsC.h	/^	GainAuto_Once,	\/*!< Gain is automatically adjusted once by the device. Once it has converged, it automatically returns to the Off state.*\/$/;"	e	enum:_spinGainAutoEnums
GainSelector	include/Camera.h	/^		GenApi::IEnumerationT<GainSelectorEnums> &GainSelector;$/;"	m	class:Spinnaker::Camera
GainSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode GainSelector;$/;"	m	struct:_quickSpin
GainSelectorEnums	include/CameraDefs.h	/^	enum GainSelectorEnums	\/*!< Selects which Gain is controlled by the various Gain features.*\/$/;"	g	namespace:Spinnaker
GainSelector_All	include/CameraDefs.h	/^		GainSelector_All,	\/*!< Gain will be applied to all channels or taps.*\/$/;"	e	enum:Spinnaker::GainSelectorEnums
GainSelector_All	include/spinc/CameraDefsC.h	/^	GainSelector_All,	\/*!< Gain will be applied to all channels or taps.*\/$/;"	e	enum:_spinGainSelectorEnums
GainSelector_AnalogAll	include/CameraDefs.h	/^		GainSelector_AnalogAll,	\/*!< Gain will be applied to all analog channels or taps.*\/$/;"	e	enum:Spinnaker::GainSelectorEnums
GainSelector_AnalogAll	include/spinc/CameraDefsC.h	/^	GainSelector_AnalogAll,	\/*!< Gain will be applied to all analog channels or taps.*\/$/;"	e	enum:_spinGainSelectorEnums
GainSelector_AnalogBlue	include/CameraDefs.h	/^		GainSelector_AnalogBlue,	\/*!< Gain will be applied to the blue analog channel.*\/$/;"	e	enum:Spinnaker::GainSelectorEnums
GainSelector_AnalogBlue	include/spinc/CameraDefsC.h	/^	GainSelector_AnalogBlue,	\/*!< Gain will be applied to the blue analog channel.*\/$/;"	e	enum:_spinGainSelectorEnums
GainSelector_AnalogGreen	include/CameraDefs.h	/^		GainSelector_AnalogGreen,	\/*!< Gain will be applied to the green analog channel.*\/$/;"	e	enum:Spinnaker::GainSelectorEnums
GainSelector_AnalogGreen	include/spinc/CameraDefsC.h	/^	GainSelector_AnalogGreen,	\/*!< Gain will be applied to the green analog channel.*\/$/;"	e	enum:_spinGainSelectorEnums
GainSelector_AnalogRed	include/CameraDefs.h	/^		GainSelector_AnalogRed,	\/*!< Gain will be applied to the red analog channel.*\/$/;"	e	enum:Spinnaker::GainSelectorEnums
GainSelector_AnalogRed	include/spinc/CameraDefsC.h	/^	GainSelector_AnalogRed,	\/*!< Gain will be applied to the red analog channel.*\/$/;"	e	enum:_spinGainSelectorEnums
GainSelector_AnalogTap1	include/CameraDefs.h	/^		GainSelector_AnalogTap1,	\/*!< Analog gain will be applied to Tap 1.*\/$/;"	e	enum:Spinnaker::GainSelectorEnums
GainSelector_AnalogTap1	include/spinc/CameraDefsC.h	/^	GainSelector_AnalogTap1,	\/*!< Analog gain will be applied to Tap 1.*\/$/;"	e	enum:_spinGainSelectorEnums
GainSelector_AnalogTap2	include/CameraDefs.h	/^		GainSelector_AnalogTap2,	\/*!< Analog gain will be applied to Tap 2.*\/$/;"	e	enum:Spinnaker::GainSelectorEnums
GainSelector_AnalogTap2	include/spinc/CameraDefsC.h	/^	GainSelector_AnalogTap2,	\/*!< Analog gain will be applied to Tap 2.*\/$/;"	e	enum:_spinGainSelectorEnums
GainSelector_AnalogU	include/CameraDefs.h	/^		GainSelector_AnalogU,	\/*!< Gain will be applied to U analog channel.*\/$/;"	e	enum:Spinnaker::GainSelectorEnums
GainSelector_AnalogU	include/spinc/CameraDefsC.h	/^	GainSelector_AnalogU,	\/*!< Gain will be applied to U analog channel.*\/$/;"	e	enum:_spinGainSelectorEnums
GainSelector_AnalogV	include/CameraDefs.h	/^		GainSelector_AnalogV,	\/*!< Gain will be applied to V analog channel.*\/$/;"	e	enum:Spinnaker::GainSelectorEnums
GainSelector_AnalogV	include/spinc/CameraDefsC.h	/^	GainSelector_AnalogV,	\/*!< Gain will be applied to V analog channel.*\/$/;"	e	enum:_spinGainSelectorEnums
GainSelector_AnalogY	include/CameraDefs.h	/^		GainSelector_AnalogY,	\/*!< Gain will be applied to Y analog channel.*\/$/;"	e	enum:Spinnaker::GainSelectorEnums
GainSelector_AnalogY	include/spinc/CameraDefsC.h	/^	GainSelector_AnalogY,	\/*!< Gain will be applied to Y analog channel.*\/$/;"	e	enum:_spinGainSelectorEnums
GainSelector_Blue	include/CameraDefs.h	/^		GainSelector_Blue,	\/*!< Gain will be applied to the blue channel.*\/$/;"	e	enum:Spinnaker::GainSelectorEnums
GainSelector_Blue	include/spinc/CameraDefsC.h	/^	GainSelector_Blue,	\/*!< Gain will be applied to the blue channel.*\/$/;"	e	enum:_spinGainSelectorEnums
GainSelector_DigitalAll	include/CameraDefs.h	/^		GainSelector_DigitalAll,	\/*!< Gain will be applied to all digital channels or taps.*\/$/;"	e	enum:Spinnaker::GainSelectorEnums
GainSelector_DigitalAll	include/spinc/CameraDefsC.h	/^	GainSelector_DigitalAll,	\/*!< Gain will be applied to all digital channels or taps.*\/$/;"	e	enum:_spinGainSelectorEnums
GainSelector_DigitalBlue	include/CameraDefs.h	/^		GainSelector_DigitalBlue,	\/*!< Gain will be applied to the blue digital channel.*\/$/;"	e	enum:Spinnaker::GainSelectorEnums
GainSelector_DigitalBlue	include/spinc/CameraDefsC.h	/^	GainSelector_DigitalBlue,	\/*!< Gain will be applied to the blue digital channel.*\/$/;"	e	enum:_spinGainSelectorEnums
GainSelector_DigitalGreen	include/CameraDefs.h	/^		GainSelector_DigitalGreen,	\/*!< Gain will be applied to the green digital channel.*\/$/;"	e	enum:Spinnaker::GainSelectorEnums
GainSelector_DigitalGreen	include/spinc/CameraDefsC.h	/^	GainSelector_DigitalGreen,	\/*!< Gain will be applied to the green digital channel.*\/$/;"	e	enum:_spinGainSelectorEnums
GainSelector_DigitalRed	include/CameraDefs.h	/^		GainSelector_DigitalRed,	\/*!< Gain will be applied to the red digital channel.*\/$/;"	e	enum:Spinnaker::GainSelectorEnums
GainSelector_DigitalRed	include/spinc/CameraDefsC.h	/^	GainSelector_DigitalRed,	\/*!< Gain will be applied to the red digital channel.*\/$/;"	e	enum:_spinGainSelectorEnums
GainSelector_DigitalTap1	include/CameraDefs.h	/^		GainSelector_DigitalTap1,	\/*!< Digital gain will be applied to Tap 1.*\/$/;"	e	enum:Spinnaker::GainSelectorEnums
GainSelector_DigitalTap1	include/spinc/CameraDefsC.h	/^	GainSelector_DigitalTap1,	\/*!< Digital gain will be applied to Tap 1.*\/$/;"	e	enum:_spinGainSelectorEnums
GainSelector_DigitalTap2	include/CameraDefs.h	/^		GainSelector_DigitalTap2,	\/*!< Digital gain will be applied to Tap 2.*\/$/;"	e	enum:Spinnaker::GainSelectorEnums
GainSelector_DigitalTap2	include/spinc/CameraDefsC.h	/^	GainSelector_DigitalTap2,	\/*!< Digital gain will be applied to Tap 2.*\/$/;"	e	enum:_spinGainSelectorEnums
GainSelector_DigitalU	include/CameraDefs.h	/^		GainSelector_DigitalU,	\/*!< Gain will be applied to U digital channel.*\/$/;"	e	enum:Spinnaker::GainSelectorEnums
GainSelector_DigitalU	include/spinc/CameraDefsC.h	/^	GainSelector_DigitalU,	\/*!< Gain will be applied to U digital channel.*\/$/;"	e	enum:_spinGainSelectorEnums
GainSelector_DigitalV	include/CameraDefs.h	/^		GainSelector_DigitalV,	\/*!< Gain will be applied to V digital channel.*\/$/;"	e	enum:Spinnaker::GainSelectorEnums
GainSelector_DigitalV	include/spinc/CameraDefsC.h	/^	GainSelector_DigitalV,	\/*!< Gain will be applied to V digital channel.*\/$/;"	e	enum:_spinGainSelectorEnums
GainSelector_DigitalY	include/CameraDefs.h	/^		GainSelector_DigitalY,	\/*!< Gain will be applied to Y digital channel.*\/$/;"	e	enum:Spinnaker::GainSelectorEnums
GainSelector_DigitalY	include/spinc/CameraDefsC.h	/^	GainSelector_DigitalY,	\/*!< Gain will be applied to Y digital channel.*\/$/;"	e	enum:_spinGainSelectorEnums
GainSelector_Green	include/CameraDefs.h	/^		GainSelector_Green,	\/*!< Gain will be applied to the green channel.*\/$/;"	e	enum:Spinnaker::GainSelectorEnums
GainSelector_Green	include/spinc/CameraDefsC.h	/^	GainSelector_Green,	\/*!< Gain will be applied to the green channel.*\/$/;"	e	enum:_spinGainSelectorEnums
GainSelector_Red	include/CameraDefs.h	/^		GainSelector_Red,	\/*!< Gain will be applied to the red channel.*\/$/;"	e	enum:Spinnaker::GainSelectorEnums
GainSelector_Red	include/spinc/CameraDefsC.h	/^	GainSelector_Red,	\/*!< Gain will be applied to the red channel.*\/$/;"	e	enum:_spinGainSelectorEnums
GainSelector_Tap1	include/CameraDefs.h	/^		GainSelector_Tap1,	\/*!< Gain will be applied to Tap 1.*\/$/;"	e	enum:Spinnaker::GainSelectorEnums
GainSelector_Tap1	include/spinc/CameraDefsC.h	/^	GainSelector_Tap1,	\/*!< Gain will be applied to Tap 1.*\/$/;"	e	enum:_spinGainSelectorEnums
GainSelector_Tap2	include/CameraDefs.h	/^		GainSelector_Tap2,	\/*!< Gain will be applied to Tap 2.*\/$/;"	e	enum:Spinnaker::GainSelectorEnums
GainSelector_Tap2	include/spinc/CameraDefsC.h	/^	GainSelector_Tap2,	\/*!< Gain will be applied to Tap 2.*\/$/;"	e	enum:_spinGainSelectorEnums
GainSelector_U	include/CameraDefs.h	/^		GainSelector_U,	\/*!< Gain will be applied to U channel.*\/$/;"	e	enum:Spinnaker::GainSelectorEnums
GainSelector_U	include/spinc/CameraDefsC.h	/^	GainSelector_U,	\/*!< Gain will be applied to U channel.*\/$/;"	e	enum:_spinGainSelectorEnums
GainSelector_V	include/CameraDefs.h	/^		GainSelector_V,	\/*!< Gain will be applied to V channel.*\/$/;"	e	enum:Spinnaker::GainSelectorEnums
GainSelector_V	include/spinc/CameraDefsC.h	/^	GainSelector_V,	\/*!< Gain will be applied to V channel.*\/$/;"	e	enum:_spinGainSelectorEnums
GainSelector_Y	include/CameraDefs.h	/^		GainSelector_Y,	\/*!< Gain will be applied to Y channel.*\/$/;"	e	enum:Spinnaker::GainSelectorEnums
GainSelector_Y	include/spinc/CameraDefsC.h	/^	GainSelector_Y,	\/*!< Gain will be applied to Y channel.*\/$/;"	e	enum:_spinGainSelectorEnums
Gamma	include/Camera.h	/^		GenApi::IFloat &Gamma;$/;"	m	class:Spinnaker::Camera
Gamma	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode Gamma;$/;"	m	struct:_quickSpin
GenApi	include/SpinGenApi/Autovector.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/Base.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/BooleanNode.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/CategoryNode.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/ChunkAdapter.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/ChunkAdapterDcam.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/ChunkAdapterGEV.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/ChunkAdapterGeneric.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/ChunkAdapterU3V.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/ChunkPort.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/CommandNode.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/Container.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/Counter.h	/^	namespace GenApi {$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/EnumClasses.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/EnumEntryNode.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/EnumNode.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/EnumNodeT.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/EventAdapter.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/EventAdapter1394.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/EventAdapterGEV.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/EventAdapterGeneric.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/EventAdapterU3V.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/EventPort.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/Filestream.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/FloatNode.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/FloatRegNode.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/IBoolean.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/ICategory.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/IChunkPort.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/ICommand.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/IDestroy.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/IDeviceInfo.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/IEnumEntry.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/IEnumeration.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/IEnumerationT.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/IFloat.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/IInteger.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/INode.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/INodeMap.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/INodeMapDyn.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/IPort.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/IPortConstruct.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/IPortRecorder.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/IRegister.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/ISelector.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/ISelectorDigit.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/IString.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/IValue.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/IntRegNode.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/IntegerNode.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/Node.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/NodeCallback.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/NodeMap.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/NodeMapFactory.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/NodeMapRef.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/Persistence.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/Pointer.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/PortImpl.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/PortNode.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/PortRecorder.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/PortReplay.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/PortWriteList.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/Reference.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/RegisterNode.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/RegisterPortImpl.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/SelectorSet.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/SpinTestCamera.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/StringNode.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/StringRegNode.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/StructPort.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/Synch.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/Types.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenApi	include/SpinGenApi/ValueNode.h	/^	namespace GenApi$/;"	n	namespace:Spinnaker
GenICam	include/SpinGenApi/GCString.h	/^	namespace GenICam$/;"	n	namespace:Spinnaker
GenICam	include/SpinGenApi/GCString.h	/^    namespace GenICam$/;"	n	namespace:Spinnaker
GenICam	include/SpinGenApi/GCStringVector.h	/^	namespace GenICam$/;"	n	namespace:Spinnaker
GenICam	include/SpinGenApi/GCSynch.h	/^	namespace GenICam$/;"	n	namespace:Spinnaker
GenICam	include/SpinGenApi/GCTypes.h	/^	namespace GenICam$/;"	n	namespace:Spinnaker
GenICam	include/SpinGenApi/GCUtilities.h	/^	namespace GenICam$/;"	n	namespace:Spinnaker
GenICamXMLLocation	include/TransportLayerDevice.h	/^		GenApi::IEnumerationT<GenICamXMLLocationEnum> &GenICamXMLLocation;$/;"	m	class:Spinnaker::TransportLayerDevice
GenICamXMLLocation	include/spinc/TransportLayerDeviceC.h	/^	quickSpinEnumerationNode GenICamXMLLocation;$/;"	m	struct:_quickSpinTLDevice
GenICamXMLLocationEnum	include/TransportLayerDefs.h	/^	enum GenICamXMLLocationEnum	\/*!< Sets the location to load GenICam XML.*\/$/;"	g	namespace:Spinnaker
GenICamXMLLocation_Device	include/TransportLayerDefs.h	/^		GenICamXMLLocation_Device,	\/*!< Load GenICam XML from device*\/$/;"	e	enum:Spinnaker::GenICamXMLLocationEnum
GenICamXMLLocation_Device	include/spinc/TransportLayerDefsC.h	/^	GenICamXMLLocation_Device,\/*!< Load GenICam XML from device*\/$/;"	e	enum:_spinTLGenICamXMLLocationEnums
GenICamXMLLocation_Host	include/TransportLayerDefs.h	/^		GenICamXMLLocation_Host,	\/*!< Load GenICam XML from host*\/$/;"	e	enum:Spinnaker::GenICamXMLLocationEnum
GenICamXMLLocation_Host	include/spinc/TransportLayerDefsC.h	/^	GenICamXMLLocation_Host,\/*!< Load GenICam XML from host*\/$/;"	e	enum:_spinTLGenICamXMLLocationEnums
GenICamXMLPath	include/TransportLayerDevice.h	/^		GenApi::IString &GenICamXMLPath;$/;"	m	class:Spinnaker::TransportLayerDevice
GenICamXMLPath	include/spinc/TransportLayerDeviceC.h	/^	quickSpinStringNode GenICamXMLPath;$/;"	m	struct:_quickSpinTLDevice
GetAccessMode	include/SpinGenApi/StructPort.h	/^			virtual EAccessMode GetAccessMode() const$/;"	f	class:Spinnaker::GenApi::CTestPortStruct
GetCallbackType	include/SpinGenApi/NodeCallback.h	/^			ECallbackType GetCallbackType()$/;"	f	class:Spinnaker::GenApi::CNodeCallback
GetEnumAlias	include/SpinGenApi/Pointer.h	/^			IEnumeration *GetEnumAlias()$/;"	f	class:Spinnaker::GenApi::CFloatPtr
GetIntAlias	include/SpinGenApi/Pointer.h	/^			IInteger *GetIntAlias()$/;"	f	class:Spinnaker::GenApi::CFloatPtr
GetInterfaceName	include/SpinGenApi/Pointer.h	/^		inline GenICam::gcstring GetInterfaceName(IBase* pBase)$/;"	f	namespace:Spinnaker::GenApi
GetLock	include/SpinGenApi/GCSynch.h	/^			Lock GetLock() const$/;"	f	class:Spinnaker::GenICam::LockableObject
GetNode	include/SpinGenApi/NodeCallback.h	/^			INode* GetNode()$/;"	f	class:Spinnaker::GenApi::CNodeCallback
GetNumReads	include/SpinGenApi/StructPort.h	/^			int64_t GetNumReads()$/;"	f	class:Spinnaker::GenApi::CTestPortStruct
GetNumWrites	include/SpinGenApi/StructPort.h	/^			int64_t GetNumWrites()$/;"	f	class:Spinnaker::GenApi::CTestPortStruct
GetPortHandle	include/SpinGenApi/PortNode.h	/^			std::shared_ptr<Node::NodeImpl> GetPortHandle()$/;"	f	class:Spinnaker::GenApi::PortNode
GetPrincipalInterfaceType	include/SpinGenApi/StructPort.h	/^			virtual EInterfaceType GetPrincipalInterfaceType() const$/;"	f	class:Spinnaker::GenApi::CTestPortStruct
GetSwapEndianess	include/SpinGenApi/ChunkPort.h	/^			virtual EYesNo GetSwapEndianess()$/;"	f	class:Spinnaker::GenApi::CChunkPort
GetSwapEndianess	include/SpinGenApi/EventPort.h	/^			virtual EYesNo GetSwapEndianess()$/;"	f	class:Spinnaker::GenApi::CEventPort
GetSwapEndianess	include/SpinGenApi/PortImpl.h	/^			virtual EYesNo GetSwapEndianess()$/;"	f	class:Spinnaker::GenApi::CPortImpl
GetValue	include/SpinGenApi/Counter.h	/^			unsigned int GetValue() const$/;"	f	class:Spinnaker::GenApi::Counter
GevActiveLinkCount	include/Camera.h	/^		GenApi::IInteger &GevActiveLinkCount;$/;"	m	class:Spinnaker::Camera
GevActiveLinkCount	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode GevActiveLinkCount;$/;"	m	struct:_quickSpin
GevCCP	include/Camera.h	/^		GenApi::IEnumerationT<GevCCPEnums> &GevCCP;$/;"	m	class:Spinnaker::Camera
GevCCP	include/TransportLayerDevice.h	/^		GenApi::IEnumerationT<GevCCPEnum> &GevCCP;$/;"	m	class:Spinnaker::TransportLayerDevice
GevCCP	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode GevCCP;$/;"	m	struct:_quickSpin
GevCCP	include/spinc/TransportLayerDeviceC.h	/^	quickSpinEnumerationNode GevCCP;$/;"	m	struct:_quickSpinTLDevice
GevCCPEnum	include/TransportLayerDefs.h	/^	enum GevCCPEnum	\/*!< Controls the device access privilege of an application.*\/$/;"	g	namespace:Spinnaker
GevCCPEnums	include/CameraDefs.h	/^	enum GevCCPEnums	\/*!< Controls the device access privilege of an application.*\/$/;"	g	namespace:Spinnaker
GevCCP_ControlAccess	include/CameraDefs.h	/^		GevCCP_ControlAccess,	\/*!< Control Access*\/$/;"	e	enum:Spinnaker::GevCCPEnums
GevCCP_ControlAccess	include/spinc/CameraDefsC.h	/^	GevCCP_ControlAccess,	\/*!< Control Access*\/$/;"	e	enum:_spinGevCCPEnums
GevCCP_ControlAccessSwitchoverActive	include/CameraDefs.h	/^		GevCCP_ControlAccessSwitchoverActive,	\/*!< Control Access Switchover Active*\/$/;"	e	enum:Spinnaker::GevCCPEnums
GevCCP_ControlAccessSwitchoverActive	include/spinc/CameraDefsC.h	/^	GevCCP_ControlAccessSwitchoverActive,	\/*!< Control Access Switchover Active*\/$/;"	e	enum:_spinGevCCPEnums
GevCCP_EnumEntry_GevCCP_ControlAccess	include/TransportLayerDefs.h	/^		GevCCP_EnumEntry_GevCCP_ControlAccess,	\/*!< Control access privilege.*\/$/;"	e	enum:Spinnaker::GevCCPEnum
GevCCP_EnumEntry_GevCCP_ControlAccess	include/spinc/TransportLayerDefsC.h	/^	GevCCP_EnumEntry_GevCCP_ControlAccess,\/*!< Control access privilege.*\/$/;"	e	enum:_spinTLGevCCPEnums
GevCCP_EnumEntry_GevCCP_ExclusiveAccess	include/TransportLayerDefs.h	/^		GevCCP_EnumEntry_GevCCP_ExclusiveAccess,	\/*!< Exclusive access privilege.*\/$/;"	e	enum:Spinnaker::GevCCPEnum
GevCCP_EnumEntry_GevCCP_ExclusiveAccess	include/spinc/TransportLayerDefsC.h	/^	GevCCP_EnumEntry_GevCCP_ExclusiveAccess,\/*!< Exclusive access privilege.*\/$/;"	e	enum:_spinTLGevCCPEnums
GevCCP_EnumEntry_GevCCP_OpenAccess	include/TransportLayerDefs.h	/^		GevCCP_EnumEntry_GevCCP_OpenAccess,	\/*!< Open access privilege.*\/$/;"	e	enum:Spinnaker::GevCCPEnum
GevCCP_EnumEntry_GevCCP_OpenAccess	include/spinc/TransportLayerDefsC.h	/^	GevCCP_EnumEntry_GevCCP_OpenAccess,\/*!< Open access privilege.*\/$/;"	e	enum:_spinTLGevCCPEnums
GevCCP_ExclusiveAccess	include/CameraDefs.h	/^		GevCCP_ExclusiveAccess,	\/*!< Exclusive Access*\/$/;"	e	enum:Spinnaker::GevCCPEnums
GevCCP_ExclusiveAccess	include/spinc/CameraDefsC.h	/^	GevCCP_ExclusiveAccess,	\/*!< Exclusive Access*\/$/;"	e	enum:_spinGevCCPEnums
GevCCP_OpenAccess	include/CameraDefs.h	/^		GevCCP_OpenAccess,	\/*!< Open Access*\/$/;"	e	enum:Spinnaker::GevCCPEnums
GevCCP_OpenAccess	include/spinc/CameraDefsC.h	/^	GevCCP_OpenAccess,	\/*!< Open Access*\/$/;"	e	enum:_spinGevCCPEnums
GevCurrentDefaultGateway	include/Camera.h	/^		GenApi::IInteger &GevCurrentDefaultGateway;$/;"	m	class:Spinnaker::Camera
GevCurrentDefaultGateway	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode GevCurrentDefaultGateway;$/;"	m	struct:_quickSpin
GevCurrentIPAddress	include/Camera.h	/^		GenApi::IInteger &GevCurrentIPAddress;$/;"	m	class:Spinnaker::Camera
GevCurrentIPAddress	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode GevCurrentIPAddress;$/;"	m	struct:_quickSpin
GevCurrentIPConfigurationDHCP	include/Camera.h	/^		GenApi::IBoolean &GevCurrentIPConfigurationDHCP;$/;"	m	class:Spinnaker::Camera
GevCurrentIPConfigurationDHCP	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode GevCurrentIPConfigurationDHCP;$/;"	m	struct:_quickSpin
GevCurrentIPConfigurationLLA	include/Camera.h	/^		GenApi::IBoolean &GevCurrentIPConfigurationLLA;$/;"	m	class:Spinnaker::Camera
GevCurrentIPConfigurationLLA	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode GevCurrentIPConfigurationLLA;$/;"	m	struct:_quickSpin
GevCurrentIPConfigurationPersistentIP	include/Camera.h	/^		GenApi::IBoolean &GevCurrentIPConfigurationPersistentIP;$/;"	m	class:Spinnaker::Camera
GevCurrentIPConfigurationPersistentIP	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode GevCurrentIPConfigurationPersistentIP;$/;"	m	struct:_quickSpin
GevCurrentPhysicalLinkConfiguration	include/Camera.h	/^		GenApi::IEnumerationT<GevCurrentPhysicalLinkConfigurationEnums> &GevCurrentPhysicalLinkConfiguration;$/;"	m	class:Spinnaker::Camera
GevCurrentPhysicalLinkConfiguration	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode GevCurrentPhysicalLinkConfiguration;$/;"	m	struct:_quickSpin
GevCurrentPhysicalLinkConfigurationEnums	include/CameraDefs.h	/^	enum GevCurrentPhysicalLinkConfigurationEnums	\/*!< Indicates the current physical link configuration of the device.*\/$/;"	g	namespace:Spinnaker
GevCurrentPhysicalLinkConfiguration_DynamicLAG	include/CameraDefs.h	/^		GevCurrentPhysicalLinkConfiguration_DynamicLAG,	\/*!< Dynamic LAG*\/$/;"	e	enum:Spinnaker::GevCurrentPhysicalLinkConfigurationEnums
GevCurrentPhysicalLinkConfiguration_DynamicLAG	include/spinc/CameraDefsC.h	/^	GevCurrentPhysicalLinkConfiguration_DynamicLAG,	\/*!< Dynamic LAG*\/$/;"	e	enum:_spinGevCurrentPhysicalLinkConfigurationEnums
GevCurrentPhysicalLinkConfiguration_MultiLink	include/CameraDefs.h	/^		GevCurrentPhysicalLinkConfiguration_MultiLink,	\/*!< Multi Link*\/$/;"	e	enum:Spinnaker::GevCurrentPhysicalLinkConfigurationEnums
GevCurrentPhysicalLinkConfiguration_MultiLink	include/spinc/CameraDefsC.h	/^	GevCurrentPhysicalLinkConfiguration_MultiLink,	\/*!< Multi Link*\/$/;"	e	enum:_spinGevCurrentPhysicalLinkConfigurationEnums
GevCurrentPhysicalLinkConfiguration_SingleLink	include/CameraDefs.h	/^		GevCurrentPhysicalLinkConfiguration_SingleLink,	\/*!< Single Link*\/$/;"	e	enum:Spinnaker::GevCurrentPhysicalLinkConfigurationEnums
GevCurrentPhysicalLinkConfiguration_SingleLink	include/spinc/CameraDefsC.h	/^	GevCurrentPhysicalLinkConfiguration_SingleLink,	\/*!< Single Link*\/$/;"	e	enum:_spinGevCurrentPhysicalLinkConfigurationEnums
GevCurrentPhysicalLinkConfiguration_StaticLAG	include/CameraDefs.h	/^		GevCurrentPhysicalLinkConfiguration_StaticLAG,	\/*!< Static LAG*\/$/;"	e	enum:Spinnaker::GevCurrentPhysicalLinkConfigurationEnums
GevCurrentPhysicalLinkConfiguration_StaticLAG	include/spinc/CameraDefsC.h	/^	GevCurrentPhysicalLinkConfiguration_StaticLAG,	\/*!< Static LAG*\/$/;"	e	enum:_spinGevCurrentPhysicalLinkConfigurationEnums
GevCurrentSubnetMask	include/Camera.h	/^		GenApi::IInteger &GevCurrentSubnetMask;$/;"	m	class:Spinnaker::Camera
GevCurrentSubnetMask	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode GevCurrentSubnetMask;$/;"	m	struct:_quickSpin
GevDeviceGateway	include/TransportLayerDevice.h	/^		GenApi::IInteger &GevDeviceGateway;$/;"	m	class:Spinnaker::TransportLayerDevice
GevDeviceGateway	include/spinc/TransportLayerDeviceC.h	/^	quickSpinIntegerNode GevDeviceGateway;$/;"	m	struct:_quickSpinTLDevice
GevDeviceIPAddress	include/TransportLayerDevice.h	/^		GenApi::IInteger &GevDeviceIPAddress;$/;"	m	class:Spinnaker::TransportLayerDevice
GevDeviceIPAddress	include/TransportLayerInterface.h	/^		GenApi::IInteger &GevDeviceIPAddress;$/;"	m	class:Spinnaker::TransportLayerInterface
GevDeviceIPAddress	include/spinc/TransportLayerDeviceC.h	/^	quickSpinIntegerNode GevDeviceIPAddress;$/;"	m	struct:_quickSpinTLDevice
GevDeviceIPAddress	include/spinc/TransportLayerInterfaceC.h	/^	quickSpinIntegerNode GevDeviceIPAddress;$/;"	m	struct:_quickSpinTLInterface
GevDeviceMACAddress	include/TransportLayerDevice.h	/^		GenApi::IInteger &GevDeviceMACAddress;$/;"	m	class:Spinnaker::TransportLayerDevice
GevDeviceMACAddress	include/TransportLayerInterface.h	/^		GenApi::IInteger &GevDeviceMACAddress;$/;"	m	class:Spinnaker::TransportLayerInterface
GevDeviceMACAddress	include/spinc/TransportLayerDeviceC.h	/^	quickSpinIntegerNode GevDeviceMACAddress;$/;"	m	struct:_quickSpinTLDevice
GevDeviceMACAddress	include/spinc/TransportLayerInterfaceC.h	/^	quickSpinIntegerNode GevDeviceMACAddress;$/;"	m	struct:_quickSpinTLInterface
GevDeviceMaximumRetryCount	include/TransportLayerDevice.h	/^		GenApi::IInteger &GevDeviceMaximumRetryCount;$/;"	m	class:Spinnaker::TransportLayerDevice
GevDeviceMaximumRetryCount	include/spinc/TransportLayerDeviceC.h	/^	quickSpinIntegerNode GevDeviceMaximumRetryCount;$/;"	m	struct:_quickSpinTLDevice
GevDeviceModeIsBigEndian	include/TransportLayerDevice.h	/^		GenApi::IBoolean &GevDeviceModeIsBigEndian;$/;"	m	class:Spinnaker::TransportLayerDevice
GevDeviceModeIsBigEndian	include/spinc/TransportLayerDeviceC.h	/^	quickSpinBooleanNode GevDeviceModeIsBigEndian;$/;"	m	struct:_quickSpinTLDevice
GevDeviceReadAndWriteTimeout	include/TransportLayerDevice.h	/^		GenApi::IInteger &GevDeviceReadAndWriteTimeout;$/;"	m	class:Spinnaker::TransportLayerDevice
GevDeviceReadAndWriteTimeout	include/spinc/TransportLayerDeviceC.h	/^	quickSpinIntegerNode GevDeviceReadAndWriteTimeout;$/;"	m	struct:_quickSpinTLDevice
GevDeviceSubnetMask	include/TransportLayerDevice.h	/^		GenApi::IInteger &GevDeviceSubnetMask;$/;"	m	class:Spinnaker::TransportLayerDevice
GevDeviceSubnetMask	include/TransportLayerInterface.h	/^		GenApi::IInteger &GevDeviceSubnetMask;$/;"	m	class:Spinnaker::TransportLayerInterface
GevDeviceSubnetMask	include/spinc/TransportLayerDeviceC.h	/^	quickSpinIntegerNode GevDeviceSubnetMask;$/;"	m	struct:_quickSpinTLDevice
GevDeviceSubnetMask	include/spinc/TransportLayerInterfaceC.h	/^	quickSpinIntegerNode GevDeviceSubnetMask;$/;"	m	struct:_quickSpinTLInterface
GevDiscoveryAckDelay	include/Camera.h	/^		GenApi::IInteger &GevDiscoveryAckDelay;$/;"	m	class:Spinnaker::Camera
GevDiscoveryAckDelay	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode GevDiscoveryAckDelay;$/;"	m	struct:_quickSpin
GevFailedPacketCount	include/TransportLayerStream.h	/^		GenApi::IInteger &GevFailedPacketCount;$/;"	m	class:Spinnaker::TransportLayerStream
GevFailedPacketCount	include/spinc/TransportLayerStreamC.h	/^	quickSpinIntegerNode GevFailedPacketCount;$/;"	m	struct:_quickSpinTLStream
GevFirstURL	include/Camera.h	/^		GenApi::IString &GevFirstURL;$/;"	m	class:Spinnaker::Camera
GevFirstURL	include/spinc/QuickSpinDefsC.h	/^	quickSpinStringNode GevFirstURL;$/;"	m	struct:_quickSpin
GevGVCPExtendedStatusCodes	include/Camera.h	/^		GenApi::IBoolean &GevGVCPExtendedStatusCodes;$/;"	m	class:Spinnaker::Camera
GevGVCPExtendedStatusCodes	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode GevGVCPExtendedStatusCodes;$/;"	m	struct:_quickSpin
GevGVCPExtendedStatusCodesSelector	include/Camera.h	/^		GenApi::IEnumerationT<GevGVCPExtendedStatusCodesSelectorEnums> &GevGVCPExtendedStatusCodesSelector;$/;"	m	class:Spinnaker::Camera
GevGVCPExtendedStatusCodesSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode GevGVCPExtendedStatusCodesSelector;$/;"	m	struct:_quickSpin
GevGVCPExtendedStatusCodesSelectorEnums	include/CameraDefs.h	/^	enum GevGVCPExtendedStatusCodesSelectorEnums	\/*!< Selects the GigE Vision version to control extended status codes for.*\/$/;"	g	namespace:Spinnaker
GevGVCPExtendedStatusCodesSelector_Version1_1	include/CameraDefs.h	/^		GevGVCPExtendedStatusCodesSelector_Version1_1,	\/*!< Version 1 1*\/$/;"	e	enum:Spinnaker::GevGVCPExtendedStatusCodesSelectorEnums
GevGVCPExtendedStatusCodesSelector_Version1_1	include/spinc/CameraDefsC.h	/^	GevGVCPExtendedStatusCodesSelector_Version1_1,	\/*!< Version 1 1*\/$/;"	e	enum:_spinGevGVCPExtendedStatusCodesSelectorEnums
GevGVCPExtendedStatusCodesSelector_Version2_0	include/CameraDefs.h	/^		GevGVCPExtendedStatusCodesSelector_Version2_0,	\/*!< Version 2 0*\/$/;"	e	enum:Spinnaker::GevGVCPExtendedStatusCodesSelectorEnums
GevGVCPExtendedStatusCodesSelector_Version2_0	include/spinc/CameraDefsC.h	/^	GevGVCPExtendedStatusCodesSelector_Version2_0,	\/*!< Version 2 0*\/$/;"	e	enum:_spinGevGVCPExtendedStatusCodesSelectorEnums
GevGVCPPendingAck	include/Camera.h	/^		GenApi::IBoolean &GevGVCPPendingAck;$/;"	m	class:Spinnaker::Camera
GevGVCPPendingAck	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode GevGVCPPendingAck;$/;"	m	struct:_quickSpin
GevGVSPExtendedIDMode	include/Camera.h	/^		GenApi::IEnumerationT<GevGVSPExtendedIDModeEnums> &GevGVSPExtendedIDMode;$/;"	m	class:Spinnaker::Camera
GevGVSPExtendedIDMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode GevGVSPExtendedIDMode;$/;"	m	struct:_quickSpin
GevGVSPExtendedIDModeEnums	include/CameraDefs.h	/^	enum GevGVSPExtendedIDModeEnums	\/*!< Enables the extended IDs mode.*\/$/;"	g	namespace:Spinnaker
GevGVSPExtendedIDMode_Off	include/CameraDefs.h	/^		GevGVSPExtendedIDMode_Off,	\/*!< Off*\/$/;"	e	enum:Spinnaker::GevGVSPExtendedIDModeEnums
GevGVSPExtendedIDMode_Off	include/spinc/CameraDefsC.h	/^	GevGVSPExtendedIDMode_Off,	\/*!< Off*\/$/;"	e	enum:_spinGevGVSPExtendedIDModeEnums
GevGVSPExtendedIDMode_On	include/CameraDefs.h	/^		GevGVSPExtendedIDMode_On,	\/*!< On*\/$/;"	e	enum:Spinnaker::GevGVSPExtendedIDModeEnums
GevGVSPExtendedIDMode_On	include/spinc/CameraDefsC.h	/^	GevGVSPExtendedIDMode_On,	\/*!< On*\/$/;"	e	enum:_spinGevGVSPExtendedIDModeEnums
GevIEEE1588	include/Camera.h	/^		GenApi::IBoolean &GevIEEE1588;$/;"	m	class:Spinnaker::Camera
GevIEEE1588	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode GevIEEE1588;$/;"	m	struct:_quickSpin
GevIEEE1588ClockAccuracy	include/Camera.h	/^		GenApi::IEnumerationT<GevIEEE1588ClockAccuracyEnums> &GevIEEE1588ClockAccuracy;$/;"	m	class:Spinnaker::Camera
GevIEEE1588ClockAccuracy	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode GevIEEE1588ClockAccuracy;$/;"	m	struct:_quickSpin
GevIEEE1588ClockAccuracyEnums	include/CameraDefs.h	/^	enum GevIEEE1588ClockAccuracyEnums	\/*!< Indicates the expected accuracy of the device clock when it is the grandmaster, or in the event it becomes the grandmaster.*\/$/;"	g	namespace:Spinnaker
GevIEEE1588ClockAccuracy_AlternatePTPProfile	include/CameraDefs.h	/^		GevIEEE1588ClockAccuracy_AlternatePTPProfile,	\/*!< Alternate PTP Profile*\/$/;"	e	enum:Spinnaker::GevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_AlternatePTPProfile	include/spinc/CameraDefsC.h	/^	GevIEEE1588ClockAccuracy_AlternatePTPProfile,	\/*!< Alternate PTP Profile*\/$/;"	e	enum:_spinGevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_GreaterThan10s	include/CameraDefs.h	/^		GevIEEE1588ClockAccuracy_GreaterThan10s,	\/*!< Greater Than 10s*\/$/;"	e	enum:Spinnaker::GevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_GreaterThan10s	include/spinc/CameraDefsC.h	/^	GevIEEE1588ClockAccuracy_GreaterThan10s,	\/*!< Greater Than 10s*\/$/;"	e	enum:_spinGevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Reserved	include/CameraDefs.h	/^		GevIEEE1588ClockAccuracy_Reserved,	\/*!< Reserved*\/$/;"	e	enum:Spinnaker::GevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Reserved	include/spinc/CameraDefsC.h	/^	GevIEEE1588ClockAccuracy_Reserved,	\/*!< Reserved*\/$/;"	e	enum:_spinGevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Unknown	include/CameraDefs.h	/^		GevIEEE1588ClockAccuracy_Unknown,	\/*!< Unknown*\/$/;"	e	enum:Spinnaker::GevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Unknown	include/spinc/CameraDefsC.h	/^	GevIEEE1588ClockAccuracy_Unknown,	\/*!< Unknown*\/$/;"	e	enum:_spinGevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within100ms	include/CameraDefs.h	/^		GevIEEE1588ClockAccuracy_Within100ms,	\/*!< Within 100ms*\/$/;"	e	enum:Spinnaker::GevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within100ms	include/spinc/CameraDefsC.h	/^	GevIEEE1588ClockAccuracy_Within100ms,	\/*!< Within 100ms*\/$/;"	e	enum:_spinGevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within100ns	include/CameraDefs.h	/^		GevIEEE1588ClockAccuracy_Within100ns,	\/*!< Within 100ns*\/$/;"	e	enum:Spinnaker::GevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within100ns	include/spinc/CameraDefsC.h	/^	GevIEEE1588ClockAccuracy_Within100ns,	\/*!< Within 100ns*\/$/;"	e	enum:_spinGevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within100us	include/CameraDefs.h	/^		GevIEEE1588ClockAccuracy_Within100us,	\/*!< Within 100us*\/$/;"	e	enum:Spinnaker::GevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within100us	include/spinc/CameraDefsC.h	/^	GevIEEE1588ClockAccuracy_Within100us,	\/*!< Within 100us*\/$/;"	e	enum:_spinGevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within10ms	include/CameraDefs.h	/^		GevIEEE1588ClockAccuracy_Within10ms,	\/*!< Within 10ms*\/$/;"	e	enum:Spinnaker::GevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within10ms	include/spinc/CameraDefsC.h	/^	GevIEEE1588ClockAccuracy_Within10ms,	\/*!< Within 10ms*\/$/;"	e	enum:_spinGevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within10s	include/CameraDefs.h	/^		GevIEEE1588ClockAccuracy_Within10s,	\/*!< Within 10s*\/$/;"	e	enum:Spinnaker::GevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within10s	include/spinc/CameraDefsC.h	/^	GevIEEE1588ClockAccuracy_Within10s,	\/*!< Within 10s*\/$/;"	e	enum:_spinGevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within10us	include/CameraDefs.h	/^		GevIEEE1588ClockAccuracy_Within10us,	\/*!< Within 10us*\/$/;"	e	enum:Spinnaker::GevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within10us	include/spinc/CameraDefsC.h	/^	GevIEEE1588ClockAccuracy_Within10us,	\/*!< Within 10us*\/$/;"	e	enum:_spinGevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within1ms	include/CameraDefs.h	/^		GevIEEE1588ClockAccuracy_Within1ms,	\/*!< Within 1ms*\/$/;"	e	enum:Spinnaker::GevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within1ms	include/spinc/CameraDefsC.h	/^	GevIEEE1588ClockAccuracy_Within1ms,	\/*!< Within 1ms*\/$/;"	e	enum:_spinGevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within1s	include/CameraDefs.h	/^		GevIEEE1588ClockAccuracy_Within1s,	\/*!< Within 1s*\/$/;"	e	enum:Spinnaker::GevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within1s	include/spinc/CameraDefsC.h	/^	GevIEEE1588ClockAccuracy_Within1s,	\/*!< Within 1s*\/$/;"	e	enum:_spinGevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within1us	include/CameraDefs.h	/^		GevIEEE1588ClockAccuracy_Within1us,	\/*!< Within 1us*\/$/;"	e	enum:Spinnaker::GevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within1us	include/spinc/CameraDefsC.h	/^	GevIEEE1588ClockAccuracy_Within1us,	\/*!< Within 1us*\/$/;"	e	enum:_spinGevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within250ms	include/CameraDefs.h	/^		GevIEEE1588ClockAccuracy_Within250ms,	\/*!< Within 250ms*\/$/;"	e	enum:Spinnaker::GevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within250ms	include/spinc/CameraDefsC.h	/^	GevIEEE1588ClockAccuracy_Within250ms,	\/*!< Within 250ms*\/$/;"	e	enum:_spinGevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within250ns	include/CameraDefs.h	/^		GevIEEE1588ClockAccuracy_Within250ns,	\/*!< Within 250ns*\/$/;"	e	enum:Spinnaker::GevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within250ns	include/spinc/CameraDefsC.h	/^	GevIEEE1588ClockAccuracy_Within250ns,	\/*!< Within 250ns*\/$/;"	e	enum:_spinGevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within250us	include/CameraDefs.h	/^		GevIEEE1588ClockAccuracy_Within250us,	\/*!< Within 250us*\/$/;"	e	enum:Spinnaker::GevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within250us	include/spinc/CameraDefsC.h	/^	GevIEEE1588ClockAccuracy_Within250us,	\/*!< Within 250us*\/$/;"	e	enum:_spinGevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within25ms	include/CameraDefs.h	/^		GevIEEE1588ClockAccuracy_Within25ms,	\/*!< Within 25ms*\/$/;"	e	enum:Spinnaker::GevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within25ms	include/spinc/CameraDefsC.h	/^	GevIEEE1588ClockAccuracy_Within25ms,	\/*!< Within 25ms*\/$/;"	e	enum:_spinGevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within25ns	include/CameraDefs.h	/^		GevIEEE1588ClockAccuracy_Within25ns,	\/*!< Within 25ns*\/$/;"	e	enum:Spinnaker::GevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within25ns	include/spinc/CameraDefsC.h	/^	GevIEEE1588ClockAccuracy_Within25ns,	\/*!< Within 25ns*\/$/;"	e	enum:_spinGevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within25us	include/CameraDefs.h	/^		GevIEEE1588ClockAccuracy_Within25us,	\/*!< Within 25us*\/$/;"	e	enum:Spinnaker::GevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within25us	include/spinc/CameraDefsC.h	/^	GevIEEE1588ClockAccuracy_Within25us,	\/*!< Within 25us*\/$/;"	e	enum:_spinGevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within2p5ms	include/CameraDefs.h	/^		GevIEEE1588ClockAccuracy_Within2p5ms,	\/*!< Within 2p 5ms*\/$/;"	e	enum:Spinnaker::GevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within2p5ms	include/spinc/CameraDefsC.h	/^	GevIEEE1588ClockAccuracy_Within2p5ms,	\/*!< Within 2p 5ms*\/$/;"	e	enum:_spinGevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within2p5u	include/CameraDefs.h	/^		GevIEEE1588ClockAccuracy_Within2p5u,	\/*!< Within 2p 5u*\/$/;"	e	enum:Spinnaker::GevIEEE1588ClockAccuracyEnums
GevIEEE1588ClockAccuracy_Within2p5u	include/spinc/CameraDefsC.h	/^	GevIEEE1588ClockAccuracy_Within2p5u,	\/*!< Within 2p 5u*\/$/;"	e	enum:_spinGevIEEE1588ClockAccuracyEnums
GevIEEE1588Status	include/Camera.h	/^		GenApi::IEnumerationT<GevIEEE1588StatusEnums> &GevIEEE1588Status;$/;"	m	class:Spinnaker::Camera
GevIEEE1588Status	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode GevIEEE1588Status;$/;"	m	struct:_quickSpin
GevIEEE1588StatusEnums	include/CameraDefs.h	/^	enum GevIEEE1588StatusEnums	\/*!< Provides the status of the IEEE 1588 clock.*\/$/;"	g	namespace:Spinnaker
GevIEEE1588Status_Disabled	include/CameraDefs.h	/^		GevIEEE1588Status_Disabled,	\/*!< Disabled*\/$/;"	e	enum:Spinnaker::GevIEEE1588StatusEnums
GevIEEE1588Status_Disabled	include/spinc/CameraDefsC.h	/^	GevIEEE1588Status_Disabled,	\/*!< Disabled*\/$/;"	e	enum:_spinGevIEEE1588StatusEnums
GevIEEE1588Status_Faulty	include/CameraDefs.h	/^		GevIEEE1588Status_Faulty,	\/*!< Faulty*\/$/;"	e	enum:Spinnaker::GevIEEE1588StatusEnums
GevIEEE1588Status_Faulty	include/spinc/CameraDefsC.h	/^	GevIEEE1588Status_Faulty,	\/*!< Faulty*\/$/;"	e	enum:_spinGevIEEE1588StatusEnums
GevIEEE1588Status_Initializing	include/CameraDefs.h	/^		GevIEEE1588Status_Initializing,	\/*!< Initializing*\/$/;"	e	enum:Spinnaker::GevIEEE1588StatusEnums
GevIEEE1588Status_Initializing	include/spinc/CameraDefsC.h	/^	GevIEEE1588Status_Initializing,	\/*!< Initializing*\/$/;"	e	enum:_spinGevIEEE1588StatusEnums
GevIEEE1588Status_Listening	include/CameraDefs.h	/^		GevIEEE1588Status_Listening,	\/*!< Listening*\/$/;"	e	enum:Spinnaker::GevIEEE1588StatusEnums
GevIEEE1588Status_Listening	include/spinc/CameraDefsC.h	/^	GevIEEE1588Status_Listening,	\/*!< Listening*\/$/;"	e	enum:_spinGevIEEE1588StatusEnums
GevIEEE1588Status_Master	include/CameraDefs.h	/^		GevIEEE1588Status_Master,	\/*!< Master*\/$/;"	e	enum:Spinnaker::GevIEEE1588StatusEnums
GevIEEE1588Status_Master	include/spinc/CameraDefsC.h	/^	GevIEEE1588Status_Master,	\/*!< Master*\/$/;"	e	enum:_spinGevIEEE1588StatusEnums
GevIEEE1588Status_Passive	include/CameraDefs.h	/^		GevIEEE1588Status_Passive,	\/*!< Passive*\/$/;"	e	enum:Spinnaker::GevIEEE1588StatusEnums
GevIEEE1588Status_Passive	include/spinc/CameraDefsC.h	/^	GevIEEE1588Status_Passive,	\/*!< Passive*\/$/;"	e	enum:_spinGevIEEE1588StatusEnums
GevIEEE1588Status_PreMaster	include/CameraDefs.h	/^		GevIEEE1588Status_PreMaster,	\/*!< Pre Master*\/$/;"	e	enum:Spinnaker::GevIEEE1588StatusEnums
GevIEEE1588Status_PreMaster	include/spinc/CameraDefsC.h	/^	GevIEEE1588Status_PreMaster,	\/*!< Pre Master*\/$/;"	e	enum:_spinGevIEEE1588StatusEnums
GevIEEE1588Status_Slave	include/CameraDefs.h	/^		GevIEEE1588Status_Slave,	\/*!< Slave*\/$/;"	e	enum:Spinnaker::GevIEEE1588StatusEnums
GevIEEE1588Status_Slave	include/spinc/CameraDefsC.h	/^	GevIEEE1588Status_Slave,	\/*!< Slave*\/$/;"	e	enum:_spinGevIEEE1588StatusEnums
GevIEEE1588Status_Uncalibrated	include/CameraDefs.h	/^		GevIEEE1588Status_Uncalibrated,	\/*!< Uncalibrated*\/$/;"	e	enum:Spinnaker::GevIEEE1588StatusEnums
GevIEEE1588Status_Uncalibrated	include/spinc/CameraDefsC.h	/^	GevIEEE1588Status_Uncalibrated,	\/*!< Uncalibrated*\/$/;"	e	enum:_spinGevIEEE1588StatusEnums
GevIPConfigurationStatus	include/Camera.h	/^		GenApi::IEnumerationT<GevIPConfigurationStatusEnums> &GevIPConfigurationStatus;$/;"	m	class:Spinnaker::Camera
GevIPConfigurationStatus	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode GevIPConfigurationStatus;$/;"	m	struct:_quickSpin
GevIPConfigurationStatusEnums	include/CameraDefs.h	/^	enum GevIPConfigurationStatusEnums	\/*!< Reports the current IP configuration status.*\/$/;"	g	namespace:Spinnaker
GevIPConfigurationStatus_DHCP	include/CameraDefs.h	/^		GevIPConfigurationStatus_DHCP,	\/*!< DHCP*\/$/;"	e	enum:Spinnaker::GevIPConfigurationStatusEnums
GevIPConfigurationStatus_DHCP	include/spinc/CameraDefsC.h	/^	GevIPConfigurationStatus_DHCP,	\/*!< DHCP*\/$/;"	e	enum:_spinGevIPConfigurationStatusEnums
GevIPConfigurationStatus_ForceIP	include/CameraDefs.h	/^		GevIPConfigurationStatus_ForceIP,	\/*!< Force IP*\/$/;"	e	enum:Spinnaker::GevIPConfigurationStatusEnums
GevIPConfigurationStatus_ForceIP	include/spinc/CameraDefsC.h	/^	GevIPConfigurationStatus_ForceIP,	\/*!< Force IP*\/$/;"	e	enum:_spinGevIPConfigurationStatusEnums
GevIPConfigurationStatus_LLA	include/CameraDefs.h	/^		GevIPConfigurationStatus_LLA,	\/*!< LLA*\/$/;"	e	enum:Spinnaker::GevIPConfigurationStatusEnums
GevIPConfigurationStatus_LLA	include/spinc/CameraDefsC.h	/^	GevIPConfigurationStatus_LLA,	\/*!< LLA*\/$/;"	e	enum:_spinGevIPConfigurationStatusEnums
GevIPConfigurationStatus_None	include/CameraDefs.h	/^		GevIPConfigurationStatus_None,	\/*!< None*\/$/;"	e	enum:Spinnaker::GevIPConfigurationStatusEnums
GevIPConfigurationStatus_None	include/spinc/CameraDefsC.h	/^	GevIPConfigurationStatus_None,	\/*!< None*\/$/;"	e	enum:_spinGevIPConfigurationStatusEnums
GevIPConfigurationStatus_PersistentIP	include/CameraDefs.h	/^		GevIPConfigurationStatus_PersistentIP,	\/*!< Persistent IP*\/$/;"	e	enum:Spinnaker::GevIPConfigurationStatusEnums
GevIPConfigurationStatus_PersistentIP	include/spinc/CameraDefsC.h	/^	GevIPConfigurationStatus_PersistentIP,	\/*!< Persistent IP*\/$/;"	e	enum:_spinGevIPConfigurationStatusEnums
GevInterfaceGateway	include/TransportLayerInterface.h	/^		GenApi::IInteger &GevInterfaceGateway;$/;"	m	class:Spinnaker::TransportLayerInterface
GevInterfaceGateway	include/spinc/TransportLayerInterfaceC.h	/^	quickSpinIntegerNode GevInterfaceGateway;$/;"	m	struct:_quickSpinTLInterface
GevInterfaceIPAddress	include/TransportLayerInterface.h	/^		GenApi::IInteger &GevInterfaceIPAddress;$/;"	m	class:Spinnaker::TransportLayerInterface
GevInterfaceIPAddress	include/spinc/TransportLayerInterfaceC.h	/^	quickSpinIntegerNode GevInterfaceIPAddress;$/;"	m	struct:_quickSpinTLInterface
GevInterfaceMACAddress	include/TransportLayerInterface.h	/^		GenApi::IInteger &GevInterfaceMACAddress;$/;"	m	class:Spinnaker::TransportLayerInterface
GevInterfaceMACAddress	include/spinc/TransportLayerInterfaceC.h	/^	quickSpinIntegerNode GevInterfaceMACAddress;$/;"	m	struct:_quickSpinTLInterface
GevInterfaceSelector	include/Camera.h	/^		GenApi::IInteger &GevInterfaceSelector;$/;"	m	class:Spinnaker::Camera
GevInterfaceSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode GevInterfaceSelector;$/;"	m	struct:_quickSpin
GevInterfaceSubnetMask	include/TransportLayerInterface.h	/^		GenApi::IInteger &GevInterfaceSubnetMask;$/;"	m	class:Spinnaker::TransportLayerInterface
GevInterfaceSubnetMask	include/spinc/TransportLayerInterfaceC.h	/^	quickSpinIntegerNode GevInterfaceSubnetMask;$/;"	m	struct:_quickSpinTLInterface
GevMACAddress	include/Camera.h	/^		GenApi::IInteger &GevMACAddress;$/;"	m	class:Spinnaker::Camera
GevMACAddress	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode GevMACAddress;$/;"	m	struct:_quickSpin
GevMCDA	include/Camera.h	/^		GenApi::IInteger &GevMCDA;$/;"	m	class:Spinnaker::Camera
GevMCDA	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode GevMCDA;$/;"	m	struct:_quickSpin
GevMCPHostPort	include/Camera.h	/^		GenApi::IInteger &GevMCPHostPort;$/;"	m	class:Spinnaker::Camera
GevMCPHostPort	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode GevMCPHostPort;$/;"	m	struct:_quickSpin
GevMCRC	include/Camera.h	/^		GenApi::IInteger &GevMCRC;$/;"	m	class:Spinnaker::Camera
GevMCRC	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode GevMCRC;$/;"	m	struct:_quickSpin
GevMCSP	include/Camera.h	/^		GenApi::IInteger &GevMCSP;$/;"	m	class:Spinnaker::Camera
GevMCSP	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode GevMCSP;$/;"	m	struct:_quickSpin
GevMCTT	include/Camera.h	/^		GenApi::IInteger &GevMCTT;$/;"	m	class:Spinnaker::Camera
GevMCTT	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode GevMCTT;$/;"	m	struct:_quickSpin
GevMaximumNumberResendBuffers	include/TransportLayerStream.h	/^		GenApi::IInteger &GevMaximumNumberResendBuffers;$/;"	m	class:Spinnaker::TransportLayerStream
GevMaximumNumberResendBuffers	include/spinc/TransportLayerStreamC.h	/^	quickSpinIntegerNode GevMaximumNumberResendBuffers;$/;"	m	struct:_quickSpinTLStream
GevMaximumNumberResendRequests	include/TransportLayerStream.h	/^		GenApi::IInteger &GevMaximumNumberResendRequests;$/;"	m	class:Spinnaker::TransportLayerStream
GevMaximumNumberResendRequests	include/spinc/TransportLayerStreamC.h	/^	quickSpinIntegerNode GevMaximumNumberResendRequests;$/;"	m	struct:_quickSpinTLStream
GevPAUSEFrameReception	include/Camera.h	/^		GenApi::IBoolean &GevPAUSEFrameReception;$/;"	m	class:Spinnaker::Camera
GevPAUSEFrameReception	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode GevPAUSEFrameReception;$/;"	m	struct:_quickSpin
GevPAUSEFrameTransmission	include/Camera.h	/^		GenApi::IBoolean &GevPAUSEFrameTransmission;$/;"	m	class:Spinnaker::Camera
GevPAUSEFrameTransmission	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode GevPAUSEFrameTransmission;$/;"	m	struct:_quickSpin
GevPacketResendMode	include/TransportLayerStream.h	/^		GenApi::IBoolean &GevPacketResendMode;$/;"	m	class:Spinnaker::TransportLayerStream
GevPacketResendMode	include/spinc/TransportLayerStreamC.h	/^	quickSpinBooleanNode GevPacketResendMode;$/;"	m	struct:_quickSpinTLStream
GevPacketResendTimeout	include/TransportLayerStream.h	/^		GenApi::IInteger &GevPacketResendTimeout;$/;"	m	class:Spinnaker::TransportLayerStream
GevPacketResendTimeout	include/spinc/TransportLayerStreamC.h	/^	quickSpinIntegerNode GevPacketResendTimeout;$/;"	m	struct:_quickSpinTLStream
GevPersistentDefaultGateway	include/Camera.h	/^		GenApi::IInteger &GevPersistentDefaultGateway;$/;"	m	class:Spinnaker::Camera
GevPersistentDefaultGateway	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode GevPersistentDefaultGateway;$/;"	m	struct:_quickSpin
GevPersistentIPAddress	include/Camera.h	/^		GenApi::IInteger &GevPersistentIPAddress;$/;"	m	class:Spinnaker::Camera
GevPersistentIPAddress	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode GevPersistentIPAddress;$/;"	m	struct:_quickSpin
GevPersistentSubnetMask	include/Camera.h	/^		GenApi::IInteger &GevPersistentSubnetMask;$/;"	m	class:Spinnaker::Camera
GevPersistentSubnetMask	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode GevPersistentSubnetMask;$/;"	m	struct:_quickSpin
GevPhysicalLinkConfiguration	include/Camera.h	/^		GenApi::IEnumerationT<GevPhysicalLinkConfigurationEnums> &GevPhysicalLinkConfiguration;$/;"	m	class:Spinnaker::Camera
GevPhysicalLinkConfiguration	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode GevPhysicalLinkConfiguration;$/;"	m	struct:_quickSpin
GevPhysicalLinkConfigurationEnums	include/CameraDefs.h	/^	enum GevPhysicalLinkConfigurationEnums	\/*!< Controls the principal physical link configuration to use on next restart\/power-up of the device.*\/$/;"	g	namespace:Spinnaker
GevPhysicalLinkConfiguration_DynamicLAG	include/CameraDefs.h	/^		GevPhysicalLinkConfiguration_DynamicLAG,	\/*!< Dynamic LAG*\/$/;"	e	enum:Spinnaker::GevPhysicalLinkConfigurationEnums
GevPhysicalLinkConfiguration_DynamicLAG	include/spinc/CameraDefsC.h	/^	GevPhysicalLinkConfiguration_DynamicLAG,	\/*!< Dynamic LAG*\/$/;"	e	enum:_spinGevPhysicalLinkConfigurationEnums
GevPhysicalLinkConfiguration_MultiLink	include/CameraDefs.h	/^		GevPhysicalLinkConfiguration_MultiLink,	\/*!< Multi Link*\/$/;"	e	enum:Spinnaker::GevPhysicalLinkConfigurationEnums
GevPhysicalLinkConfiguration_MultiLink	include/spinc/CameraDefsC.h	/^	GevPhysicalLinkConfiguration_MultiLink,	\/*!< Multi Link*\/$/;"	e	enum:_spinGevPhysicalLinkConfigurationEnums
GevPhysicalLinkConfiguration_SingleLink	include/CameraDefs.h	/^		GevPhysicalLinkConfiguration_SingleLink,	\/*!< Single Link*\/$/;"	e	enum:Spinnaker::GevPhysicalLinkConfigurationEnums
GevPhysicalLinkConfiguration_SingleLink	include/spinc/CameraDefsC.h	/^	GevPhysicalLinkConfiguration_SingleLink,	\/*!< Single Link*\/$/;"	e	enum:_spinGevPhysicalLinkConfigurationEnums
GevPhysicalLinkConfiguration_StaticLAG	include/CameraDefs.h	/^		GevPhysicalLinkConfiguration_StaticLAG,	\/*!< Static LAG*\/$/;"	e	enum:Spinnaker::GevPhysicalLinkConfigurationEnums
GevPhysicalLinkConfiguration_StaticLAG	include/spinc/CameraDefsC.h	/^	GevPhysicalLinkConfiguration_StaticLAG,	\/*!< Static LAG*\/$/;"	e	enum:_spinGevPhysicalLinkConfigurationEnums
GevPrimaryApplicationIPAddress	include/Camera.h	/^		GenApi::IInteger &GevPrimaryApplicationIPAddress;$/;"	m	class:Spinnaker::Camera
GevPrimaryApplicationIPAddress	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode GevPrimaryApplicationIPAddress;$/;"	m	struct:_quickSpin
GevPrimaryApplicationSocket	include/Camera.h	/^		GenApi::IInteger &GevPrimaryApplicationSocket;$/;"	m	class:Spinnaker::Camera
GevPrimaryApplicationSocket	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode GevPrimaryApplicationSocket;$/;"	m	struct:_quickSpin
GevPrimaryApplicationSwitchoverKey	include/Camera.h	/^		GenApi::IInteger &GevPrimaryApplicationSwitchoverKey;$/;"	m	class:Spinnaker::Camera
GevPrimaryApplicationSwitchoverKey	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode GevPrimaryApplicationSwitchoverKey;$/;"	m	struct:_quickSpin
GevResendPacketCount	include/TransportLayerStream.h	/^		GenApi::IInteger &GevResendPacketCount;$/;"	m	class:Spinnaker::TransportLayerStream
GevResendPacketCount	include/spinc/TransportLayerStreamC.h	/^	quickSpinIntegerNode GevResendPacketCount;$/;"	m	struct:_quickSpinTLStream
GevResendRequestCount	include/TransportLayerStream.h	/^		GenApi::IInteger &GevResendRequestCount;$/;"	m	class:Spinnaker::TransportLayerStream
GevResendRequestCount	include/spinc/TransportLayerStreamC.h	/^	quickSpinIntegerNode GevResendRequestCount;$/;"	m	struct:_quickSpinTLStream
GevSCCFGAllInTransmission	include/Camera.h	/^		GenApi::IBoolean &GevSCCFGAllInTransmission;$/;"	m	class:Spinnaker::Camera
GevSCCFGAllInTransmission	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode GevSCCFGAllInTransmission;$/;"	m	struct:_quickSpin
GevSCCFGExtendedChunkData	include/Camera.h	/^		GenApi::IBoolean &GevSCCFGExtendedChunkData;$/;"	m	class:Spinnaker::Camera
GevSCCFGExtendedChunkData	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode GevSCCFGExtendedChunkData;$/;"	m	struct:_quickSpin
GevSCCFGPacketResendDestination	include/Camera.h	/^		GenApi::IBoolean &GevSCCFGPacketResendDestination;$/;"	m	class:Spinnaker::Camera
GevSCCFGPacketResendDestination	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode GevSCCFGPacketResendDestination;$/;"	m	struct:_quickSpin
GevSCCFGUnconditionalStreaming	include/Camera.h	/^		GenApi::IBoolean &GevSCCFGUnconditionalStreaming;$/;"	m	class:Spinnaker::Camera
GevSCCFGUnconditionalStreaming	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode GevSCCFGUnconditionalStreaming;$/;"	m	struct:_quickSpin
GevSCDA	include/Camera.h	/^		GenApi::IInteger &GevSCDA;$/;"	m	class:Spinnaker::Camera
GevSCDA	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode GevSCDA;$/;"	m	struct:_quickSpin
GevSCPD	include/Camera.h	/^		GenApi::IInteger &GevSCPD;$/;"	m	class:Spinnaker::Camera
GevSCPD	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode GevSCPD;$/;"	m	struct:_quickSpin
GevSCPHostPort	include/Camera.h	/^		GenApi::IInteger &GevSCPHostPort;$/;"	m	class:Spinnaker::Camera
GevSCPHostPort	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode GevSCPHostPort;$/;"	m	struct:_quickSpin
GevSCPInterfaceIndex	include/Camera.h	/^		GenApi::IInteger &GevSCPInterfaceIndex;$/;"	m	class:Spinnaker::Camera
GevSCPInterfaceIndex	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode GevSCPInterfaceIndex;$/;"	m	struct:_quickSpin
GevSCPSDoNotFragment	include/Camera.h	/^		GenApi::IBoolean &GevSCPSDoNotFragment;$/;"	m	class:Spinnaker::Camera
GevSCPSDoNotFragment	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode GevSCPSDoNotFragment;$/;"	m	struct:_quickSpin
GevSCPSFireTestPacket	include/Camera.h	/^		GenApi::IBoolean &GevSCPSFireTestPacket;$/;"	m	class:Spinnaker::Camera
GevSCPSFireTestPacket	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode GevSCPSFireTestPacket;$/;"	m	struct:_quickSpin
GevSCSP	include/Camera.h	/^		GenApi::IInteger &GevSCSP;$/;"	m	class:Spinnaker::Camera
GevSCSP	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode GevSCSP;$/;"	m	struct:_quickSpin
GevSCZoneConfigurationLock	include/Camera.h	/^		GenApi::IBoolean &GevSCZoneConfigurationLock;$/;"	m	class:Spinnaker::Camera
GevSCZoneConfigurationLock	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode GevSCZoneConfigurationLock;$/;"	m	struct:_quickSpin
GevSCZoneCount	include/Camera.h	/^		GenApi::IInteger &GevSCZoneCount;$/;"	m	class:Spinnaker::Camera
GevSCZoneCount	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode GevSCZoneCount;$/;"	m	struct:_quickSpin
GevSCZoneDirectionAll	include/Camera.h	/^		GenApi::IInteger &GevSCZoneDirectionAll;$/;"	m	class:Spinnaker::Camera
GevSCZoneDirectionAll	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode GevSCZoneDirectionAll;$/;"	m	struct:_quickSpin
GevSecondURL	include/Camera.h	/^		GenApi::IString &GevSecondURL;$/;"	m	class:Spinnaker::Camera
GevSecondURL	include/spinc/QuickSpinDefsC.h	/^	quickSpinStringNode GevSecondURL;$/;"	m	struct:_quickSpin
GevStreamChannelSelector	include/Camera.h	/^		GenApi::IInteger &GevStreamChannelSelector;$/;"	m	class:Spinnaker::Camera
GevStreamChannelSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode GevStreamChannelSelector;$/;"	m	struct:_quickSpin
GevSupportedOption	include/Camera.h	/^		GenApi::IBoolean &GevSupportedOption;$/;"	m	class:Spinnaker::Camera
GevSupportedOption	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode GevSupportedOption;$/;"	m	struct:_quickSpin
GevSupportedOptionSelector	include/Camera.h	/^		GenApi::IEnumerationT<GevSupportedOptionSelectorEnums> &GevSupportedOptionSelector;$/;"	m	class:Spinnaker::Camera
GevSupportedOptionSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode GevSupportedOptionSelector;$/;"	m	struct:_quickSpin
GevSupportedOptionSelectorEnums	include/CameraDefs.h	/^	enum GevSupportedOptionSelectorEnums	\/*!< Selects the GEV option to interrogate for existing support.*\/$/;"	g	namespace:Spinnaker
GevSupportedOptionSelector_Action	include/CameraDefs.h	/^		GevSupportedOptionSelector_Action,	\/*!< Action*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_Action	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_Action,	\/*!< Action*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_CCPApplicationSocket	include/CameraDefs.h	/^		GevSupportedOptionSelector_CCPApplicationSocket,	\/*!< CCP Application Socket*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_CCPApplicationSocket	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_CCPApplicationSocket,	\/*!< CCP Application Socket*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_CommandsConcatenation	include/CameraDefs.h	/^		GevSupportedOptionSelector_CommandsConcatenation,	\/*!< Commands Concatenation*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_CommandsConcatenation	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_CommandsConcatenation,	\/*!< Commands Concatenation*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_DiscoveryAckDelay	include/CameraDefs.h	/^		GevSupportedOptionSelector_DiscoveryAckDelay,	\/*!< Discovery Ack Delay*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_DiscoveryAckDelay	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_DiscoveryAckDelay,	\/*!< Discovery Ack Delay*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_DiscoveryAckDelayWritable	include/CameraDefs.h	/^		GevSupportedOptionSelector_DiscoveryAckDelayWritable,	\/*!< Discovery Ack Delay Writable*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_DiscoveryAckDelayWritable	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_DiscoveryAckDelayWritable,	\/*!< Discovery Ack Delay Writable*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_DynamicLAG	include/CameraDefs.h	/^		GevSupportedOptionSelector_DynamicLAG,	\/*!< Dynamic LAG*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_DynamicLAG	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_DynamicLAG,	\/*!< Dynamic LAG*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_Event	include/CameraDefs.h	/^		GevSupportedOptionSelector_Event,	\/*!< Event*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_Event	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_Event,	\/*!< Event*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_EventData	include/CameraDefs.h	/^		GevSupportedOptionSelector_EventData,	\/*!< Event Data*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_EventData	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_EventData,	\/*!< Event Data*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_ExtendedStatusCodes	include/CameraDefs.h	/^		GevSupportedOptionSelector_ExtendedStatusCodes,	\/*!< Extended Status Codes*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_ExtendedStatusCodes	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_ExtendedStatusCodes,	\/*!< Extended Status Codes*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_ExtendedStatusCodesVersion2_0	include/CameraDefs.h	/^		GevSupportedOptionSelector_ExtendedStatusCodesVersion2_0,	\/*!< Extended Status Codes Version 2 0*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_ExtendedStatusCodesVersion2_0	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_ExtendedStatusCodesVersion2_0,	\/*!< Extended Status Codes Version 2 0*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_HeartbeatDisable	include/CameraDefs.h	/^		GevSupportedOptionSelector_HeartbeatDisable,	\/*!< Heartbeat Disable*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_HeartbeatDisable	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_HeartbeatDisable,	\/*!< Heartbeat Disable*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_IEEE1588	include/CameraDefs.h	/^		GevSupportedOptionSelector_IEEE1588,	\/*!< IEEE 1588*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_IEEE1588	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_IEEE1588,	\/*!< IEEE 1588*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_IPConfigurationDHCP	include/CameraDefs.h	/^		GevSupportedOptionSelector_IPConfigurationDHCP,	\/*!< IP Configuration DHCP*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_IPConfigurationDHCP	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_IPConfigurationDHCP,	\/*!< IP Configuration DHCP*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_IPConfigurationLLA	include/CameraDefs.h	/^		GevSupportedOptionSelector_IPConfigurationLLA,	\/*!< IP Configuration LLA*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_IPConfigurationLLA	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_IPConfigurationLLA,	\/*!< IP Configuration LLA*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_IPConfigurationPersistentIP	include/CameraDefs.h	/^		GevSupportedOptionSelector_IPConfigurationPersistentIP,	\/*!< IP Configuration Persistent IP*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_IPConfigurationPersistentIP	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_IPConfigurationPersistentIP,	\/*!< IP Configuration Persistent IP*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_LinkSpeed	include/CameraDefs.h	/^		GevSupportedOptionSelector_LinkSpeed,	\/*!< Link Speed*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_LinkSpeed	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_LinkSpeed,	\/*!< Link Speed*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_ManifestTable	include/CameraDefs.h	/^		GevSupportedOptionSelector_ManifestTable,	\/*!< Manifest Table*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_ManifestTable	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_ManifestTable,	\/*!< Manifest Table*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_MessageChannelSourceSocket	include/CameraDefs.h	/^		GevSupportedOptionSelector_MessageChannelSourceSocket,	\/*!< Message Channel Source Socket*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_MessageChannelSourceSocket	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_MessageChannelSourceSocket,	\/*!< Message Channel Source Socket*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_MultiLink	include/CameraDefs.h	/^		GevSupportedOptionSelector_MultiLink,	\/*!< Multi Link*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_MultiLink	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_MultiLink,	\/*!< Multi Link*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_PAUSEFrameGeneration	include/CameraDefs.h	/^		GevSupportedOptionSelector_PAUSEFrameGeneration,	\/*!< PAUSE Frame Generation*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_PAUSEFrameGeneration	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_PAUSEFrameGeneration,	\/*!< PAUSE Frame Generation*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_PAUSEFrameReception	include/CameraDefs.h	/^		GevSupportedOptionSelector_PAUSEFrameReception,	\/*!< PAUSE Frame Reception*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_PAUSEFrameReception	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_PAUSEFrameReception,	\/*!< PAUSE Frame Reception*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_PacketResend	include/CameraDefs.h	/^		GevSupportedOptionSelector_PacketResend,	\/*!< Packet Resend*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_PacketResend	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_PacketResend,	\/*!< Packet Resend*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_PendingAck	include/CameraDefs.h	/^		GevSupportedOptionSelector_PendingAck,	\/*!< Pending Ack*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_PendingAck	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_PendingAck,	\/*!< Pending Ack*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_PrimaryApplicationSwitchover	include/CameraDefs.h	/^		GevSupportedOptionSelector_PrimaryApplicationSwitchover,	\/*!< Primary Application Switchover*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_PrimaryApplicationSwitchover	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_PrimaryApplicationSwitchover,	\/*!< Primary Application Switchover*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_ScheduledAction	include/CameraDefs.h	/^		GevSupportedOptionSelector_ScheduledAction,	\/*!< Scheduled Action*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_ScheduledAction	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_ScheduledAction,	\/*!< Scheduled Action*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_SerialNumber	include/CameraDefs.h	/^		GevSupportedOptionSelector_SerialNumber,	\/*!< Serial Number*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_SerialNumber	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_SerialNumber,	\/*!< Serial Number*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_SingleLink	include/CameraDefs.h	/^		GevSupportedOptionSelector_SingleLink,	\/*!< Single Link*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_SingleLink	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_SingleLink,	\/*!< Single Link*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StandardIDMode	include/CameraDefs.h	/^		GevSupportedOptionSelector_StandardIDMode,	\/*!< Standard ID Mode*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StandardIDMode	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_StandardIDMode,	\/*!< Standard ID Mode*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StaticLAG	include/CameraDefs.h	/^		GevSupportedOptionSelector_StaticLAG,	\/*!< Static LAG*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StaticLAG	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_StaticLAG,	\/*!< Static LAG*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel0AllInTransmission	include/CameraDefs.h	/^		GevSupportedOptionSelector_StreamChannel0AllInTransmission,	\/*!< Stream Channel 0 All In Transmission*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel0AllInTransmission	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_StreamChannel0AllInTransmission,	\/*!< Stream Channel 0 All In Transmission*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel0BigAndLittleEndian	include/CameraDefs.h	/^		GevSupportedOptionSelector_StreamChannel0BigAndLittleEndian,	\/*!< Stream Channel 0 Big And Little Endian*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel0BigAndLittleEndian	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_StreamChannel0BigAndLittleEndian,	\/*!< Stream Channel 0 Big And Little Endian*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel0ExtendedChunkData	include/CameraDefs.h	/^		GevSupportedOptionSelector_StreamChannel0ExtendedChunkData,	\/*!< Stream Channel 0 Extended Chunk Data*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel0ExtendedChunkData	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_StreamChannel0ExtendedChunkData,	\/*!< Stream Channel 0 Extended Chunk Data*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel0IPReassembly	include/CameraDefs.h	/^		GevSupportedOptionSelector_StreamChannel0IPReassembly,	\/*!< Stream Channel 0 IP Reassembly*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel0IPReassembly	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_StreamChannel0IPReassembly,	\/*!< Stream Channel 0 IP Reassembly*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel0MultiZone	include/CameraDefs.h	/^		GevSupportedOptionSelector_StreamChannel0MultiZone,	\/*!< Stream Channel 0 Multi Zone*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel0MultiZone	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_StreamChannel0MultiZone,	\/*!< Stream Channel 0 Multi Zone*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel0PacketResendDestination	include/CameraDefs.h	/^		GevSupportedOptionSelector_StreamChannel0PacketResendDestination,	\/*!< Stream Channel 0 Packet Resend Destination*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel0PacketResendDestination	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_StreamChannel0PacketResendDestination,	\/*!< Stream Channel 0 Packet Resend Destination*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel0UnconditionalStreaming	include/CameraDefs.h	/^		GevSupportedOptionSelector_StreamChannel0UnconditionalStreaming,	\/*!< Stream Channel 0 Unconditional Streaming*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel0UnconditionalStreaming	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_StreamChannel0UnconditionalStreaming,	\/*!< Stream Channel 0 Unconditional Streaming*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel1AllInTransmission	include/CameraDefs.h	/^		GevSupportedOptionSelector_StreamChannel1AllInTransmission,	\/*!< Stream Channel 1 All In Transmission*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel1AllInTransmission	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_StreamChannel1AllInTransmission,	\/*!< Stream Channel 1 All In Transmission*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel1BigAndLittleEndian	include/CameraDefs.h	/^		GevSupportedOptionSelector_StreamChannel1BigAndLittleEndian,	\/*!< Stream Channel 1 Big And Little Endian*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel1BigAndLittleEndian	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_StreamChannel1BigAndLittleEndian,	\/*!< Stream Channel 1 Big And Little Endian*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel1ExtendedChunkData	include/CameraDefs.h	/^		GevSupportedOptionSelector_StreamChannel1ExtendedChunkData,	\/*!< Stream Channel 1 Extended Chunk Data*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel1ExtendedChunkData	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_StreamChannel1ExtendedChunkData,	\/*!< Stream Channel 1 Extended Chunk Data*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel1IPReassembly	include/CameraDefs.h	/^		GevSupportedOptionSelector_StreamChannel1IPReassembly,	\/*!< Stream Channel 1 IP Reassembly*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel1IPReassembly	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_StreamChannel1IPReassembly,	\/*!< Stream Channel 1 IP Reassembly*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel1MultiZone	include/CameraDefs.h	/^		GevSupportedOptionSelector_StreamChannel1MultiZone,	\/*!< Stream Channel 1 Multi Zone*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel1MultiZone	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_StreamChannel1MultiZone,	\/*!< Stream Channel 1 Multi Zone*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel1PacketResendDestination	include/CameraDefs.h	/^		GevSupportedOptionSelector_StreamChannel1PacketResendDestination,	\/*!< Stream Channel 1 Packet Resend Destination*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel1PacketResendDestination	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_StreamChannel1PacketResendDestination,	\/*!< Stream Channel 1 Packet Resend Destination*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel1UnconditionalStreaming	include/CameraDefs.h	/^		GevSupportedOptionSelector_StreamChannel1UnconditionalStreaming,	\/*!< Stream Channel 1 Unconditional Streaming*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel1UnconditionalStreaming	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_StreamChannel1UnconditionalStreaming,	\/*!< Stream Channel 1 Unconditional Streaming*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel2AllInTransmission	include/CameraDefs.h	/^		GevSupportedOptionSelector_StreamChannel2AllInTransmission,	\/*!< Stream Channel 2 All In Transmission*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel2AllInTransmission	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_StreamChannel2AllInTransmission,	\/*!< Stream Channel 2 All In Transmission*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel2BigAndLittleEndian	include/CameraDefs.h	/^		GevSupportedOptionSelector_StreamChannel2BigAndLittleEndian,	\/*!< Stream Channel 2 Big And Little Endian*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel2BigAndLittleEndian	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_StreamChannel2BigAndLittleEndian,	\/*!< Stream Channel 2 Big And Little Endian*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel2ExtendedChunkData	include/CameraDefs.h	/^		GevSupportedOptionSelector_StreamChannel2ExtendedChunkData,	\/*!< Stream Channel 2 Extended Chunk Data*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel2ExtendedChunkData	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_StreamChannel2ExtendedChunkData,	\/*!< Stream Channel 2 Extended Chunk Data*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel2IPReassembly	include/CameraDefs.h	/^		GevSupportedOptionSelector_StreamChannel2IPReassembly,	\/*!< Stream Channel 2 IP Reassembly*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel2IPReassembly	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_StreamChannel2IPReassembly,	\/*!< Stream Channel 2 IP Reassembly*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel2MultiZone	include/CameraDefs.h	/^		GevSupportedOptionSelector_StreamChannel2MultiZone,	\/*!< Stream Channel 2 Multi Zone*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel2MultiZone	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_StreamChannel2MultiZone,	\/*!< Stream Channel 2 Multi Zone*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel2PacketResendDestination	include/CameraDefs.h	/^		GevSupportedOptionSelector_StreamChannel2PacketResendDestination,	\/*!< Stream Channel 2 Packet Resend Destination*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel2PacketResendDestination	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_StreamChannel2PacketResendDestination,	\/*!< Stream Channel 2 Packet Resend Destination*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel2UnconditionalStreaming	include/CameraDefs.h	/^		GevSupportedOptionSelector_StreamChannel2UnconditionalStreaming,	\/*!< Stream Channel 2 Unconditional Streaming*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannel2UnconditionalStreaming	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_StreamChannel2UnconditionalStreaming,	\/*!< Stream Channel 2 Unconditional Streaming*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannelSourceSocket	include/CameraDefs.h	/^		GevSupportedOptionSelector_StreamChannelSourceSocket,	\/*!< Stream Channel Source Socket*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_StreamChannelSourceSocket	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_StreamChannelSourceSocket,	\/*!< Stream Channel Source Socket*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_TestData	include/CameraDefs.h	/^		GevSupportedOptionSelector_TestData,	\/*!< Test Data*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_TestData	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_TestData,	\/*!< Test Data*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_UnconditionalAction	include/CameraDefs.h	/^		GevSupportedOptionSelector_UnconditionalAction,	\/*!< Unconditional Action*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_UnconditionalAction	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_UnconditionalAction,	\/*!< Unconditional Action*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_UserDefinedName	include/CameraDefs.h	/^		GevSupportedOptionSelector_UserDefinedName,	\/*!< User Defined Name*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_UserDefinedName	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_UserDefinedName,	\/*!< User Defined Name*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevSupportedOptionSelector_WriteMem	include/CameraDefs.h	/^		GevSupportedOptionSelector_WriteMem,	\/*!< Write Mem*\/$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
GevSupportedOptionSelector_WriteMem	include/spinc/CameraDefsC.h	/^	GevSupportedOptionSelector_WriteMem,	\/*!< Write Mem*\/$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
GevTotalPacketCount	include/TransportLayerStream.h	/^		GenApi::IInteger &GevTotalPacketCount;$/;"	m	class:Spinnaker::TransportLayerStream
GevTotalPacketCount	include/spinc/TransportLayerStreamC.h	/^	quickSpinIntegerNode GevTotalPacketCount;$/;"	m	struct:_quickSpinTLStream
GevVersionMajor	include/TransportLayerDevice.h	/^		GenApi::IInteger &GevVersionMajor;$/;"	m	class:Spinnaker::TransportLayerDevice
GevVersionMajor	include/spinc/TransportLayerDeviceC.h	/^	quickSpinIntegerNode GevVersionMajor;$/;"	m	struct:_quickSpinTLDevice
GevVersionMinor	include/TransportLayerDevice.h	/^		GenApi::IInteger &GevVersionMinor;$/;"	m	class:Spinnaker::TransportLayerDevice
GevVersionMinor	include/spinc/TransportLayerDeviceC.h	/^	quickSpinIntegerNode GevVersionMinor;$/;"	m	struct:_quickSpinTLDevice
GrabNextImageByTrigger	Abhinay/Abhi_hardware/Abhi_hardware.cpp	/^int GrabNextImageByTrigger(INodeMap & nodeMap, CameraPtr pCam)$/;"	f
GrabNextImageByTrigger	Abhinay/Abhi_test3/Abhi_test3.cpp	/^int GrabNextImageByTrigger(INodeMap & nodeMap, CameraPtr pCam)$/;"	f
GrabNextImageByTrigger	Abhinay/Abhi_trigger/Trigger.cpp	/^int GrabNextImageByTrigger(INodeMap & nodeMap, CameraPtr pCam)$/;"	f
GrabNextImageByTrigger	SpinnakerTest/Abhi_test3/Abhi_test3.cpp	/^int GrabNextImageByTrigger(INodeMap & nodeMap, CameraPtr pCam)$/;"	f
GrabNextImageByTrigger	SpinnakerTest/Abhi_trigger/Trigger.cpp	/^int GrabNextImageByTrigger(INodeMap & nodeMap, CameraPtr pCam)$/;"	f
GrabNextImageByTrigger	SpinnakerTest/Trigger/Trigger.cpp	/^int GrabNextImageByTrigger(INodeMap & nodeMap, CameraPtr pCam)$/;"	f
GrabNextImageByTrigger	SpinnakerTest/Trigger_C/Trigger_C.cpp	/^spinError GrabNextImageByTrigger(spinNodeMapHandle hNodeMap, spinCamera hCam)$/;"	f
GrabNextImageByTrigger	SpinnakerTest/Trigger_C_QuickSpin/Trigger_C_QuickSpin.cpp	/^spinError GrabNextImageByTrigger(quickSpin qs)$/;"	f
GrabNextImageByTrigger	SpinnakerTest/Trigger_QuickSpin/Trigger_QuickSpin.cpp	/^int GrabNextImageByTrigger(CameraPtr pCam, ImagePtr & pResultImage)$/;"	f
GrabNextImageByTrigger	src/Abhi_hardware/Abhi_hardware.cpp	/^int GrabNextImageByTrigger(INodeMap & nodeMap, CameraPtr pCam)$/;"	f
GrabNextImageByTrigger	src/Abhi_test3/Abhi_test3.cpp	/^int GrabNextImageByTrigger(INodeMap & nodeMap, CameraPtr pCam)$/;"	f
GrabNextImageByTrigger	src/Abhi_trigger/Trigger.cpp	/^int GrabNextImageByTrigger(INodeMap & nodeMap, CameraPtr pCam)$/;"	f
GrabNextImageByTrigger	src/Trigger/Trigger.cpp	/^int GrabNextImageByTrigger(INodeMap & nodeMap, CameraPtr pCam)$/;"	f
GrabNextImageByTrigger	src/Trigger_C/Trigger_C.cpp	/^spinError GrabNextImageByTrigger(spinNodeMapHandle hNodeMap, spinCamera hCam)$/;"	f
GrabNextImageByTrigger	src/Trigger_C_QuickSpin/Trigger_C_QuickSpin.cpp	/^spinError GrabNextImageByTrigger(quickSpin qs)$/;"	f
GrabNextImageByTrigger	src/Trigger_QuickSpin/Trigger_QuickSpin.cpp	/^int GrabNextImageByTrigger(CameraPtr pCam, ImagePtr & pResultImage)$/;"	f
Guru	include/SpinGenApi/Types.h	/^			Guru = 2,                  \/\/!< Visible for Gurus$/;"	e	enum:Spinnaker::GenApi::_EVisibility
Guru	include/spinc/SpinnakerGenApiDefsC.h	/^	Guru = 2,$/;"	e	enum:_spinVisibility
H264	SpinnakerTest/SaveToAvi/SaveToAvi.cpp	/^	H264$/;"	e	enum:aviType	file:
H264	SpinnakerTest/SaveToAvi_C/SaveToAvi_C.cpp	/^	H264$/;"	e	enum:_fileType	file:
H264	src/SaveToAvi/SaveToAvi.cpp	/^	H264$/;"	e	enum:aviType	file:
H264	src/SaveToAvi_C/SaveToAvi_C.cpp	/^	H264$/;"	e	enum:_fileType	file:
H264Option	include/SpinnakerDefs.h	/^		H264Option()$/;"	f	struct:Spinnaker::H264Option
H264Option	include/SpinnakerDefs.h	/^	struct H264Option$/;"	s	namespace:Spinnaker
HARDWARE	Abhinay/Abhi_hardware/Abhi_hardware.cpp	/^	HARDWARE$/;"	e	enum:triggerType	file:
HARDWARE	Abhinay/Abhi_test3/Abhi_test3.cpp	/^	HARDWARE$/;"	e	enum:triggerType	file:
HARDWARE	Abhinay/Abhi_trigger/Trigger.cpp	/^	HARDWARE$/;"	e	enum:triggerType	file:
HARDWARE	SpinnakerTest/Abhi_test3/Abhi_test3.cpp	/^	HARDWARE$/;"	e	enum:triggerType	file:
HARDWARE	SpinnakerTest/Abhi_trigger/Trigger.cpp	/^	HARDWARE$/;"	e	enum:triggerType	file:
HARDWARE	SpinnakerTest/Trigger/Trigger.cpp	/^	HARDWARE$/;"	e	enum:triggerType	file:
HARDWARE	SpinnakerTest/Trigger_C/Trigger_C.cpp	/^	HARDWARE$/;"	e	enum:_triggerType	file:
HARDWARE	SpinnakerTest/Trigger_C_QuickSpin/Trigger_C_QuickSpin.cpp	/^	HARDWARE$/;"	e	enum:_triggerType	file:
HARDWARE	SpinnakerTest/Trigger_QuickSpin/Trigger_QuickSpin.cpp	/^	HARDWARE$/;"	e	enum:triggerType	file:
HARDWARE	src/Abhi_hardware/Abhi_hardware.cpp	/^	HARDWARE$/;"	e	enum:triggerType	file:
HARDWARE	src/Abhi_test3/Abhi_test3.cpp	/^	HARDWARE$/;"	e	enum:triggerType	file:
HARDWARE	src/Abhi_trigger/Trigger.cpp	/^	HARDWARE$/;"	e	enum:triggerType	file:
HARDWARE	src/Trigger/Trigger.cpp	/^	HARDWARE$/;"	e	enum:triggerType	file:
HARDWARE	src/Trigger_C/Trigger_C.cpp	/^	HARDWARE$/;"	e	enum:_triggerType	file:
HARDWARE	src/Trigger_C_QuickSpin/Trigger_C_QuickSpin.cpp	/^	HARDWARE$/;"	e	enum:_triggerType	file:
HARDWARE	src/Trigger_QuickSpin/Trigger_QuickSpin.cpp	/^	HARDWARE$/;"	e	enum:triggerType	file:
HQ_LINEAR	include/SpinnakerDefs.h	/^        HQ_LINEAR,$/;"	e	enum:Spinnaker::ColorProcessingAlgorithm
HQ_LINEAR	include/spinc/SpinnakerDefsC.h	/^	HQ_LINEAR,$/;"	e	enum:_spinColorProcessingAlgorithm
HUE	include/SpinnakerDefs.h	/^		HUE,$/;"	e	enum:Spinnaker::StatisticsChannel
HUE	include/spinc/SpinnakerDefsC.h	/^	HUE,$/;"	e	enum:_spinStatisticsChannel
Header	include/SpinGenApi/EventAdapterGEV.h	/^        GVCP_REQUEST_HEADER Header;$/;"	m	struct:Spinnaker::GenApi::GVCP_EVENTDATA_REQUEST
Header	include/SpinGenApi/EventAdapterGEV.h	/^        GVCP_REQUEST_HEADER Header;$/;"	m	struct:Spinnaker::GenApi::GVCP_EVENTDATA_REQUEST_EXTENDED_ID
Header	include/SpinGenApi/EventAdapterGEV.h	/^        GVCP_REQUEST_HEADER Header;$/;"	m	struct:Spinnaker::GenApi::GVCP_EVENT_REQUEST
Header	include/SpinGenApi/EventAdapterGEV.h	/^        GVCP_REQUEST_HEADER Header;$/;"	m	struct:Spinnaker::GenApi::GVCP_EVENT_REQUEST_EXTENDED_ID
Height	include/Camera.h	/^		GenApi::IInteger &Height;$/;"	m	class:Spinnaker::Camera
Height	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode Height;$/;"	m	struct:_quickSpin
HeightMax	include/Camera.h	/^		GenApi::IInteger &HeightMax;$/;"	m	class:Spinnaker::Camera
HeightMax	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode HeightMax;$/;"	m	struct:_quickSpin
HexNumber	include/SpinGenApi/Types.h	/^			HexNumber,                  \/\/!< Hex number in an edit control$/;"	e	enum:Spinnaker::GenApi::_ERepresentation
HexNumber	include/spinc/SpinnakerGenApiDefsC.h	/^	HexNumber,                  \/\/!< Hex number in an edit control$/;"	e	enum:_spinRepresentation
IBase	include/SpinGenApi/Reference.h	/^		interface IBase;$/;"	m	namespace:Spinnaker::GenApi
IDevFileStream	include/SpinGenApi/Filestream.h	/^		typedef IDevFileStreamBase<char, std::char_traits<char> > IDevFileStream;	$/;"	t	namespace:Spinnaker::GenApi
IDevFileStreamBase	include/SpinGenApi/Filestream.h	/^			IDevFileStreamBase()$/;"	f	class:Spinnaker::GenApi::IDevFileStreamBase
IDevFileStreamBase	include/SpinGenApi/Filestream.h	/^			IDevFileStreamBase(INodeMap * pInterface, const char * pFileName,$/;"	f	class:Spinnaker::GenApi::IDevFileStreamBase
IDevFileStreamBase	include/SpinGenApi/Filestream.h	/^			IDevFileStreamBase(Spinnaker::GenApi::INodeMap * pInterface, const char * pFileName,$/;"	f	class:Spinnaker::GenApi::IDevFileStreamBase
IDevFileStreamBase	include/SpinGenApi/Filestream.h	/^		template<typename CharType, typename Traits> class IDevFileStreamBase$/;"	c	namespace:Spinnaker::GenApi
IDevFileStreamBuf	include/SpinGenApi/Filestream.h	/^			IDevFileStreamBuf()$/;"	f	class:Spinnaker::GenApi::IDevFileStreamBuf
IDevFileStreamBuf	include/SpinGenApi/Filestream.h	/^			template<typename CharType, typename Traits> class IDevFileStreamBuf$/;"	c	namespace:Spinnaker::GenApi
IEnumeration	include/SpinGenApi/IEnumerationT.h	/^		interface SPINNAKER_API_ABSTRACT IEnumerationT : virtual public IEnumeration, virtual public IEnumReference$/;"	m	namespace:Spinnaker::GenApi
IIDC	include/SpinGenApi/Types.h	/^			IIDC,            \/\/!< name resides in 1394 IIDC namespace$/;"	e	enum:Spinnaker::GenApi::_EStandardNameSpace
IIDC	include/spinc/SpinnakerGenApiDefsC.h	/^	IIDC,            \/\/!< name resides in 1394 IIDC namespace$/;"	e	enum:_spinStandardNameSpace
IMAGE	SpinnakerTest/ChunkData/ChunkData.cpp	/^	IMAGE,$/;"	e	enum:chunkDataType	file:
IMAGE	SpinnakerTest/ChunkData_C/ChunkData_C.cpp	/^	IMAGE,$/;"	e	enum:_chunkDataType	file:
IMAGE	src/ChunkData/ChunkData.cpp	/^	IMAGE,$/;"	e	enum:chunkDataType	file:
IMAGE	src/ChunkData_C/ChunkData_C.cpp	/^	IMAGE,$/;"	e	enum:_chunkDataType	file:
IMAGE_CHUNK_DATA_INVALID	include/SpinnakerDefs.h	/^		IMAGE_CHUNK_DATA_INVALID, \/**< Image chunk data is invalid *\/$/;"	e	enum:Spinnaker::ImageStatus
IMAGE_CRC_CHECK_FAILED	include/SpinnakerDefs.h	/^		IMAGE_CRC_CHECK_FAILED, \/**< Image failed CRC check. *\/$/;"	e	enum:Spinnaker::ImageStatus
IMAGE_CRC_CHECK_FAILED	include/spinc/SpinnakerDefsC.h	/^	IMAGE_CRC_CHECK_FAILED,	 \/**< Image failed CRC check. *\/$/;"	e	enum:_spinImageStatus
IMAGE_DATA_INCOMPLETE	include/SpinnakerDefs.h	/^		IMAGE_DATA_INCOMPLETE, \/**< Image data is incomplete. *\/$/;"	e	enum:Spinnaker::ImageStatus
IMAGE_DATA_INCOMPLETE	include/spinc/SpinnakerDefsC.h	/^	IMAGE_DATA_INCOMPLETE,	 \/**< Image data is incomplete. *\/$/;"	e	enum:_spinImageStatus
IMAGE_DATA_OVERFLOW	include/SpinnakerDefs.h	/^		IMAGE_DATA_OVERFLOW, \/**< Received more data than the size of the image. *\/$/;"	e	enum:Spinnaker::ImageStatus
IMAGE_DATA_OVERFLOW	include/spinc/SpinnakerDefsC.h	/^	IMAGE_DATA_OVERFLOW,	 \/**< Received more data than the size of the image. *\/$/;"	e	enum:_spinImageStatus
IMAGE_FILE_FORMAT_FORCE_32BITS	include/SpinnakerDefs.h	/^		IMAGE_FILE_FORMAT_FORCE_32BITS = 0x7FFFFFFF$/;"	e	enum:Spinnaker::ImageFileFormat
IMAGE_FILE_FORMAT_FORCE_32BITS	include/spinc/SpinnakerDefsC.h	/^	IMAGE_FILE_FORMAT_FORCE_32BITS = 0x7FFFFFFF$/;"	e	enum:_spinImageFileFormat
IMAGE_INFO_INCONSISTENT	include/SpinnakerDefs.h	/^		IMAGE_INFO_INCONSISTENT, \/**< Image info is corrupted. *\/$/;"	e	enum:Spinnaker::ImageStatus
IMAGE_INFO_INCONSISTENT	include/spinc/SpinnakerDefsC.h	/^	IMAGE_INFO_INCONSISTENT,	 \/**< Image info is corrupted. *\/$/;"	e	enum:_spinImageStatus
IMAGE_LEADER_BUFFER_SIZE_INCONSISTENT	include/SpinnakerDefs.h	/^		IMAGE_LEADER_BUFFER_SIZE_INCONSISTENT, \/**< Image leader is incomplete. *\/$/;"	e	enum:Spinnaker::ImageStatus
IMAGE_LEADER_BUFFER_SIZE_INCONSISTENT	include/spinc/SpinnakerDefsC.h	/^	IMAGE_LEADER_BUFFER_SIZE_INCONSISTENT,	 \/**< Image leader is incomplete. *\/$/;"	e	enum:_spinImageStatus
IMAGE_MISSING_LEADER	include/SpinnakerDefs.h	/^		IMAGE_MISSING_LEADER, \/**< Image leader is missing. *\/$/;"	e	enum:Spinnaker::ImageStatus
IMAGE_MISSING_LEADER	include/spinc/SpinnakerDefsC.h	/^	IMAGE_MISSING_LEADER,			\/**< Image leader is missing. *\/$/;"	e	enum:_spinImageStatus
IMAGE_MISSING_PACKETS	include/SpinnakerDefs.h	/^		IMAGE_MISSING_PACKETS, \/**< Image has missing packets *\/$/;"	e	enum:Spinnaker::ImageStatus
IMAGE_MISSING_PACKETS	include/spinc/SpinnakerDefsC.h	/^	IMAGE_MISSING_PACKETS,	 \/**< Image has missing packets *\/$/;"	e	enum:_spinImageStatus
IMAGE_MISSING_TRAILER	include/SpinnakerDefs.h	/^		IMAGE_MISSING_TRAILER, \/**< Image trailer is missing. *\/$/;"	e	enum:Spinnaker::ImageStatus
IMAGE_MISSING_TRAILER	include/spinc/SpinnakerDefsC.h	/^	IMAGE_MISSING_TRAILER,			\/**< Image trailer is missing. *\/$/;"	e	enum:_spinImageStatus
IMAGE_NO_ERROR	include/SpinnakerDefs.h	/^		IMAGE_NO_ERROR = 0, \/**< Image is returned from GetNextImage() call without any errors. *\/$/;"	e	enum:Spinnaker::ImageStatus
IMAGE_NO_ERROR	include/spinc/SpinnakerDefsC.h	/^	IMAGE_NO_ERROR = 0,	 \/**< Image is returned from GetNextImage() call without any errors. *\/$/;"	e	enum:_spinImageStatus
IMAGE_PACKETID_INCONSISTENT	include/SpinnakerDefs.h	/^		IMAGE_PACKETID_INCONSISTENT, \/**< Image has an inconsistent packet id. *\/$/;"	e	enum:Spinnaker::ImageStatus
IMAGE_PACKETID_INCONSISTENT	include/spinc/SpinnakerDefsC.h	/^	IMAGE_PACKETID_INCONSISTENT,	 \/**< Image has an inconsistent packet id. *\/$/;"	e	enum:_spinImageStatus
IMAGE_TRAILER_BUFFER_SIZE_INCONSISTENT	include/SpinnakerDefs.h	/^		IMAGE_TRAILER_BUFFER_SIZE_INCONSISTENT, \/**< Image trailer is incomplete. *\/$/;"	e	enum:Spinnaker::ImageStatus
IMAGE_TRAILER_BUFFER_SIZE_INCONSISTENT	include/spinc/SpinnakerDefsC.h	/^	IMAGE_TRAILER_BUFFER_SIZE_INCONSISTENT,	 \/**< Image trailer is incomplete. *\/$/;"	e	enum:_spinImageStatus
IMAGE_UNKNOWN_ERROR	include/SpinnakerDefs.h	/^		IMAGE_UNKNOWN_ERROR \/**< Image has an unknown error. *\/$/;"	e	enum:Spinnaker::ImageStatus
IMAGE_UNKNOWN_ERROR	include/spinc/SpinnakerDefsC.h	/^	IMAGE_UNKNOWN_ERROR	 \/**< Image has an unknown error. *\/$/;"	e	enum:_spinImageStatus
INC	Abhinay/Abhi_hardware/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	Abhinay/Abhi_test1/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	Abhinay/Abhi_test2/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	Abhinay/Abhi_test3/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	Abhinay/Abhi_test4/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	Abhinay/Abhi_trigger/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	SpinnakerTest/Abhi_test1/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	SpinnakerTest/Abhi_test2/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	SpinnakerTest/Abhi_test3/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	SpinnakerTest/Abhi_test4/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	SpinnakerTest/Abhi_trigger/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	SpinnakerTest/Acquisition/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	SpinnakerTest/AcquisitionMultipleCamera/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	SpinnakerTest/AcquisitionMultipleCamera_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	SpinnakerTest/Acquisition_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	SpinnakerTest/ChunkData/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	SpinnakerTest/ChunkData_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	SpinnakerTest/DeviceEvents/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	SpinnakerTest/DeviceEvents_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	SpinnakerTest/Enumeration/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	SpinnakerTest/EnumerationEvents/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	SpinnakerTest/EnumerationEvents_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	SpinnakerTest/Enumeration_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	SpinnakerTest/Enumeration_C_QuickSpin/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	SpinnakerTest/Enumeration_QuickSpin/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	SpinnakerTest/Exposure/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	SpinnakerTest/Exposure_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	SpinnakerTest/Exposure_C_QuickSpin/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	SpinnakerTest/Exposure_QuickSpin/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	SpinnakerTest/ImageEvents/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	SpinnakerTest/ImageEvents_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	SpinnakerTest/ImageFormatControl/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	SpinnakerTest/ImageFormatControl_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	SpinnakerTest/ImageFormatControl_C_QuickSpin/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	SpinnakerTest/ImageFormatControl_QuickSpin/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	SpinnakerTest/Logging/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	SpinnakerTest/Logging_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	SpinnakerTest/LookupTable/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	SpinnakerTest/LookupTable_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	SpinnakerTest/NodeMapCallback/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	SpinnakerTest/NodeMapCallback_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	SpinnakerTest/NodeMapInfo/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	SpinnakerTest/NodeMapInfo_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	SpinnakerTest/NodeMapInfo_C_QuickSpin/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	SpinnakerTest/NodeMapInfo_QuickSpin/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	SpinnakerTest/SaveToAvi/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	SpinnakerTest/SaveToAvi_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	SpinnakerTest/Sequencer/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	SpinnakerTest/Sequencer_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	SpinnakerTest/Trigger/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	SpinnakerTest/Trigger_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	SpinnakerTest/Trigger_C_QuickSpin/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	SpinnakerTest/Trigger_QuickSpin/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	src/Abhi_hardware/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	src/Abhi_test1/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	src/Abhi_test2/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	src/Abhi_test3/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	src/Abhi_test4/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	src/Abhi_trigger/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	src/Acquisition/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	src/AcquisitionMultipleCamera/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	src/AcquisitionMultipleCamera_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	src/Acquisition_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	src/ChunkData/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	src/ChunkData_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	src/DeviceEvents/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	src/DeviceEvents_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	src/Enumeration/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	src/EnumerationEvents/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	src/EnumerationEvents_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	src/Enumeration_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	src/Enumeration_C_QuickSpin/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	src/Enumeration_QuickSpin/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	src/Exposure/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	src/Exposure_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	src/Exposure_C_QuickSpin/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	src/Exposure_QuickSpin/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	src/ImageEvents/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	src/ImageEvents_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	src/ImageFormatControl/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	src/ImageFormatControl_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	src/ImageFormatControl_C_QuickSpin/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	src/ImageFormatControl_QuickSpin/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	src/Logging/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	src/Logging_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	src/LookupTable/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	src/LookupTable_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	src/NodeMapCallback/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	src/NodeMapCallback_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	src/NodeMapInfo/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	src/NodeMapInfo_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	src/NodeMapInfo_C_QuickSpin/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	src/NodeMapInfo_QuickSpin/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	src/SaveToAvi/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	src/SaveToAvi_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	src/Sequencer/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	src/Sequencer_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	src/Trigger/Makefile	/^INC = -I..\/..\/include$/;"	m
INC	src/Trigger_C/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	src/Trigger_C_QuickSpin/Makefile	/^INC = -I..\/..\/include\/spinc$/;"	m
INC	src/Trigger_QuickSpin/Makefile	/^INC = -I..\/..\/include$/;"	m
INDIVIDUAL	SpinnakerTest/NodeMapInfo/NodeMapInfo.cpp	/^	INDIVIDUAL$/;"	e	enum:readType	file:
INDIVIDUAL	SpinnakerTest/NodeMapInfo_C/NodeMapInfo_C.cpp	/^	INDIVIDUAL$/;"	e	enum:_readType	file:
INDIVIDUAL	src/NodeMapInfo/NodeMapInfo.cpp	/^	INDIVIDUAL$/;"	e	enum:readType	file:
INDIVIDUAL	src/NodeMapInfo_C/NodeMapInfo_C.cpp	/^	INDIVIDUAL$/;"	e	enum:_readType	file:
INode	include/SpinGenApi/ICategory.h	/^		interface INode;$/;"	m	namespace:Spinnaker::GenApi
INode	include/SpinGenApi/INode.h	/^		interface INode;$/;"	m	namespace:Spinnaker::GenApi
INode	include/SpinGenApi/IValue.h	/^		interface INode;$/;"	m	namespace:Spinnaker::GenApi
INodeMap	include/SpinGenApi/INode.h	/^		interface INodeMap;$/;"	m	namespace:Spinnaker::GenApi
INodeMap	include/SpinGenApi/Node.h	/^		interface INodeMap;$/;"	m	namespace:Spinnaker::GenApi
IPP	include/SpinnakerDefs.h	/^        IPP,$/;"	e	enum:Spinnaker::ColorProcessingAlgorithm
IPP	include/spinc/SpinnakerDefsC.h	/^	IPP,$/;"	e	enum:_spinColorProcessingAlgorithm
IPV4Address	include/SpinGenApi/Types.h	/^			IPV4Address,                \/\/!< IP-Address$/;"	e	enum:Spinnaker::GenApi::_ERepresentation
IPV4Address	include/spinc/SpinnakerGenApiDefsC.h	/^	IPV4Address,                \/\/!< IP-Address$/;"	e	enum:_spinRepresentation
ISelector	include/SpinGenApi/INode.h	/^		interface SPINNAKER_API_ABSTRACT INode : virtual public ISelector, virtual public IReference$/;"	m	namespace:Spinnaker::GenApi
Image	include/Image.h	/^	class SPINNAKER_API Image$/;"	c	namespace:Spinnaker
ImageComponentEnable	include/Camera.h	/^		GenApi::IBoolean &ImageComponentEnable;$/;"	m	class:Spinnaker::Camera
ImageComponentEnable	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode ImageComponentEnable;$/;"	m	struct:_quickSpin
ImageComponentSelector	include/Camera.h	/^		GenApi::IEnumerationT<ImageComponentSelectorEnums> &ImageComponentSelector;$/;"	m	class:Spinnaker::Camera
ImageComponentSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ImageComponentSelector;$/;"	m	struct:_quickSpin
ImageComponentSelectorEnums	include/CameraDefs.h	/^	enum ImageComponentSelectorEnums	\/*!< Selects a component to activate data streaming from.*\/$/;"	g	namespace:Spinnaker
ImageComponentSelector_Color	include/CameraDefs.h	/^		ImageComponentSelector_Color,	\/*!< The acquisition of color of the reflected light is controlled*\/$/;"	e	enum:Spinnaker::ImageComponentSelectorEnums
ImageComponentSelector_Color	include/spinc/CameraDefsC.h	/^	ImageComponentSelector_Color,	\/*!< The acquisition of color of the reflected light is controlled*\/$/;"	e	enum:_spinImageComponentSelectorEnums
ImageComponentSelector_Confidence	include/CameraDefs.h	/^		ImageComponentSelector_Confidence,	\/*!< The acquisition of confidence map of the acquired image is controlled. Confidence data may be binary (0 - invalid) or an integer where 0 is invalid and increasing value is increased confidence in the data in the corresponding pixel. If floating point representation is used the confidence image is normalized to the range [0,1], for integer representation the maximum possible integer represents maximum confidence.*\/$/;"	e	enum:Spinnaker::ImageComponentSelectorEnums
ImageComponentSelector_Confidence	include/spinc/CameraDefsC.h	/^	ImageComponentSelector_Confidence,	\/*!< The acquisition of confidence map of the acquired image is controlled. Confidence data may be binary (0 - invalid) or an integer where 0 is invalid and increasing value is increased confidence in the data in the corresponding pixel. If floating point representation is used the confidence image is normalized to the range [0,1], for integer representation the maximum possible integer represents maximum confidence.*\/$/;"	e	enum:_spinImageComponentSelectorEnums
ImageComponentSelector_Disparity	include/CameraDefs.h	/^		ImageComponentSelector_Disparity,	\/*!< The acquisition of stereo camera disparity data is controlled. Disparity is a more specific range format approximately inversely proportional to distance. Disparity is typically given in pixel units.*\/$/;"	e	enum:Spinnaker::ImageComponentSelectorEnums
ImageComponentSelector_Disparity	include/spinc/CameraDefsC.h	/^	ImageComponentSelector_Disparity,	\/*!< The acquisition of stereo camera disparity data is controlled. Disparity is a more specific range format approximately inversely proportional to distance. Disparity is typically given in pixel units.*\/$/;"	e	enum:_spinImageComponentSelectorEnums
ImageComponentSelector_Infrared	include/CameraDefs.h	/^		ImageComponentSelector_Infrared,	\/*!< The acquisition of non-visible infrared light is controlled.*\/$/;"	e	enum:Spinnaker::ImageComponentSelectorEnums
ImageComponentSelector_Infrared	include/spinc/CameraDefsC.h	/^	ImageComponentSelector_Infrared,	\/*!< The acquisition of non-visible infrared light is controlled.*\/$/;"	e	enum:_spinImageComponentSelectorEnums
ImageComponentSelector_Intensity	include/CameraDefs.h	/^		ImageComponentSelector_Intensity,	\/*!< The acquisition of intensity of the reflected light is controlled.*\/$/;"	e	enum:Spinnaker::ImageComponentSelectorEnums
ImageComponentSelector_Intensity	include/spinc/CameraDefsC.h	/^	ImageComponentSelector_Intensity,	\/*!< The acquisition of intensity of the reflected light is controlled.*\/$/;"	e	enum:_spinImageComponentSelectorEnums
ImageComponentSelector_Range	include/CameraDefs.h	/^		ImageComponentSelector_Range,	\/*!< The acquisition of range (distance) data is controlled. The data produced may be only range (2.5D) or a point cloud 3D coordinates depending on the Scan3dControl.*\/$/;"	e	enum:Spinnaker::ImageComponentSelectorEnums
ImageComponentSelector_Range	include/spinc/CameraDefsC.h	/^	ImageComponentSelector_Range,	\/*!< The acquisition of range (distance) data is controlled. The data produced may be only range (2.5D) or a point cloud 3D coordinates depending on the Scan3dControl.*\/$/;"	e	enum:_spinImageComponentSelectorEnums
ImageComponentSelector_Scatter	include/CameraDefs.h	/^		ImageComponentSelector_Scatter,	\/*!< The acquisition of data measuring how much light is scattered around the reflected light. In processing this is used as an additional intensity image, often together with the standard intensity.*\/$/;"	e	enum:Spinnaker::ImageComponentSelectorEnums
ImageComponentSelector_Scatter	include/spinc/CameraDefsC.h	/^	ImageComponentSelector_Scatter,	\/*!< The acquisition of data measuring how much light is scattered around the reflected light. In processing this is used as an additional intensity image, often together with the standard intensity.*\/$/;"	e	enum:_spinImageComponentSelectorEnums
ImageComponentSelector_Ultraviolet	include/CameraDefs.h	/^		ImageComponentSelector_Ultraviolet,	\/*!< The acquisition of non-visible ultraviolet light is controlled.*\/$/;"	e	enum:Spinnaker::ImageComponentSelectorEnums
ImageComponentSelector_Ultraviolet	include/spinc/CameraDefsC.h	/^	ImageComponentSelector_Ultraviolet,	\/*!< The acquisition of non-visible ultraviolet light is controlled.*\/$/;"	e	enum:_spinImageComponentSelectorEnums
ImageCompressionBitrate	include/Camera.h	/^		GenApi::IFloat &ImageCompressionBitrate;$/;"	m	class:Spinnaker::Camera
ImageCompressionBitrate	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode ImageCompressionBitrate;$/;"	m	struct:_quickSpin
ImageCompressionJPEGFormatOption	include/Camera.h	/^		GenApi::IEnumerationT<ImageCompressionJPEGFormatOptionEnums> &ImageCompressionJPEGFormatOption;$/;"	m	class:Spinnaker::Camera
ImageCompressionJPEGFormatOption	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ImageCompressionJPEGFormatOption;$/;"	m	struct:_quickSpin
ImageCompressionJPEGFormatOptionEnums	include/CameraDefs.h	/^	enum ImageCompressionJPEGFormatOptionEnums	\/*!< When JPEG is selected as the compression format, a device might optionally offer better control over JPEG-specific options through this feature.*\/$/;"	g	namespace:Spinnaker
ImageCompressionJPEGFormatOption_BaselineOptimized	include/CameraDefs.h	/^		ImageCompressionJPEGFormatOption_BaselineOptimized,	\/*!< Provides optimized color and slightly better compression than baseline standard by using custom Huffman tables optimized after statistical analysis of the image content.*\/$/;"	e	enum:Spinnaker::ImageCompressionJPEGFormatOptionEnums
ImageCompressionJPEGFormatOption_BaselineOptimized	include/spinc/CameraDefsC.h	/^	ImageCompressionJPEGFormatOption_BaselineOptimized,	\/*!< Provides optimized color and slightly better compression than baseline standard by using custom Huffman tables optimized after statistical analysis of the image content.*\/$/;"	e	enum:_spinImageCompressionJPEGFormatOptionEnums
ImageCompressionJPEGFormatOption_BaselineStandard	include/CameraDefs.h	/^		ImageCompressionJPEGFormatOption_BaselineStandard,	\/*!< Indicates this is a baseline sequential (single-scan) DCT-based JPEG.*\/$/;"	e	enum:Spinnaker::ImageCompressionJPEGFormatOptionEnums
ImageCompressionJPEGFormatOption_BaselineStandard	include/spinc/CameraDefsC.h	/^	ImageCompressionJPEGFormatOption_BaselineStandard,	\/*!< Indicates this is a baseline sequential (single-scan) DCT-based JPEG.*\/$/;"	e	enum:_spinImageCompressionJPEGFormatOptionEnums
ImageCompressionJPEGFormatOption_Lossless	include/CameraDefs.h	/^		ImageCompressionJPEGFormatOption_Lossless,	\/*!< Selects lossless JPEG compression based on a predictive coding model.*\/$/;"	e	enum:Spinnaker::ImageCompressionJPEGFormatOptionEnums
ImageCompressionJPEGFormatOption_Lossless	include/spinc/CameraDefsC.h	/^	ImageCompressionJPEGFormatOption_Lossless,	\/*!< Selects lossless JPEG compression based on a predictive coding model.*\/$/;"	e	enum:_spinImageCompressionJPEGFormatOptionEnums
ImageCompressionJPEGFormatOption_Progressive	include/CameraDefs.h	/^		ImageCompressionJPEGFormatOption_Progressive,	\/*!< Indicates this is a progressive (multi-scan) DCT-based JPEG.*\/$/;"	e	enum:Spinnaker::ImageCompressionJPEGFormatOptionEnums
ImageCompressionJPEGFormatOption_Progressive	include/spinc/CameraDefsC.h	/^	ImageCompressionJPEGFormatOption_Progressive,	\/*!< Indicates this is a progressive (multi-scan) DCT-based JPEG.*\/$/;"	e	enum:_spinImageCompressionJPEGFormatOptionEnums
ImageCompressionMode	include/Camera.h	/^		GenApi::IEnumerationT<ImageCompressionModeEnums> &ImageCompressionMode;$/;"	m	class:Spinnaker::Camera
ImageCompressionMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ImageCompressionMode;$/;"	m	struct:_quickSpin
ImageCompressionModeEnums	include/CameraDefs.h	/^	enum ImageCompressionModeEnums	\/*!< Enable a specific image compression mode as the base mode for image transfer. Optionally, chunk data can be appended to the compressed image (See chunk section).*\/$/;"	g	namespace:Spinnaker
ImageCompressionMode_H264	include/CameraDefs.h	/^		ImageCompressionMode_H264,	\/*!< H.264 compression is selected.*\/$/;"	e	enum:Spinnaker::ImageCompressionModeEnums
ImageCompressionMode_H264	include/spinc/CameraDefsC.h	/^	ImageCompressionMode_H264,	\/*!< H.264 compression is selected.*\/$/;"	e	enum:_spinImageCompressionModeEnums
ImageCompressionMode_JPEG	include/CameraDefs.h	/^		ImageCompressionMode_JPEG,	\/*!< JPEG compression is selected.*\/$/;"	e	enum:Spinnaker::ImageCompressionModeEnums
ImageCompressionMode_JPEG	include/spinc/CameraDefsC.h	/^	ImageCompressionMode_JPEG,	\/*!< JPEG compression is selected.*\/$/;"	e	enum:_spinImageCompressionModeEnums
ImageCompressionMode_JPEG2000	include/CameraDefs.h	/^		ImageCompressionMode_JPEG2000,	\/*!< JPEG 2000 compression is selected.*\/$/;"	e	enum:Spinnaker::ImageCompressionModeEnums
ImageCompressionMode_JPEG2000	include/spinc/CameraDefsC.h	/^	ImageCompressionMode_JPEG2000,	\/*!< JPEG 2000 compression is selected.*\/$/;"	e	enum:_spinImageCompressionModeEnums
ImageCompressionMode_Off	include/CameraDefs.h	/^		ImageCompressionMode_Off,	\/*!< Default value. Image compression is disabled. Images are transmitted uncompressed.*\/$/;"	e	enum:Spinnaker::ImageCompressionModeEnums
ImageCompressionMode_Off	include/spinc/CameraDefsC.h	/^	ImageCompressionMode_Off,	\/*!< Default value. Image compression is disabled. Images are transmitted uncompressed.*\/$/;"	e	enum:_spinImageCompressionModeEnums
ImageCompressionQuality	include/Camera.h	/^		GenApi::IInteger &ImageCompressionQuality;$/;"	m	class:Spinnaker::Camera
ImageCompressionQuality	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode ImageCompressionQuality;$/;"	m	struct:_quickSpin
ImageCompressionRateOption	include/Camera.h	/^		GenApi::IEnumerationT<ImageCompressionRateOptionEnums> &ImageCompressionRateOption;$/;"	m	class:Spinnaker::Camera
ImageCompressionRateOption	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode ImageCompressionRateOption;$/;"	m	struct:_quickSpin
ImageCompressionRateOptionEnums	include/CameraDefs.h	/^	enum ImageCompressionRateOptionEnums	\/*!< Two rate controlling options are offered: fixed bit rate or fixed quality. The exact implementation to achieve one or the other is vendor-specific.*\/$/;"	g	namespace:Spinnaker
ImageCompressionRateOption_FixBitrate	include/CameraDefs.h	/^		ImageCompressionRateOption_FixBitrate,	\/*!< Output stream follows a constant bit rate. Allows easy bandwidth management on the link.*\/$/;"	e	enum:Spinnaker::ImageCompressionRateOptionEnums
ImageCompressionRateOption_FixBitrate	include/spinc/CameraDefsC.h	/^	ImageCompressionRateOption_FixBitrate,	\/*!< Output stream follows a constant bit rate. Allows easy bandwidth management on the link.*\/$/;"	e	enum:_spinImageCompressionRateOptionEnums
ImageCompressionRateOption_FixQuality	include/CameraDefs.h	/^		ImageCompressionRateOption_FixQuality,	\/*!< Output stream has a constant image quality. Can be used when image processing algorithms are sensitive to image degradation caused by excessive data compression.*\/$/;"	e	enum:Spinnaker::ImageCompressionRateOptionEnums
ImageCompressionRateOption_FixQuality	include/spinc/CameraDefsC.h	/^	ImageCompressionRateOption_FixQuality,	\/*!< Output stream has a constant image quality. Can be used when image processing algorithms are sensitive to image degradation caused by excessive data compression.*\/$/;"	e	enum:_spinImageCompressionRateOptionEnums
ImageDrawingWindow	include/GUI/SpinnakerGUI_WPF.h	/^		class SPINNAKER_API ImageDrawingWindow$/;"	c	namespace:Spinnaker::GUI_WPF
ImageEvent	include/ImageEvent.h	/^	class SPINNAKER_API ImageEvent : public virtual Event$/;"	c	namespace:Spinnaker
ImageEventHandler	SpinnakerTest/ImageEvents/ImageEvents.cpp	/^	ImageEventHandler(CameraPtr pCam) $/;"	f	class:ImageEventHandler
ImageEventHandler	SpinnakerTest/ImageEvents/ImageEvents.cpp	/^class ImageEventHandler : public ImageEvent$/;"	c	file:
ImageEventHandler	src/ImageEvents/ImageEvents.cpp	/^	ImageEventHandler(CameraPtr pCam) $/;"	f	class:ImageEventHandler
ImageEventHandler	src/ImageEvents/ImageEvents.cpp	/^class ImageEventHandler : public ImageEvent$/;"	c	file:
ImageFileFormat	include/SpinnakerDefs.h	/^	enum ImageFileFormat$/;"	g	namespace:Spinnaker
ImagePtr	include/ImagePtr.h	/^	class SPINNAKER_API ImagePtr : public BasePtr<Image>$/;"	c	namespace:Spinnaker
ImageStatistics	include/ImageStatistics.h	/^    class  SPINNAKER_API ImageStatistics$/;"	c	namespace:Spinnaker
ImageStatus	include/SpinnakerDefs.h	/^	enum ImageStatus$/;"	g	namespace:Spinnaker
IncompatibleDeviceCount	include/TransportLayerInterface.h	/^		GenApi::IInteger &IncompatibleDeviceCount;$/;"	m	class:Spinnaker::TransportLayerInterface
IncompatibleDeviceCount	include/spinc/TransportLayerInterfaceC.h	/^	quickSpinIntegerNode IncompatibleDeviceCount;$/;"	m	struct:_quickSpinTLInterface
IncompatibleDeviceID	include/TransportLayerInterface.h	/^		GenApi::IString &IncompatibleDeviceID;$/;"	m	class:Spinnaker::TransportLayerInterface
IncompatibleDeviceID	include/spinc/TransportLayerInterfaceC.h	/^	quickSpinStringNode IncompatibleDeviceID;$/;"	m	struct:_quickSpinTLInterface
IncompatibleDeviceModelName	include/TransportLayerInterface.h	/^		GenApi::IString &IncompatibleDeviceModelName;$/;"	m	class:Spinnaker::TransportLayerInterface
IncompatibleDeviceModelName	include/spinc/TransportLayerInterfaceC.h	/^	quickSpinStringNode IncompatibleDeviceModelName;$/;"	m	struct:_quickSpinTLInterface
IncompatibleDeviceSelector	include/TransportLayerInterface.h	/^		GenApi::IInteger &IncompatibleDeviceSelector;$/;"	m	class:Spinnaker::TransportLayerInterface
IncompatibleDeviceSelector	include/spinc/TransportLayerInterfaceC.h	/^	quickSpinIntegerNode IncompatibleDeviceSelector;$/;"	m	struct:_quickSpinTLInterface
IncompatibleDeviceVendorName	include/TransportLayerInterface.h	/^		GenApi::IString &IncompatibleDeviceVendorName;$/;"	m	class:Spinnaker::TransportLayerInterface
IncompatibleDeviceVendorName	include/spinc/TransportLayerInterfaceC.h	/^	quickSpinStringNode IncompatibleDeviceVendorName;$/;"	m	struct:_quickSpinTLInterface
Increasing	include/SpinGenApi/Types.h	/^			Increasing,      \/\/!> strictly monotonous increasing$/;"	e	enum:Spinnaker::GenApi::_ESlope
Increasing	include/spinc/SpinnakerGenApiDefsC.h	/^	Increasing,      \/\/!> strictly monotonous increasing$/;"	e	enum:_spinSlope
IntRegNode	include/SpinGenApi/IntRegNode.h	/^		class SPINNAKER_API IntRegNode : virtual public IntegerNode, virtual public RegisterNode$/;"	c	namespace:Spinnaker::GenApi
IntegerNode	include/SpinGenApi/IntegerNode.h	/^		class SPINNAKER_API IntegerNode : virtual public IInteger, virtual public ValueNode$/;"	c	namespace:Spinnaker::GenApi
IntegerNode	include/spinc/SpinnakerGenApiDefsC.h	/^	IntegerNode,$/;"	e	enum:_spinNodeType
Interface	include/Interface.h	/^	class SPINNAKER_API Interface$/;"	c	namespace:Spinnaker
InterfaceDisplayName	include/TransportLayerInterface.h	/^		GenApi::IString &InterfaceDisplayName;$/;"	m	class:Spinnaker::TransportLayerInterface
InterfaceDisplayName	include/spinc/TransportLayerInterfaceC.h	/^	quickSpinStringNode InterfaceDisplayName;$/;"	m	struct:_quickSpinTLInterface
InterfaceEvent	include/InterfaceEvent.h	/^	class SPINNAKER_API InterfaceEvent : public virtual ArrivalEvent, public virtual RemovalEvent$/;"	c	namespace:Spinnaker
InterfaceEventHandler	SpinnakerTest/EnumerationEvents/EnumerationEvents.cpp	/^	InterfaceEventHandler(InterfacePtr iface, unsigned int interfaceNum) : m_interface(iface), m_interfaceNum(interfaceNum) {};$/;"	f	class:InterfaceEventHandler
InterfaceEventHandler	SpinnakerTest/EnumerationEvents/EnumerationEvents.cpp	/^class InterfaceEventHandler : public InterfaceEvent$/;"	c	file:
InterfaceEventHandler	src/EnumerationEvents/EnumerationEvents.cpp	/^	InterfaceEventHandler(InterfacePtr iface, unsigned int interfaceNum) : m_interface(iface), m_interfaceNum(interfaceNum) {};$/;"	f	class:InterfaceEventHandler
InterfaceEventHandler	src/EnumerationEvents/EnumerationEvents.cpp	/^class InterfaceEventHandler : public InterfaceEvent$/;"	c	file:
InterfaceID	include/TransportLayerInterface.h	/^		GenApi::IString &InterfaceID;$/;"	m	class:Spinnaker::TransportLayerInterface
InterfaceID	include/spinc/TransportLayerInterfaceC.h	/^	quickSpinStringNode InterfaceID;$/;"	m	struct:_quickSpinTLInterface
InterfaceList	include/InterfaceList.h	/^	class SPINNAKER_API InterfaceList$/;"	c	namespace:Spinnaker
InterfacePtr	include/InterfacePtr.h	/^		InterfacePtr() throw()$/;"	f	class:Spinnaker::InterfacePtr
InterfacePtr	include/InterfacePtr.h	/^		InterfacePtr(const int \/*nMustBeNull*\/) throw()$/;"	f	class:Spinnaker::InterfacePtr
InterfacePtr	include/InterfacePtr.h	/^	class SPINNAKER_API InterfacePtr : public BasePtr<Interface>$/;"	c	namespace:Spinnaker
InterfaceType	include/TransportLayerInterface.h	/^		GenApi::IString &InterfaceType;$/;"	m	class:Spinnaker::TransportLayerInterface
InterfaceType	include/spinc/TransportLayerInterfaceC.h	/^	quickSpinStringNode InterfaceType;$/;"	m	struct:_quickSpinTLInterface
InvalidateNode	include/SpinGenApi/PortImpl.h	/^			void InvalidateNode()$/;"	f	class:Spinnaker::GenApi::CPortImpl
InverseChunkLength	include/SpinGenApi/ChunkAdapterDcam.h	/^			uint32_t InverseChunkLength;$/;"	m	struct:Spinnaker::GenApi::DCAM_CHUNK_TRAILER
Invisible	include/SpinGenApi/Types.h	/^			Invisible = 3,             \/\/!< Not Visible$/;"	e	enum:Spinnaker::GenApi::_EVisibility
Invisible	include/spinc/SpinnakerGenApiDefsC.h	/^	Invisible = 3,$/;"	e	enum:_spinVisibility
IsAvailable	include/SpinGenApi/INode.h	/^		inline bool IsAvailable(EAccessMode AccessMode)$/;"	f	namespace:Spinnaker::GenApi
IsAvailable	include/SpinGenApi/INode.h	/^		inline bool IsAvailable(const IBase& r)$/;"	f	namespace:Spinnaker::GenApi
IsAvailable	include/SpinGenApi/INode.h	/^		inline bool IsAvailable(const IBase* p)$/;"	f	namespace:Spinnaker::GenApi
IsAvailable	include/SpinGenApi/Pointer.h	/^		inline bool IsAvailable(const Spinnaker::GenApi::CPointer<T, B>& ptr)$/;"	f	namespace:Spinnaker::GenApi
IsCacheable	include/SpinGenApi/INode.h	/^		inline bool IsCacheable(ECachingMode CachingMode)$/;"	f	namespace:Spinnaker::GenApi
IsConnected	include/GUI/SpinnakerGUI.h	/^				bool IsConnected(){return m_bisConnected;}$/;"	f	class:Spinnaker::GUI::GUIFactory
IsConnected	include/GUI/SpinnakerGUI_GTKmm.h	/^				bool IsConnected(){return m_bisConnected;}$/;"	f	class:Spinnaker::GUI_GTKmm::GUIFactory
IsConnected	include/GUI/Viewer.h	/^			bool IsConnected(){return m_bIsConnected;};$/;"	f	class:Spinnaker::GUI_GTKmm::Viewer
IsConnected	include/GUI/ViewerWidget.h	/^			bool IsConnected(){return m_bIsConnected;};$/;"	f	class:Spinnaker::GUI_GTKmm::ViewerWidget
IsImplemented	include/SpinGenApi/INode.h	/^		inline bool IsImplemented(EAccessMode AccessMode)$/;"	f	namespace:Spinnaker::GenApi
IsImplemented	include/SpinGenApi/INode.h	/^		inline bool IsImplemented(const IBase& r)$/;"	f	namespace:Spinnaker::GenApi
IsImplemented	include/SpinGenApi/INode.h	/^		inline bool IsImplemented(const IBase* p)$/;"	f	namespace:Spinnaker::GenApi
IsImplemented	include/SpinGenApi/Pointer.h	/^		inline bool IsImplemented(const Spinnaker::GenApi::CPointer<T, B>& ptr)$/;"	f	namespace:Spinnaker::GenApi
IsReadable	include/SpinGenApi/INode.h	/^		inline bool IsReadable(EAccessMode AccessMode)$/;"	f	namespace:Spinnaker::GenApi
IsReadable	include/SpinGenApi/INode.h	/^		inline bool IsReadable(const IBase& r)$/;"	f	namespace:Spinnaker::GenApi
IsReadable	include/SpinGenApi/INode.h	/^		inline bool IsReadable(const IBase* p)$/;"	f	namespace:Spinnaker::GenApi
IsReadable	include/SpinGenApi/Pointer.h	/^		inline bool IsReadable(const Spinnaker::GenApi::CPointer<T, B>& ptr)$/;"	f	namespace:Spinnaker::GenApi
IsValid	include/SpinGenApi/Pointer.h	/^        bool IsValid() const throw()$/;"	f	class:Spinnaker::GenApi::CPointer
IsVisible	include/SpinGenApi/INode.h	/^		inline bool IsVisible(EVisibility Visibility, EVisibility MaxVisiblity)$/;"	f	namespace:Spinnaker::GenApi
IsWritable	include/SpinGenApi/INode.h	/^		inline bool IsWritable(EAccessMode AccessMode)$/;"	f	namespace:Spinnaker::GenApi
IsWritable	include/SpinGenApi/INode.h	/^		inline bool IsWritable(const IBase& r)$/;"	f	namespace:Spinnaker::GenApi
IsWritable	include/SpinGenApi/INode.h	/^		inline bool IsWritable(const IBase* p)$/;"	f	namespace:Spinnaker::GenApi
IsWritable	include/SpinGenApi/Pointer.h	/^		inline bool IsWritable(const Spinnaker::GenApi::CPointer<T, B>& ptr)$/;"	f	namespace:Spinnaker::GenApi
IsZero	include/SpinGenApi/Counter.h	/^			bool IsZero()$/;"	f	class:Spinnaker::GenApi::Counter
Items	include/SpinGenApi/EventAdapterGEV.h	/^        GVCP_EVENT_ITEM Items[ 1 ];$/;"	m	struct:Spinnaker::GenApi::GVCP_EVENT_REQUEST
Items	include/SpinGenApi/EventAdapterGEV.h	/^        GVCP_EVENT_ITEM_EXTENDED_ID Items[ 1 ];$/;"	m	struct:Spinnaker::GenApi::GVCP_EVENT_REQUEST_EXTENDED_ID
JPEG	include/SpinnakerDefs.h	/^		JPEG, \/**< JPEG. *\/$/;"	e	enum:Spinnaker::ImageFileFormat
JPEG	include/SpinnakerDefs.h	/^            JPEG$/;"	e	enum:Spinnaker::TIFFOption::CompressionMethod
JPEG	include/spinc/SpinnakerDefsC.h	/^	JPEG, \/**< JPEG. *\/$/;"	e	enum:_spinImageFileFormat
JPEG2000	include/SpinnakerDefs.h	/^		JPEG2000, \/**< JPEG 2000. *\/$/;"	e	enum:Spinnaker::ImageFileFormat
JPEG2000	include/spinc/SpinnakerDefsC.h	/^	JPEG2000, \/**< JPEG 2000. *\/$/;"	e	enum:_spinImageFileFormat
JPEGOption	include/SpinnakerDefs.h	/^        JPEGOption()$/;"	f	struct:Spinnaker::JPEGOption
JPEGOption	include/SpinnakerDefs.h	/^    struct JPEGOption$/;"	s	namespace:Spinnaker
JPG	include/spinc/SpinnakerDefsC.h	/^	JPG$/;"	e	enum:CompressionMethod
JPG2Option	include/SpinnakerDefs.h	/^        JPG2Option()$/;"	f	struct:Spinnaker::JPG2Option
JPG2Option	include/SpinnakerDefs.h	/^    struct JPG2Option$/;"	s	namespace:Spinnaker
LIGHTNESS	include/SpinnakerDefs.h	/^		LIGHTNESS,$/;"	e	enum:Spinnaker::StatisticsChannel
LIGHTNESS	include/spinc/SpinnakerDefsC.h	/^	LIGHTNESS,$/;"	e	enum:_spinStatisticsChannel
LOG_LEVEL_ALERT	include/SpinnakerDefs.h	/^		LOG_LEVEL_ALERT = 100,		\/\/ Not used by Spinnaker.$/;"	e	enum:Spinnaker::SpinnakerLogLevel
LOG_LEVEL_ALERT	include/spinc/SpinnakerDefsC.h	/^	LOG_LEVEL_ALERT = 100,		\/\/ Not used by Spinnaker.$/;"	e	enum:_spinLogLevel
LOG_LEVEL_CRIT	include/SpinnakerDefs.h	/^		LOG_LEVEL_CRIT = 200,		\/\/ Not used by Spinnaker.$/;"	e	enum:Spinnaker::SpinnakerLogLevel
LOG_LEVEL_CRIT	include/spinc/SpinnakerDefsC.h	/^	LOG_LEVEL_CRIT = 200,		\/\/ Not used by Spinnaker.$/;"	e	enum:_spinLogLevel
LOG_LEVEL_DEBUG	include/SpinnakerDefs.h	/^		LOG_LEVEL_DEBUG = 700,		\/\/ Information that can be used to troubleshoot the system.$/;"	e	enum:Spinnaker::SpinnakerLogLevel
LOG_LEVEL_DEBUG	include/spinc/SpinnakerDefsC.h	/^	LOG_LEVEL_DEBUG = 700,		\/\/ Information that can be used to troubleshoot the system.$/;"	e	enum:_spinLogLevel
LOG_LEVEL_ERROR	include/SpinnakerDefs.h	/^		LOG_LEVEL_ERROR = 300,		\/\/ Failures that are non-recoverable without user intervention.$/;"	e	enum:Spinnaker::SpinnakerLogLevel
LOG_LEVEL_ERROR	include/spinc/SpinnakerDefsC.h	/^	LOG_LEVEL_ERROR = 300,		\/\/ Failures that are non-recoverable without user intervention.$/;"	e	enum:_spinLogLevel
LOG_LEVEL_FATAL	include/SpinnakerDefs.h	/^		LOG_LEVEL_FATAL = 0,		\/\/ Not used by Spinnaker.$/;"	e	enum:Spinnaker::SpinnakerLogLevel
LOG_LEVEL_FATAL	include/spinc/SpinnakerDefsC.h	/^	LOG_LEVEL_FATAL = 0,		\/\/ Not used by Spinnaker.$/;"	e	enum:_spinLogLevel
LOG_LEVEL_INFO	include/SpinnakerDefs.h	/^		LOG_LEVEL_INFO = 600,		\/\/ Information about recurring events that are generated regularly such as information on individual images.$/;"	e	enum:Spinnaker::SpinnakerLogLevel
LOG_LEVEL_INFO	include/spinc/SpinnakerDefsC.h	/^	LOG_LEVEL_INFO = 600,		\/\/ Information about recurring events that are generated regularly such as information on individual images.$/;"	e	enum:_spinLogLevel
LOG_LEVEL_NOTICE	include/SpinnakerDefs.h	/^		LOG_LEVEL_NOTICE = 500,		\/\/ Events such as camera arrival and removal, initialization and deinitialization, starting and stopping image acquisition, and feature modification.$/;"	e	enum:Spinnaker::SpinnakerLogLevel
LOG_LEVEL_NOTICE	include/spinc/SpinnakerDefsC.h	/^	LOG_LEVEL_NOTICE = 500,		\/\/ Events such as camera arrival and removal, initialization and deinitialization, starting and stopping image acquisition, and feature modification.$/;"	e	enum:_spinLogLevel
LOG_LEVEL_NOTSET	include/SpinnakerDefs.h	/^		LOG_LEVEL_NOTSET = 800		\/\/ Logs everything.$/;"	e	enum:Spinnaker::SpinnakerLogLevel
LOG_LEVEL_NOTSET	include/spinc/SpinnakerDefsC.h	/^	LOG_LEVEL_NOTSET = 800		\/\/ Logs everything.$/;"	e	enum:_spinLogLevel
LOG_LEVEL_OFF	include/SpinnakerDefs.h	/^		LOG_LEVEL_OFF = -1,			\/\/ Logging is off.$/;"	e	enum:Spinnaker::SpinnakerLogLevel
LOG_LEVEL_OFF	include/spinc/SpinnakerDefsC.h	/^	LOG_LEVEL_OFF = -1,			\/\/ Logging is off.$/;"	e	enum:_spinLogLevel
LOG_LEVEL_WARN	include/SpinnakerDefs.h	/^		LOG_LEVEL_WARN = 400,		\/\/ Failures that are recoverable without user intervention.$/;"	e	enum:Spinnaker::SpinnakerLogLevel
LOG_LEVEL_WARN	include/spinc/SpinnakerDefsC.h	/^	LOG_LEVEL_WARN = 400,		\/\/ Failures that are recoverable without user intervention.$/;"	e	enum:_spinLogLevel
LUTEnable	include/Camera.h	/^		GenApi::IBoolean &LUTEnable;$/;"	m	class:Spinnaker::Camera
LUTEnable	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode LUTEnable;$/;"	m	struct:_quickSpin
LUTIndex	include/Camera.h	/^		GenApi::IInteger &LUTIndex;$/;"	m	class:Spinnaker::Camera
LUTIndex	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode LUTIndex;$/;"	m	struct:_quickSpin
LUTSelector	include/Camera.h	/^		GenApi::IEnumerationT<LUTSelectorEnums> &LUTSelector;$/;"	m	class:Spinnaker::Camera
LUTSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode LUTSelector;$/;"	m	struct:_quickSpin
LUTSelectorEnums	include/CameraDefs.h	/^	enum LUTSelectorEnums	\/*!< Selects which LUT to control.*\/$/;"	g	namespace:Spinnaker
LUTSelector_Blue	include/CameraDefs.h	/^		LUTSelector_Blue,	\/*!< Selects the Blue LUT.*\/$/;"	e	enum:Spinnaker::LUTSelectorEnums
LUTSelector_Blue	include/spinc/CameraDefsC.h	/^	LUTSelector_Blue,	\/*!< Selects the Blue LUT.*\/$/;"	e	enum:_spinLUTSelectorEnums
LUTSelector_Green	include/CameraDefs.h	/^		LUTSelector_Green,	\/*!< Selects the Green LUT.*\/$/;"	e	enum:Spinnaker::LUTSelectorEnums
LUTSelector_Green	include/spinc/CameraDefsC.h	/^	LUTSelector_Green,	\/*!< Selects the Green LUT.*\/$/;"	e	enum:_spinLUTSelectorEnums
LUTSelector_Luminance	include/CameraDefs.h	/^		LUTSelector_Luminance,	\/*!< Selects the Luminace LUT.*\/$/;"	e	enum:Spinnaker::LUTSelectorEnums
LUTSelector_Luminance	include/spinc/CameraDefsC.h	/^	LUTSelector_Luminance,	\/*!< Selects the Luminace LUT.*\/$/;"	e	enum:_spinLUTSelectorEnums
LUTSelector_Red	include/CameraDefs.h	/^		LUTSelector_Red,	\/*!< Selects the Red LUT.*\/$/;"	e	enum:Spinnaker::LUTSelectorEnums
LUTSelector_Red	include/spinc/CameraDefsC.h	/^	LUTSelector_Red,	\/*!< Selects the Red LUT.*\/$/;"	e	enum:_spinLUTSelectorEnums
LUTValue	include/Camera.h	/^		GenApi::IInteger &LUTValue;$/;"	m	class:Spinnaker::Camera
LUTValue	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode LUTValue;$/;"	m	struct:_quickSpin
LUTValueAll	include/Camera.h	/^		GenApi::IRegister &LUTValueAll;$/;"	m	class:Spinnaker::Camera
LUTValueAll	include/spinc/QuickSpinDefsC.h	/^	quickSpinRegisterNode LUTValueAll;$/;"	m	struct:_quickSpin
LZW	include/SpinnakerDefs.h	/^            LZW, \/**< Save using LZW compression. *\/$/;"	e	enum:Spinnaker::TIFFOption::CompressionMethod
LZW	include/spinc/SpinnakerDefsC.h	/^	LZW, \/\/< Save using LZW compression. $/;"	e	enum:CompressionMethod
Length	include/SpinGenApi/EventAdapterGEV.h	/^        uint16_t Length;$/;"	m	struct:Spinnaker::GenApi::GVCP_REQUEST_HEADER
Length	include/SpinGenApi/EventAdapterU3V.h	/^			uint16_t Length;$/;"	m	struct:Spinnaker::GenApi::U3V_COMMAND_HEADER
LineFormat	include/Camera.h	/^		GenApi::IEnumerationT<LineFormatEnums> &LineFormat;$/;"	m	class:Spinnaker::Camera
LineFormat	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode LineFormat;$/;"	m	struct:_quickSpin
LineFormatEnums	include/CameraDefs.h	/^	enum LineFormatEnums	\/*!< Controls the current electrical format of the selected physical input or output Line.*\/$/;"	g	namespace:Spinnaker
LineFormat_LVDS	include/CameraDefs.h	/^		LineFormat_LVDS,	\/*!< The Line is currently accepting or sending LVDS level signals.*\/$/;"	e	enum:Spinnaker::LineFormatEnums
LineFormat_LVDS	include/spinc/CameraDefsC.h	/^	LineFormat_LVDS,	\/*!< The Line is currently accepting or sending LVDS level signals.*\/$/;"	e	enum:_spinLineFormatEnums
LineFormat_NoConnect	include/CameraDefs.h	/^		LineFormat_NoConnect,	\/*!< The Line is not connected.*\/$/;"	e	enum:Spinnaker::LineFormatEnums
LineFormat_NoConnect	include/spinc/CameraDefsC.h	/^	LineFormat_NoConnect,	\/*!< The Line is not connected.*\/$/;"	e	enum:_spinLineFormatEnums
LineFormat_OpenDrain	include/CameraDefs.h	/^		LineFormat_OpenDrain,	\/*!< The Line is Open Drain (or Open Collector).*\/$/;"	e	enum:Spinnaker::LineFormatEnums
LineFormat_OpenDrain	include/spinc/CameraDefsC.h	/^	LineFormat_OpenDrain,	\/*!< The Line is Open Drain (or Open Collector).*\/$/;"	e	enum:_spinLineFormatEnums
LineFormat_OptoCoupled	include/CameraDefs.h	/^		LineFormat_OptoCoupled,	\/*!< The Line is opto-coupled.*\/$/;"	e	enum:Spinnaker::LineFormatEnums
LineFormat_OptoCoupled	include/spinc/CameraDefsC.h	/^	LineFormat_OptoCoupled,	\/*!< The Line is opto-coupled.*\/$/;"	e	enum:_spinLineFormatEnums
LineFormat_RS422	include/CameraDefs.h	/^		LineFormat_RS422,	\/*!< The Line is currently accepting or sending RS422 level signals.*\/$/;"	e	enum:Spinnaker::LineFormatEnums
LineFormat_RS422	include/spinc/CameraDefsC.h	/^	LineFormat_RS422,	\/*!< The Line is currently accepting or sending RS422 level signals.*\/$/;"	e	enum:_spinLineFormatEnums
LineFormat_TTL	include/CameraDefs.h	/^		LineFormat_TTL,	\/*!< The Line is currently accepting or sending TTL level signals.*\/$/;"	e	enum:Spinnaker::LineFormatEnums
LineFormat_TTL	include/spinc/CameraDefsC.h	/^	LineFormat_TTL,	\/*!< The Line is currently accepting or sending TTL level signals.*\/$/;"	e	enum:_spinLineFormatEnums
LineFormat_TriState	include/CameraDefs.h	/^		LineFormat_TriState,	\/*!< The Line is currently in Tri-State mode (Not driven).*\/$/;"	e	enum:Spinnaker::LineFormatEnums
LineFormat_TriState	include/spinc/CameraDefsC.h	/^	LineFormat_TriState,	\/*!< The Line is currently in Tri-State mode (Not driven).*\/$/;"	e	enum:_spinLineFormatEnums
LineInverter	include/Camera.h	/^		GenApi::IBoolean &LineInverter;$/;"	m	class:Spinnaker::Camera
LineInverter	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode LineInverter;$/;"	m	struct:_quickSpin
LineMode	include/Camera.h	/^		GenApi::IEnumerationT<LineModeEnums> &LineMode;$/;"	m	class:Spinnaker::Camera
LineMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode LineMode;$/;"	m	struct:_quickSpin
LineModeEnums	include/CameraDefs.h	/^	enum LineModeEnums	\/*!< Controls if the physical Line is used to Input or Output a signal.*\/$/;"	g	namespace:Spinnaker
LineMode_Input	include/CameraDefs.h	/^		LineMode_Input,	\/*!< The selected physical line is used to Input an electrical signal.*\/$/;"	e	enum:Spinnaker::LineModeEnums
LineMode_Input	include/spinc/CameraDefsC.h	/^	LineMode_Input,	\/*!< The selected physical line is used to Input an electrical signal.*\/$/;"	e	enum:_spinLineModeEnums
LineMode_Output	include/CameraDefs.h	/^		LineMode_Output,	\/*!< The selected physical line is used to Output an electrical signal.*\/$/;"	e	enum:Spinnaker::LineModeEnums
LineMode_Output	include/spinc/CameraDefsC.h	/^	LineMode_Output,	\/*!< The selected physical line is used to Output an electrical signal.*\/$/;"	e	enum:_spinLineModeEnums
LinePitch	include/Camera.h	/^		GenApi::IInteger &LinePitch;$/;"	m	class:Spinnaker::Camera
LinePitch	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode LinePitch;$/;"	m	struct:_quickSpin
LineSelector	include/Camera.h	/^		GenApi::IEnumerationT<LineSelectorEnums> &LineSelector;$/;"	m	class:Spinnaker::Camera
LineSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode LineSelector;$/;"	m	struct:_quickSpin
LineSelectorEnums	include/CameraDefs.h	/^	enum LineSelectorEnums	\/*!< Selects the physical line (or pin) of the external device connector or the virtual line of the Transport Layer to configure.*\/$/;"	g	namespace:Spinnaker
LineSelector_CC1	include/CameraDefs.h	/^		LineSelector_CC1,	\/*!< Index of the Camera Link physical line and associated I\/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink Product only.*\/$/;"	e	enum:Spinnaker::LineSelectorEnums
LineSelector_CC1	include/spinc/CameraDefsC.h	/^	LineSelector_CC1,	\/*!< Index of the Camera Link physical line and associated I\/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink Product only.*\/$/;"	e	enum:_spinLineSelectorEnums
LineSelector_CC2	include/CameraDefs.h	/^		LineSelector_CC2,	\/*!< Index of the Camera Link physical line and associated I\/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink Product only.*\/$/;"	e	enum:Spinnaker::LineSelectorEnums
LineSelector_CC2	include/spinc/CameraDefsC.h	/^	LineSelector_CC2,	\/*!< Index of the Camera Link physical line and associated I\/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink Product only.*\/$/;"	e	enum:_spinLineSelectorEnums
LineSelector_CC3	include/CameraDefs.h	/^		LineSelector_CC3,	\/*!< Index of the Camera Link physical line and associated I\/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink Product only.*\/$/;"	e	enum:Spinnaker::LineSelectorEnums
LineSelector_CC3	include/spinc/CameraDefsC.h	/^	LineSelector_CC3,	\/*!< Index of the Camera Link physical line and associated I\/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink Product only.*\/$/;"	e	enum:_spinLineSelectorEnums
LineSelector_CC4	include/CameraDefs.h	/^		LineSelector_CC4,	\/*!< Index of the Camera Link physical line and associated I\/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink Product only.*\/$/;"	e	enum:Spinnaker::LineSelectorEnums
LineSelector_CC4	include/spinc/CameraDefsC.h	/^	LineSelector_CC4,	\/*!< Index of the Camera Link physical line and associated I\/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink Product only.*\/$/;"	e	enum:_spinLineSelectorEnums
LineSelector_Line0	include/CameraDefs.h	/^		LineSelector_Line0,	\/*!< Index of the physical line and associated I\/O control block to use.*\/$/;"	e	enum:Spinnaker::LineSelectorEnums
LineSelector_Line0	include/spinc/CameraDefsC.h	/^	LineSelector_Line0,	\/*!< Index of the physical line and associated I\/O control block to use.*\/$/;"	e	enum:_spinLineSelectorEnums
LineSelector_Line1	include/CameraDefs.h	/^		LineSelector_Line1,	\/*!< Index of the physical line and associated I\/O control block to use.*\/$/;"	e	enum:Spinnaker::LineSelectorEnums
LineSelector_Line1	include/spinc/CameraDefsC.h	/^	LineSelector_Line1,	\/*!< Index of the physical line and associated I\/O control block to use.*\/$/;"	e	enum:_spinLineSelectorEnums
LineSelector_Line2	include/CameraDefs.h	/^		LineSelector_Line2,	\/*!< Index of the physical line and associated I\/O control block to use.*\/$/;"	e	enum:Spinnaker::LineSelectorEnums
LineSelector_Line2	include/spinc/CameraDefsC.h	/^	LineSelector_Line2,	\/*!< Index of the physical line and associated I\/O control block to use.*\/$/;"	e	enum:_spinLineSelectorEnums
LineSelector_LinkTrigger0	include/CameraDefs.h	/^		LineSelector_LinkTrigger0,	\/*!< Index of the virtual line going on the Transport layer to use.*\/$/;"	e	enum:Spinnaker::LineSelectorEnums
LineSelector_LinkTrigger0	include/spinc/CameraDefsC.h	/^	LineSelector_LinkTrigger0,	\/*!< Index of the virtual line going on the Transport layer to use.*\/$/;"	e	enum:_spinLineSelectorEnums
LineSelector_LinkTrigger1	include/CameraDefs.h	/^		LineSelector_LinkTrigger1,	\/*!< Index of the virtual line going on the Transport layer to use.*\/$/;"	e	enum:Spinnaker::LineSelectorEnums
LineSelector_LinkTrigger1	include/spinc/CameraDefsC.h	/^	LineSelector_LinkTrigger1,	\/*!< Index of the virtual line going on the Transport layer to use.*\/$/;"	e	enum:_spinLineSelectorEnums
LineSelector_LinkTrigger2	include/CameraDefs.h	/^		LineSelector_LinkTrigger2,	\/*!< Index of the virtual line going on the Transport layer to use.*\/$/;"	e	enum:Spinnaker::LineSelectorEnums
LineSelector_LinkTrigger2	include/spinc/CameraDefsC.h	/^	LineSelector_LinkTrigger2,	\/*!< Index of the virtual line going on the Transport layer to use.*\/$/;"	e	enum:_spinLineSelectorEnums
LineSource	include/Camera.h	/^		GenApi::IEnumerationT<LineSourceEnums> &LineSource;$/;"	m	class:Spinnaker::Camera
LineSource	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode LineSource;$/;"	m	struct:_quickSpin
LineSourceEnums	include/CameraDefs.h	/^	enum LineSourceEnums	\/*!< Selects which internal acquisition or I\/O source signal to output on the selected Line. LineMode must be Output.*\/$/;"	g	namespace:Spinnaker
LineSource_AcquisitionActive	include/CameraDefs.h	/^		LineSource_AcquisitionActive,	\/*!< Device is currently doing an acquisition of one or many Frames.*\/$/;"	e	enum:Spinnaker::LineSourceEnums
LineSource_AcquisitionActive	include/spinc/CameraDefsC.h	/^	LineSource_AcquisitionActive,	\/*!< Device is currently doing an acquisition of one or many Frames.*\/$/;"	e	enum:_spinLineSourceEnums
LineSource_AcquisitionTriggerWait	include/CameraDefs.h	/^		LineSource_AcquisitionTriggerWait,	\/*!< Device is currently waiting for a trigger for the capture of one or many Frames.*\/$/;"	e	enum:Spinnaker::LineSourceEnums
LineSource_AcquisitionTriggerWait	include/spinc/CameraDefsC.h	/^	LineSource_AcquisitionTriggerWait,	\/*!< Device is currently waiting for a trigger for the capture of one or many Frames.*\/$/;"	e	enum:_spinLineSourceEnums
LineSource_Counter0Active	include/CameraDefs.h	/^		LineSource_Counter0Active,	\/*!< The chosen counter is in active state (counting).*\/$/;"	e	enum:Spinnaker::LineSourceEnums
LineSource_Counter0Active	include/spinc/CameraDefsC.h	/^	LineSource_Counter0Active,	\/*!< The chosen counter is in active state (counting).*\/$/;"	e	enum:_spinLineSourceEnums
LineSource_Counter1Active	include/CameraDefs.h	/^		LineSource_Counter1Active,	\/*!< The chosen counter is in active state (counting).*\/$/;"	e	enum:Spinnaker::LineSourceEnums
LineSource_Counter1Active	include/spinc/CameraDefsC.h	/^	LineSource_Counter1Active,	\/*!< The chosen counter is in active state (counting).*\/$/;"	e	enum:_spinLineSourceEnums
LineSource_Counter2Active	include/CameraDefs.h	/^		LineSource_Counter2Active,	\/*!< The chosen counter is in active state (counting).*\/$/;"	e	enum:Spinnaker::LineSourceEnums
LineSource_Counter2Active	include/spinc/CameraDefsC.h	/^	LineSource_Counter2Active,	\/*!< The chosen counter is in active state (counting).*\/$/;"	e	enum:_spinLineSourceEnums
LineSource_ExposureActive	include/CameraDefs.h	/^		LineSource_ExposureActive,	\/*!< Device is doing the exposure of a Frame (or Line).*\/$/;"	e	enum:Spinnaker::LineSourceEnums
LineSource_ExposureActive	include/spinc/CameraDefsC.h	/^	LineSource_ExposureActive,	\/*!< Device is doing the exposure of a Frame (or Line).*\/$/;"	e	enum:_spinLineSourceEnums
LineSource_FrameActive	include/CameraDefs.h	/^		LineSource_FrameActive,	\/*!< Device is currently doing the capture of a Frame.*\/$/;"	e	enum:Spinnaker::LineSourceEnums
LineSource_FrameActive	include/spinc/CameraDefsC.h	/^	LineSource_FrameActive,	\/*!< Device is currently doing the capture of a Frame.*\/$/;"	e	enum:_spinLineSourceEnums
LineSource_FrameTriggerWait	include/CameraDefs.h	/^		LineSource_FrameTriggerWait,	\/*!< Device is currently waiting for a Frame start trigger.*\/$/;"	e	enum:Spinnaker::LineSourceEnums
LineSource_FrameTriggerWait	include/spinc/CameraDefsC.h	/^	LineSource_FrameTriggerWait,	\/*!< Device is currently waiting for a Frame start trigger.*\/$/;"	e	enum:_spinLineSourceEnums
LineSource_Off	include/CameraDefs.h	/^		LineSource_Off,	\/*!< Line output is disabled (Tri-State).*\/$/;"	e	enum:Spinnaker::LineSourceEnums
LineSource_Off	include/spinc/CameraDefsC.h	/^	LineSource_Off,	\/*!< Line output is disabled (Tri-State).*\/$/;"	e	enum:_spinLineSourceEnums
LineSource_Stream0TransferActive	include/CameraDefs.h	/^		LineSource_Stream0TransferActive,	\/*!< Transfer on the stream is active.*\/$/;"	e	enum:Spinnaker::LineSourceEnums
LineSource_Stream0TransferActive	include/spinc/CameraDefsC.h	/^	LineSource_Stream0TransferActive,	\/*!< Transfer on the stream is active.*\/$/;"	e	enum:_spinLineSourceEnums
LineSource_Stream0TransferOverflow	include/CameraDefs.h	/^		LineSource_Stream0TransferOverflow,	\/*!< Transfer on the stream is in overflow.*\/$/;"	e	enum:Spinnaker::LineSourceEnums
LineSource_Stream0TransferOverflow	include/spinc/CameraDefsC.h	/^	LineSource_Stream0TransferOverflow,	\/*!< Transfer on the stream is in overflow.*\/$/;"	e	enum:_spinLineSourceEnums
LineSource_Stream0TransferPaused	include/CameraDefs.h	/^		LineSource_Stream0TransferPaused,	\/*!< Transfer on the stream is paused.*\/$/;"	e	enum:Spinnaker::LineSourceEnums
LineSource_Stream0TransferPaused	include/spinc/CameraDefsC.h	/^	LineSource_Stream0TransferPaused,	\/*!< Transfer on the stream is paused.*\/$/;"	e	enum:_spinLineSourceEnums
LineSource_Stream0TransferStopped	include/CameraDefs.h	/^		LineSource_Stream0TransferStopped,	\/*!< Transfer on the stream is stopped.*\/$/;"	e	enum:Spinnaker::LineSourceEnums
LineSource_Stream0TransferStopped	include/spinc/CameraDefsC.h	/^	LineSource_Stream0TransferStopped,	\/*!< Transfer on the stream is stopped.*\/$/;"	e	enum:_spinLineSourceEnums
LineSource_Stream0TransferStopping	include/CameraDefs.h	/^		LineSource_Stream0TransferStopping,	\/*!< Transfer on the stream is stopping.*\/$/;"	e	enum:Spinnaker::LineSourceEnums
LineSource_Stream0TransferStopping	include/spinc/CameraDefsC.h	/^	LineSource_Stream0TransferStopping,	\/*!< Transfer on the stream is stopping.*\/$/;"	e	enum:_spinLineSourceEnums
LineSource_Stream1TransferActive	include/CameraDefs.h	/^		LineSource_Stream1TransferActive,	\/*!< Transfer on the stream is active.*\/$/;"	e	enum:Spinnaker::LineSourceEnums
LineSource_Stream1TransferActive	include/spinc/CameraDefsC.h	/^	LineSource_Stream1TransferActive,	\/*!< Transfer on the stream is active.*\/$/;"	e	enum:_spinLineSourceEnums
LineSource_Stream1TransferOverflow	include/CameraDefs.h	/^		LineSource_Stream1TransferOverflow,	\/*!< Transfer on the stream is in overflow.*\/$/;"	e	enum:Spinnaker::LineSourceEnums
LineSource_Stream1TransferOverflow	include/spinc/CameraDefsC.h	/^	LineSource_Stream1TransferOverflow,	\/*!< Transfer on the stream is in overflow.*\/$/;"	e	enum:_spinLineSourceEnums
LineSource_Stream1TransferPaused	include/CameraDefs.h	/^		LineSource_Stream1TransferPaused,	\/*!< Transfer on the stream is paused.*\/$/;"	e	enum:Spinnaker::LineSourceEnums
LineSource_Stream1TransferPaused	include/spinc/CameraDefsC.h	/^	LineSource_Stream1TransferPaused,	\/*!< Transfer on the stream is paused.*\/$/;"	e	enum:_spinLineSourceEnums
LineSource_Stream1TransferStopped	include/CameraDefs.h	/^		LineSource_Stream1TransferStopped,	\/*!< Transfer on the stream is stopped.*\/$/;"	e	enum:Spinnaker::LineSourceEnums
LineSource_Stream1TransferStopped	include/spinc/CameraDefsC.h	/^	LineSource_Stream1TransferStopped,	\/*!< Transfer on the stream is stopped.*\/$/;"	e	enum:_spinLineSourceEnums
LineSource_Stream1TransferStopping	include/CameraDefs.h	/^		LineSource_Stream1TransferStopping,	\/*!< Transfer on the stream is stopping.*\/$/;"	e	enum:Spinnaker::LineSourceEnums
LineSource_Stream1TransferStopping	include/spinc/CameraDefsC.h	/^	LineSource_Stream1TransferStopping,	\/*!< Transfer on the stream is stopping.*\/$/;"	e	enum:_spinLineSourceEnums
LineSource_Timer0Active	include/CameraDefs.h	/^		LineSource_Timer0Active,	\/*!< The chosen Timer is in active state.*\/$/;"	e	enum:Spinnaker::LineSourceEnums
LineSource_Timer0Active	include/spinc/CameraDefsC.h	/^	LineSource_Timer0Active,	\/*!< The chosen Timer is in active state.*\/$/;"	e	enum:_spinLineSourceEnums
LineSource_Timer1Active	include/CameraDefs.h	/^		LineSource_Timer1Active,	\/*!< The chosen Timer is in active state.*\/$/;"	e	enum:Spinnaker::LineSourceEnums
LineSource_Timer1Active	include/spinc/CameraDefsC.h	/^	LineSource_Timer1Active,	\/*!< The chosen Timer is in active state.*\/$/;"	e	enum:_spinLineSourceEnums
LineSource_Timer2Active	include/CameraDefs.h	/^		LineSource_Timer2Active,	\/*!< The chosen Timer is in active state.*\/$/;"	e	enum:Spinnaker::LineSourceEnums
LineSource_Timer2Active	include/spinc/CameraDefsC.h	/^	LineSource_Timer2Active,	\/*!< The chosen Timer is in active state.*\/$/;"	e	enum:_spinLineSourceEnums
LineSource_UserOutput0	include/CameraDefs.h	/^		LineSource_UserOutput0,	\/*!< The chosen User Output Bit state as defined by its current UserOutputValue.*\/$/;"	e	enum:Spinnaker::LineSourceEnums
LineSource_UserOutput0	include/spinc/CameraDefsC.h	/^	LineSource_UserOutput0,	\/*!< The chosen User Output Bit state as defined by its current UserOutputValue.*\/$/;"	e	enum:_spinLineSourceEnums
LineSource_UserOutput1	include/CameraDefs.h	/^		LineSource_UserOutput1,	\/*!< The chosen User Output Bit state as defined by its current UserOutputValue.*\/$/;"	e	enum:Spinnaker::LineSourceEnums
LineSource_UserOutput1	include/spinc/CameraDefsC.h	/^	LineSource_UserOutput1,	\/*!< The chosen User Output Bit state as defined by its current UserOutputValue.*\/$/;"	e	enum:_spinLineSourceEnums
LineSource_UserOutput2	include/CameraDefs.h	/^		LineSource_UserOutput2,	\/*!< The chosen User Output Bit state as defined by its current UserOutputValue.*\/$/;"	e	enum:Spinnaker::LineSourceEnums
LineSource_UserOutput2	include/spinc/CameraDefsC.h	/^	LineSource_UserOutput2,	\/*!< The chosen User Output Bit state as defined by its current UserOutputValue.*\/$/;"	e	enum:_spinLineSourceEnums
LineStatus	include/Camera.h	/^		GenApi::IBoolean &LineStatus;$/;"	m	class:Spinnaker::Camera
LineStatus	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode LineStatus;$/;"	m	struct:_quickSpin
LineStatusAll	include/Camera.h	/^		GenApi::IInteger &LineStatusAll;$/;"	m	class:Spinnaker::Camera
LineStatusAll	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode LineStatusAll;$/;"	m	struct:_quickSpin
Linear	include/SpinGenApi/Types.h	/^			Linear,                     \/\/!< Slider with linear behavior$/;"	e	enum:Spinnaker::GenApi::_ERepresentation
Linear	include/spinc/SpinnakerGenApiDefsC.h	/^	Linear,                     \/\/!< Slider with linear behavior$/;"	e	enum:_spinRepresentation
LittleEndian	include/SpinGenApi/Types.h	/^			LittleEndian,     \/\/!< Register is little endian$/;"	e	enum:Spinnaker::GenApi::_EEndianess
LittleEndian	include/spinc/SpinnakerGenApiDefsC.h	/^	LittleEndian,     \/\/!< Register is little endian$/;"	e	enum:_spinEndianess
Lock	include/SpinGenApi/GCSynch.h	/^				Lock( const LockableObject<Object>& obj) : m_Object(obj) {$/;"	f	class:Spinnaker::GenICam::LockableObject::Lock
Lock	include/SpinGenApi/GCSynch.h	/^			class Lock$/;"	c	class:Spinnaker::GenICam::LockableObject
LockableObject	include/SpinGenApi/GCSynch.h	/^		class LockableObject$/;"	c	namespace:Spinnaker::GenICam
Logarithmic	include/SpinGenApi/Types.h	/^			Logarithmic,                \/\/!< Slider with logarithmic behavior$/;"	e	enum:Spinnaker::GenApi::_ERepresentation
Logarithmic	include/spinc/SpinnakerGenApiDefsC.h	/^	Logarithmic,                \/\/!< Slider with logarithmic behaviour$/;"	e	enum:_spinRepresentation
LoggingEvent	include/LoggingEvent.h	/^	class SPINNAKER_API LoggingEvent : public virtual Event$/;"	c	namespace:Spinnaker
LoggingEventData	include/LoggingEventData.h	/^	class SPINNAKER_API LoggingEventData$/;"	c	namespace:Spinnaker
LoggingEventDataPtr	include/LoggingEventDataPtr.h	/^		LoggingEventDataPtr() throw()$/;"	f	class:Spinnaker::LoggingEventDataPtr
LoggingEventDataPtr	include/LoggingEventDataPtr.h	/^		LoggingEventDataPtr(const int \/*nMustBeNull*\/) throw()$/;"	f	class:Spinnaker::LoggingEventDataPtr
LoggingEventDataPtr	include/LoggingEventDataPtr.h	/^	class SPINNAKER_API LoggingEventDataPtr : public BasePtr<LoggingEventData>$/;"	c	namespace:Spinnaker
LoggingEventHandler	SpinnakerTest/Logging/Logging.cpp	/^class LoggingEventHandler : public LoggingEvent$/;"	c	file:
LoggingEventHandler	src/Logging/Logging.cpp	/^class LoggingEventHandler : public LoggingEvent$/;"	c	file:
MACAddress	include/SpinGenApi/Types.h	/^			MACAddress,                 \/\/!< MAC-Address$/;"	e	enum:Spinnaker::GenApi::_ERepresentation
MACAddress	include/spinc/SpinnakerGenApiDefsC.h	/^	MACAddress,                 \/\/!< MAC-Address$/;"	e	enum:_spinRepresentation
MAX_BUFF_LEN	SpinnakerTest/AcquisitionMultipleCamera_C/AcquisitionMultipleCamera_C.cpp	45;"	d	file:
MAX_BUFF_LEN	SpinnakerTest/Acquisition_C/Acquisition_C.cpp	54;"	d	file:
MAX_BUFF_LEN	SpinnakerTest/ChunkData_C/ChunkData_C.cpp	52;"	d	file:
MAX_BUFF_LEN	SpinnakerTest/DeviceEvents_C/DeviceEvents_C.cpp	53;"	d	file:
MAX_BUFF_LEN	SpinnakerTest/EnumerationEvents_C/EnumerationEvents_C.cpp	53;"	d	file:
MAX_BUFF_LEN	SpinnakerTest/Enumeration_C/Enumeration_C.cpp	52;"	d	file:
MAX_BUFF_LEN	SpinnakerTest/Enumeration_C_QuickSpin/Enumeration_C_QuickSpin.cpp	54;"	d	file:
MAX_BUFF_LEN	SpinnakerTest/Exposure_C/Exposure_C.cpp	55;"	d	file:
MAX_BUFF_LEN	SpinnakerTest/Exposure_C_QuickSpin/Exposure_C_QuickSpin.cpp	52;"	d	file:
MAX_BUFF_LEN	SpinnakerTest/ImageEvents_C/ImageEvents_C.cpp	66;"	d	file:
MAX_BUFF_LEN	SpinnakerTest/ImageFormatControl_C/ImageFormatControl_C.cpp	53;"	d	file:
MAX_BUFF_LEN	SpinnakerTest/ImageFormatControl_C_QuickSpin/ImageFormatControl_C_QuickSpin.cpp	53;"	d	file:
MAX_BUFF_LEN	SpinnakerTest/Logging_C/Logging_C.cpp	51;"	d	file:
MAX_BUFF_LEN	SpinnakerTest/LookupTable_C/LookupTable_C.cpp	51;"	d	file:
MAX_BUFF_LEN	SpinnakerTest/NodeMapCallback_C/NodeMapCallback_C.cpp	52;"	d	file:
MAX_BUFF_LEN	SpinnakerTest/NodeMapInfo_C/NodeMapInfo_C.cpp	56;"	d	file:
MAX_BUFF_LEN	SpinnakerTest/NodeMapInfo_C_QuickSpin/NodeMapInfo_C_QuickSpin.cpp	52;"	d	file:
MAX_BUFF_LEN	SpinnakerTest/SaveToAvi_C/SaveToAvi_C.cpp	46;"	d	file:
MAX_BUFF_LEN	SpinnakerTest/Sequencer_C/Sequencer_C.cpp	56;"	d	file:
MAX_BUFF_LEN	SpinnakerTest/Trigger_C/Trigger_C.cpp	49;"	d	file:
MAX_BUFF_LEN	SpinnakerTest/Trigger_C_QuickSpin/Trigger_C_QuickSpin.cpp	52;"	d	file:
MAX_BUFF_LEN	src/AcquisitionMultipleCamera_C/AcquisitionMultipleCamera_C.cpp	45;"	d	file:
MAX_BUFF_LEN	src/Acquisition_C/Acquisition_C.cpp	54;"	d	file:
MAX_BUFF_LEN	src/ChunkData_C/ChunkData_C.cpp	52;"	d	file:
MAX_BUFF_LEN	src/DeviceEvents_C/DeviceEvents_C.cpp	53;"	d	file:
MAX_BUFF_LEN	src/EnumerationEvents_C/EnumerationEvents_C.cpp	53;"	d	file:
MAX_BUFF_LEN	src/Enumeration_C/Enumeration_C.cpp	52;"	d	file:
MAX_BUFF_LEN	src/Enumeration_C_QuickSpin/Enumeration_C_QuickSpin.cpp	54;"	d	file:
MAX_BUFF_LEN	src/Exposure_C/Exposure_C.cpp	55;"	d	file:
MAX_BUFF_LEN	src/Exposure_C_QuickSpin/Exposure_C_QuickSpin.cpp	52;"	d	file:
MAX_BUFF_LEN	src/ImageEvents_C/ImageEvents_C.cpp	66;"	d	file:
MAX_BUFF_LEN	src/ImageFormatControl_C/ImageFormatControl_C.cpp	53;"	d	file:
MAX_BUFF_LEN	src/ImageFormatControl_C_QuickSpin/ImageFormatControl_C_QuickSpin.cpp	53;"	d	file:
MAX_BUFF_LEN	src/Logging_C/Logging_C.cpp	51;"	d	file:
MAX_BUFF_LEN	src/LookupTable_C/LookupTable_C.cpp	51;"	d	file:
MAX_BUFF_LEN	src/NodeMapCallback_C/NodeMapCallback_C.cpp	52;"	d	file:
MAX_BUFF_LEN	src/NodeMapInfo_C/NodeMapInfo_C.cpp	56;"	d	file:
MAX_BUFF_LEN	src/NodeMapInfo_C_QuickSpin/NodeMapInfo_C_QuickSpin.cpp	52;"	d	file:
MAX_BUFF_LEN	src/SaveToAvi_C/SaveToAvi_C.cpp	46;"	d	file:
MAX_BUFF_LEN	src/Sequencer_C/Sequencer_C.cpp	56;"	d	file:
MAX_BUFF_LEN	src/Trigger_C/Trigger_C.cpp	49;"	d	file:
MAX_BUFF_LEN	src/Trigger_C_QuickSpin/Trigger_C_QuickSpin.cpp	52;"	d	file:
MAX_CHARS	SpinnakerTest/NodeMapInfo/NodeMapInfo.cpp	53;"	d	file:
MAX_CHARS	SpinnakerTest/NodeMapInfo_C/NodeMapInfo_C.cpp	60;"	d	file:
MAX_CHARS	SpinnakerTest/NodeMapInfo_C_QuickSpin/NodeMapInfo_C_QuickSpin.cpp	56;"	d	file:
MAX_CHARS	src/NodeMapInfo/NodeMapInfo.cpp	53;"	d	file:
MAX_CHARS	src/NodeMapInfo_C/NodeMapInfo_C.cpp	60;"	d	file:
MAX_CHARS	src/NodeMapInfo_C_QuickSpin/NodeMapInfo_C_QuickSpin.cpp	56;"	d	file:
MJPG	SpinnakerTest/SaveToAvi/SaveToAvi.cpp	/^	MJPG,$/;"	e	enum:aviType	file:
MJPG	SpinnakerTest/SaveToAvi_C/SaveToAvi_C.cpp	/^	MJPG,$/;"	e	enum:_fileType	file:
MJPG	src/SaveToAvi/SaveToAvi.cpp	/^	MJPG,$/;"	e	enum:aviType	file:
MJPG	src/SaveToAvi_C/SaveToAvi_C.cpp	/^	MJPG,$/;"	e	enum:_fileType	file:
MJPGOption	include/SpinnakerDefs.h	/^		MJPGOption()$/;"	f	struct:Spinnaker::MJPGOption
MJPGOption	include/SpinnakerDefs.h	/^	struct MJPGOption$/;"	s	namespace:Spinnaker
Magic	include/SpinGenApi/EventAdapterGEV.h	/^        uint8_t  Magic;$/;"	m	struct:Spinnaker::GenApi::GVCP_REQUEST_HEADER
Major	include/SpinGenApi/GCTypes.h	/^			uint16_t Major;        \/\/!> a is incompatible with b if a != b$/;"	m	struct:Spinnaker::GenICam::Version_t
MemSet	include/SpinGenApi/StructPort.h	/^			void MemSet(const char FillValue)$/;"	f	class:Spinnaker::GenApi::CTestPortStruct
Member_NodeCallback	include/SpinGenApi/NodeCallback.h	/^			Member_NodeCallback(INode* pNode, Client& client, Member member, ECallbackType CallbackType) :$/;"	f	class:Spinnaker::GenApi::Member_NodeCallback
Member_NodeCallback	include/SpinGenApi/NodeCallback.h	/^		class Member_NodeCallback : public CNodeCallback$/;"	c	namespace:Spinnaker::GenApi
Minor	include/SpinGenApi/GCTypes.h	/^			uint16_t Minor;        \/\/!> a is incompatible b a > b$/;"	m	struct:Spinnaker::GenICam::Version_t
NA	include/SpinGenApi/Types.h	/^			NA,        \/\/!< Not available$/;"	e	enum:Spinnaker::GenApi::_EAccessMode
NA	include/spinc/SpinnakerGenApiDefsC.h	/^	NA,$/;"	e	enum:_spinAccessMode
NEAREST_NEIGHBOR	include/SpinnakerDefs.h	/^        NEAREST_NEIGHBOR,$/;"	e	enum:Spinnaker::ColorProcessingAlgorithm
NEAREST_NEIGHBOR	include/spinc/SpinnakerDefsC.h	/^	NEAREST_NEIGHBOR,$/;"	e	enum:_spinColorProcessingAlgorithm
NI	include/SpinGenApi/Types.h	/^			NI,        \/\/!< Not implemented$/;"	e	enum:Spinnaker::GenApi::_EAccessMode
NI	include/spinc/SpinnakerGenApiDefsC.h	/^	NI,$/;"	e	enum:_spinAccessMode
NODEMAP	SpinnakerTest/ChunkData/ChunkData.cpp	/^	NODEMAP$/;"	e	enum:chunkDataType	file:
NODEMAP	SpinnakerTest/ChunkData_C/ChunkData_C.cpp	/^	NODEMAP$/;"	e	enum:_chunkDataType	file:
NODEMAP	src/ChunkData/ChunkData.cpp	/^	NODEMAP$/;"	e	enum:chunkDataType	file:
NODEMAP	src/ChunkData_C/ChunkData_C.cpp	/^	NODEMAP$/;"	e	enum:_chunkDataType	file:
NOMINMAX	include/SpinGenApi/Compatibility.h	41;"	d
NONE	include/SpinnakerDefs.h	/^            NONE = 1, \/**< Save without any compression. *\/$/;"	e	enum:Spinnaker::TIFFOption::CompressionMethod
NONE	include/spinc/SpinnakerDefsC.h	/^	NONE = 1, \/\/ Save without any compression. $/;"	e	enum:CompressionMethod
NO_COLOR_PROCESSING	include/SpinnakerDefs.h	/^        NO_COLOR_PROCESSING,$/;"	e	enum:Spinnaker::ColorProcessingAlgorithm
NO_COLOR_PROCESSING	include/spinc/SpinnakerDefsC.h	/^	NO_COLOR_PROCESSING,$/;"	e	enum:_spinColorProcessingAlgorithm
NUMDEVICEACCESSSTATUS	include/TransportLayerDefs.h	/^		NUMDEVICEACCESSSTATUS$/;"	e	enum:Spinnaker::DeviceAccessStatusEnum
NUMDEVICEACCESSSTATUS	include/spinc/TransportLayerDefsC.h	/^	NUMDEVICEACCESSSTATUS$/;"	e	enum:_spinTLDeviceAccessStatusEnums
NUMDEVICECURRENTSPEED	include/TransportLayerDefs.h	/^		NUMDEVICECURRENTSPEED$/;"	e	enum:Spinnaker::DeviceCurrentSpeedEnum
NUMDEVICECURRENTSPEED	include/spinc/TransportLayerDefsC.h	/^	NUMDEVICECURRENTSPEED$/;"	e	enum:_spinTLDeviceCurrentSpeedEnums
NUMDEVICEENDIANESSMECHANISM	include/TransportLayerDefs.h	/^		NUMDEVICEENDIANESSMECHANISM$/;"	e	enum:Spinnaker::DeviceEndianessMechanismEnum
NUMDEVICEENDIANESSMECHANISM	include/spinc/TransportLayerDefsC.h	/^	NUMDEVICEENDIANESSMECHANISM$/;"	e	enum:_spinTLDeviceEndianessMechanismEnums
NUMDEVICETYPE	include/TransportLayerDefs.h	/^		NUMDEVICETYPE$/;"	e	enum:Spinnaker::DeviceTypeEnum
NUMDEVICETYPE	include/spinc/TransportLayerDefsC.h	/^	NUMDEVICETYPE$/;"	e	enum:_spinTLDeviceTypeEnums
NUMGENICAMXMLLOCATION	include/TransportLayerDefs.h	/^		NUMGENICAMXMLLOCATION$/;"	e	enum:Spinnaker::GenICamXMLLocationEnum
NUMGENICAMXMLLOCATION	include/spinc/TransportLayerDefsC.h	/^	NUMGENICAMXMLLOCATION$/;"	e	enum:_spinTLGenICamXMLLocationEnums
NUMGEVCCP	include/TransportLayerDefs.h	/^		NUMGEVCCP$/;"	e	enum:Spinnaker::GevCCPEnum
NUMGEVCCP	include/spinc/TransportLayerDefsC.h	/^	NUMGEVCCP$/;"	e	enum:_spinTLGevCCPEnums
NUMGUIXMLLOCATION	include/TransportLayerDefs.h	/^		NUMGUIXMLLOCATION$/;"	e	enum:Spinnaker::GUIXMLLocationEnum
NUMGUIXMLLOCATION	include/spinc/TransportLayerDefsC.h	/^	NUMGUIXMLLOCATION$/;"	e	enum:_spinTLGUIXMLLocationEnums
NUMPOESTATUS	include/TransportLayerDefs.h	/^		NUMPOESTATUS$/;"	e	enum:Spinnaker::POEStatusEnum
NUMPOESTATUS	include/spinc/TransportLayerDefsC.h	/^	NUMPOESTATUS$/;"	e	enum:_spinTLPOEStatusEnums
NUMSTREAMBUFFERHANDLINGMODE	include/TransportLayerDefs.h	/^		NUMSTREAMBUFFERHANDLINGMODE$/;"	e	enum:Spinnaker::StreamBufferHandlingModeEnum
NUMSTREAMBUFFERHANDLINGMODE	include/spinc/TransportLayerDefsC.h	/^	NUMSTREAMBUFFERHANDLINGMODE$/;"	e	enum:_spinTLStreamBufferHandlingModeEnums
NUMSTREAMDEFAULTBUFFERCOUNTMODE	include/TransportLayerDefs.h	/^		NUMSTREAMDEFAULTBUFFERCOUNTMODE$/;"	e	enum:Spinnaker::StreamDefaultBufferCountModeEnum
NUMSTREAMDEFAULTBUFFERCOUNTMODE	include/spinc/TransportLayerDefsC.h	/^	NUMSTREAMDEFAULTBUFFERCOUNTMODE$/;"	e	enum:_spinTLStreamDefaultBufferCountModeEnums
NUMSTREAMTYPE	include/TransportLayerDefs.h	/^		NUMSTREAMTYPE$/;"	e	enum:Spinnaker::StreamTypeEnum
NUMSTREAMTYPE	include/spinc/TransportLayerDefsC.h	/^	NUMSTREAMTYPE$/;"	e	enum:_spinTLStreamTypeEnums
NUM_ACQUISITIONMODE	include/CameraDefs.h	/^		NUM_ACQUISITIONMODE$/;"	e	enum:Spinnaker::AcquisitionModeEnums
NUM_ACQUISITIONMODE	include/spinc/CameraDefsC.h	/^	NUM_ACQUISITIONMODE$/;"	e	enum:_spinAcquisitionModeEnums
NUM_ACQUISITIONSTATUSSELECTOR	include/CameraDefs.h	/^		NUM_ACQUISITIONSTATUSSELECTOR$/;"	e	enum:Spinnaker::AcquisitionStatusSelectorEnums
NUM_ACQUISITIONSTATUSSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_ACQUISITIONSTATUSSELECTOR$/;"	e	enum:_spinAcquisitionStatusSelectorEnums
NUM_ACTIONUNCONDITIONALMODE	include/CameraDefs.h	/^		NUM_ACTIONUNCONDITIONALMODE$/;"	e	enum:Spinnaker::ActionUnconditionalModeEnums
NUM_ACTIONUNCONDITIONALMODE	include/spinc/CameraDefsC.h	/^	NUM_ACTIONUNCONDITIONALMODE$/;"	e	enum:_spinActionUnconditionalModeEnums
NUM_BALANCERATIOSELECTOR	include/CameraDefs.h	/^		NUM_BALANCERATIOSELECTOR$/;"	e	enum:Spinnaker::BalanceRatioSelectorEnums
NUM_BALANCERATIOSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_BALANCERATIOSELECTOR$/;"	e	enum:_spinBalanceRatioSelectorEnums
NUM_BALANCEWHITEAUTO	include/CameraDefs.h	/^		NUM_BALANCEWHITEAUTO$/;"	e	enum:Spinnaker::BalanceWhiteAutoEnums
NUM_BALANCEWHITEAUTO	include/spinc/CameraDefsC.h	/^	NUM_BALANCEWHITEAUTO$/;"	e	enum:_spinBalanceWhiteAutoEnums
NUM_BINNINGHORIZONTALMODE	include/CameraDefs.h	/^		NUM_BINNINGHORIZONTALMODE$/;"	e	enum:Spinnaker::BinningHorizontalModeEnums
NUM_BINNINGHORIZONTALMODE	include/spinc/CameraDefsC.h	/^	NUM_BINNINGHORIZONTALMODE$/;"	e	enum:_spinBinningHorizontalModeEnums
NUM_BINNINGSELECTOR	include/CameraDefs.h	/^		NUM_BINNINGSELECTOR$/;"	e	enum:Spinnaker::BinningSelectorEnums
NUM_BINNINGSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_BINNINGSELECTOR$/;"	e	enum:_spinBinningSelectorEnums
NUM_BINNINGVERTICALMODE	include/CameraDefs.h	/^		NUM_BINNINGVERTICALMODE$/;"	e	enum:Spinnaker::BinningVerticalModeEnums
NUM_BINNINGVERTICALMODE	include/spinc/CameraDefsC.h	/^	NUM_BINNINGVERTICALMODE$/;"	e	enum:_spinBinningVerticalModeEnums
NUM_BLACKLEVELAUTO	include/CameraDefs.h	/^		NUM_BLACKLEVELAUTO$/;"	e	enum:Spinnaker::BlackLevelAutoEnums
NUM_BLACKLEVELAUTO	include/spinc/CameraDefsC.h	/^	NUM_BLACKLEVELAUTO$/;"	e	enum:_spinBlackLevelAutoEnums
NUM_BLACKLEVELAUTOBALANCE	include/CameraDefs.h	/^		NUM_BLACKLEVELAUTOBALANCE$/;"	e	enum:Spinnaker::BlackLevelAutoBalanceEnums
NUM_BLACKLEVELAUTOBALANCE	include/spinc/CameraDefsC.h	/^	NUM_BLACKLEVELAUTOBALANCE$/;"	e	enum:_spinBlackLevelAutoBalanceEnums
NUM_BLACKLEVELSELECTOR	include/CameraDefs.h	/^		NUM_BLACKLEVELSELECTOR$/;"	e	enum:Spinnaker::BlackLevelSelectorEnums
NUM_BLACKLEVELSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_BLACKLEVELSELECTOR$/;"	e	enum:_spinBlackLevelSelectorEnums
NUM_CHUNKBLACKLEVELSELECTOR	include/CameraDefs.h	/^		NUM_CHUNKBLACKLEVELSELECTOR$/;"	e	enum:Spinnaker::ChunkBlackLevelSelectorEnums
NUM_CHUNKBLACKLEVELSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_CHUNKBLACKLEVELSELECTOR$/;"	e	enum:_spinChunkBlackLevelSelectorEnums
NUM_CHUNKCOUNTERSELECTOR	include/CameraDefs.h	/^		NUM_CHUNKCOUNTERSELECTOR$/;"	e	enum:Spinnaker::ChunkCounterSelectorEnums
NUM_CHUNKCOUNTERSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_CHUNKCOUNTERSELECTOR$/;"	e	enum:_spinChunkCounterSelectorEnums
NUM_CHUNKENCODERSELECTOR	include/CameraDefs.h	/^		NUM_CHUNKENCODERSELECTOR$/;"	e	enum:Spinnaker::ChunkEncoderSelectorEnums
NUM_CHUNKENCODERSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_CHUNKENCODERSELECTOR$/;"	e	enum:_spinChunkEncoderSelectorEnums
NUM_CHUNKENCODERSTATUS	include/CameraDefs.h	/^		NUM_CHUNKENCODERSTATUS$/;"	e	enum:Spinnaker::ChunkEncoderStatusEnums
NUM_CHUNKENCODERSTATUS	include/spinc/CameraDefsC.h	/^	NUM_CHUNKENCODERSTATUS$/;"	e	enum:_spinChunkEncoderStatusEnums
NUM_CHUNKEXPOSURETIMESELECTOR	include/CameraDefs.h	/^		NUM_CHUNKEXPOSURETIMESELECTOR$/;"	e	enum:Spinnaker::ChunkExposureTimeSelectorEnums
NUM_CHUNKEXPOSURETIMESELECTOR	include/spinc/CameraDefsC.h	/^	NUM_CHUNKEXPOSURETIMESELECTOR$/;"	e	enum:_spinChunkExposureTimeSelectorEnums
NUM_CHUNKGAINSELECTOR	include/CameraDefs.h	/^		NUM_CHUNKGAINSELECTOR$/;"	e	enum:Spinnaker::ChunkGainSelectorEnums
NUM_CHUNKGAINSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_CHUNKGAINSELECTOR$/;"	e	enum:_spinChunkGainSelectorEnums
NUM_CHUNKIMAGECOMPONENT	include/CameraDefs.h	/^		NUM_CHUNKIMAGECOMPONENT$/;"	e	enum:Spinnaker::ChunkImageComponentEnums
NUM_CHUNKIMAGECOMPONENT	include/spinc/CameraDefsC.h	/^	NUM_CHUNKIMAGECOMPONENT$/;"	e	enum:_spinChunkImageComponentEnums
NUM_CHUNKPIXELFORMAT	include/CameraDefs.h	/^		NUM_CHUNKPIXELFORMAT$/;"	e	enum:Spinnaker::ChunkPixelFormatEnums
NUM_CHUNKPIXELFORMAT	include/spinc/CameraDefsC.h	/^	NUM_CHUNKPIXELFORMAT$/;"	e	enum:_spinChunkPixelFormatEnums
NUM_CHUNKREGIONID	include/CameraDefs.h	/^		NUM_CHUNKREGIONID$/;"	e	enum:Spinnaker::ChunkRegionIDEnums
NUM_CHUNKREGIONID	include/spinc/CameraDefsC.h	/^	NUM_CHUNKREGIONID$/;"	e	enum:_spinChunkRegionIDEnums
NUM_CHUNKSCAN3DCOORDINATEREFERENCESELECTOR	include/CameraDefs.h	/^		NUM_CHUNKSCAN3DCOORDINATEREFERENCESELECTOR$/;"	e	enum:Spinnaker::ChunkScan3dCoordinateReferenceSelectorEnums
NUM_CHUNKSCAN3DCOORDINATEREFERENCESELECTOR	include/spinc/CameraDefsC.h	/^	NUM_CHUNKSCAN3DCOORDINATEREFERENCESELECTOR$/;"	e	enum:_spinChunkScan3dCoordinateReferenceSelectorEnums
NUM_CHUNKSCAN3DCOORDINATESELECTOR	include/CameraDefs.h	/^		NUM_CHUNKSCAN3DCOORDINATESELECTOR$/;"	e	enum:Spinnaker::ChunkScan3dCoordinateSelectorEnums
NUM_CHUNKSCAN3DCOORDINATESELECTOR	include/spinc/CameraDefsC.h	/^	NUM_CHUNKSCAN3DCOORDINATESELECTOR$/;"	e	enum:_spinChunkScan3dCoordinateSelectorEnums
NUM_CHUNKSCAN3DCOORDINATESYSTEM	include/CameraDefs.h	/^		NUM_CHUNKSCAN3DCOORDINATESYSTEM$/;"	e	enum:Spinnaker::ChunkScan3dCoordinateSystemEnums
NUM_CHUNKSCAN3DCOORDINATESYSTEM	include/spinc/CameraDefsC.h	/^	NUM_CHUNKSCAN3DCOORDINATESYSTEM$/;"	e	enum:_spinChunkScan3dCoordinateSystemEnums
NUM_CHUNKSCAN3DCOORDINATESYSTEMREFERENCE	include/CameraDefs.h	/^		NUM_CHUNKSCAN3DCOORDINATESYSTEMREFERENCE$/;"	e	enum:Spinnaker::ChunkScan3dCoordinateSystemReferenceEnums
NUM_CHUNKSCAN3DCOORDINATESYSTEMREFERENCE	include/spinc/CameraDefsC.h	/^	NUM_CHUNKSCAN3DCOORDINATESYSTEMREFERENCE$/;"	e	enum:_spinChunkScan3dCoordinateSystemReferenceEnums
NUM_CHUNKSCAN3DCOORDINATETRANSFORMSELECTOR	include/CameraDefs.h	/^		NUM_CHUNKSCAN3DCOORDINATETRANSFORMSELECTOR$/;"	e	enum:Spinnaker::ChunkScan3dCoordinateTransformSelectorEnums
NUM_CHUNKSCAN3DCOORDINATETRANSFORMSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_CHUNKSCAN3DCOORDINATETRANSFORMSELECTOR$/;"	e	enum:_spinChunkScan3dCoordinateTransformSelectorEnums
NUM_CHUNKSCAN3DDISTANCEUNIT	include/CameraDefs.h	/^		NUM_CHUNKSCAN3DDISTANCEUNIT$/;"	e	enum:Spinnaker::ChunkScan3dDistanceUnitEnums
NUM_CHUNKSCAN3DDISTANCEUNIT	include/spinc/CameraDefsC.h	/^	NUM_CHUNKSCAN3DDISTANCEUNIT$/;"	e	enum:_spinChunkScan3dDistanceUnitEnums
NUM_CHUNKSCAN3DOUTPUTMODE	include/CameraDefs.h	/^		NUM_CHUNKSCAN3DOUTPUTMODE$/;"	e	enum:Spinnaker::ChunkScan3dOutputModeEnums
NUM_CHUNKSCAN3DOUTPUTMODE	include/spinc/CameraDefsC.h	/^	NUM_CHUNKSCAN3DOUTPUTMODE$/;"	e	enum:_spinChunkScan3dOutputModeEnums
NUM_CHUNKSELECTOR	include/CameraDefs.h	/^		NUM_CHUNKSELECTOR$/;"	e	enum:Spinnaker::ChunkSelectorEnums
NUM_CHUNKSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_CHUNKSELECTOR$/;"	e	enum:_spinChunkSelectorEnums
NUM_CHUNKSOURCEID	include/CameraDefs.h	/^		NUM_CHUNKSOURCEID$/;"	e	enum:Spinnaker::ChunkSourceIDEnums
NUM_CHUNKSOURCEID	include/spinc/CameraDefsC.h	/^	NUM_CHUNKSOURCEID$/;"	e	enum:_spinChunkSourceIDEnums
NUM_CHUNKTIMERSELECTOR	include/CameraDefs.h	/^		NUM_CHUNKTIMERSELECTOR$/;"	e	enum:Spinnaker::ChunkTimerSelectorEnums
NUM_CHUNKTIMERSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_CHUNKTIMERSELECTOR$/;"	e	enum:_spinChunkTimerSelectorEnums
NUM_CHUNKTRANSFERSTREAMID	include/CameraDefs.h	/^		NUM_CHUNKTRANSFERSTREAMID$/;"	e	enum:Spinnaker::ChunkTransferStreamIDEnums
NUM_CHUNKTRANSFERSTREAMID	include/spinc/CameraDefsC.h	/^	NUM_CHUNKTRANSFERSTREAMID$/;"	e	enum:_spinChunkTransferStreamIDEnums
NUM_CLCONFIGURATION	include/CameraDefs.h	/^		NUM_CLCONFIGURATION$/;"	e	enum:Spinnaker::ClConfigurationEnums
NUM_CLCONFIGURATION	include/spinc/CameraDefsC.h	/^	NUM_CLCONFIGURATION$/;"	e	enum:_spinClConfigurationEnums
NUM_CLTIMESLOTSCOUNT	include/CameraDefs.h	/^		NUM_CLTIMESLOTSCOUNT$/;"	e	enum:Spinnaker::ClTimeSlotsCountEnums
NUM_CLTIMESLOTSCOUNT	include/spinc/CameraDefsC.h	/^	NUM_CLTIMESLOTSCOUNT$/;"	e	enum:_spinClTimeSlotsCountEnums
NUM_COLORTRANSFORMATIONSELECTOR	include/CameraDefs.h	/^		NUM_COLORTRANSFORMATIONSELECTOR$/;"	e	enum:Spinnaker::ColorTransformationSelectorEnums
NUM_COLORTRANSFORMATIONSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_COLORTRANSFORMATIONSELECTOR$/;"	e	enum:_spinColorTransformationSelectorEnums
NUM_COLORTRANSFORMATIONVALUESELECTOR	include/CameraDefs.h	/^		NUM_COLORTRANSFORMATIONVALUESELECTOR$/;"	e	enum:Spinnaker::ColorTransformationValueSelectorEnums
NUM_COLORTRANSFORMATIONVALUESELECTOR	include/spinc/CameraDefsC.h	/^	NUM_COLORTRANSFORMATIONVALUESELECTOR$/;"	e	enum:_spinColorTransformationValueSelectorEnums
NUM_COUNTEREVENTACTIVATION	include/CameraDefs.h	/^		NUM_COUNTEREVENTACTIVATION$/;"	e	enum:Spinnaker::CounterEventActivationEnums
NUM_COUNTEREVENTACTIVATION	include/spinc/CameraDefsC.h	/^	NUM_COUNTEREVENTACTIVATION$/;"	e	enum:_spinCounterEventActivationEnums
NUM_COUNTEREVENTSOURCE	include/CameraDefs.h	/^		NUM_COUNTEREVENTSOURCE$/;"	e	enum:Spinnaker::CounterEventSourceEnums
NUM_COUNTEREVENTSOURCE	include/spinc/CameraDefsC.h	/^	NUM_COUNTEREVENTSOURCE$/;"	e	enum:_spinCounterEventSourceEnums
NUM_COUNTERRESETACTIVATION	include/CameraDefs.h	/^		NUM_COUNTERRESETACTIVATION$/;"	e	enum:Spinnaker::CounterResetActivationEnums
NUM_COUNTERRESETACTIVATION	include/spinc/CameraDefsC.h	/^	NUM_COUNTERRESETACTIVATION$/;"	e	enum:_spinCounterResetActivationEnums
NUM_COUNTERRESETSOURCE	include/CameraDefs.h	/^		NUM_COUNTERRESETSOURCE$/;"	e	enum:Spinnaker::CounterResetSourceEnums
NUM_COUNTERRESETSOURCE	include/spinc/CameraDefsC.h	/^	NUM_COUNTERRESETSOURCE$/;"	e	enum:_spinCounterResetSourceEnums
NUM_COUNTERSELECTOR	include/CameraDefs.h	/^		NUM_COUNTERSELECTOR$/;"	e	enum:Spinnaker::CounterSelectorEnums
NUM_COUNTERSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_COUNTERSELECTOR$/;"	e	enum:_spinCounterSelectorEnums
NUM_COUNTERSTATUS	include/CameraDefs.h	/^		NUM_COUNTERSTATUS$/;"	e	enum:Spinnaker::CounterStatusEnums
NUM_COUNTERSTATUS	include/spinc/CameraDefsC.h	/^	NUM_COUNTERSTATUS$/;"	e	enum:_spinCounterStatusEnums
NUM_COUNTERTRIGGERACTIVATION	include/CameraDefs.h	/^		NUM_COUNTERTRIGGERACTIVATION$/;"	e	enum:Spinnaker::CounterTriggerActivationEnums
NUM_COUNTERTRIGGERACTIVATION	include/spinc/CameraDefsC.h	/^	NUM_COUNTERTRIGGERACTIVATION$/;"	e	enum:_spinCounterTriggerActivationEnums
NUM_COUNTERTRIGGERSOURCE	include/CameraDefs.h	/^		NUM_COUNTERTRIGGERSOURCE$/;"	e	enum:Spinnaker::CounterTriggerSourceEnums
NUM_COUNTERTRIGGERSOURCE	include/spinc/CameraDefsC.h	/^	NUM_COUNTERTRIGGERSOURCE$/;"	e	enum:_spinCounterTriggerSourceEnums
NUM_CXPCONNECTIONTESTMODE	include/CameraDefs.h	/^		NUM_CXPCONNECTIONTESTMODE$/;"	e	enum:Spinnaker::CxpConnectionTestModeEnums
NUM_CXPCONNECTIONTESTMODE	include/spinc/CameraDefsC.h	/^	NUM_CXPCONNECTIONTESTMODE$/;"	e	enum:_spinCxpConnectionTestModeEnums
NUM_CXPLINKCONFIGURATION	include/CameraDefs.h	/^		NUM_CXPLINKCONFIGURATION$/;"	e	enum:Spinnaker::CxpLinkConfigurationEnums
NUM_CXPLINKCONFIGURATION	include/spinc/CameraDefsC.h	/^	NUM_CXPLINKCONFIGURATION$/;"	e	enum:_spinCxpLinkConfigurationEnums
NUM_CXPLINKCONFIGURATIONPREFERRED	include/CameraDefs.h	/^		NUM_CXPLINKCONFIGURATIONPREFERRED$/;"	e	enum:Spinnaker::CxpLinkConfigurationPreferredEnums
NUM_CXPLINKCONFIGURATIONPREFERRED	include/spinc/CameraDefsC.h	/^	NUM_CXPLINKCONFIGURATIONPREFERRED$/;"	e	enum:_spinCxpLinkConfigurationPreferredEnums
NUM_CXPLINKCONFIGURATIONSTATUS	include/CameraDefs.h	/^		NUM_CXPLINKCONFIGURATIONSTATUS$/;"	e	enum:Spinnaker::CxpLinkConfigurationStatusEnums
NUM_CXPLINKCONFIGURATIONSTATUS	include/spinc/CameraDefsC.h	/^	NUM_CXPLINKCONFIGURATIONSTATUS$/;"	e	enum:_spinCxpLinkConfigurationStatusEnums
NUM_CXPPOCXPSTATUS	include/CameraDefs.h	/^		NUM_CXPPOCXPSTATUS$/;"	e	enum:Spinnaker::CxpPoCxpStatusEnums
NUM_CXPPOCXPSTATUS	include/spinc/CameraDefsC.h	/^	NUM_CXPPOCXPSTATUS$/;"	e	enum:_spinCxpPoCxpStatusEnums
NUM_DECIMATIONHORIZONTALMODE	include/CameraDefs.h	/^		NUM_DECIMATIONHORIZONTALMODE$/;"	e	enum:Spinnaker::DecimationHorizontalModeEnums
NUM_DECIMATIONHORIZONTALMODE	include/spinc/CameraDefsC.h	/^	NUM_DECIMATIONHORIZONTALMODE$/;"	e	enum:_spinDecimationHorizontalModeEnums
NUM_DECIMATIONVERTICALMODE	include/CameraDefs.h	/^		NUM_DECIMATIONVERTICALMODE$/;"	e	enum:Spinnaker::DecimationVerticalModeEnums
NUM_DECIMATIONVERTICALMODE	include/spinc/CameraDefsC.h	/^	NUM_DECIMATIONVERTICALMODE$/;"	e	enum:_spinDecimationVerticalModeEnums
NUM_DEINTERLACING	include/CameraDefs.h	/^		NUM_DEINTERLACING$/;"	e	enum:Spinnaker::DeinterlacingEnums
NUM_DEINTERLACING	include/spinc/CameraDefsC.h	/^	NUM_DEINTERLACING$/;"	e	enum:_spinDeinterlacingEnums
NUM_DEVICECHARACTERSET	include/CameraDefs.h	/^		NUM_DEVICECHARACTERSET$/;"	e	enum:Spinnaker::DeviceCharacterSetEnums
NUM_DEVICECHARACTERSET	include/spinc/CameraDefsC.h	/^	NUM_DEVICECHARACTERSET$/;"	e	enum:_spinDeviceCharacterSetEnums
NUM_DEVICECLOCKSELECTOR	include/CameraDefs.h	/^		NUM_DEVICECLOCKSELECTOR$/;"	e	enum:Spinnaker::DeviceClockSelectorEnums
NUM_DEVICECLOCKSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_DEVICECLOCKSELECTOR$/;"	e	enum:_spinDeviceClockSelectorEnums
NUM_DEVICECONNECTIONSTATUS	include/CameraDefs.h	/^		NUM_DEVICECONNECTIONSTATUS$/;"	e	enum:Spinnaker::DeviceConnectionStatusEnums
NUM_DEVICECONNECTIONSTATUS	include/spinc/CameraDefsC.h	/^	NUM_DEVICECONNECTIONSTATUS$/;"	e	enum:_spinDeviceConnectionStatusEnums
NUM_DEVICEINDICATORMODE	include/CameraDefs.h	/^		NUM_DEVICEINDICATORMODE$/;"	e	enum:Spinnaker::DeviceIndicatorModeEnums
NUM_DEVICEINDICATORMODE	include/spinc/CameraDefsC.h	/^	NUM_DEVICEINDICATORMODE$/;"	e	enum:_spinDeviceIndicatorModeEnums
NUM_DEVICELINKHEARTBEATMODE	include/CameraDefs.h	/^		NUM_DEVICELINKHEARTBEATMODE$/;"	e	enum:Spinnaker::DeviceLinkHeartbeatModeEnums
NUM_DEVICELINKHEARTBEATMODE	include/spinc/CameraDefsC.h	/^	NUM_DEVICELINKHEARTBEATMODE$/;"	e	enum:_spinDeviceLinkHeartbeatModeEnums
NUM_DEVICELINKTHROUGHPUTLIMITMODE	include/CameraDefs.h	/^		NUM_DEVICELINKTHROUGHPUTLIMITMODE$/;"	e	enum:Spinnaker::DeviceLinkThroughputLimitModeEnums
NUM_DEVICELINKTHROUGHPUTLIMITMODE	include/spinc/CameraDefsC.h	/^	NUM_DEVICELINKTHROUGHPUTLIMITMODE$/;"	e	enum:_spinDeviceLinkThroughputLimitModeEnums
NUM_DEVICEREGISTERSENDIANNESS	include/CameraDefs.h	/^		NUM_DEVICEREGISTERSENDIANNESS$/;"	e	enum:Spinnaker::DeviceRegistersEndiannessEnums
NUM_DEVICEREGISTERSENDIANNESS	include/spinc/CameraDefsC.h	/^	NUM_DEVICEREGISTERSENDIANNESS$/;"	e	enum:_spinDeviceRegistersEndiannessEnums
NUM_DEVICESCANTYPE	include/CameraDefs.h	/^		NUM_DEVICESCANTYPE$/;"	e	enum:Spinnaker::DeviceScanTypeEnums
NUM_DEVICESCANTYPE	include/spinc/CameraDefsC.h	/^	NUM_DEVICESCANTYPE$/;"	e	enum:_spinDeviceScanTypeEnums
NUM_DEVICESERIALPORTBAUDRATE	include/CameraDefs.h	/^		NUM_DEVICESERIALPORTBAUDRATE$/;"	e	enum:Spinnaker::DeviceSerialPortBaudRateEnums
NUM_DEVICESERIALPORTBAUDRATE	include/spinc/CameraDefsC.h	/^	NUM_DEVICESERIALPORTBAUDRATE$/;"	e	enum:_spinDeviceSerialPortBaudRateEnums
NUM_DEVICESERIALPORTSELECTOR	include/CameraDefs.h	/^		NUM_DEVICESERIALPORTSELECTOR$/;"	e	enum:Spinnaker::DeviceSerialPortSelectorEnums
NUM_DEVICESERIALPORTSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_DEVICESERIALPORTSELECTOR$/;"	e	enum:_spinDeviceSerialPortSelectorEnums
NUM_DEVICESTREAMCHANNELENDIANNESS	include/CameraDefs.h	/^		NUM_DEVICESTREAMCHANNELENDIANNESS$/;"	e	enum:Spinnaker::DeviceStreamChannelEndiannessEnums
NUM_DEVICESTREAMCHANNELENDIANNESS	include/spinc/CameraDefsC.h	/^	NUM_DEVICESTREAMCHANNELENDIANNESS$/;"	e	enum:_spinDeviceStreamChannelEndiannessEnums
NUM_DEVICESTREAMCHANNELTYPE	include/CameraDefs.h	/^		NUM_DEVICESTREAMCHANNELTYPE$/;"	e	enum:Spinnaker::DeviceStreamChannelTypeEnums
NUM_DEVICESTREAMCHANNELTYPE	include/spinc/CameraDefsC.h	/^	NUM_DEVICESTREAMCHANNELTYPE$/;"	e	enum:_spinDeviceStreamChannelTypeEnums
NUM_DEVICETAPGEOMETRY	include/CameraDefs.h	/^		NUM_DEVICETAPGEOMETRY$/;"	e	enum:Spinnaker::DeviceTapGeometryEnums
NUM_DEVICETAPGEOMETRY	include/spinc/CameraDefsC.h	/^	NUM_DEVICETAPGEOMETRY$/;"	e	enum:_spinDeviceTapGeometryEnums
NUM_DEVICETEMPERATURESELECTOR	include/CameraDefs.h	/^		NUM_DEVICETEMPERATURESELECTOR$/;"	e	enum:Spinnaker::DeviceTemperatureSelectorEnums
NUM_DEVICETEMPERATURESELECTOR	include/spinc/CameraDefsC.h	/^	NUM_DEVICETEMPERATURESELECTOR$/;"	e	enum:_spinDeviceTemperatureSelectorEnums
NUM_DEVICETLTYPE	include/CameraDefs.h	/^		NUM_DEVICETLTYPE$/;"	e	enum:Spinnaker::DeviceTLTypeEnums
NUM_DEVICETLTYPE	include/spinc/CameraDefsC.h	/^	NUM_DEVICETLTYPE$/;"	e	enum:_spinDeviceTLTypeEnums
NUM_DEVICETYPE	include/CameraDefs.h	/^		NUM_DEVICETYPE$/;"	e	enum:Spinnaker::DeviceTypeEnums
NUM_DEVICETYPE	include/spinc/CameraDefsC.h	/^	NUM_DEVICETYPE$/;"	e	enum:_spinDeviceTypeEnums
NUM_ENCODERMODE	include/CameraDefs.h	/^		NUM_ENCODERMODE$/;"	e	enum:Spinnaker::EncoderModeEnums
NUM_ENCODERMODE	include/spinc/CameraDefsC.h	/^	NUM_ENCODERMODE$/;"	e	enum:_spinEncoderModeEnums
NUM_ENCODEROUTPUTMODE	include/CameraDefs.h	/^		NUM_ENCODEROUTPUTMODE$/;"	e	enum:Spinnaker::EncoderOutputModeEnums
NUM_ENCODEROUTPUTMODE	include/spinc/CameraDefsC.h	/^	NUM_ENCODEROUTPUTMODE$/;"	e	enum:_spinEncoderOutputModeEnums
NUM_ENCODERRESETACTIVATION	include/CameraDefs.h	/^		NUM_ENCODERRESETACTIVATION$/;"	e	enum:Spinnaker::EncoderResetActivationEnums
NUM_ENCODERRESETACTIVATION	include/spinc/CameraDefsC.h	/^	NUM_ENCODERRESETACTIVATION$/;"	e	enum:_spinEncoderResetActivationEnums
NUM_ENCODERRESETSOURCE	include/CameraDefs.h	/^		NUM_ENCODERRESETSOURCE$/;"	e	enum:Spinnaker::EncoderResetSourceEnums
NUM_ENCODERRESETSOURCE	include/spinc/CameraDefsC.h	/^	NUM_ENCODERRESETSOURCE$/;"	e	enum:_spinEncoderResetSourceEnums
NUM_ENCODERSELECTOR	include/CameraDefs.h	/^		NUM_ENCODERSELECTOR$/;"	e	enum:Spinnaker::EncoderSelectorEnums
NUM_ENCODERSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_ENCODERSELECTOR$/;"	e	enum:_spinEncoderSelectorEnums
NUM_ENCODERSOURCEA	include/CameraDefs.h	/^		NUM_ENCODERSOURCEA$/;"	e	enum:Spinnaker::EncoderSourceAEnums
NUM_ENCODERSOURCEA	include/spinc/CameraDefsC.h	/^	NUM_ENCODERSOURCEA$/;"	e	enum:_spinEncoderSourceAEnums
NUM_ENCODERSOURCEB	include/CameraDefs.h	/^		NUM_ENCODERSOURCEB$/;"	e	enum:Spinnaker::EncoderSourceBEnums
NUM_ENCODERSOURCEB	include/spinc/CameraDefsC.h	/^	NUM_ENCODERSOURCEB$/;"	e	enum:_spinEncoderSourceBEnums
NUM_ENCODERSTATUS	include/CameraDefs.h	/^		NUM_ENCODERSTATUS$/;"	e	enum:Spinnaker::EncoderStatusEnums
NUM_ENCODERSTATUS	include/spinc/CameraDefsC.h	/^	NUM_ENCODERSTATUS$/;"	e	enum:_spinEncoderStatusEnums
NUM_EVENTNOTIFICATION	include/CameraDefs.h	/^		NUM_EVENTNOTIFICATION$/;"	e	enum:Spinnaker::EventNotificationEnums
NUM_EVENTNOTIFICATION	include/spinc/CameraDefsC.h	/^	NUM_EVENTNOTIFICATION$/;"	e	enum:_spinEventNotificationEnums
NUM_EVENTSELECTOR	include/CameraDefs.h	/^		NUM_EVENTSELECTOR$/;"	e	enum:Spinnaker::EventSelectorEnums
NUM_EVENTSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_EVENTSELECTOR$/;"	e	enum:_spinEventSelectorEnums
NUM_EXPOSUREAUTO	include/CameraDefs.h	/^		NUM_EXPOSUREAUTO$/;"	e	enum:Spinnaker::ExposureAutoEnums
NUM_EXPOSUREAUTO	include/spinc/CameraDefsC.h	/^	NUM_EXPOSUREAUTO$/;"	e	enum:_spinExposureAutoEnums
NUM_EXPOSUREMODE	include/CameraDefs.h	/^		NUM_EXPOSUREMODE$/;"	e	enum:Spinnaker::ExposureModeEnums
NUM_EXPOSUREMODE	include/spinc/CameraDefsC.h	/^	NUM_EXPOSUREMODE$/;"	e	enum:_spinExposureModeEnums
NUM_EXPOSURETIMEMODE	include/CameraDefs.h	/^		NUM_EXPOSURETIMEMODE$/;"	e	enum:Spinnaker::ExposureTimeModeEnums
NUM_EXPOSURETIMEMODE	include/spinc/CameraDefsC.h	/^	NUM_EXPOSURETIMEMODE$/;"	e	enum:_spinExposureTimeModeEnums
NUM_EXPOSURETIMESELECTOR	include/CameraDefs.h	/^		NUM_EXPOSURETIMESELECTOR$/;"	e	enum:Spinnaker::ExposureTimeSelectorEnums
NUM_EXPOSURETIMESELECTOR	include/spinc/CameraDefsC.h	/^	NUM_EXPOSURETIMESELECTOR$/;"	e	enum:_spinExposureTimeSelectorEnums
NUM_FILEOPENMODE	include/CameraDefs.h	/^		NUM_FILEOPENMODE$/;"	e	enum:Spinnaker::FileOpenModeEnums
NUM_FILEOPENMODE	include/spinc/CameraDefsC.h	/^	NUM_FILEOPENMODE$/;"	e	enum:_spinFileOpenModeEnums
NUM_FILEOPERATIONSELECTOR	include/CameraDefs.h	/^		NUM_FILEOPERATIONSELECTOR$/;"	e	enum:Spinnaker::FileOperationSelectorEnums
NUM_FILEOPERATIONSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_FILEOPERATIONSELECTOR$/;"	e	enum:_spinFileOperationSelectorEnums
NUM_FILEOPERATIONSTATUS	include/CameraDefs.h	/^		NUM_FILEOPERATIONSTATUS$/;"	e	enum:Spinnaker::FileOperationStatusEnums
NUM_FILEOPERATIONSTATUS	include/spinc/CameraDefsC.h	/^	NUM_FILEOPERATIONSTATUS$/;"	e	enum:_spinFileOperationStatusEnums
NUM_FILESELECTOR	include/CameraDefs.h	/^		NUM_FILESELECTOR$/;"	e	enum:Spinnaker::FileSelectorEnums
NUM_FILESELECTOR	include/spinc/CameraDefsC.h	/^	NUM_FILESELECTOR$/;"	e	enum:_spinFileSelectorEnums
NUM_GAINAUTO	include/CameraDefs.h	/^		NUM_GAINAUTO$/;"	e	enum:Spinnaker::GainAutoEnums
NUM_GAINAUTO	include/spinc/CameraDefsC.h	/^	NUM_GAINAUTO$/;"	e	enum:_spinGainAutoEnums
NUM_GAINAUTOBALANCE	include/CameraDefs.h	/^		NUM_GAINAUTOBALANCE$/;"	e	enum:Spinnaker::GainAutoBalanceEnums
NUM_GAINAUTOBALANCE	include/spinc/CameraDefsC.h	/^	NUM_GAINAUTOBALANCE$/;"	e	enum:_spinGainAutoBalanceEnums
NUM_GAINSELECTOR	include/CameraDefs.h	/^		NUM_GAINSELECTOR$/;"	e	enum:Spinnaker::GainSelectorEnums
NUM_GAINSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_GAINSELECTOR$/;"	e	enum:_spinGainSelectorEnums
NUM_GEVCCP	include/CameraDefs.h	/^		NUM_GEVCCP$/;"	e	enum:Spinnaker::GevCCPEnums
NUM_GEVCCP	include/spinc/CameraDefsC.h	/^	NUM_GEVCCP$/;"	e	enum:_spinGevCCPEnums
NUM_GEVCURRENTPHYSICALLINKCONFIGURATION	include/CameraDefs.h	/^		NUM_GEVCURRENTPHYSICALLINKCONFIGURATION$/;"	e	enum:Spinnaker::GevCurrentPhysicalLinkConfigurationEnums
NUM_GEVCURRENTPHYSICALLINKCONFIGURATION	include/spinc/CameraDefsC.h	/^	NUM_GEVCURRENTPHYSICALLINKCONFIGURATION$/;"	e	enum:_spinGevCurrentPhysicalLinkConfigurationEnums
NUM_GEVGVCPEXTENDEDSTATUSCODESSELECTOR	include/CameraDefs.h	/^		NUM_GEVGVCPEXTENDEDSTATUSCODESSELECTOR$/;"	e	enum:Spinnaker::GevGVCPExtendedStatusCodesSelectorEnums
NUM_GEVGVCPEXTENDEDSTATUSCODESSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_GEVGVCPEXTENDEDSTATUSCODESSELECTOR$/;"	e	enum:_spinGevGVCPExtendedStatusCodesSelectorEnums
NUM_GEVGVSPEXTENDEDIDMODE	include/CameraDefs.h	/^		NUM_GEVGVSPEXTENDEDIDMODE$/;"	e	enum:Spinnaker::GevGVSPExtendedIDModeEnums
NUM_GEVGVSPEXTENDEDIDMODE	include/spinc/CameraDefsC.h	/^	NUM_GEVGVSPEXTENDEDIDMODE$/;"	e	enum:_spinGevGVSPExtendedIDModeEnums
NUM_GEVIEEE1588CLOCKACCURACY	include/CameraDefs.h	/^		NUM_GEVIEEE1588CLOCKACCURACY$/;"	e	enum:Spinnaker::GevIEEE1588ClockAccuracyEnums
NUM_GEVIEEE1588CLOCKACCURACY	include/spinc/CameraDefsC.h	/^	NUM_GEVIEEE1588CLOCKACCURACY$/;"	e	enum:_spinGevIEEE1588ClockAccuracyEnums
NUM_GEVIEEE1588STATUS	include/CameraDefs.h	/^		NUM_GEVIEEE1588STATUS$/;"	e	enum:Spinnaker::GevIEEE1588StatusEnums
NUM_GEVIEEE1588STATUS	include/spinc/CameraDefsC.h	/^	NUM_GEVIEEE1588STATUS$/;"	e	enum:_spinGevIEEE1588StatusEnums
NUM_GEVIPCONFIGURATIONSTATUS	include/CameraDefs.h	/^		NUM_GEVIPCONFIGURATIONSTATUS$/;"	e	enum:Spinnaker::GevIPConfigurationStatusEnums
NUM_GEVIPCONFIGURATIONSTATUS	include/spinc/CameraDefsC.h	/^	NUM_GEVIPCONFIGURATIONSTATUS$/;"	e	enum:_spinGevIPConfigurationStatusEnums
NUM_GEVPHYSICALLINKCONFIGURATION	include/CameraDefs.h	/^		NUM_GEVPHYSICALLINKCONFIGURATION$/;"	e	enum:Spinnaker::GevPhysicalLinkConfigurationEnums
NUM_GEVPHYSICALLINKCONFIGURATION	include/spinc/CameraDefsC.h	/^	NUM_GEVPHYSICALLINKCONFIGURATION$/;"	e	enum:_spinGevPhysicalLinkConfigurationEnums
NUM_GEVSUPPORTEDOPTIONSELECTOR	include/CameraDefs.h	/^		NUM_GEVSUPPORTEDOPTIONSELECTOR$/;"	e	enum:Spinnaker::GevSupportedOptionSelectorEnums
NUM_GEVSUPPORTEDOPTIONSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_GEVSUPPORTEDOPTIONSELECTOR$/;"	e	enum:_spinGevSupportedOptionSelectorEnums
NUM_IMAGECOMPONENTSELECTOR	include/CameraDefs.h	/^		NUM_IMAGECOMPONENTSELECTOR$/;"	e	enum:Spinnaker::ImageComponentSelectorEnums
NUM_IMAGECOMPONENTSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_IMAGECOMPONENTSELECTOR$/;"	e	enum:_spinImageComponentSelectorEnums
NUM_IMAGECOMPRESSIONJPEGFORMATOPTION	include/CameraDefs.h	/^		NUM_IMAGECOMPRESSIONJPEGFORMATOPTION$/;"	e	enum:Spinnaker::ImageCompressionJPEGFormatOptionEnums
NUM_IMAGECOMPRESSIONJPEGFORMATOPTION	include/spinc/CameraDefsC.h	/^	NUM_IMAGECOMPRESSIONJPEGFORMATOPTION$/;"	e	enum:_spinImageCompressionJPEGFormatOptionEnums
NUM_IMAGECOMPRESSIONMODE	include/CameraDefs.h	/^		NUM_IMAGECOMPRESSIONMODE$/;"	e	enum:Spinnaker::ImageCompressionModeEnums
NUM_IMAGECOMPRESSIONMODE	include/spinc/CameraDefsC.h	/^	NUM_IMAGECOMPRESSIONMODE$/;"	e	enum:_spinImageCompressionModeEnums
NUM_IMAGECOMPRESSIONRATEOPTION	include/CameraDefs.h	/^		NUM_IMAGECOMPRESSIONRATEOPTION$/;"	e	enum:Spinnaker::ImageCompressionRateOptionEnums
NUM_IMAGECOMPRESSIONRATEOPTION	include/spinc/CameraDefsC.h	/^	NUM_IMAGECOMPRESSIONRATEOPTION$/;"	e	enum:_spinImageCompressionRateOptionEnums
NUM_IMAGES	SpinnakerTest/SaveToAvi_C/SaveToAvi_C.cpp	47;"	d	file:
NUM_IMAGES	src/SaveToAvi_C/SaveToAvi_C.cpp	47;"	d	file:
NUM_LINEFORMAT	include/CameraDefs.h	/^		NUM_LINEFORMAT$/;"	e	enum:Spinnaker::LineFormatEnums
NUM_LINEFORMAT	include/spinc/CameraDefsC.h	/^	NUM_LINEFORMAT$/;"	e	enum:_spinLineFormatEnums
NUM_LINEMODE	include/CameraDefs.h	/^		NUM_LINEMODE$/;"	e	enum:Spinnaker::LineModeEnums
NUM_LINEMODE	include/spinc/CameraDefsC.h	/^	NUM_LINEMODE$/;"	e	enum:_spinLineModeEnums
NUM_LINESELECTOR	include/CameraDefs.h	/^		NUM_LINESELECTOR$/;"	e	enum:Spinnaker::LineSelectorEnums
NUM_LINESELECTOR	include/spinc/CameraDefsC.h	/^	NUM_LINESELECTOR$/;"	e	enum:_spinLineSelectorEnums
NUM_LINESOURCE	include/CameraDefs.h	/^		NUM_LINESOURCE$/;"	e	enum:Spinnaker::LineSourceEnums
NUM_LINESOURCE	include/spinc/CameraDefsC.h	/^	NUM_LINESOURCE$/;"	e	enum:_spinLineSourceEnums
NUM_LUTSELECTOR	include/CameraDefs.h	/^		NUM_LUTSELECTOR$/;"	e	enum:Spinnaker::LUTSelectorEnums
NUM_LUTSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_LUTSELECTOR$/;"	e	enum:_spinLUTSelectorEnums
NUM_PIXELCOLORFILTER	include/CameraDefs.h	/^		NUM_PIXELCOLORFILTER$/;"	e	enum:Spinnaker::PixelColorFilterEnums
NUM_PIXELCOLORFILTER	include/spinc/CameraDefsC.h	/^	NUM_PIXELCOLORFILTER$/;"	e	enum:_spinPixelColorFilterEnums
NUM_PIXELFORMAT	include/CameraDefs.h	/^		NUM_PIXELFORMAT$/;"	e	enum:Spinnaker::PixelFormatEnums
NUM_PIXELFORMAT	include/spinc/CameraDefsC.h	/^	NUM_PIXELFORMAT$/;"	e	enum:_spinPixelFormatEnums
NUM_PIXELFORMATINFOSELECTOR	include/CameraDefs.h	/^		NUM_PIXELFORMATINFOSELECTOR$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
NUM_PIXELFORMATINFOSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_PIXELFORMATINFOSELECTOR$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
NUM_PIXELSIZE	include/CameraDefs.h	/^		NUM_PIXELSIZE$/;"	e	enum:Spinnaker::PixelSizeEnums
NUM_PIXELSIZE	include/spinc/CameraDefsC.h	/^	NUM_PIXELSIZE$/;"	e	enum:_spinPixelSizeEnums
NUM_REGIONDESTINATION	include/CameraDefs.h	/^		NUM_REGIONDESTINATION$/;"	e	enum:Spinnaker::RegionDestinationEnums
NUM_REGIONDESTINATION	include/spinc/CameraDefsC.h	/^	NUM_REGIONDESTINATION$/;"	e	enum:_spinRegionDestinationEnums
NUM_REGIONMODE	include/CameraDefs.h	/^		NUM_REGIONMODE$/;"	e	enum:Spinnaker::RegionModeEnums
NUM_REGIONMODE	include/spinc/CameraDefsC.h	/^	NUM_REGIONMODE$/;"	e	enum:_spinRegionModeEnums
NUM_REGIONSELECTOR	include/CameraDefs.h	/^		NUM_REGIONSELECTOR$/;"	e	enum:Spinnaker::RegionSelectorEnums
NUM_REGIONSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_REGIONSELECTOR$/;"	e	enum:_spinRegionSelectorEnums
NUM_SCAN3DCOORDINATEREFERENCESELECTOR	include/CameraDefs.h	/^		NUM_SCAN3DCOORDINATEREFERENCESELECTOR$/;"	e	enum:Spinnaker::Scan3dCoordinateReferenceSelectorEnums
NUM_SCAN3DCOORDINATEREFERENCESELECTOR	include/spinc/CameraDefsC.h	/^	NUM_SCAN3DCOORDINATEREFERENCESELECTOR$/;"	e	enum:_spinScan3dCoordinateReferenceSelectorEnums
NUM_SCAN3DCOORDINATESELECTOR	include/CameraDefs.h	/^		NUM_SCAN3DCOORDINATESELECTOR$/;"	e	enum:Spinnaker::Scan3dCoordinateSelectorEnums
NUM_SCAN3DCOORDINATESELECTOR	include/spinc/CameraDefsC.h	/^	NUM_SCAN3DCOORDINATESELECTOR$/;"	e	enum:_spinScan3dCoordinateSelectorEnums
NUM_SCAN3DCOORDINATESYSTEM	include/CameraDefs.h	/^		NUM_SCAN3DCOORDINATESYSTEM$/;"	e	enum:Spinnaker::Scan3dCoordinateSystemEnums
NUM_SCAN3DCOORDINATESYSTEM	include/spinc/CameraDefsC.h	/^	NUM_SCAN3DCOORDINATESYSTEM$/;"	e	enum:_spinScan3dCoordinateSystemEnums
NUM_SCAN3DCOORDINATESYSTEMREFERENCE	include/CameraDefs.h	/^		NUM_SCAN3DCOORDINATESYSTEMREFERENCE$/;"	e	enum:Spinnaker::Scan3dCoordinateSystemReferenceEnums
NUM_SCAN3DCOORDINATESYSTEMREFERENCE	include/spinc/CameraDefsC.h	/^	NUM_SCAN3DCOORDINATESYSTEMREFERENCE$/;"	e	enum:_spinScan3dCoordinateSystemReferenceEnums
NUM_SCAN3DCOORDINATETRANSFORMSELECTOR	include/CameraDefs.h	/^		NUM_SCAN3DCOORDINATETRANSFORMSELECTOR$/;"	e	enum:Spinnaker::Scan3dCoordinateTransformSelectorEnums
NUM_SCAN3DCOORDINATETRANSFORMSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_SCAN3DCOORDINATETRANSFORMSELECTOR$/;"	e	enum:_spinScan3dCoordinateTransformSelectorEnums
NUM_SCAN3DDISTANCEUNIT	include/CameraDefs.h	/^		NUM_SCAN3DDISTANCEUNIT$/;"	e	enum:Spinnaker::Scan3dDistanceUnitEnums
NUM_SCAN3DDISTANCEUNIT	include/spinc/CameraDefsC.h	/^	NUM_SCAN3DDISTANCEUNIT$/;"	e	enum:_spinScan3dDistanceUnitEnums
NUM_SCAN3DOUTPUTMODE	include/CameraDefs.h	/^		NUM_SCAN3DOUTPUTMODE$/;"	e	enum:Spinnaker::Scan3dOutputModeEnums
NUM_SCAN3DOUTPUTMODE	include/spinc/CameraDefsC.h	/^	NUM_SCAN3DOUTPUTMODE$/;"	e	enum:_spinScan3dOutputModeEnums
NUM_SENSORDIGITIZATIONTAPS	include/CameraDefs.h	/^		NUM_SENSORDIGITIZATIONTAPS$/;"	e	enum:Spinnaker::SensorDigitizationTapsEnums
NUM_SENSORDIGITIZATIONTAPS	include/spinc/CameraDefsC.h	/^	NUM_SENSORDIGITIZATIONTAPS$/;"	e	enum:_spinSensorDigitizationTapsEnums
NUM_SENSORSHUTTERMODE	include/CameraDefs.h	/^		NUM_SENSORSHUTTERMODE$/;"	e	enum:Spinnaker::SensorShutterModeEnums
NUM_SENSORSHUTTERMODE	include/spinc/CameraDefsC.h	/^	NUM_SENSORSHUTTERMODE$/;"	e	enum:_spinSensorShutterModeEnums
NUM_SENSORTAPS	include/CameraDefs.h	/^		NUM_SENSORTAPS$/;"	e	enum:Spinnaker::SensorTapsEnums
NUM_SENSORTAPS	include/spinc/CameraDefsC.h	/^	NUM_SENSORTAPS$/;"	e	enum:_spinSensorTapsEnums
NUM_SEQUENCERCONFIGURATIONMODE	include/CameraDefs.h	/^		NUM_SEQUENCERCONFIGURATIONMODE$/;"	e	enum:Spinnaker::SequencerConfigurationModeEnums
NUM_SEQUENCERCONFIGURATIONMODE	include/spinc/CameraDefsC.h	/^	NUM_SEQUENCERCONFIGURATIONMODE$/;"	e	enum:_spinSequencerConfigurationModeEnums
NUM_SEQUENCERFEATURESELECTOR	include/CameraDefs.h	/^		NUM_SEQUENCERFEATURESELECTOR$/;"	e	enum:Spinnaker::SequencerFeatureSelectorEnums
NUM_SEQUENCERFEATURESELECTOR	include/spinc/CameraDefsC.h	/^	NUM_SEQUENCERFEATURESELECTOR$/;"	e	enum:_spinSequencerFeatureSelectorEnums
NUM_SEQUENCERMODE	include/CameraDefs.h	/^		NUM_SEQUENCERMODE$/;"	e	enum:Spinnaker::SequencerModeEnums
NUM_SEQUENCERMODE	include/spinc/CameraDefsC.h	/^	NUM_SEQUENCERMODE$/;"	e	enum:_spinSequencerModeEnums
NUM_SEQUENCERTRIGGERACTIVATION	include/CameraDefs.h	/^		NUM_SEQUENCERTRIGGERACTIVATION$/;"	e	enum:Spinnaker::SequencerTriggerActivationEnums
NUM_SEQUENCERTRIGGERACTIVATION	include/spinc/CameraDefsC.h	/^	NUM_SEQUENCERTRIGGERACTIVATION$/;"	e	enum:_spinSequencerTriggerActivationEnums
NUM_SEQUENCERTRIGGERSOURCE	include/CameraDefs.h	/^		NUM_SEQUENCERTRIGGERSOURCE$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
NUM_SEQUENCERTRIGGERSOURCE	include/spinc/CameraDefsC.h	/^	NUM_SEQUENCERTRIGGERSOURCE$/;"	e	enum:_spinSequencerTriggerSourceEnums
NUM_SOFTWARESIGNALSELECTOR	include/CameraDefs.h	/^		NUM_SOFTWARESIGNALSELECTOR$/;"	e	enum:Spinnaker::SoftwareSignalSelectorEnums
NUM_SOFTWARESIGNALSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_SOFTWARESIGNALSELECTOR$/;"	e	enum:_spinSoftwareSignalSelectorEnums
NUM_SOURCESELECTOR	include/CameraDefs.h	/^		NUM_SOURCESELECTOR$/;"	e	enum:Spinnaker::SourceSelectorEnums
NUM_SOURCESELECTOR	include/spinc/CameraDefsC.h	/^	NUM_SOURCESELECTOR$/;"	e	enum:_spinSourceSelectorEnums
NUM_STATISTICS_CHANNELS	include/SpinnakerDefs.h	/^		NUM_STATISTICS_CHANNELS$/;"	e	enum:Spinnaker::StatisticsChannel
NUM_STATISTICS_CHANNELS	include/spinc/SpinnakerDefsC.h	/^	NUM_STATISTICS_CHANNELS$/;"	e	enum:_spinStatisticsChannel
NUM_TESTPATTERN	include/CameraDefs.h	/^		NUM_TESTPATTERN$/;"	e	enum:Spinnaker::TestPatternEnums
NUM_TESTPATTERN	include/spinc/CameraDefsC.h	/^	NUM_TESTPATTERN$/;"	e	enum:_spinTestPatternEnums
NUM_TESTPATTERNGENERATORSELECTOR	include/CameraDefs.h	/^		NUM_TESTPATTERNGENERATORSELECTOR$/;"	e	enum:Spinnaker::TestPatternGeneratorSelectorEnums
NUM_TESTPATTERNGENERATORSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_TESTPATTERNGENERATORSELECTOR$/;"	e	enum:_spinTestPatternGeneratorSelectorEnums
NUM_TIMERSELECTOR	include/CameraDefs.h	/^		NUM_TIMERSELECTOR$/;"	e	enum:Spinnaker::TimerSelectorEnums
NUM_TIMERSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_TIMERSELECTOR$/;"	e	enum:_spinTimerSelectorEnums
NUM_TIMERSTATUS	include/CameraDefs.h	/^		NUM_TIMERSTATUS$/;"	e	enum:Spinnaker::TimerStatusEnums
NUM_TIMERSTATUS	include/spinc/CameraDefsC.h	/^	NUM_TIMERSTATUS$/;"	e	enum:_spinTimerStatusEnums
NUM_TIMERTRIGGERACTIVATION	include/CameraDefs.h	/^		NUM_TIMERTRIGGERACTIVATION$/;"	e	enum:Spinnaker::TimerTriggerActivationEnums
NUM_TIMERTRIGGERACTIVATION	include/spinc/CameraDefsC.h	/^	NUM_TIMERTRIGGERACTIVATION$/;"	e	enum:_spinTimerTriggerActivationEnums
NUM_TIMERTRIGGERSOURCE	include/CameraDefs.h	/^		NUM_TIMERTRIGGERSOURCE$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
NUM_TIMERTRIGGERSOURCE	include/spinc/CameraDefsC.h	/^	NUM_TIMERTRIGGERSOURCE$/;"	e	enum:_spinTimerTriggerSourceEnums
NUM_TRANSFERCOMPONENTSELECTOR	include/CameraDefs.h	/^		NUM_TRANSFERCOMPONENTSELECTOR$/;"	e	enum:Spinnaker::TransferComponentSelectorEnums
NUM_TRANSFERCOMPONENTSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_TRANSFERCOMPONENTSELECTOR$/;"	e	enum:_spinTransferComponentSelectorEnums
NUM_TRANSFERCONTROLMODE	include/CameraDefs.h	/^		NUM_TRANSFERCONTROLMODE$/;"	e	enum:Spinnaker::TransferControlModeEnums
NUM_TRANSFERCONTROLMODE	include/spinc/CameraDefsC.h	/^	NUM_TRANSFERCONTROLMODE$/;"	e	enum:_spinTransferControlModeEnums
NUM_TRANSFEROPERATIONMODE	include/CameraDefs.h	/^		NUM_TRANSFEROPERATIONMODE$/;"	e	enum:Spinnaker::TransferOperationModeEnums
NUM_TRANSFEROPERATIONMODE	include/spinc/CameraDefsC.h	/^	NUM_TRANSFEROPERATIONMODE$/;"	e	enum:_spinTransferOperationModeEnums
NUM_TRANSFERQUEUEMODE	include/CameraDefs.h	/^		NUM_TRANSFERQUEUEMODE$/;"	e	enum:Spinnaker::TransferQueueModeEnums
NUM_TRANSFERQUEUEMODE	include/spinc/CameraDefsC.h	/^	NUM_TRANSFERQUEUEMODE$/;"	e	enum:_spinTransferQueueModeEnums
NUM_TRANSFERSELECTOR	include/CameraDefs.h	/^		NUM_TRANSFERSELECTOR$/;"	e	enum:Spinnaker::TransferSelectorEnums
NUM_TRANSFERSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_TRANSFERSELECTOR$/;"	e	enum:_spinTransferSelectorEnums
NUM_TRANSFERSTATUSSELECTOR	include/CameraDefs.h	/^		NUM_TRANSFERSTATUSSELECTOR$/;"	e	enum:Spinnaker::TransferStatusSelectorEnums
NUM_TRANSFERSTATUSSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_TRANSFERSTATUSSELECTOR$/;"	e	enum:_spinTransferStatusSelectorEnums
NUM_TRANSFERTRIGGERACTIVATION	include/CameraDefs.h	/^		NUM_TRANSFERTRIGGERACTIVATION$/;"	e	enum:Spinnaker::TransferTriggerActivationEnums
NUM_TRANSFERTRIGGERACTIVATION	include/spinc/CameraDefsC.h	/^	NUM_TRANSFERTRIGGERACTIVATION$/;"	e	enum:_spinTransferTriggerActivationEnums
NUM_TRANSFERTRIGGERMODE	include/CameraDefs.h	/^		NUM_TRANSFERTRIGGERMODE$/;"	e	enum:Spinnaker::TransferTriggerModeEnums
NUM_TRANSFERTRIGGERMODE	include/spinc/CameraDefsC.h	/^	NUM_TRANSFERTRIGGERMODE$/;"	e	enum:_spinTransferTriggerModeEnums
NUM_TRANSFERTRIGGERSELECTOR	include/CameraDefs.h	/^		NUM_TRANSFERTRIGGERSELECTOR$/;"	e	enum:Spinnaker::TransferTriggerSelectorEnums
NUM_TRANSFERTRIGGERSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_TRANSFERTRIGGERSELECTOR$/;"	e	enum:_spinTransferTriggerSelectorEnums
NUM_TRANSFERTRIGGERSOURCE	include/CameraDefs.h	/^		NUM_TRANSFERTRIGGERSOURCE$/;"	e	enum:Spinnaker::TransferTriggerSourceEnums
NUM_TRANSFERTRIGGERSOURCE	include/spinc/CameraDefsC.h	/^	NUM_TRANSFERTRIGGERSOURCE$/;"	e	enum:_spinTransferTriggerSourceEnums
NUM_TRIGGERACTIVATION	include/CameraDefs.h	/^		NUM_TRIGGERACTIVATION$/;"	e	enum:Spinnaker::TriggerActivationEnums
NUM_TRIGGERACTIVATION	include/spinc/CameraDefsC.h	/^	NUM_TRIGGERACTIVATION$/;"	e	enum:_spinTriggerActivationEnums
NUM_TRIGGERMODE	include/CameraDefs.h	/^		NUM_TRIGGERMODE$/;"	e	enum:Spinnaker::TriggerModeEnums
NUM_TRIGGERMODE	include/spinc/CameraDefsC.h	/^	NUM_TRIGGERMODE$/;"	e	enum:_spinTriggerModeEnums
NUM_TRIGGEROVERLAP	include/CameraDefs.h	/^		NUM_TRIGGEROVERLAP$/;"	e	enum:Spinnaker::TriggerOverlapEnums
NUM_TRIGGEROVERLAP	include/spinc/CameraDefsC.h	/^	NUM_TRIGGEROVERLAP$/;"	e	enum:_spinTriggerOverlapEnums
NUM_TRIGGERSELECTOR	include/CameraDefs.h	/^		NUM_TRIGGERSELECTOR$/;"	e	enum:Spinnaker::TriggerSelectorEnums
NUM_TRIGGERSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_TRIGGERSELECTOR$/;"	e	enum:_spinTriggerSelectorEnums
NUM_TRIGGERSOURCE	include/CameraDefs.h	/^		NUM_TRIGGERSOURCE$/;"	e	enum:Spinnaker::TriggerSourceEnums
NUM_TRIGGERSOURCE	include/spinc/CameraDefsC.h	/^	NUM_TRIGGERSOURCE$/;"	e	enum:_spinTriggerSourceEnums
NUM_USEROUTPUTSELECTOR	include/CameraDefs.h	/^		NUM_USEROUTPUTSELECTOR$/;"	e	enum:Spinnaker::UserOutputSelectorEnums
NUM_USEROUTPUTSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_USEROUTPUTSELECTOR$/;"	e	enum:_spinUserOutputSelectorEnums
NUM_USERSETDEFAULT	include/CameraDefs.h	/^		NUM_USERSETDEFAULT$/;"	e	enum:Spinnaker::UserSetDefaultEnums
NUM_USERSETDEFAULT	include/spinc/CameraDefsC.h	/^	NUM_USERSETDEFAULT$/;"	e	enum:_spinUserSetDefaultEnums
NUM_USERSETFEATURESELECTOR	include/CameraDefs.h	/^		NUM_USERSETFEATURESELECTOR$/;"	e	enum:Spinnaker::UserSetFeatureSelectorEnums
NUM_USERSETFEATURESELECTOR	include/spinc/CameraDefsC.h	/^	NUM_USERSETFEATURESELECTOR$/;"	e	enum:_spinUserSetFeatureSelectorEnums
NUM_USERSETSELECTOR	include/CameraDefs.h	/^		NUM_USERSETSELECTOR$/;"	e	enum:Spinnaker::UserSetSelectorEnums
NUM_USERSETSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_USERSETSELECTOR$/;"	e	enum:_spinUserSetSelectorEnums
NUM_WHITECLIPSELECTOR	include/CameraDefs.h	/^		NUM_WHITECLIPSELECTOR$/;"	e	enum:Spinnaker::WhiteClipSelectorEnums
NUM_WHITECLIPSELECTOR	include/spinc/CameraDefsC.h	/^	NUM_WHITECLIPSELECTOR$/;"	e	enum:_spinWhiteClipSelectorEnums
No	include/SpinGenApi/Types.h	/^			No = 0,                 \/\/!< no$/;"	e	enum:Spinnaker::GenApi::_EYesNo
No	include/spinc/SpinnakerGenApiDefsC.h	/^	No = 0,                 \/\/!< no$/;"	e	enum:_spinYesNo
NoCache	include/SpinGenApi/Types.h	/^			NoCache,              \/\/!< Do not use cache$/;"	e	enum:Spinnaker::GenApi::_ECachingMode
NoCache	include/spinc/SpinnakerGenApiDefsC.h	/^	NoCache,              \/\/ Do not use cache$/;"	e	enum:_spinCachingMode
Node	include/SpinGenApi/Node.h	/^		class SPINNAKER_API Node : virtual public INode$/;"	c	namespace:Spinnaker::GenApi
NodeImpl	include/SpinGenApi/BooleanNode.h	/^			struct Node::NodeImpl;$/;"	m	class:Spinnaker::GenApi::BooleanNode::Node	typeref:struct:Spinnaker::GenApi::BooleanNode::Node::
NodeList_t	include/SpinGenApi/INode.h	/^		typedef node_vector NodeList_t;$/;"	t	namespace:Spinnaker::GenApi
NodeMap	include/SpinGenApi/NodeMap.h	/^		class SPINNAKER_API NodeMap : public virtual INodeMap, public virtual IDeviceInfo$/;"	c	namespace:Spinnaker::GenApi
NodeStatistics_t	include/SpinGenApi/NodeMapFactory.h	/^			} NodeStatistics_t;$/;"	t	class:Spinnaker::GenApi::CNodeMapFactory	typeref:struct:Spinnaker::GenApi::CNodeMapFactory::__anon3
None	include/SpinGenApi/Types.h	/^			None,            \/\/!< name resides in custom namespace$/;"	e	enum:Spinnaker::GenApi::_EStandardNameSpace
None	include/spinc/SpinnakerGenApiDefsC.h	/^	None,            \/\/!< name resides in custom namespace$/;"	e	enum:_spinStandardNameSpace
NumAttachedChunks	include/SpinGenApi/ChunkAdapter.h	/^			int NumAttachedChunks;    \/\/!< Number of chunks from the buffer attached to a chunk port$/;"	m	struct:Spinnaker::GenApi::AttachStatistics_t
NumChunkPorts	include/SpinGenApi/ChunkAdapter.h	/^			int NumChunkPorts;        \/\/!< Number of chunk ports found in the node map$/;"	m	struct:Spinnaker::GenApi::AttachStatistics_t
NumChunks	include/SpinGenApi/ChunkAdapter.h	/^			int NumChunks;            \/\/!< Number of chunks found in the buffer$/;"	m	struct:Spinnaker::GenApi::AttachStatistics_t
NumLinks	include/SpinGenApi/NodeMapFactory.h	/^				uint32_t NumLinks;$/;"	m	struct:Spinnaker::GenApi::CNodeMapFactory::__anon3
NumNodes	include/SpinGenApi/NodeMapFactory.h	/^				uint32_t NumNodes;$/;"	m	struct:Spinnaker::GenApi::CNodeMapFactory::__anon3
NumProperties	include/SpinGenApi/NodeMapFactory.h	/^				uint32_t NumProperties;$/;"	m	struct:Spinnaker::GenApi::CNodeMapFactory::__anon3
NumStrings	include/SpinGenApi/NodeMapFactory.h	/^				uint32_t NumStrings;$/;"	m	struct:Spinnaker::GenApi::CNodeMapFactory::__anon3
OBJ	Abhinay/Abhi_hardware/Makefile	/^OBJ = Abhi_hardware.o$/;"	m
OBJ	Abhinay/Abhi_test1/Makefile	/^OBJ = Abhi_test1.o$/;"	m
OBJ	Abhinay/Abhi_test2/Makefile	/^OBJ = Abhi_test2.o$/;"	m
OBJ	Abhinay/Abhi_test3/Makefile	/^OBJ = Abhi_test3.o$/;"	m
OBJ	Abhinay/Abhi_test4/Makefile	/^OBJ = Abhi_test4.o$/;"	m
OBJ	Abhinay/Abhi_trigger/Makefile	/^OBJ = Abhi_trigger.o$/;"	m
OBJ	SpinnakerTest/Abhi_test1/Makefile	/^OBJ = Abhi_test1.o$/;"	m
OBJ	SpinnakerTest/Abhi_test2/Makefile	/^OBJ = Abhi_test2.o$/;"	m
OBJ	SpinnakerTest/Abhi_test3/Makefile	/^OBJ = Abhi_test3.o$/;"	m
OBJ	SpinnakerTest/Abhi_test4/Makefile	/^OBJ = Abhi_test4.o$/;"	m
OBJ	SpinnakerTest/Abhi_trigger/Makefile	/^OBJ = Abhi_trigger.o$/;"	m
OBJ	SpinnakerTest/Acquisition/Makefile	/^OBJ = Acquisition.o$/;"	m
OBJ	SpinnakerTest/AcquisitionMultipleCamera/Makefile	/^OBJ = AcquisitionMultipleCamera.o$/;"	m
OBJ	SpinnakerTest/AcquisitionMultipleCamera_C/Makefile	/^OBJ = AcquisitionMultipleCamera_C.o$/;"	m
OBJ	SpinnakerTest/Acquisition_C/Makefile	/^OBJ = Acquisition_C.o$/;"	m
OBJ	SpinnakerTest/ChunkData/Makefile	/^OBJ = ChunkData.o$/;"	m
OBJ	SpinnakerTest/ChunkData_C/Makefile	/^OBJ = ChunkData_C.o$/;"	m
OBJ	SpinnakerTest/DeviceEvents/Makefile	/^OBJ = DeviceEvents.o$/;"	m
OBJ	SpinnakerTest/DeviceEvents_C/Makefile	/^OBJ = DeviceEvents_C.o$/;"	m
OBJ	SpinnakerTest/Enumeration/Makefile	/^OBJ = Enumeration.o$/;"	m
OBJ	SpinnakerTest/EnumerationEvents/Makefile	/^OBJ = EnumerationEvents.o$/;"	m
OBJ	SpinnakerTest/EnumerationEvents_C/Makefile	/^OBJ = EnumerationEvents_C.o$/;"	m
OBJ	SpinnakerTest/Enumeration_C/Makefile	/^OBJ = Enumeration_C.o$/;"	m
OBJ	SpinnakerTest/Enumeration_C_QuickSpin/Makefile	/^OBJ = Enumeration_C_QuickSpin.o$/;"	m
OBJ	SpinnakerTest/Enumeration_QuickSpin/Makefile	/^OBJ = Enumeration_QuickSpin.o$/;"	m
OBJ	SpinnakerTest/Exposure/Makefile	/^OBJ = Exposure.o$/;"	m
OBJ	SpinnakerTest/Exposure_C/Makefile	/^OBJ = Exposure_C.o$/;"	m
OBJ	SpinnakerTest/Exposure_C_QuickSpin/Makefile	/^OBJ = Exposure_C_QuickSpin.o$/;"	m
OBJ	SpinnakerTest/Exposure_QuickSpin/Makefile	/^OBJ = Exposure_QuickSpin.o$/;"	m
OBJ	SpinnakerTest/ImageEvents/Makefile	/^OBJ = ImageEvents.o$/;"	m
OBJ	SpinnakerTest/ImageEvents_C/Makefile	/^OBJ = ImageEvents_C.o$/;"	m
OBJ	SpinnakerTest/ImageFormatControl/Makefile	/^OBJ = ImageFormatControl.o$/;"	m
OBJ	SpinnakerTest/ImageFormatControl_C/Makefile	/^OBJ = ImageFormatControl_C.o$/;"	m
OBJ	SpinnakerTest/ImageFormatControl_C_QuickSpin/Makefile	/^OBJ = ImageFormatControl_C_QuickSpin.o$/;"	m
OBJ	SpinnakerTest/ImageFormatControl_QuickSpin/Makefile	/^OBJ = ImageFormatControl_QuickSpin.o$/;"	m
OBJ	SpinnakerTest/Logging/Makefile	/^OBJ = Logging.o$/;"	m
OBJ	SpinnakerTest/Logging_C/Makefile	/^OBJ = Logging_C.o$/;"	m
OBJ	SpinnakerTest/LookupTable/Makefile	/^OBJ = LookupTable.o$/;"	m
OBJ	SpinnakerTest/LookupTable_C/Makefile	/^OBJ = LookupTable_C.o$/;"	m
OBJ	SpinnakerTest/NodeMapCallback/Makefile	/^OBJ = NodeMapCallback.o$/;"	m
OBJ	SpinnakerTest/NodeMapCallback_C/Makefile	/^OBJ = NodeMapCallback_C.o$/;"	m
OBJ	SpinnakerTest/NodeMapInfo/Makefile	/^OBJ = NodeMapInfo.o$/;"	m
OBJ	SpinnakerTest/NodeMapInfo_C/Makefile	/^OBJ = NodeMapInfo_C.o$/;"	m
OBJ	SpinnakerTest/NodeMapInfo_C_QuickSpin/Makefile	/^OBJ = NodeMapInfo_C_QuickSpin.o$/;"	m
OBJ	SpinnakerTest/NodeMapInfo_QuickSpin/Makefile	/^OBJ = NodeMapInfo_QuickSpin.o$/;"	m
OBJ	SpinnakerTest/SaveToAvi/Makefile	/^OBJ = SaveToAvi.o$/;"	m
OBJ	SpinnakerTest/SaveToAvi_C/Makefile	/^OBJ = SaveToAvi_C.o$/;"	m
OBJ	SpinnakerTest/Sequencer/Makefile	/^OBJ = Sequencer.o$/;"	m
OBJ	SpinnakerTest/Sequencer_C/Makefile	/^OBJ = Sequencer_C.o$/;"	m
OBJ	SpinnakerTest/Trigger/Makefile	/^OBJ = Trigger.o$/;"	m
OBJ	SpinnakerTest/Trigger_C/Makefile	/^OBJ = Trigger_C.o$/;"	m
OBJ	SpinnakerTest/Trigger_C_QuickSpin/Makefile	/^OBJ = Trigger_C_QuickSpin.o$/;"	m
OBJ	SpinnakerTest/Trigger_QuickSpin/Makefile	/^OBJ = Trigger_QuickSpin.o$/;"	m
OBJ	src/Abhi_hardware/Makefile	/^OBJ = Abhi_hardware.o$/;"	m
OBJ	src/Abhi_test1/Makefile	/^OBJ = Abhi_test1.o$/;"	m
OBJ	src/Abhi_test2/Makefile	/^OBJ = Abhi_test2.o$/;"	m
OBJ	src/Abhi_test3/Makefile	/^OBJ = Abhi_test3.o$/;"	m
OBJ	src/Abhi_test4/Makefile	/^OBJ = Abhi_test4.o$/;"	m
OBJ	src/Abhi_trigger/Makefile	/^OBJ = Abhi_trigger.o$/;"	m
OBJ	src/Acquisition/Makefile	/^OBJ = Acquisition.o$/;"	m
OBJ	src/AcquisitionMultipleCamera/Makefile	/^OBJ = AcquisitionMultipleCamera.o$/;"	m
OBJ	src/AcquisitionMultipleCamera_C/Makefile	/^OBJ = AcquisitionMultipleCamera_C.o$/;"	m
OBJ	src/Acquisition_C/Makefile	/^OBJ = Acquisition_C.o$/;"	m
OBJ	src/ChunkData/Makefile	/^OBJ = ChunkData.o$/;"	m
OBJ	src/ChunkData_C/Makefile	/^OBJ = ChunkData_C.o$/;"	m
OBJ	src/DeviceEvents/Makefile	/^OBJ = DeviceEvents.o$/;"	m
OBJ	src/DeviceEvents_C/Makefile	/^OBJ = DeviceEvents_C.o$/;"	m
OBJ	src/Enumeration/Makefile	/^OBJ = Enumeration.o$/;"	m
OBJ	src/EnumerationEvents/Makefile	/^OBJ = EnumerationEvents.o$/;"	m
OBJ	src/EnumerationEvents_C/Makefile	/^OBJ = EnumerationEvents_C.o$/;"	m
OBJ	src/Enumeration_C/Makefile	/^OBJ = Enumeration_C.o$/;"	m
OBJ	src/Enumeration_C_QuickSpin/Makefile	/^OBJ = Enumeration_C_QuickSpin.o$/;"	m
OBJ	src/Enumeration_QuickSpin/Makefile	/^OBJ = Enumeration_QuickSpin.o$/;"	m
OBJ	src/Exposure/Makefile	/^OBJ = Exposure.o$/;"	m
OBJ	src/Exposure_C/Makefile	/^OBJ = Exposure_C.o$/;"	m
OBJ	src/Exposure_C_QuickSpin/Makefile	/^OBJ = Exposure_C_QuickSpin.o$/;"	m
OBJ	src/Exposure_QuickSpin/Makefile	/^OBJ = Exposure_QuickSpin.o$/;"	m
OBJ	src/ImageEvents/Makefile	/^OBJ = ImageEvents.o$/;"	m
OBJ	src/ImageEvents_C/Makefile	/^OBJ = ImageEvents_C.o$/;"	m
OBJ	src/ImageFormatControl/Makefile	/^OBJ = ImageFormatControl.o$/;"	m
OBJ	src/ImageFormatControl_C/Makefile	/^OBJ = ImageFormatControl_C.o$/;"	m
OBJ	src/ImageFormatControl_C_QuickSpin/Makefile	/^OBJ = ImageFormatControl_C_QuickSpin.o$/;"	m
OBJ	src/ImageFormatControl_QuickSpin/Makefile	/^OBJ = ImageFormatControl_QuickSpin.o$/;"	m
OBJ	src/Logging/Makefile	/^OBJ = Logging.o$/;"	m
OBJ	src/Logging_C/Makefile	/^OBJ = Logging_C.o$/;"	m
OBJ	src/LookupTable/Makefile	/^OBJ = LookupTable.o$/;"	m
OBJ	src/LookupTable_C/Makefile	/^OBJ = LookupTable_C.o$/;"	m
OBJ	src/NodeMapCallback/Makefile	/^OBJ = NodeMapCallback.o$/;"	m
OBJ	src/NodeMapCallback_C/Makefile	/^OBJ = NodeMapCallback_C.o$/;"	m
OBJ	src/NodeMapInfo/Makefile	/^OBJ = NodeMapInfo.o$/;"	m
OBJ	src/NodeMapInfo_C/Makefile	/^OBJ = NodeMapInfo_C.o$/;"	m
OBJ	src/NodeMapInfo_C_QuickSpin/Makefile	/^OBJ = NodeMapInfo_C_QuickSpin.o$/;"	m
OBJ	src/NodeMapInfo_QuickSpin/Makefile	/^OBJ = NodeMapInfo_QuickSpin.o$/;"	m
OBJ	src/SaveToAvi/Makefile	/^OBJ = SaveToAvi.o$/;"	m
OBJ	src/SaveToAvi_C/Makefile	/^OBJ = SaveToAvi_C.o$/;"	m
OBJ	src/Sequencer/Makefile	/^OBJ = Sequencer.o$/;"	m
OBJ	src/Sequencer_C/Makefile	/^OBJ = Sequencer_C.o$/;"	m
OBJ	src/Trigger/Makefile	/^OBJ = Trigger.o$/;"	m
OBJ	src/Trigger_C/Makefile	/^OBJ = Trigger_C.o$/;"	m
OBJ	src/Trigger_C_QuickSpin/Makefile	/^OBJ = Trigger_C_QuickSpin.o$/;"	m
OBJ	src/Trigger_QuickSpin/Makefile	/^OBJ = Trigger_QuickSpin.o$/;"	m
ODevFileStream	include/SpinGenApi/Filestream.h	/^		typedef ODevFileStreamBase<char, std::char_traits<char> > ODevFileStream;$/;"	t	namespace:Spinnaker::GenApi
ODevFileStreamBase	include/SpinGenApi/Filestream.h	/^			ODevFileStreamBase()$/;"	f	class:Spinnaker::GenApi::ODevFileStreamBase
ODevFileStreamBase	include/SpinGenApi/Filestream.h	/^			ODevFileStreamBase(INodeMap * pInterface, const char * pFileName, std::ios_base::openmode mode = std::ios_base::out|std::ios_base::trunc)$/;"	f	class:Spinnaker::GenApi::ODevFileStreamBase
ODevFileStreamBase	include/SpinGenApi/Filestream.h	/^			ODevFileStreamBase(Spinnaker::GenApi::INodeMap * pInterface, const char * pFileName, std::ios_base::openmode mode = std::ios_base::out | std::ios_base::trunc)$/;"	f	class:Spinnaker::GenApi::ODevFileStreamBase
ODevFileStreamBase	include/SpinGenApi/Filestream.h	/^		template<typename CharType, typename Traits> class ODevFileStreamBase$/;"	c	namespace:Spinnaker::GenApi
ODevFileStreamBuf	include/SpinGenApi/Filestream.h	/^			ODevFileStreamBuf()$/;"	f	class:Spinnaker::GenApi::ODevFileStreamBuf
ODevFileStreamBuf	include/SpinGenApi/Filestream.h	/^		template<typename CharType, typename Traits> class ODevFileStreamBuf$/;"	c	namespace:Spinnaker::GenApi
OUTDIR	Abhinay/Abhi_hardware/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	Abhinay/Abhi_test1/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	Abhinay/Abhi_test2/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	Abhinay/Abhi_test3/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	Abhinay/Abhi_test4/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	Abhinay/Abhi_trigger/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/Abhi_test1/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/Abhi_test2/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/Abhi_test3/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/Abhi_test4/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/Abhi_trigger/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/Acquisition/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/AcquisitionMultipleCamera/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/AcquisitionMultipleCamera_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/Acquisition_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/ChunkData/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/ChunkData_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/DeviceEvents/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/DeviceEvents_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/Enumeration/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/EnumerationEvents/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/EnumerationEvents_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/Enumeration_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/Enumeration_C_QuickSpin/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/Enumeration_QuickSpin/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/Exposure/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/Exposure_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/Exposure_C_QuickSpin/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/Exposure_QuickSpin/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/ImageEvents/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/ImageEvents_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/ImageFormatControl/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/ImageFormatControl_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/ImageFormatControl_C_QuickSpin/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/ImageFormatControl_QuickSpin/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/Logging/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/Logging_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/LookupTable/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/LookupTable_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/NodeMapCallback/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/NodeMapCallback_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/NodeMapInfo/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/NodeMapInfo_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/NodeMapInfo_C_QuickSpin/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/NodeMapInfo_QuickSpin/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/SaveToAvi/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/SaveToAvi_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/Sequencer/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/Sequencer_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/Trigger/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/Trigger_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/Trigger_C_QuickSpin/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	SpinnakerTest/Trigger_QuickSpin/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/Abhi_hardware/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/Abhi_test1/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/Abhi_test2/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/Abhi_test3/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/Abhi_test4/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/Abhi_trigger/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/Acquisition/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/AcquisitionMultipleCamera/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/AcquisitionMultipleCamera_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/Acquisition_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/ChunkData/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/ChunkData_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/DeviceEvents/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/DeviceEvents_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/Enumeration/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/EnumerationEvents/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/EnumerationEvents_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/Enumeration_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/Enumeration_C_QuickSpin/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/Enumeration_QuickSpin/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/Exposure/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/Exposure_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/Exposure_C_QuickSpin/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/Exposure_QuickSpin/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/ImageEvents/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/ImageEvents_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/ImageFormatControl/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/ImageFormatControl_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/ImageFormatControl_C_QuickSpin/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/ImageFormatControl_QuickSpin/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/Logging/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/Logging_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/LookupTable/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/LookupTable_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/NodeMapCallback/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/NodeMapCallback_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/NodeMapInfo/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/NodeMapInfo_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/NodeMapInfo_C_QuickSpin/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/NodeMapInfo_QuickSpin/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/SaveToAvi/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/SaveToAvi_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/Sequencer/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/Sequencer_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/Trigger/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/Trigger_C/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/Trigger_C_QuickSpin/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTDIR	src/Trigger_QuickSpin/Makefile	/^OUTDIR = ..\/..\/bin$/;"	m
OUTPUTNAME	Abhinay/Abhi_hardware/Makefile	/^OUTPUTNAME = Abhi_hardware${D}$/;"	m
OUTPUTNAME	Abhinay/Abhi_test1/Makefile	/^OUTPUTNAME = Abhi_test1${D}$/;"	m
OUTPUTNAME	Abhinay/Abhi_test2/Makefile	/^OUTPUTNAME = Abhi_test2${D}$/;"	m
OUTPUTNAME	Abhinay/Abhi_test3/Makefile	/^OUTPUTNAME = Abhi_test3${D}$/;"	m
OUTPUTNAME	Abhinay/Abhi_test4/Makefile	/^OUTPUTNAME = Abhi_test4${D}$/;"	m
OUTPUTNAME	Abhinay/Abhi_trigger/Makefile	/^OUTPUTNAME = Abhi_trigger${D}$/;"	m
OUTPUTNAME	SpinnakerTest/Abhi_test1/Makefile	/^OUTPUTNAME = Abhi_test1${D}$/;"	m
OUTPUTNAME	SpinnakerTest/Abhi_test2/Makefile	/^OUTPUTNAME = Abhi_test2${D}$/;"	m
OUTPUTNAME	SpinnakerTest/Abhi_test3/Makefile	/^OUTPUTNAME = Abhi_test3${D}$/;"	m
OUTPUTNAME	SpinnakerTest/Abhi_test4/Makefile	/^OUTPUTNAME = Abhi_test4${D}$/;"	m
OUTPUTNAME	SpinnakerTest/Abhi_trigger/Makefile	/^OUTPUTNAME = Abhi_trigger${D}$/;"	m
OUTPUTNAME	SpinnakerTest/Acquisition/Makefile	/^OUTPUTNAME = Acquisition${D}$/;"	m
OUTPUTNAME	SpinnakerTest/AcquisitionMultipleCamera/Makefile	/^OUTPUTNAME = AcquisitionMultipleCamera${D}$/;"	m
OUTPUTNAME	SpinnakerTest/AcquisitionMultipleCamera_C/Makefile	/^OUTPUTNAME = AcquisitionMultipleCamera_C${D}$/;"	m
OUTPUTNAME	SpinnakerTest/Acquisition_C/Makefile	/^OUTPUTNAME = Acquisition_C${D}$/;"	m
OUTPUTNAME	SpinnakerTest/ChunkData/Makefile	/^OUTPUTNAME = ChunkData${D}$/;"	m
OUTPUTNAME	SpinnakerTest/ChunkData_C/Makefile	/^OUTPUTNAME = ChunkData_C${D}$/;"	m
OUTPUTNAME	SpinnakerTest/DeviceEvents/Makefile	/^OUTPUTNAME = DeviceEvents${D}$/;"	m
OUTPUTNAME	SpinnakerTest/DeviceEvents_C/Makefile	/^OUTPUTNAME = DeviceEvents_C${D}$/;"	m
OUTPUTNAME	SpinnakerTest/Enumeration/Makefile	/^OUTPUTNAME = Enumeration${D}$/;"	m
OUTPUTNAME	SpinnakerTest/EnumerationEvents/Makefile	/^OUTPUTNAME = EnumerationEvents${D}$/;"	m
OUTPUTNAME	SpinnakerTest/EnumerationEvents_C/Makefile	/^OUTPUTNAME = EnumerationEvents_C${D}$/;"	m
OUTPUTNAME	SpinnakerTest/Enumeration_C/Makefile	/^OUTPUTNAME = Enumeration_C${D}$/;"	m
OUTPUTNAME	SpinnakerTest/Enumeration_C_QuickSpin/Makefile	/^OUTPUTNAME = Enumeration_C_QuickSpin${D}$/;"	m
OUTPUTNAME	SpinnakerTest/Enumeration_QuickSpin/Makefile	/^OUTPUTNAME = Enumeration_QuickSpin${D}$/;"	m
OUTPUTNAME	SpinnakerTest/Exposure/Makefile	/^OUTPUTNAME = Exposure${D}$/;"	m
OUTPUTNAME	SpinnakerTest/Exposure_C/Makefile	/^OUTPUTNAME = Exposure_C${D}$/;"	m
OUTPUTNAME	SpinnakerTest/Exposure_C_QuickSpin/Makefile	/^OUTPUTNAME = Exposure_C_QuickSpin${D}$/;"	m
OUTPUTNAME	SpinnakerTest/Exposure_QuickSpin/Makefile	/^OUTPUTNAME = Exposure_QuickSpin${D}$/;"	m
OUTPUTNAME	SpinnakerTest/ImageEvents/Makefile	/^OUTPUTNAME = ImageEvents${D}$/;"	m
OUTPUTNAME	SpinnakerTest/ImageEvents_C/Makefile	/^OUTPUTNAME = ImageEvents_C${D}$/;"	m
OUTPUTNAME	SpinnakerTest/ImageFormatControl/Makefile	/^OUTPUTNAME = ImageFormatControl${D}$/;"	m
OUTPUTNAME	SpinnakerTest/ImageFormatControl_C/Makefile	/^OUTPUTNAME = ImageFormatControl_C${D}$/;"	m
OUTPUTNAME	SpinnakerTest/ImageFormatControl_C_QuickSpin/Makefile	/^OUTPUTNAME = ImageFormatControl_C_QuickSpin${D}$/;"	m
OUTPUTNAME	SpinnakerTest/ImageFormatControl_QuickSpin/Makefile	/^OUTPUTNAME = ImageFormatControl_QuickSpin${D}$/;"	m
OUTPUTNAME	SpinnakerTest/Logging/Makefile	/^OUTPUTNAME = Logging${D}$/;"	m
OUTPUTNAME	SpinnakerTest/Logging_C/Makefile	/^OUTPUTNAME = Logging_C${D}$/;"	m
OUTPUTNAME	SpinnakerTest/LookupTable/Makefile	/^OUTPUTNAME = LookupTable${D}$/;"	m
OUTPUTNAME	SpinnakerTest/LookupTable_C/Makefile	/^OUTPUTNAME = LookupTable_C${D}$/;"	m
OUTPUTNAME	SpinnakerTest/NodeMapCallback/Makefile	/^OUTPUTNAME = NodeMapCallback${D}$/;"	m
OUTPUTNAME	SpinnakerTest/NodeMapCallback_C/Makefile	/^OUTPUTNAME = NodeMapCallback_C${D}$/;"	m
OUTPUTNAME	SpinnakerTest/NodeMapInfo/Makefile	/^OUTPUTNAME = NodeMapInfo${D}$/;"	m
OUTPUTNAME	SpinnakerTest/NodeMapInfo_C/Makefile	/^OUTPUTNAME = NodeMapInfo_C${D}$/;"	m
OUTPUTNAME	SpinnakerTest/NodeMapInfo_C_QuickSpin/Makefile	/^OUTPUTNAME = NodeMapInfo_C_QuickSpin${D}$/;"	m
OUTPUTNAME	SpinnakerTest/NodeMapInfo_QuickSpin/Makefile	/^OUTPUTNAME = NodeMapInfo_QuickSpin${D}$/;"	m
OUTPUTNAME	SpinnakerTest/SaveToAvi/Makefile	/^OUTPUTNAME = SaveToAvi${D}$/;"	m
OUTPUTNAME	SpinnakerTest/SaveToAvi_C/Makefile	/^OUTPUTNAME = SaveToAvi_C${D}$/;"	m
OUTPUTNAME	SpinnakerTest/Sequencer/Makefile	/^OUTPUTNAME = Sequencer${D}$/;"	m
OUTPUTNAME	SpinnakerTest/Sequencer_C/Makefile	/^OUTPUTNAME = Sequencer_C${D}$/;"	m
OUTPUTNAME	SpinnakerTest/Trigger/Makefile	/^OUTPUTNAME = Trigger${D}$/;"	m
OUTPUTNAME	SpinnakerTest/Trigger_C/Makefile	/^OUTPUTNAME = Trigger_C${D}$/;"	m
OUTPUTNAME	SpinnakerTest/Trigger_C_QuickSpin/Makefile	/^OUTPUTNAME = Trigger_C_QuickSpin${D}$/;"	m
OUTPUTNAME	SpinnakerTest/Trigger_QuickSpin/Makefile	/^OUTPUTNAME = Trigger_QuickSpin${D}$/;"	m
OUTPUTNAME	src/Abhi_hardware/Makefile	/^OUTPUTNAME = Abhi_hardware${D}$/;"	m
OUTPUTNAME	src/Abhi_test1/Makefile	/^OUTPUTNAME = Abhi_test1${D}$/;"	m
OUTPUTNAME	src/Abhi_test2/Makefile	/^OUTPUTNAME = Abhi_test2${D}$/;"	m
OUTPUTNAME	src/Abhi_test3/Makefile	/^OUTPUTNAME = Abhi_test3${D}$/;"	m
OUTPUTNAME	src/Abhi_test4/Makefile	/^OUTPUTNAME = Abhi_test4${D}$/;"	m
OUTPUTNAME	src/Abhi_trigger/Makefile	/^OUTPUTNAME = Abhi_trigger${D}$/;"	m
OUTPUTNAME	src/Acquisition/Makefile	/^OUTPUTNAME = Acquisition${D}$/;"	m
OUTPUTNAME	src/AcquisitionMultipleCamera/Makefile	/^OUTPUTNAME = AcquisitionMultipleCamera${D}$/;"	m
OUTPUTNAME	src/AcquisitionMultipleCamera_C/Makefile	/^OUTPUTNAME = AcquisitionMultipleCamera_C${D}$/;"	m
OUTPUTNAME	src/Acquisition_C/Makefile	/^OUTPUTNAME = Acquisition_C${D}$/;"	m
OUTPUTNAME	src/ChunkData/Makefile	/^OUTPUTNAME = ChunkData${D}$/;"	m
OUTPUTNAME	src/ChunkData_C/Makefile	/^OUTPUTNAME = ChunkData_C${D}$/;"	m
OUTPUTNAME	src/DeviceEvents/Makefile	/^OUTPUTNAME = DeviceEvents${D}$/;"	m
OUTPUTNAME	src/DeviceEvents_C/Makefile	/^OUTPUTNAME = DeviceEvents_C${D}$/;"	m
OUTPUTNAME	src/Enumeration/Makefile	/^OUTPUTNAME = Enumeration${D}$/;"	m
OUTPUTNAME	src/EnumerationEvents/Makefile	/^OUTPUTNAME = EnumerationEvents${D}$/;"	m
OUTPUTNAME	src/EnumerationEvents_C/Makefile	/^OUTPUTNAME = EnumerationEvents_C${D}$/;"	m
OUTPUTNAME	src/Enumeration_C/Makefile	/^OUTPUTNAME = Enumeration_C${D}$/;"	m
OUTPUTNAME	src/Enumeration_C_QuickSpin/Makefile	/^OUTPUTNAME = Enumeration_C_QuickSpin${D}$/;"	m
OUTPUTNAME	src/Enumeration_QuickSpin/Makefile	/^OUTPUTNAME = Enumeration_QuickSpin${D}$/;"	m
OUTPUTNAME	src/Exposure/Makefile	/^OUTPUTNAME = Exposure${D}$/;"	m
OUTPUTNAME	src/Exposure_C/Makefile	/^OUTPUTNAME = Exposure_C${D}$/;"	m
OUTPUTNAME	src/Exposure_C_QuickSpin/Makefile	/^OUTPUTNAME = Exposure_C_QuickSpin${D}$/;"	m
OUTPUTNAME	src/Exposure_QuickSpin/Makefile	/^OUTPUTNAME = Exposure_QuickSpin${D}$/;"	m
OUTPUTNAME	src/ImageEvents/Makefile	/^OUTPUTNAME = ImageEvents${D}$/;"	m
OUTPUTNAME	src/ImageEvents_C/Makefile	/^OUTPUTNAME = ImageEvents_C${D}$/;"	m
OUTPUTNAME	src/ImageFormatControl/Makefile	/^OUTPUTNAME = ImageFormatControl${D}$/;"	m
OUTPUTNAME	src/ImageFormatControl_C/Makefile	/^OUTPUTNAME = ImageFormatControl_C${D}$/;"	m
OUTPUTNAME	src/ImageFormatControl_C_QuickSpin/Makefile	/^OUTPUTNAME = ImageFormatControl_C_QuickSpin${D}$/;"	m
OUTPUTNAME	src/ImageFormatControl_QuickSpin/Makefile	/^OUTPUTNAME = ImageFormatControl_QuickSpin${D}$/;"	m
OUTPUTNAME	src/Logging/Makefile	/^OUTPUTNAME = Logging${D}$/;"	m
OUTPUTNAME	src/Logging_C/Makefile	/^OUTPUTNAME = Logging_C${D}$/;"	m
OUTPUTNAME	src/LookupTable/Makefile	/^OUTPUTNAME = LookupTable${D}$/;"	m
OUTPUTNAME	src/LookupTable_C/Makefile	/^OUTPUTNAME = LookupTable_C${D}$/;"	m
OUTPUTNAME	src/NodeMapCallback/Makefile	/^OUTPUTNAME = NodeMapCallback${D}$/;"	m
OUTPUTNAME	src/NodeMapCallback_C/Makefile	/^OUTPUTNAME = NodeMapCallback_C${D}$/;"	m
OUTPUTNAME	src/NodeMapInfo/Makefile	/^OUTPUTNAME = NodeMapInfo${D}$/;"	m
OUTPUTNAME	src/NodeMapInfo_C/Makefile	/^OUTPUTNAME = NodeMapInfo_C${D}$/;"	m
OUTPUTNAME	src/NodeMapInfo_C_QuickSpin/Makefile	/^OUTPUTNAME = NodeMapInfo_C_QuickSpin${D}$/;"	m
OUTPUTNAME	src/NodeMapInfo_QuickSpin/Makefile	/^OUTPUTNAME = NodeMapInfo_QuickSpin${D}$/;"	m
OUTPUTNAME	src/SaveToAvi/Makefile	/^OUTPUTNAME = SaveToAvi${D}$/;"	m
OUTPUTNAME	src/SaveToAvi_C/Makefile	/^OUTPUTNAME = SaveToAvi_C${D}$/;"	m
OUTPUTNAME	src/Sequencer/Makefile	/^OUTPUTNAME = Sequencer${D}$/;"	m
OUTPUTNAME	src/Sequencer_C/Makefile	/^OUTPUTNAME = Sequencer_C${D}$/;"	m
OUTPUTNAME	src/Trigger/Makefile	/^OUTPUTNAME = Trigger${D}$/;"	m
OUTPUTNAME	src/Trigger_C/Makefile	/^OUTPUTNAME = Trigger_C${D}$/;"	m
OUTPUTNAME	src/Trigger_C_QuickSpin/Makefile	/^OUTPUTNAME = Trigger_C_QuickSpin${D}$/;"	m
OUTPUTNAME	src/Trigger_QuickSpin/Makefile	/^OUTPUTNAME = Trigger_QuickSpin${D}$/;"	m
OffsetX	include/Camera.h	/^		GenApi::IInteger &OffsetX;$/;"	m	class:Spinnaker::Camera
OffsetX	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode OffsetX;$/;"	m	struct:_quickSpin
OffsetY	include/Camera.h	/^		GenApi::IInteger &OffsetY;$/;"	m	class:Spinnaker::Camera
OffsetY	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode OffsetY;$/;"	m	struct:_quickSpin
OnDeviceArrival	SpinnakerTest/EnumerationEvents/EnumerationEvents.cpp	/^	void OnDeviceArrival()$/;"	f	class:InterfaceEventHandler
OnDeviceArrival	SpinnakerTest/EnumerationEvents/EnumerationEvents.cpp	/^	void OnDeviceArrival()$/;"	f	class:SystemEventHandler
OnDeviceArrival	src/EnumerationEvents/EnumerationEvents.cpp	/^	void OnDeviceArrival()$/;"	f	class:InterfaceEventHandler
OnDeviceArrival	src/EnumerationEvents/EnumerationEvents.cpp	/^	void OnDeviceArrival()$/;"	f	class:SystemEventHandler
OnDeviceEvent	SpinnakerTest/DeviceEvents/DeviceEvents.cpp	/^	void OnDeviceEvent(gcstring eventName)$/;"	f	class:DeviceEventHandler
OnDeviceEvent	src/DeviceEvents/DeviceEvents.cpp	/^	void OnDeviceEvent(gcstring eventName)$/;"	f	class:DeviceEventHandler
OnDeviceRemoval	SpinnakerTest/EnumerationEvents/EnumerationEvents.cpp	/^	void OnDeviceRemoval(uint64_t deviceSerialNumber)$/;"	f	class:InterfaceEventHandler
OnDeviceRemoval	SpinnakerTest/EnumerationEvents/EnumerationEvents.cpp	/^	void OnDeviceRemoval(uint64_t deviceSerialNumber)$/;"	f	class:SystemEventHandler
OnDeviceRemoval	src/EnumerationEvents/EnumerationEvents.cpp	/^	void OnDeviceRemoval(uint64_t deviceSerialNumber)$/;"	f	class:InterfaceEventHandler
OnDeviceRemoval	src/EnumerationEvents/EnumerationEvents.cpp	/^	void OnDeviceRemoval(uint64_t deviceSerialNumber)$/;"	f	class:SystemEventHandler
OnGainNodeUpdate	SpinnakerTest/NodeMapCallback/NodeMapCallback.cpp	/^void OnGainNodeUpdate(INode* node)$/;"	f
OnGainNodeUpdate	src/NodeMapCallback/NodeMapCallback.cpp	/^void OnGainNodeUpdate(INode* node)$/;"	f
OnHeightNodeUpdate	SpinnakerTest/NodeMapCallback/NodeMapCallback.cpp	/^void OnHeightNodeUpdate(INode* node)$/;"	f
OnHeightNodeUpdate	src/NodeMapCallback/NodeMapCallback.cpp	/^void OnHeightNodeUpdate(INode* node)$/;"	f
OnImageEvent	SpinnakerTest/ImageEvents/ImageEvents.cpp	/^	void OnImageEvent(ImagePtr image)$/;"	f	class:ImageEventHandler
OnImageEvent	src/ImageEvents/ImageEvents.cpp	/^	void OnImageEvent(ImagePtr image)$/;"	f	class:ImageEventHandler
OnLogEvent	SpinnakerTest/Logging/Logging.cpp	/^	void OnLogEvent(LoggingEventDataPtr loggingEventDataPtr)$/;"	f	class:LoggingEventHandler	file:
OnLogEvent	src/Logging/Logging.cpp	/^	void OnLogEvent(LoggingEventDataPtr loggingEventDataPtr)$/;"	f	class:LoggingEventHandler	file:
PACKBITS	include/SpinnakerDefs.h	/^            PACKBITS, \/**< Save using PACKBITS compression. *\/$/;"	e	enum:Spinnaker::TIFFOption::CompressionMethod
PACKBITS	include/spinc/SpinnakerDefsC.h	/^	PACKBITS, \/\/ Save using PACKBITS compression. $/;"	e	enum:CompressionMethod
PACK_STRUCT	include/SpinGenApi/EventAdapterGEV.h	42;"	d
PACK_STRUCT	include/SpinGenApi/EventAdapterU3V.h	42;"	d
PAYLOAD_TYPE_CHUNK_DATA	include/SpinnakerDefs.h	/^		PAYLOAD_TYPE_CHUNK_DATA = 4,	\/* GenTL v1.2, Deprecated in GenTL 1.5*\/$/;"	e	enum:Spinnaker::PayloadTypeInfoIDs
PAYLOAD_TYPE_CHUNK_DATA	include/spinc/SpinnakerDefsC.h	/^	PAYLOAD_TYPE_CHUNK_DATA = 4,	\/* GenTL v1.2, Deprecated in GenTL 1.5*\/$/;"	e	enum:_spinPayloadTypeInfoIDs
PAYLOAD_TYPE_CHUNK_ONLY	include/SpinnakerDefs.h	/^		PAYLOAD_TYPE_CHUNK_ONLY = 8,	\/* GenTL v1.4 *\/$/;"	e	enum:Spinnaker::PayloadTypeInfoIDs
PAYLOAD_TYPE_CHUNK_ONLY	include/spinc/SpinnakerDefsC.h	/^	PAYLOAD_TYPE_CHUNK_ONLY = 8,	\/* GenTL v1.4 *\/$/;"	e	enum:_spinPayloadTypeInfoIDs
PAYLOAD_TYPE_CUSTOM_ID	include/SpinnakerDefs.h	/^		PAYLOAD_TYPE_CUSTOM_ID = 1000,	\/* Starting value for GenTL Producer custom IDs. *\/$/;"	e	enum:Spinnaker::PayloadTypeInfoIDs
PAYLOAD_TYPE_CUSTOM_ID	include/spinc/SpinnakerDefsC.h	/^	PAYLOAD_TYPE_CUSTOM_ID = 1000,	\/* Starting value for GenTL Producer custom IDs. *\/$/;"	e	enum:_spinPayloadTypeInfoIDs
PAYLOAD_TYPE_DEVICE_SPECIFIC	include/SpinnakerDefs.h	/^		PAYLOAD_TYPE_DEVICE_SPECIFIC = 9,   \/* GenTL v1.4 *\/$/;"	e	enum:Spinnaker::PayloadTypeInfoIDs
PAYLOAD_TYPE_DEVICE_SPECIFIC	include/spinc/SpinnakerDefsC.h	/^	PAYLOAD_TYPE_DEVICE_SPECIFIC = 9,   \/* GenTL v1.4 *\/$/;"	e	enum:_spinPayloadTypeInfoIDs
PAYLOAD_TYPE_EXTENDED_CHUNK	include/SpinnakerDefs.h	/^		PAYLOAD_TYPE_EXTENDED_CHUNK = 1001$/;"	e	enum:Spinnaker::PayloadTypeInfoIDs
PAYLOAD_TYPE_EXTENDED_CHUNK	include/spinc/SpinnakerDefsC.h	/^	PAYLOAD_TYPE_EXTENDED_CHUNK = 1001$/;"	e	enum:_spinPayloadTypeInfoIDs
PAYLOAD_TYPE_FILE	include/SpinnakerDefs.h	/^		PAYLOAD_TYPE_FILE = 3,			\/* GenTL v1.2 *\/$/;"	e	enum:Spinnaker::PayloadTypeInfoIDs
PAYLOAD_TYPE_FILE	include/spinc/SpinnakerDefsC.h	/^	PAYLOAD_TYPE_FILE = 3,			\/* GenTL v1.2 *\/$/;"	e	enum:_spinPayloadTypeInfoIDs
PAYLOAD_TYPE_H264	include/SpinnakerDefs.h	/^		PAYLOAD_TYPE_H264 = 7,			\/* GenTL v1.4 *\/$/;"	e	enum:Spinnaker::PayloadTypeInfoIDs
PAYLOAD_TYPE_H264	include/spinc/SpinnakerDefsC.h	/^	PAYLOAD_TYPE_H264 = 7,			\/* GenTL v1.4 *\/$/;"	e	enum:_spinPayloadTypeInfoIDs
PAYLOAD_TYPE_IMAGE	include/SpinnakerDefs.h	/^		PAYLOAD_TYPE_IMAGE = 1,			\/* GenTL v1.2 *\/$/;"	e	enum:Spinnaker::PayloadTypeInfoIDs
PAYLOAD_TYPE_IMAGE	include/spinc/SpinnakerDefsC.h	/^	PAYLOAD_TYPE_IMAGE = 1,			\/* GenTL v1.2 *\/$/;"	e	enum:_spinPayloadTypeInfoIDs
PAYLOAD_TYPE_JPEG	include/SpinnakerDefs.h	/^		PAYLOAD_TYPE_JPEG = 5,			\/* GenTL v1.4 *\/$/;"	e	enum:Spinnaker::PayloadTypeInfoIDs
PAYLOAD_TYPE_JPEG	include/spinc/SpinnakerDefsC.h	/^	PAYLOAD_TYPE_JPEG = 5,			\/* GenTL v1.4 *\/$/;"	e	enum:_spinPayloadTypeInfoIDs
PAYLOAD_TYPE_JPEG2000	include/SpinnakerDefs.h	/^		PAYLOAD_TYPE_JPEG2000 = 6,		\/* GenTL v1.4 *\/$/;"	e	enum:Spinnaker::PayloadTypeInfoIDs
PAYLOAD_TYPE_JPEG2000	include/spinc/SpinnakerDefsC.h	/^	PAYLOAD_TYPE_JPEG2000 = 6,		\/* GenTL v1.4 *\/$/;"	e	enum:_spinPayloadTypeInfoIDs
PAYLOAD_TYPE_MULTI_PART	include/SpinnakerDefs.h	/^		PAYLOAD_TYPE_MULTI_PART = 10,	\/* GenTL v1.5 *\/$/;"	e	enum:Spinnaker::PayloadTypeInfoIDs
PAYLOAD_TYPE_MULTI_PART	include/spinc/SpinnakerDefsC.h	/^	PAYLOAD_TYPE_MULTI_PART = 10,	\/* GenTL v1.5 *\/$/;"	e	enum:_spinPayloadTypeInfoIDs
PAYLOAD_TYPE_RAW_DATA	include/SpinnakerDefs.h	/^		PAYLOAD_TYPE_RAW_DATA = 2,		\/* GenTL v1.2 *\/$/;"	e	enum:Spinnaker::PayloadTypeInfoIDs
PAYLOAD_TYPE_RAW_DATA	include/spinc/SpinnakerDefsC.h	/^	PAYLOAD_TYPE_RAW_DATA = 2,		\/* GenTL v1.2 *\/$/;"	e	enum:_spinPayloadTypeInfoIDs
PAYLOAD_TYPE_UNKNOWN	include/SpinnakerDefs.h	/^		PAYLOAD_TYPE_UNKNOWN = 0,		\/* GenTL v1.2 *\/$/;"	e	enum:Spinnaker::PayloadTypeInfoIDs
PAYLOAD_TYPE_UNKNOWN	include/spinc/SpinnakerDefsC.h	/^	PAYLOAD_TYPE_UNKNOWN = 0,		\/* GenTL v1.2 *\/$/;"	e	enum:_spinPayloadTypeInfoIDs
PGM	include/SpinnakerDefs.h	/^		PGM, \/**< Portable gray map. *\/$/;"	e	enum:Spinnaker::ImageFileFormat
PGM	include/spinc/SpinnakerDefsC.h	/^	PGM, \/**< Portable gray map. *\/$/;"	e	enum:_spinImageFileFormat
PGMOption	include/SpinnakerDefs.h	/^        PGMOption()$/;"	f	struct:Spinnaker::PGMOption
PGMOption	include/SpinnakerDefs.h	/^    struct PGMOption$/;"	s	namespace:Spinnaker
PGR_LOGGINGEVENTDATAPTR_H	include/LoggingEventDataPtr.h	24;"	d
PGR_LOGGINGEVENTDATA_H	include/LoggingEventData.h	24;"	d
PGR_SPINNAKERC_TLDEVICE_H	include/spinc/TransportLayerDeviceC.h	29;"	d
PGR_SPINNAKERC_TLINTERFACE_H	include/spinc/TransportLayerInterfaceC.h	29;"	d
PGR_SPINNAKERC_TLSTREAM_H	include/spinc/TransportLayerStreamC.h	29;"	d
PGR_SPINNAKERC_TRANSPORTLAYERDEFSC_H	include/spinc/TransportLayerDefsC.h	27;"	d
PGR_SPINNAKER_ARRIVALEVENT_H	include/ArrivalEvent.h	24;"	d
PGR_SPINNAKER_AVIRECORDER_H	include/AVIRecorder.h	24;"	d
PGR_SPINNAKER_BASE_PTR_H	include/BasePtr.h	24;"	d
PGR_SPINNAKER_CAMERABASE_H	include/CameraBase.h	24;"	d
PGR_SPINNAKER_CAMERALIST_H	include/CameraList.h	24;"	d
PGR_SPINNAKER_CAMERA_DEFS_C_H	include/spinc/CameraDefsC.h	27;"	d
PGR_SPINNAKER_CAMERA_DEFS_H	include/CameraDefs.h	27;"	d
PGR_SPINNAKER_CAMERA_H	include/Camera.h	27;"	d
PGR_SPINNAKER_CAMERA_PTR_H	include/CameraPtr.h	24;"	d
PGR_SPINNAKER_CHUNKDATADEF_C_H	include/spinc/ChunkDataDefC.h	27;"	d
PGR_SPINNAKER_CHUNKDATA_H	include/ChunkData.h	27;"	d
PGR_SPINNAKER_C_H	include/spinc/SpinnakerC.h	24;"	d
PGR_SPINNAKER_DEFS_C_H	include/spinc/SpinnakerDefsC.h	24;"	d
PGR_SPINNAKER_DEFS_H	include/SpinnakerDefs.h	24;"	d
PGR_SPINNAKER_DEVICEEVENT_H	include/DeviceEvent.h	25;"	d
PGR_SPINNAKER_EVENT_H	include/Event.h	24;"	d
PGR_SPINNAKER_EXCEPTION_H	include/Exception.h	24;"	d
PGR_SPINNAKER_GENAPIDEFS_C_H	include/spinc/SpinnakerGenApiDefsC.h	24;"	d
PGR_SPINNAKER_GENAPI_C_H_	include/spinc/SpinnakerGenApiC.h	24;"	d
PGR_SPINNAKER_H	include/Spinnaker.h	24;"	d
PGR_SPINNAKER_IMAGEEVENT_H	include/ImageEvent.h	24;"	d
PGR_SPINNAKER_IMAGESTATISTICS_H	include/ImageStatistics.h	24;"	d
PGR_SPINNAKER_IMAGE_H	include/Image.h	24;"	d
PGR_SPINNAKER_IMAGE_PTR_H	include/ImagePtr.h	24;"	d
PGR_SPINNAKER_INTERFACEEVENT_H	include/InterfaceEvent.h	24;"	d
PGR_SPINNAKER_INTERFACELIST_H	include/InterfaceList.h	24;"	d
PGR_SPINNAKER_INTERFACE_H	include/Interface.h	24;"	d
PGR_SPINNAKER_INTERFACE_PTR_H	include/InterfacePtr.h	24;"	d
PGR_SPINNAKER_LOGGINGEVENT_H	include/LoggingEvent.h	24;"	d
PGR_SPINNAKER_PLATFORM_C_H	include/spinc/SpinnakerPlatformC.h	24;"	d
PGR_SPINNAKER_PLATFORM_H	include/SpinnakerPlatform.h	24;"	d
PGR_SPINNAKER_QUICKSPINDEFS_C_H	include/spinc/QuickSpinDefsC.h	27;"	d
PGR_SPINNAKER_QUICKSPIN_C_H	include/spinc/QuickSpinC.h	24;"	d
PGR_SPINNAKER_REMOVALEVENT_H	include/RemovalEvent.h	24;"	d
PGR_SPINNAKER_SYSTEM_H	include/System.h	24;"	d
PGR_SPINNAKER_SYSTEM_PTR_H	include/SystemPtr.h	24;"	d
PGR_SPINNAKER_TRANSPORTLAYERDEFS_H	include/TransportLayerDefs.h	27;"	d
PGR_SPINNAKER_TRANSPORTLAYERDEVICE_H	include/TransportLayerDevice.h	27;"	d
PGR_SPINNAKER_TRANSPORTLAYERINTERFACE_H	include/TransportLayerInterface.h	27;"	d
PGR_SPINNAKER_TRANSPORTLAYERSTREAM_H	include/TransportLayerStream.h	27;"	d
PLATFORM_NAME	include/SpinGenApi/GCUtilities.h	54;"	d
PLATFORM_NAME	include/SpinGenApi/GCUtilities.h	56;"	d
PLATFORM_NAME	include/SpinGenApi/GCUtilities.h	62;"	d
PLATFORM_NAME	include/SpinGenApi/GCUtilities.h	64;"	d
PLATFORM_NAME	include/SpinGenApi/GCUtilities.h	70;"	d
PLATFORM_NAME	include/SpinGenApi/GCUtilities.h	74;"	d
PMEMBERFUNC	include/SpinGenApi/NodeCallback.h	/^			typedef void (Client::*PMEMBERFUNC)(INode*);$/;"	t	class:Spinnaker::GenApi::Member_NodeCallback
PNG	include/SpinnakerDefs.h	/^		PNG, \/**< Portable network graphics. *\/$/;"	e	enum:Spinnaker::ImageFileFormat
PNG	include/spinc/SpinnakerDefsC.h	/^	PNG, \/**< Portable network graphics. *\/$/;"	e	enum:_spinImageFileFormat
PNGOption	include/SpinnakerDefs.h	/^        PNGOption()$/;"	f	struct:Spinnaker::PNGOption
PNGOption	include/SpinnakerDefs.h	/^    struct PNGOption$/;"	s	namespace:Spinnaker
POEStatus	include/TransportLayerInterface.h	/^		GenApi::IEnumerationT<POEStatusEnum> &POEStatus;$/;"	m	class:Spinnaker::TransportLayerInterface
POEStatus	include/spinc/TransportLayerInterfaceC.h	/^	quickSpinEnumerationNode POEStatus;$/;"	m	struct:_quickSpinTLInterface
POEStatusEnum	include/TransportLayerDefs.h	/^	enum POEStatusEnum	\/*!< Reports and controls the interface's power over Ethernet status.*\/$/;"	g	namespace:Spinnaker
POEStatus_NotSupported	include/TransportLayerDefs.h	/^		POEStatus_NotSupported,	\/*!< Not Supported*\/$/;"	e	enum:Spinnaker::POEStatusEnum
POEStatus_NotSupported	include/spinc/TransportLayerDefsC.h	/^	POEStatus_NotSupported,\/*!< Not Supported*\/$/;"	e	enum:_spinTLPOEStatusEnums
POEStatus_PowerOff	include/TransportLayerDefs.h	/^		POEStatus_PowerOff,	\/*!< Power is Off*\/$/;"	e	enum:Spinnaker::POEStatusEnum
POEStatus_PowerOff	include/spinc/TransportLayerDefsC.h	/^	POEStatus_PowerOff,\/*!< Power is Off*\/$/;"	e	enum:_spinTLPOEStatusEnums
POEStatus_PowerOn	include/TransportLayerDefs.h	/^		POEStatus_PowerOn,	\/*!< Power is On*\/$/;"	e	enum:Spinnaker::POEStatusEnum
POEStatus_PowerOn	include/spinc/TransportLayerDefsC.h	/^	POEStatus_PowerOn,\/*!< Power is On*\/$/;"	e	enum:_spinTLPOEStatusEnums
PPM	include/SpinnakerDefs.h	/^		PPM, \/**< Portable pixmap. *\/$/;"	e	enum:Spinnaker::ImageFileFormat
PPM	include/spinc/SpinnakerDefsC.h	/^	PPM, \/**< Portable pixmap. *\/$/;"	e	enum:_spinImageFileFormat
PPMOption	include/SpinnakerDefs.h	/^        PPMOption()$/;"	f	struct:Spinnaker::PPMOption
PPMOption	include/SpinnakerDefs.h	/^    struct PPMOption$/;"	s	namespace:Spinnaker
PTGREY_BR_MIN	include/PtGreyVideoEncoder.h	45;"	d
PTGREY_BUF_LEN	include/PtGreyVideoEncoder.h	44;"	d
PTGREY_SCALER_BICUBIC	include/PtGreyVideoEncoder.h	/^	PTGREY_SCALER_BICUBIC,$/;"	e	enum:PtGreyVideoScalerMode
PTGREY_SCALER_BILINEAR	include/PtGreyVideoEncoder.h	/^	PTGREY_SCALER_BILINEAR,$/;"	e	enum:PtGreyVideoScalerMode
PTGREY_SCALER_FAST_BILINEAR	include/PtGreyVideoEncoder.h	/^	PTGREY_SCALER_FAST_BILINEAR = 0,$/;"	e	enum:PtGreyVideoScalerMode
PTGREY_SCALER_MAX	include/PtGreyVideoEncoder.h	/^	PTGREY_SCALER_MAX$/;"	e	enum:PtGreyVideoScalerMode
PTGREY_VIDEOENCODER_PLATFORM_C_H	include/PtGreyVideoEncoderPlatform.h	19;"	d
PTGREY_VIDEO_ENCODER_API	include/PtGreyVideoEncoderPlatform.h	32;"	d
PTGREY_VIDEO_ENCODER_API	include/PtGreyVideoEncoderPlatform.h	34;"	d
PTGREY_VIDEO_ENCODER_API	include/PtGreyVideoEncoderPlatform.h	36;"	d
PTGREY_VIDEO_ENCODER_API	include/PtGreyVideoEncoderPlatform.h	68;"	d
PTGREY_VIDEO_H264	include/PtGreyVideoEncoder.h	/^	PTGREY_VIDEO_H264,$/;"	e	enum:PtGreyVideoCodecFormat
PTGREY_VIDEO_MAX	include/PtGreyVideoEncoder.h	/^	PTGREY_VIDEO_MAX$/;"	e	enum:PtGreyVideoCodecFormat
PTGREY_VIDEO_MJPG	include/PtGreyVideoEncoder.h	/^	PTGREY_VIDEO_MJPG,$/;"	e	enum:PtGreyVideoCodecFormat
PTGREY_VIDEO_UNCOMPRESSED	include/PtGreyVideoEncoder.h	/^	PTGREY_VIDEO_UNCOMPRESSED = 0,$/;"	e	enum:PtGreyVideoCodecFormat
PayloadSize	include/Camera.h	/^		GenApi::IInteger &PayloadSize;$/;"	m	class:Spinnaker::Camera
PayloadSize	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode PayloadSize;$/;"	m	struct:_quickSpin
PayloadTypeInfoIDs	include/SpinnakerDefs.h	/^	enum PayloadTypeInfoIDs$/;"	g	namespace:Spinnaker
PixelColorFilter	include/Camera.h	/^		GenApi::IEnumerationT<PixelColorFilterEnums> &PixelColorFilter;$/;"	m	class:Spinnaker::Camera
PixelColorFilter	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode PixelColorFilter;$/;"	m	struct:_quickSpin
PixelColorFilterEnums	include/CameraDefs.h	/^	enum PixelColorFilterEnums	\/*!< Type of color filter that is applied to the image.*\/$/;"	g	namespace:Spinnaker
PixelColorFilter_BayerBG	include/CameraDefs.h	/^		PixelColorFilter_BayerBG,	\/*!< Bayer Blue Green filter.*\/$/;"	e	enum:Spinnaker::PixelColorFilterEnums
PixelColorFilter_BayerBG	include/spinc/CameraDefsC.h	/^	PixelColorFilter_BayerBG,	\/*!< Bayer Blue Green filter.*\/$/;"	e	enum:_spinPixelColorFilterEnums
PixelColorFilter_BayerGB	include/CameraDefs.h	/^		PixelColorFilter_BayerGB,	\/*!< Bayer Green Blue filter.*\/$/;"	e	enum:Spinnaker::PixelColorFilterEnums
PixelColorFilter_BayerGB	include/spinc/CameraDefsC.h	/^	PixelColorFilter_BayerGB,	\/*!< Bayer Green Blue filter.*\/$/;"	e	enum:_spinPixelColorFilterEnums
PixelColorFilter_BayerGR	include/CameraDefs.h	/^		PixelColorFilter_BayerGR,	\/*!< Bayer Green Red filter.*\/$/;"	e	enum:Spinnaker::PixelColorFilterEnums
PixelColorFilter_BayerGR	include/spinc/CameraDefsC.h	/^	PixelColorFilter_BayerGR,	\/*!< Bayer Green Red filter.*\/$/;"	e	enum:_spinPixelColorFilterEnums
PixelColorFilter_BayerRG	include/CameraDefs.h	/^		PixelColorFilter_BayerRG,	\/*!< Bayer Red Green filter.*\/$/;"	e	enum:Spinnaker::PixelColorFilterEnums
PixelColorFilter_BayerRG	include/spinc/CameraDefsC.h	/^	PixelColorFilter_BayerRG,	\/*!< Bayer Red Green filter.*\/$/;"	e	enum:_spinPixelColorFilterEnums
PixelColorFilter_None	include/CameraDefs.h	/^		PixelColorFilter_None,	\/*!< No color filter.*\/$/;"	e	enum:Spinnaker::PixelColorFilterEnums
PixelColorFilter_None	include/spinc/CameraDefsC.h	/^	PixelColorFilter_None,	\/*!< No color filter.*\/$/;"	e	enum:_spinPixelColorFilterEnums
PixelDynamicRangeMax	include/Camera.h	/^		GenApi::IInteger &PixelDynamicRangeMax;$/;"	m	class:Spinnaker::Camera
PixelDynamicRangeMax	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode PixelDynamicRangeMax;$/;"	m	struct:_quickSpin
PixelDynamicRangeMin	include/Camera.h	/^		GenApi::IInteger &PixelDynamicRangeMin;$/;"	m	class:Spinnaker::Camera
PixelDynamicRangeMin	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode PixelDynamicRangeMin;$/;"	m	struct:_quickSpin
PixelFormat	include/Camera.h	/^		GenApi::IEnumerationT<PixelFormatEnums> &PixelFormat;$/;"	m	class:Spinnaker::Camera
PixelFormat	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode PixelFormat;$/;"	m	struct:_quickSpin
PixelFormatEnums	include/CameraDefs.h	/^	enum PixelFormatEnums	\/*!< Format of the pixels provided by the device. It represents all the information provided by PixelSize, PixelColorFilter combined in a single feature.*\/$/;"	g	namespace:Spinnaker
PixelFormatInfoID	include/Camera.h	/^		GenApi::IInteger &PixelFormatInfoID;$/;"	m	class:Spinnaker::Camera
PixelFormatInfoID	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode PixelFormatInfoID;$/;"	m	struct:_quickSpin
PixelFormatInfoSelector	include/Camera.h	/^		GenApi::IEnumerationT<PixelFormatInfoSelectorEnums> &PixelFormatInfoSelector;$/;"	m	class:Spinnaker::Camera
PixelFormatInfoSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode PixelFormatInfoSelector;$/;"	m	struct:_quickSpin
PixelFormatInfoSelectorEnums	include/CameraDefs.h	/^	enum PixelFormatInfoSelectorEnums	\/*!< Select the pixel format for which the information will be returned.*\/$/;"	g	namespace:Spinnaker
PixelFormatInfoSelector_B10	include/CameraDefs.h	/^		PixelFormatInfoSelector_B10,	\/*!< Blue 10-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_B10	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_B10,	\/*!< Blue 10-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_B12	include/CameraDefs.h	/^		PixelFormatInfoSelector_B12,	\/*!< Blue 12-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_B12	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_B12,	\/*!< Blue 12-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_B16	include/CameraDefs.h	/^		PixelFormatInfoSelector_B16,	\/*!< Blue 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_B16	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_B16,	\/*!< Blue 16-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_B8	include/CameraDefs.h	/^		PixelFormatInfoSelector_B8,	\/*!< Blue 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_B8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_B8,	\/*!< Blue 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGR10	include/CameraDefs.h	/^		PixelFormatInfoSelector_BGR10,	\/*!< Blue-Green-Red 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGR10	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BGR10,	\/*!< Blue-Green-Red 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGR10p	include/CameraDefs.h	/^		PixelFormatInfoSelector_BGR10p,	\/*!< Blue-Green-Red 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGR10p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BGR10p,	\/*!< Blue-Green-Red 10-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGR12	include/CameraDefs.h	/^		PixelFormatInfoSelector_BGR12,	\/*!< Blue-Green-Red 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGR12	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BGR12,	\/*!< Blue-Green-Red 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGR12p	include/CameraDefs.h	/^		PixelFormatInfoSelector_BGR12p,	\/*!< Blue-Green-Red 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGR12p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BGR12p,	\/*!< Blue-Green-Red 12-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGR14	include/CameraDefs.h	/^		PixelFormatInfoSelector_BGR14,	\/*!< Blue-Green-Red 14-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGR14	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BGR14,	\/*!< Blue-Green-Red 14-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGR16	include/CameraDefs.h	/^		PixelFormatInfoSelector_BGR16,	\/*!< Blue-Green-Red 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGR16	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BGR16,	\/*!< Blue-Green-Red 16-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGR565p	include/CameraDefs.h	/^		PixelFormatInfoSelector_BGR565p,	\/*!< Blue-Green-Red 5\/6\/5-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGR565p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BGR565p,	\/*!< Blue-Green-Red 5\/6\/5-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGR8	include/CameraDefs.h	/^		PixelFormatInfoSelector_BGR8,	\/*!< Blue-Green-Red 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGR8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BGR8,	\/*!< Blue-Green-Red 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGRa10	include/CameraDefs.h	/^		PixelFormatInfoSelector_BGRa10,	\/*!< Blue-Green-Red-alpha 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGRa10	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BGRa10,	\/*!< Blue-Green-Red-alpha 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGRa10p	include/CameraDefs.h	/^		PixelFormatInfoSelector_BGRa10p,	\/*!< Blue-Green-Red-alpha 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGRa10p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BGRa10p,	\/*!< Blue-Green-Red-alpha 10-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGRa12	include/CameraDefs.h	/^		PixelFormatInfoSelector_BGRa12,	\/*!< Blue-Green-Red-alpha 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGRa12	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BGRa12,	\/*!< Blue-Green-Red-alpha 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGRa12p	include/CameraDefs.h	/^		PixelFormatInfoSelector_BGRa12p,	\/*!< Blue-Green-Red-alpha 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGRa12p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BGRa12p,	\/*!< Blue-Green-Red-alpha 12-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGRa14	include/CameraDefs.h	/^		PixelFormatInfoSelector_BGRa14,	\/*!< Blue-Green-Red-alpha 14-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGRa14	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BGRa14,	\/*!< Blue-Green-Red-alpha 14-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGRa16	include/CameraDefs.h	/^		PixelFormatInfoSelector_BGRa16,	\/*!< Blue-Green-Red-alpha 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGRa16	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BGRa16,	\/*!< Blue-Green-Red-alpha 16-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGRa8	include/CameraDefs.h	/^		PixelFormatInfoSelector_BGRa8,	\/*!< Blue-Green-Red-alpha 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BGRa8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BGRa8,	\/*!< Blue-Green-Red-alpha 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerBG10	include/CameraDefs.h	/^		PixelFormatInfoSelector_BayerBG10,	\/*!< Bayer Blue-Green 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerBG10	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BayerBG10,	\/*!< Bayer Blue-Green 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerBG10p	include/CameraDefs.h	/^		PixelFormatInfoSelector_BayerBG10p,	\/*!< Bayer Blue-Green 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerBG10p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BayerBG10p,	\/*!< Bayer Blue-Green 10-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerBG12	include/CameraDefs.h	/^		PixelFormatInfoSelector_BayerBG12,	\/*!< Bayer Blue-Green 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerBG12	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BayerBG12,	\/*!< Bayer Blue-Green 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerBG12p	include/CameraDefs.h	/^		PixelFormatInfoSelector_BayerBG12p,	\/*!< Bayer Blue-Green 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerBG12p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BayerBG12p,	\/*!< Bayer Blue-Green 12-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerBG16	include/CameraDefs.h	/^		PixelFormatInfoSelector_BayerBG16,	\/*!< Bayer Blue-Green 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerBG16	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BayerBG16,	\/*!< Bayer Blue-Green 16-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerBG8	include/CameraDefs.h	/^		PixelFormatInfoSelector_BayerBG8,	\/*!< Bayer Blue-Green 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerBG8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BayerBG8,	\/*!< Bayer Blue-Green 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerGB10	include/CameraDefs.h	/^		PixelFormatInfoSelector_BayerGB10,	\/*!< Bayer Green-Blue 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerGB10	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BayerGB10,	\/*!< Bayer Green-Blue 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerGB10p	include/CameraDefs.h	/^		PixelFormatInfoSelector_BayerGB10p,	\/*!< Bayer Green-Blue 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerGB10p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BayerGB10p,	\/*!< Bayer Green-Blue 10-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerGB12	include/CameraDefs.h	/^		PixelFormatInfoSelector_BayerGB12,	\/*!< Bayer Green-Blue 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerGB12	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BayerGB12,	\/*!< Bayer Green-Blue 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerGB12p	include/CameraDefs.h	/^		PixelFormatInfoSelector_BayerGB12p,	\/*!< Bayer Green-Blue 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerGB12p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BayerGB12p,	\/*!< Bayer Green-Blue 12-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerGB16	include/CameraDefs.h	/^		PixelFormatInfoSelector_BayerGB16,	\/*!< Bayer Green-Blue 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerGB16	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BayerGB16,	\/*!< Bayer Green-Blue 16-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerGB8	include/CameraDefs.h	/^		PixelFormatInfoSelector_BayerGB8,	\/*!< Bayer Green-Blue 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerGB8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BayerGB8,	\/*!< Bayer Green-Blue 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerGR10	include/CameraDefs.h	/^		PixelFormatInfoSelector_BayerGR10,	\/*!< Bayer Green-Red 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerGR10	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BayerGR10,	\/*!< Bayer Green-Red 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerGR10p	include/CameraDefs.h	/^		PixelFormatInfoSelector_BayerGR10p,	\/*!< Bayer Green-Red 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerGR10p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BayerGR10p,	\/*!< Bayer Green-Red 10-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerGR12	include/CameraDefs.h	/^		PixelFormatInfoSelector_BayerGR12,	\/*!< Bayer Green-Red 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerGR12	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BayerGR12,	\/*!< Bayer Green-Red 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerGR12p	include/CameraDefs.h	/^		PixelFormatInfoSelector_BayerGR12p,	\/*!< Bayer Green-Red 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerGR12p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BayerGR12p,	\/*!< Bayer Green-Red 12-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerGR16	include/CameraDefs.h	/^		PixelFormatInfoSelector_BayerGR16,	\/*!< Bayer Green-Red 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerGR16	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BayerGR16,	\/*!< Bayer Green-Red 16-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerGR8	include/CameraDefs.h	/^		PixelFormatInfoSelector_BayerGR8,	\/*!< Bayer Green-Red 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerGR8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BayerGR8,	\/*!< Bayer Green-Red 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerRG10	include/CameraDefs.h	/^		PixelFormatInfoSelector_BayerRG10,	\/*!< Bayer Red-Green 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerRG10	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BayerRG10,	\/*!< Bayer Red-Green 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerRG10p	include/CameraDefs.h	/^		PixelFormatInfoSelector_BayerRG10p,	\/*!< Bayer Red-Green 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerRG10p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BayerRG10p,	\/*!< Bayer Red-Green 10-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerRG12	include/CameraDefs.h	/^		PixelFormatInfoSelector_BayerRG12,	\/*!< Bayer Red-Green 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerRG12	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BayerRG12,	\/*!< Bayer Red-Green 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerRG12p	include/CameraDefs.h	/^		PixelFormatInfoSelector_BayerRG12p,	\/*!< Bayer Red-Green 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerRG12p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BayerRG12p,	\/*!< Bayer Red-Green 12-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerRG16	include/CameraDefs.h	/^		PixelFormatInfoSelector_BayerRG16,	\/*!< Bayer Red-Green 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerRG16	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BayerRG16,	\/*!< Bayer Red-Green 16-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerRG8	include/CameraDefs.h	/^		PixelFormatInfoSelector_BayerRG8,	\/*!< Bayer Red-Green 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BayerRG8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BayerRG8,	\/*!< Bayer Red-Green 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BiColorBGRG10	include/CameraDefs.h	/^		PixelFormatInfoSelector_BiColorBGRG10,	\/*!< Bi-color Blue\/Green - Red\/Green 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BiColorBGRG10	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BiColorBGRG10,	\/*!< Bi-color Blue\/Green - Red\/Green 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BiColorBGRG10p	include/CameraDefs.h	/^		PixelFormatInfoSelector_BiColorBGRG10p,	\/*!< Bi-color Blue\/Green - Red\/Green 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BiColorBGRG10p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BiColorBGRG10p,	\/*!< Bi-color Blue\/Green - Red\/Green 10-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BiColorBGRG12	include/CameraDefs.h	/^		PixelFormatInfoSelector_BiColorBGRG12,	\/*!< Bi-color Blue\/Green - Red\/Green 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BiColorBGRG12	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BiColorBGRG12,	\/*!< Bi-color Blue\/Green - Red\/Green 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BiColorBGRG12p	include/CameraDefs.h	/^		PixelFormatInfoSelector_BiColorBGRG12p,	\/*!< Bi-color Blue\/Green - Red\/Green 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BiColorBGRG12p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BiColorBGRG12p,	\/*!< Bi-color Blue\/Green - Red\/Green 12-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BiColorBGRG8	include/CameraDefs.h	/^		PixelFormatInfoSelector_BiColorBGRG8,	\/*!< Bi-color Blue\/Green - Red\/Green 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BiColorBGRG8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BiColorBGRG8,	\/*!< Bi-color Blue\/Green - Red\/Green 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BiColorRGBG10	include/CameraDefs.h	/^		PixelFormatInfoSelector_BiColorRGBG10,	\/*!< Bi-color Red\/Green - Blue\/Green 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BiColorRGBG10	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BiColorRGBG10,	\/*!< Bi-color Red\/Green - Blue\/Green 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BiColorRGBG10p	include/CameraDefs.h	/^		PixelFormatInfoSelector_BiColorRGBG10p,	\/*!< Bi-color Red\/Green - Blue\/Green 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BiColorRGBG10p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BiColorRGBG10p,	\/*!< Bi-color Red\/Green - Blue\/Green 10-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BiColorRGBG12	include/CameraDefs.h	/^		PixelFormatInfoSelector_BiColorRGBG12,	\/*!< Bi-color Red\/Green - Blue\/Green 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BiColorRGBG12	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BiColorRGBG12,	\/*!< Bi-color Red\/Green - Blue\/Green 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BiColorRGBG12p	include/CameraDefs.h	/^		PixelFormatInfoSelector_BiColorRGBG12p,	\/*!< Bi-color Red\/Green - Blue\/Green 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BiColorRGBG12p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BiColorRGBG12p,	\/*!< Bi-color Red\/Green - Blue\/Green 12-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BiColorRGBG8	include/CameraDefs.h	/^		PixelFormatInfoSelector_BiColorRGBG8,	\/*!< Bi-color Red\/Green - Blue\/Green 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_BiColorRGBG8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_BiColorRGBG8,	\/*!< Bi-color Red\/Green - Blue\/Green 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Confidence1	include/CameraDefs.h	/^		PixelFormatInfoSelector_Confidence1,	\/*!< Confidence 1-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Confidence1	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Confidence1,	\/*!< Confidence 1-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Confidence16	include/CameraDefs.h	/^		PixelFormatInfoSelector_Confidence16,	\/*!< Confidence 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Confidence16	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Confidence16,	\/*!< Confidence 16-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Confidence1p	include/CameraDefs.h	/^		PixelFormatInfoSelector_Confidence1p,	\/*!< Confidence 1-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Confidence1p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Confidence1p,	\/*!< Confidence 1-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Confidence32f	include/CameraDefs.h	/^		PixelFormatInfoSelector_Confidence32f,	\/*!< Confidence 32-bit floating point*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Confidence32f	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Confidence32f,	\/*!< Confidence 32-bit floating point*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Confidence8	include/CameraDefs.h	/^		PixelFormatInfoSelector_Confidence8,	\/*!< Confidence 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Confidence8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Confidence8,	\/*!< Confidence 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_A10p	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_A10p,	\/*!< 3D coordinate A 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_A10p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_A10p,	\/*!< 3D coordinate A 10-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_A12p	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_A12p,	\/*!< 3D coordinate A 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_A12p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_A12p,	\/*!< 3D coordinate A 12-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_A16	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_A16,	\/*!< 3D coordinate A 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_A16	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_A16,	\/*!< 3D coordinate A 16-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_A32f	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_A32f,	\/*!< 3D coordinate A 32-bit floating point*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_A32f	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_A32f,	\/*!< 3D coordinate A 32-bit floating point*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_A8	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_A8,	\/*!< 3D coordinate A 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_A8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_A8,	\/*!< 3D coordinate A 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_ABC10p	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_ABC10p,	\/*!< 3D coordinate A-B-C 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_ABC10p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_ABC10p,	\/*!< 3D coordinate A-B-C 10-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_ABC10p_Planar	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_ABC10p_Planar,	\/*!< 3D coordinate A-B-C 10-bit packed planar*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_ABC10p_Planar	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_ABC10p_Planar,	\/*!< 3D coordinate A-B-C 10-bit packed planar*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_ABC12p	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_ABC12p,	\/*!< 3D coordinate A-B-C 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_ABC12p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_ABC12p,	\/*!< 3D coordinate A-B-C 12-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_ABC12p_Planar	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_ABC12p_Planar,	\/*!< 3D coordinate A-B-C 12-bit packed planar*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_ABC12p_Planar	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_ABC12p_Planar,	\/*!< 3D coordinate A-B-C 12-bit packed planar*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_ABC16	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_ABC16,	\/*!< 3D coordinate A-B-C 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_ABC16	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_ABC16,	\/*!< 3D coordinate A-B-C 16-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_ABC16_Planar	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_ABC16_Planar,	\/*!< 3D coordinate A-B-C 16-bit planar*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_ABC16_Planar	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_ABC16_Planar,	\/*!< 3D coordinate A-B-C 16-bit planar*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_ABC32f	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_ABC32f,	\/*!< 3D coordinate A-B-C 32-bit floating point*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_ABC32f	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_ABC32f,	\/*!< 3D coordinate A-B-C 32-bit floating point*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_ABC32f_Planar	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_ABC32f_Planar,	\/*!< 3D coordinate A-B-C 32-bit floating point planar*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_ABC32f_Planar	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_ABC32f_Planar,	\/*!< 3D coordinate A-B-C 32-bit floating point planar*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_ABC8	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_ABC8,	\/*!< 3D coordinate A-B-C 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_ABC8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_ABC8,	\/*!< 3D coordinate A-B-C 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_ABC8_Planar	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_ABC8_Planar,	\/*!< 3D coordinate A-B-C 8-bit planar*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_ABC8_Planar	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_ABC8_Planar,	\/*!< 3D coordinate A-B-C 8-bit planar*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_AC10p	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_AC10p,	\/*!< 3D coordinate A-C 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_AC10p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_AC10p,	\/*!< 3D coordinate A-C 10-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_AC10p_Planar	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_AC10p_Planar,	\/*!< 3D coordinate A-C 10-bit packed planar*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_AC10p_Planar	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_AC10p_Planar,	\/*!< 3D coordinate A-C 10-bit packed planar*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_AC12p	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_AC12p,	\/*!< 3D coordinate A-C 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_AC12p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_AC12p,	\/*!< 3D coordinate A-C 12-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_AC12p_Planar	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_AC12p_Planar,	\/*!< 3D coordinate A-C 12-bit packed planar*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_AC12p_Planar	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_AC12p_Planar,	\/*!< 3D coordinate A-C 12-bit packed planar*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_AC16	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_AC16,	\/*!< 3D coordinate A-C 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_AC16	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_AC16,	\/*!< 3D coordinate A-C 16-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_AC16_Planar	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_AC16_Planar,	\/*!< 3D coordinate A-C 16-bit planar*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_AC16_Planar	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_AC16_Planar,	\/*!< 3D coordinate A-C 16-bit planar*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_AC32f	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_AC32f,	\/*!< 3D coordinate A-C 32-bit floating point*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_AC32f	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_AC32f,	\/*!< 3D coordinate A-C 32-bit floating point*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_AC32f_Planar	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_AC32f_Planar,	\/*!< 3D coordinate A-C 32-bit floating point planar*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_AC32f_Planar	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_AC32f_Planar,	\/*!< 3D coordinate A-C 32-bit floating point planar*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_AC8	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_AC8,	\/*!< 3D coordinate A-C 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_AC8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_AC8,	\/*!< 3D coordinate A-C 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_AC8_Planar	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_AC8_Planar,	\/*!< 3D coordinate A-C 8-bit planar*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_AC8_Planar	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_AC8_Planar,	\/*!< 3D coordinate A-C 8-bit planar*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_B10p	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_B10p,	\/*!< 3D coordinate B 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_B10p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_B10p,	\/*!< 3D coordinate B 10-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_B12p	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_B12p,	\/*!< 3D coordinate B 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_B12p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_B12p,	\/*!< 3D coordinate B 12-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_B16	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_B16,	\/*!< 3D coordinate B 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_B16	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_B16,	\/*!< 3D coordinate B 16-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_B32f	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_B32f,	\/*!< 3D coordinate B 32-bit floating point*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_B32f	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_B32f,	\/*!< 3D coordinate B 32-bit floating point*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_B8	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_B8,	\/*!< 3D coordinate B 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_B8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_B8,	\/*!< 3D coordinate B 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_C10p	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_C10p,	\/*!< 3D coordinate C 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_C10p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_C10p,	\/*!< 3D coordinate C 10-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_C12p	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_C12p,	\/*!< 3D coordinate C 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_C12p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_C12p,	\/*!< 3D coordinate C 12-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_C16	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_C16,	\/*!< 3D coordinate C 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_C16	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_C16,	\/*!< 3D coordinate C 16-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_C32f	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_C32f,	\/*!< 3D coordinate C 32-bit floating point*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_C32f	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_C32f,	\/*!< 3D coordinate C 32-bit floating point*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_C8	include/CameraDefs.h	/^		PixelFormatInfoSelector_Coord3D_C8,	\/*!< 3D coordinate C 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Coord3D_C8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Coord3D_C8,	\/*!< 3D coordinate C 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_G10	include/CameraDefs.h	/^		PixelFormatInfoSelector_G10,	\/*!< Green 10-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_G10	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_G10,	\/*!< Green 10-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_G12	include/CameraDefs.h	/^		PixelFormatInfoSelector_G12,	\/*!< Green 12-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_G12	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_G12,	\/*!< Green 12-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_G16	include/CameraDefs.h	/^		PixelFormatInfoSelector_G16,	\/*!< Green 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_G16	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_G16,	\/*!< Green 16-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_G8	include/CameraDefs.h	/^		PixelFormatInfoSelector_G8,	\/*!< Green 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_G8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_G8,	\/*!< Green 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Mono10	include/CameraDefs.h	/^		PixelFormatInfoSelector_Mono10,	\/*!< Monochrome 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Mono10	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Mono10,	\/*!< Monochrome 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Mono10p	include/CameraDefs.h	/^		PixelFormatInfoSelector_Mono10p,	\/*!< Monochrome 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Mono10p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Mono10p,	\/*!< Monochrome 10-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Mono12	include/CameraDefs.h	/^		PixelFormatInfoSelector_Mono12,	\/*!< Monochrome 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Mono12	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Mono12,	\/*!< Monochrome 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Mono12p	include/CameraDefs.h	/^		PixelFormatInfoSelector_Mono12p,	\/*!< Monochrome 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Mono12p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Mono12p,	\/*!< Monochrome 12-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Mono14	include/CameraDefs.h	/^		PixelFormatInfoSelector_Mono14,	\/*!< Monochrome 14-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Mono14	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Mono14,	\/*!< Monochrome 14-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Mono16	include/CameraDefs.h	/^		PixelFormatInfoSelector_Mono16,	\/*!< Monochrome 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Mono16	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Mono16,	\/*!< Monochrome 16-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Mono1p	include/CameraDefs.h	/^		PixelFormatInfoSelector_Mono1p,	\/*!< Monochrome 1-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Mono1p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Mono1p,	\/*!< Monochrome 1-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Mono2p	include/CameraDefs.h	/^		PixelFormatInfoSelector_Mono2p,	\/*!< Monochrome 2-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Mono2p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Mono2p,	\/*!< Monochrome 2-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Mono4p	include/CameraDefs.h	/^		PixelFormatInfoSelector_Mono4p,	\/*!< Monochrome 4-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Mono4p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Mono4p,	\/*!< Monochrome 4-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Mono8	include/CameraDefs.h	/^		PixelFormatInfoSelector_Mono8,	\/*!< Monochrome 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Mono8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Mono8,	\/*!< Monochrome 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Mono8s	include/CameraDefs.h	/^		PixelFormatInfoSelector_Mono8s,	\/*!< Monochrome 8-bit signed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_Mono8s	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_Mono8s,	\/*!< Monochrome 8-bit signed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_R10	include/CameraDefs.h	/^		PixelFormatInfoSelector_R10,	\/*!< Red 10-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_R10	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_R10,	\/*!< Red 10-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_R12	include/CameraDefs.h	/^		PixelFormatInfoSelector_R12,	\/*!< Red 12-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_R12	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_R12,	\/*!< Red 12-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_R16	include/CameraDefs.h	/^		PixelFormatInfoSelector_R16,	\/*!< Red 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_R16	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_R16,	\/*!< Red 16-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_R8	include/CameraDefs.h	/^		PixelFormatInfoSelector_R8,	\/*!< Red 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_R8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_R8,	\/*!< Red 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGB10	include/CameraDefs.h	/^		PixelFormatInfoSelector_RGB10,	\/*!< Red-Green-Blue 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGB10	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_RGB10,	\/*!< Red-Green-Blue 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGB10_Planar	include/CameraDefs.h	/^		PixelFormatInfoSelector_RGB10_Planar,	\/*!< Red-Green-Blue 10-bit unpacked planar*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGB10_Planar	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_RGB10_Planar,	\/*!< Red-Green-Blue 10-bit unpacked planar*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGB10p	include/CameraDefs.h	/^		PixelFormatInfoSelector_RGB10p,	\/*!< Red-Green-Blue 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGB10p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_RGB10p,	\/*!< Red-Green-Blue 10-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGB10p32	include/CameraDefs.h	/^		PixelFormatInfoSelector_RGB10p32,	\/*!< Red-Green-Blue 10-bit packed into 32-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGB10p32	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_RGB10p32,	\/*!< Red-Green-Blue 10-bit packed into 32-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGB12	include/CameraDefs.h	/^		PixelFormatInfoSelector_RGB12,	\/*!< Red-Green-Blue 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGB12	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_RGB12,	\/*!< Red-Green-Blue 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGB12_Planar	include/CameraDefs.h	/^		PixelFormatInfoSelector_RGB12_Planar,	\/*!< Red-Green-Blue 12-bit unpacked planar*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGB12_Planar	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_RGB12_Planar,	\/*!< Red-Green-Blue 12-bit unpacked planar*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGB12p	include/CameraDefs.h	/^		PixelFormatInfoSelector_RGB12p,	\/*!< Red-Green-Blue 12-bit packed  *\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGB12p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_RGB12p,	\/*!< Red-Green-Blue 12-bit packed  *\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGB14	include/CameraDefs.h	/^		PixelFormatInfoSelector_RGB14,	\/*!< Red-Green-Blue 14-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGB14	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_RGB14,	\/*!< Red-Green-Blue 14-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGB16	include/CameraDefs.h	/^		PixelFormatInfoSelector_RGB16,	\/*!< Red-Green-Blue 16-bit  *\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGB16	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_RGB16,	\/*!< Red-Green-Blue 16-bit  *\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGB16_Planar	include/CameraDefs.h	/^		PixelFormatInfoSelector_RGB16_Planar,	\/*!< Red-Green-Blue 16-bit planar*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGB16_Planar	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_RGB16_Planar,	\/*!< Red-Green-Blue 16-bit planar*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGB565p	include/CameraDefs.h	/^		PixelFormatInfoSelector_RGB565p,	\/*!< Red-Green-Blue 5\/6\/5-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGB565p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_RGB565p,	\/*!< Red-Green-Blue 5\/6\/5-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGB8	include/CameraDefs.h	/^		PixelFormatInfoSelector_RGB8,	\/*!< Red-Green-Blue 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGB8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_RGB8,	\/*!< Red-Green-Blue 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGB8_Planar	include/CameraDefs.h	/^		PixelFormatInfoSelector_RGB8_Planar,	\/*!< Red-Green-Blue 8-bit planar*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGB8_Planar	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_RGB8_Planar,	\/*!< Red-Green-Blue 8-bit planar*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGBa10	include/CameraDefs.h	/^		PixelFormatInfoSelector_RGBa10,	\/*!< Red-Green-Blue-alpha 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGBa10	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_RGBa10,	\/*!< Red-Green-Blue-alpha 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGBa10p	include/CameraDefs.h	/^		PixelFormatInfoSelector_RGBa10p,	\/*!< Red-Green-Blue-alpha 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGBa10p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_RGBa10p,	\/*!< Red-Green-Blue-alpha 10-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGBa12	include/CameraDefs.h	/^		PixelFormatInfoSelector_RGBa12,	\/*!< Red-Green-Blue-alpha 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGBa12	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_RGBa12,	\/*!< Red-Green-Blue-alpha 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGBa12p	include/CameraDefs.h	/^		PixelFormatInfoSelector_RGBa12p,	\/*!< Red-Green-Blue-alpha 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGBa12p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_RGBa12p,	\/*!< Red-Green-Blue-alpha 12-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGBa14	include/CameraDefs.h	/^		PixelFormatInfoSelector_RGBa14,	\/*!< Red-Green-Blue-alpha 14-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGBa14	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_RGBa14,	\/*!< Red-Green-Blue-alpha 14-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGBa16	include/CameraDefs.h	/^		PixelFormatInfoSelector_RGBa16,	\/*!< Red-Green-Blue-alpha 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGBa16	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_RGBa16,	\/*!< Red-Green-Blue-alpha 16-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGBa8	include/CameraDefs.h	/^		PixelFormatInfoSelector_RGBa8,	\/*!< Red-Green-Blue-alpha 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_RGBa8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_RGBa8,	\/*!< Red-Green-Blue-alpha 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WBWG10	include/CameraDefs.h	/^		PixelFormatInfoSelector_SCF1WBWG10,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WBWG10	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_SCF1WBWG10,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WBWG10p	include/CameraDefs.h	/^		PixelFormatInfoSelector_SCF1WBWG10p,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WBWG10p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_SCF1WBWG10p,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 10-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WBWG12	include/CameraDefs.h	/^		PixelFormatInfoSelector_SCF1WBWG12,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WBWG12	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_SCF1WBWG12,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WBWG12p	include/CameraDefs.h	/^		PixelFormatInfoSelector_SCF1WBWG12p,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WBWG12p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_SCF1WBWG12p,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 12-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WBWG14	include/CameraDefs.h	/^		PixelFormatInfoSelector_SCF1WBWG14,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 14-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WBWG14	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_SCF1WBWG14,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 14-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WBWG16	include/CameraDefs.h	/^		PixelFormatInfoSelector_SCF1WBWG16,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 16-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WBWG16	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_SCF1WBWG16,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 16-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WBWG8	include/CameraDefs.h	/^		PixelFormatInfoSelector_SCF1WBWG8,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WBWG8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_SCF1WBWG8,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WGWB10	include/CameraDefs.h	/^		PixelFormatInfoSelector_SCF1WGWB10,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WGWB10	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_SCF1WGWB10,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WGWB10p	include/CameraDefs.h	/^		PixelFormatInfoSelector_SCF1WGWB10p,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WGWB10p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_SCF1WGWB10p,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 10-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WGWB12	include/CameraDefs.h	/^		PixelFormatInfoSelector_SCF1WGWB12,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WGWB12	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_SCF1WGWB12,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WGWB12p	include/CameraDefs.h	/^		PixelFormatInfoSelector_SCF1WGWB12p,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WGWB12p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_SCF1WGWB12p,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 12-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WGWB14	include/CameraDefs.h	/^		PixelFormatInfoSelector_SCF1WGWB14,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 14-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WGWB14	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_SCF1WGWB14,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 14-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WGWB16	include/CameraDefs.h	/^		PixelFormatInfoSelector_SCF1WGWB16,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WGWB16	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_SCF1WGWB16,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 16-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WGWB8	include/CameraDefs.h	/^		PixelFormatInfoSelector_SCF1WGWB8,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WGWB8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_SCF1WGWB8,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WGWR10	include/CameraDefs.h	/^		PixelFormatInfoSelector_SCF1WGWR10,	\/*!< Sparse Color Filter #1 White-Green-White-Red 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WGWR10	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_SCF1WGWR10,	\/*!< Sparse Color Filter #1 White-Green-White-Red 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WGWR10p	include/CameraDefs.h	/^		PixelFormatInfoSelector_SCF1WGWR10p,	\/*!< Sparse Color Filter #1 White-Green-White-Red 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WGWR10p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_SCF1WGWR10p,	\/*!< Sparse Color Filter #1 White-Green-White-Red 10-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WGWR12	include/CameraDefs.h	/^		PixelFormatInfoSelector_SCF1WGWR12,	\/*!< Sparse Color Filter #1 White-Green-White-Red 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WGWR12	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_SCF1WGWR12,	\/*!< Sparse Color Filter #1 White-Green-White-Red 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WGWR12p	include/CameraDefs.h	/^		PixelFormatInfoSelector_SCF1WGWR12p,	\/*!< Sparse Color Filter #1 White-Green-White-Red 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WGWR12p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_SCF1WGWR12p,	\/*!< Sparse Color Filter #1 White-Green-White-Red 12-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WGWR14	include/CameraDefs.h	/^		PixelFormatInfoSelector_SCF1WGWR14,	\/*!< Sparse Color Filter #1 White-Green-White-Red 14-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WGWR14	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_SCF1WGWR14,	\/*!< Sparse Color Filter #1 White-Green-White-Red 14-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WGWR16	include/CameraDefs.h	/^		PixelFormatInfoSelector_SCF1WGWR16,	\/*!< Sparse Color Filter #1 White-Green-White-Red 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WGWR16	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_SCF1WGWR16,	\/*!< Sparse Color Filter #1 White-Green-White-Red 16-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WGWR8	include/CameraDefs.h	/^		PixelFormatInfoSelector_SCF1WGWR8,	\/*!< Sparse Color Filter #1 White-Green-White-Red 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WGWR8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_SCF1WGWR8,	\/*!< Sparse Color Filter #1 White-Green-White-Red 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WRWG10	include/CameraDefs.h	/^		PixelFormatInfoSelector_SCF1WRWG10,	\/*!< Sparse Color Filter #1 White-Red-White-Green 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WRWG10	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_SCF1WRWG10,	\/*!< Sparse Color Filter #1 White-Red-White-Green 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WRWG10p	include/CameraDefs.h	/^		PixelFormatInfoSelector_SCF1WRWG10p,	\/*!< Sparse Color Filter #1 White-Red-White-Green 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WRWG10p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_SCF1WRWG10p,	\/*!< Sparse Color Filter #1 White-Red-White-Green 10-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WRWG12	include/CameraDefs.h	/^		PixelFormatInfoSelector_SCF1WRWG12,	\/*!< Sparse Color Filter #1 White-Red-White-Green 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WRWG12	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_SCF1WRWG12,	\/*!< Sparse Color Filter #1 White-Red-White-Green 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WRWG12p	include/CameraDefs.h	/^		PixelFormatInfoSelector_SCF1WRWG12p,	\/*!< Sparse Color Filter #1 White-Red-White-Green 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WRWG12p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_SCF1WRWG12p,	\/*!< Sparse Color Filter #1 White-Red-White-Green 12-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WRWG14	include/CameraDefs.h	/^		PixelFormatInfoSelector_SCF1WRWG14,	\/*!< Sparse Color Filter #1 White-Red-White-Green 14-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WRWG14	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_SCF1WRWG14,	\/*!< Sparse Color Filter #1 White-Red-White-Green 14-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WRWG16	include/CameraDefs.h	/^		PixelFormatInfoSelector_SCF1WRWG16,	\/*!< Sparse Color Filter #1 White-Red-White-Green 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WRWG16	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_SCF1WRWG16,	\/*!< Sparse Color Filter #1 White-Red-White-Green 16-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WRWG8	include/CameraDefs.h	/^		PixelFormatInfoSelector_SCF1WRWG8,	\/*!< Sparse Color Filter #1 White-Red-White-Green 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_SCF1WRWG8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_SCF1WRWG8,	\/*!< Sparse Color Filter #1 White-Red-White-Green 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr10_CbYCr	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr10_CbYCr,	\/*!< YCbCr 4:4:4 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr10_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr10_CbYCr,	\/*!< YCbCr 4:4:4 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr10p_CbYCr	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr10p_CbYCr,	\/*!< YCbCr 4:4:4 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr10p_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr10p_CbYCr,	\/*!< YCbCr 4:4:4 10-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr12_CbYCr	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr12_CbYCr,	\/*!< YCbCr 4:4:4 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr12_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr12_CbYCr,	\/*!< YCbCr 4:4:4 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr12p_CbYCr	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr12p_CbYCr,	\/*!< YCbCr 4:4:4 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr12p_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr12p_CbYCr,	\/*!< YCbCr 4:4:4 12-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr411_8	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr411_8,	\/*!< YCbCr 4:1:1 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr411_8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr411_8,	\/*!< YCbCr 4:1:1 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr411_8_CbYYCrYY	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr411_8_CbYYCrYY,	\/*!< YCbCr 4:1:1 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr411_8_CbYYCrYY	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr411_8_CbYYCrYY,	\/*!< YCbCr 4:1:1 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr422_10	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr422_10,	\/*!< YCbCr 4:2:2 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr422_10	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr422_10,	\/*!< YCbCr 4:2:2 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr422_10_CbYCrY	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr422_10_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr422_10_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr422_10_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr422_10p	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr422_10p,	\/*!< YCbCr 4:2:2 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr422_10p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr422_10p,	\/*!< YCbCr 4:2:2 10-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr422_10p_CbYCrY	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr422_10p_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr422_10p_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr422_10p_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr422_12	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr422_12,	\/*!< YCbCr 4:2:2 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr422_12	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr422_12,	\/*!< YCbCr 4:2:2 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr422_12_CbYCrY	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr422_12_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr422_12_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr422_12_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr422_12p	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr422_12p,	\/*!< YCbCr 4:2:2 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr422_12p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr422_12p,	\/*!< YCbCr 4:2:2 12-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr422_12p_CbYCrY	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr422_12p_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr422_12p_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr422_12p_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit packed*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr422_8	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr422_8,	\/*!< YCbCr 4:2:2 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr422_8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr422_8,	\/*!< YCbCr 4:2:2 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr422_8_CbYCrY	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr422_8_CbYCrY,	\/*!< YCbCr 4:2:2 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr422_8_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr422_8_CbYCrY,	\/*!< YCbCr 4:2:2 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_10_CbYCr	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr601_10_CbYCr,	\/*!< YCbCr 4:4:4 10-bit unpacked BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_10_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr601_10_CbYCr,	\/*!< YCbCr 4:4:4 10-bit unpacked BT.601*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_10p_CbYCr	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr601_10p_CbYCr,	\/*!< YCbCr 4:4:4 10-bit packed BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_10p_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr601_10p_CbYCr,	\/*!< YCbCr 4:4:4 10-bit packed BT.601*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_12_CbYCr	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr601_12_CbYCr,	\/*!< YCbCr 4:4:4 12-bit unpacked BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_12_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr601_12_CbYCr,	\/*!< YCbCr 4:4:4 12-bit unpacked BT.601*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_12p_CbYCr	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr601_12p_CbYCr,	\/*!< YCbCr 4:4:4 12-bit packed BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_12p_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr601_12p_CbYCr,	\/*!< YCbCr 4:4:4 12-bit packed BT.601*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_411_8_CbYYCrYY	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr601_411_8_CbYYCrYY,	\/*!< YCbCr 4:1:1 8-bit BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_411_8_CbYYCrYY	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr601_411_8_CbYYCrYY,	\/*!< YCbCr 4:1:1 8-bit BT.601*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_422_10	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr601_422_10,	\/*!< YCbCr 4:2:2 10-bit unpacked BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_422_10	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr601_422_10,	\/*!< YCbCr 4:2:2 10-bit unpacked BT.601*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_422_10_CbYCrY	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr601_422_10_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit unpacked BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_422_10_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr601_422_10_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit unpacked BT.601*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_422_10p	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr601_422_10p,	\/*!< YCbCr 4:2:2 10-bit packed BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_422_10p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr601_422_10p,	\/*!< YCbCr 4:2:2 10-bit packed BT.601*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_422_10p_CbYCrY	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr601_422_10p_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit packed BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_422_10p_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr601_422_10p_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit packed BT.601*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_422_12	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr601_422_12,	\/*!< YCbCr 4:2:2 12-bit unpacked BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_422_12	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr601_422_12,	\/*!< YCbCr 4:2:2 12-bit unpacked BT.601*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_422_12_CbYCrY	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr601_422_12_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit unpacked BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_422_12_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr601_422_12_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit unpacked BT.601*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_422_12p	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr601_422_12p,	\/*!< YCbCr 4:2:2 12-bit packed BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_422_12p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr601_422_12p,	\/*!< YCbCr 4:2:2 12-bit packed BT.601*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_422_12p_CbYCrY	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr601_422_12p_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit packed BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_422_12p_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr601_422_12p_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit packed BT.601*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_422_8	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr601_422_8,	\/*!< YCbCr 4:2:2 8-bit BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_422_8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr601_422_8,	\/*!< YCbCr 4:2:2 8-bit BT.601*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_422_8_CbYCrY	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr601_422_8_CbYCrY,	\/*!< YCbCr 4:2:2 8-bit BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_422_8_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr601_422_8_CbYCrY,	\/*!< YCbCr 4:2:2 8-bit BT.601*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_8_CbYCr	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr601_8_CbYCr,	\/*!< YCbCr 4:4:4 8-bit BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr601_8_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr601_8_CbYCr,	\/*!< YCbCr 4:4:4 8-bit BT.601*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_10_CbYCr	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr709_10_CbYCr,	\/*!< YCbCr 4:4:4 10-bit unpacked BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_10_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr709_10_CbYCr,	\/*!< YCbCr 4:4:4 10-bit unpacked BT.709*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_10p_CbYCr	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr709_10p_CbYCr,	\/*!< YCbCr 4:4:4 10-bit packed BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_10p_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr709_10p_CbYCr,	\/*!< YCbCr 4:4:4 10-bit packed BT.709*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_12_CbYCr	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr709_12_CbYCr,	\/*!< YCbCr 4:4:4 12-bit unpacked BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_12_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr709_12_CbYCr,	\/*!< YCbCr 4:4:4 12-bit unpacked BT.709*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_12p_CbYCr	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr709_12p_CbYCr,	\/*!< YCbCr 4:4:4 12-bit packed BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_12p_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr709_12p_CbYCr,	\/*!< YCbCr 4:4:4 12-bit packed BT.709*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_411_8_CbYYCrYY	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr709_411_8_CbYYCrYY,	\/*!< YCbCr 4:1:1 8-bit BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_411_8_CbYYCrYY	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr709_411_8_CbYYCrYY,	\/*!< YCbCr 4:1:1 8-bit BT.709*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_422_10	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr709_422_10,	\/*!< YCbCr 4:2:2 10-bit unpacked BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_422_10	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr709_422_10,	\/*!< YCbCr 4:2:2 10-bit unpacked BT.709*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_422_10_CbYCrY	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr709_422_10_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit unpacked BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_422_10_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr709_422_10_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit unpacked BT.709*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_422_10p	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr709_422_10p,	\/*!< YCbCr 4:2:2 10-bit packed BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_422_10p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr709_422_10p,	\/*!< YCbCr 4:2:2 10-bit packed BT.709*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_422_10p_CbYCrY	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr709_422_10p_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit packed BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_422_10p_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr709_422_10p_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit packed BT.709*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_422_12	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr709_422_12,	\/*!< YCbCr 4:2:2 12-bit unpacked BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_422_12	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr709_422_12,	\/*!< YCbCr 4:2:2 12-bit unpacked BT.709*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_422_12_CbYCrY	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr709_422_12_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit unpacked BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_422_12_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr709_422_12_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit unpacked BT.709*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_422_12p	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr709_422_12p,	\/*!< YCbCr 4:2:2 12-bit packed BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_422_12p	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr709_422_12p,	\/*!< YCbCr 4:2:2 12-bit packed BT.709*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_422_12p_CbYCrY	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr709_422_12p_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit packed BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_422_12p_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr709_422_12p_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit packed BT.709*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_422_8	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr709_422_8,	\/*!< YCbCr 4:2:2 8-bit BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_422_8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr709_422_8,	\/*!< YCbCr 4:2:2 8-bit BT.709*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_422_8_CbYCrY	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr709_422_8_CbYCrY,	\/*!< YCbCr 4:2:2 8-bit BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_422_8_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr709_422_8_CbYCrY,	\/*!< YCbCr 4:2:2 8-bit BT.709*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_8_CbYCr	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr709_8_CbYCr,	\/*!< YCbCr 4:4:4 8-bit BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr709_8_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr709_8_CbYCr,	\/*!< YCbCr 4:4:4 8-bit BT.709*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr8	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr8,	\/*!< YCbCr 4:4:4 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr8,	\/*!< YCbCr 4:4:4 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr8_CbYCr	include/CameraDefs.h	/^		PixelFormatInfoSelector_YCbCr8_CbYCr,	\/*!< YCbCr 4:4:4 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YCbCr8_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YCbCr8_CbYCr,	\/*!< YCbCr 4:4:4 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YUV411_8_UYYVYY	include/CameraDefs.h	/^		PixelFormatInfoSelector_YUV411_8_UYYVYY,	\/*!< YUV 4:1:1 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YUV411_8_UYYVYY	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YUV411_8_UYYVYY,	\/*!< YUV 4:1:1 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YUV422_8	include/CameraDefs.h	/^		PixelFormatInfoSelector_YUV422_8,	\/*!< YUV 4:2:2 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YUV422_8	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YUV422_8,	\/*!< YUV 4:2:2 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YUV422_8_UYVY	include/CameraDefs.h	/^		PixelFormatInfoSelector_YUV422_8_UYVY,	\/*!< YUV 4:2:2 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YUV422_8_UYVY	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YUV422_8_UYVY,	\/*!< YUV 4:2:2 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YUV8_UYV	include/CameraDefs.h	/^		PixelFormatInfoSelector_YUV8_UYV,	\/*!< YUV 4:4:4 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatInfoSelectorEnums
PixelFormatInfoSelector_YUV8_UYV	include/spinc/CameraDefsC.h	/^	PixelFormatInfoSelector_YUV8_UYV,	\/*!< YUV 4:4:4 8-bit*\/$/;"	e	enum:_spinPixelFormatInfoSelectorEnums
PixelFormatNamespaceID	include/SpinnakerDefs.h	/^	enum PixelFormatNamespaceID$/;"	g	namespace:Spinnaker
PixelFormat_B10	include/CameraDefs.h	/^		PixelFormat_B10,	\/*!< Blue 10-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_B10	include/spinc/CameraDefsC.h	/^	PixelFormat_B10,	\/*!< Blue 10-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_B12	include/CameraDefs.h	/^		PixelFormat_B12,	\/*!< Blue 12-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_B12	include/spinc/CameraDefsC.h	/^	PixelFormat_B12,	\/*!< Blue 12-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_B16	include/CameraDefs.h	/^		PixelFormat_B16,	\/*!< Blue 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_B16	include/spinc/CameraDefsC.h	/^	PixelFormat_B16,	\/*!< Blue 16-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_B8	include/CameraDefs.h	/^		PixelFormat_B8,	\/*!< Blue 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_B8	include/spinc/CameraDefsC.h	/^	PixelFormat_B8,	\/*!< Blue 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BGR10	include/CameraDefs.h	/^		PixelFormat_BGR10,	\/*!< Blue-Green-Red 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BGR10	include/spinc/CameraDefsC.h	/^	PixelFormat_BGR10,	\/*!< Blue-Green-Red 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BGR10p	include/CameraDefs.h	/^		PixelFormat_BGR10p,	\/*!< Blue-Green-Red 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BGR10p	include/spinc/CameraDefsC.h	/^	PixelFormat_BGR10p,	\/*!< Blue-Green-Red 10-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BGR12	include/CameraDefs.h	/^		PixelFormat_BGR12,	\/*!< Blue-Green-Red 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BGR12	include/spinc/CameraDefsC.h	/^	PixelFormat_BGR12,	\/*!< Blue-Green-Red 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BGR12p	include/CameraDefs.h	/^		PixelFormat_BGR12p,	\/*!< Blue-Green-Red 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BGR12p	include/spinc/CameraDefsC.h	/^	PixelFormat_BGR12p,	\/*!< Blue-Green-Red 12-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BGR14	include/CameraDefs.h	/^		PixelFormat_BGR14,	\/*!< Blue-Green-Red 14-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BGR14	include/spinc/CameraDefsC.h	/^	PixelFormat_BGR14,	\/*!< Blue-Green-Red 14-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BGR16	include/CameraDefs.h	/^		PixelFormat_BGR16,	\/*!< Blue-Green-Red 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BGR16	include/spinc/CameraDefsC.h	/^	PixelFormat_BGR16,	\/*!< Blue-Green-Red 16-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BGR565p	include/CameraDefs.h	/^		PixelFormat_BGR565p,	\/*!< Blue-Green-Red 5\/6\/5-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BGR565p	include/spinc/CameraDefsC.h	/^	PixelFormat_BGR565p,	\/*!< Blue-Green-Red 5\/6\/5-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BGR8	include/CameraDefs.h	/^		PixelFormat_BGR8,	\/*!< Blue-Green-Red 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BGR8	include/spinc/CameraDefsC.h	/^	PixelFormat_BGR8,	\/*!< Blue-Green-Red 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BGRa10	include/CameraDefs.h	/^		PixelFormat_BGRa10,	\/*!< Blue-Green-Red-alpha 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BGRa10	include/spinc/CameraDefsC.h	/^	PixelFormat_BGRa10,	\/*!< Blue-Green-Red-alpha 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BGRa10p	include/CameraDefs.h	/^		PixelFormat_BGRa10p,	\/*!< Blue-Green-Red-alpha 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BGRa10p	include/spinc/CameraDefsC.h	/^	PixelFormat_BGRa10p,	\/*!< Blue-Green-Red-alpha 10-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BGRa12	include/CameraDefs.h	/^		PixelFormat_BGRa12,	\/*!< Blue-Green-Red-alpha 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BGRa12	include/spinc/CameraDefsC.h	/^	PixelFormat_BGRa12,	\/*!< Blue-Green-Red-alpha 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BGRa12p	include/CameraDefs.h	/^		PixelFormat_BGRa12p,	\/*!< Blue-Green-Red-alpha 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BGRa12p	include/spinc/CameraDefsC.h	/^	PixelFormat_BGRa12p,	\/*!< Blue-Green-Red-alpha 12-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BGRa14	include/CameraDefs.h	/^		PixelFormat_BGRa14,	\/*!< Blue-Green-Red-alpha 14-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BGRa14	include/spinc/CameraDefsC.h	/^	PixelFormat_BGRa14,	\/*!< Blue-Green-Red-alpha 14-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BGRa16	include/CameraDefs.h	/^		PixelFormat_BGRa16,	\/*!< Blue-Green-Red-alpha 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BGRa16	include/spinc/CameraDefsC.h	/^	PixelFormat_BGRa16,	\/*!< Blue-Green-Red-alpha 16-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BGRa8	include/CameraDefs.h	/^		PixelFormat_BGRa8,	\/*!< Blue-Green-Red-alpha 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BGRa8	include/spinc/CameraDefsC.h	/^	PixelFormat_BGRa8,	\/*!< Blue-Green-Red-alpha 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerBG10	include/CameraDefs.h	/^		PixelFormat_BayerBG10,	\/*!< Bayer Blue-Green 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerBG10	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerBG10,	\/*!< Bayer Blue-Green 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerBG10Packed	include/CameraDefs.h	/^		PixelFormat_BayerBG10Packed,	\/*!< Bayer BG 10 bit packed (GigE Vision 2.0).*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerBG10Packed	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerBG10Packed,	\/*!< Bayer BG 10 bit packed (GigE Vision 2.0).*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerBG10p	include/CameraDefs.h	/^		PixelFormat_BayerBG10p,	\/*!< Bayer Blue-Green 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerBG10p	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerBG10p,	\/*!< Bayer Blue-Green 10-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerBG12	include/CameraDefs.h	/^		PixelFormat_BayerBG12,	\/*!< Bayer Blue-Green 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerBG12	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerBG12,	\/*!< Bayer Blue-Green 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerBG12Packed	include/CameraDefs.h	/^		PixelFormat_BayerBG12Packed,	\/*!< Pixel format set BayerBG 12 Packed. (GigE Vision 2.0)*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerBG12Packed	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerBG12Packed,	\/*!< Pixel format set BayerBG 12 Packed. (GigE Vision 2.0)*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerBG12p	include/CameraDefs.h	/^		PixelFormat_BayerBG12p,	\/*!< Bayer Blue-Green 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerBG12p	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerBG12p,	\/*!< Bayer Blue-Green 12-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerBG16	include/CameraDefs.h	/^		PixelFormat_BayerBG16,	\/*!< Bayer Blue-Green 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerBG16	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerBG16,	\/*!< Bayer Blue-Green 16-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerBG8	include/CameraDefs.h	/^		PixelFormat_BayerBG8,	\/*!< Bayer Blue-Green 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerBG8	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerBG8,	\/*!< Bayer Blue-Green 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerGB10	include/CameraDefs.h	/^		PixelFormat_BayerGB10,	\/*!< Bayer Green-Blue 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerGB10	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerGB10,	\/*!< Bayer Green-Blue 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerGB10Packed	include/CameraDefs.h	/^		PixelFormat_BayerGB10Packed,	\/*!< Bayer GB 10 bit packed (GigE Vision 2.0).*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerGB10Packed	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerGB10Packed,	\/*!< Bayer GB 10 bit packed (GigE Vision 2.0).*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerGB10p	include/CameraDefs.h	/^		PixelFormat_BayerGB10p,	\/*!< Bayer Green-Blue 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerGB10p	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerGB10p,	\/*!< Bayer Green-Blue 10-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerGB12	include/CameraDefs.h	/^		PixelFormat_BayerGB12,	\/*!< Bayer Green-Blue 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerGB12	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerGB12,	\/*!< Bayer Green-Blue 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerGB12Packed	include/CameraDefs.h	/^		PixelFormat_BayerGB12Packed,	\/*!< Pixel format set BayerGB 12 Packed. (GigE Vision 2.0)*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerGB12Packed	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerGB12Packed,	\/*!< Pixel format set BayerGB 12 Packed. (GigE Vision 2.0)*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerGB12p	include/CameraDefs.h	/^		PixelFormat_BayerGB12p,	\/*!< Bayer Green-Blue 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerGB12p	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerGB12p,	\/*!< Bayer Green-Blue 12-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerGB16	include/CameraDefs.h	/^		PixelFormat_BayerGB16,	\/*!< Bayer Green-Blue 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerGB16	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerGB16,	\/*!< Bayer Green-Blue 16-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerGB8	include/CameraDefs.h	/^		PixelFormat_BayerGB8,	\/*!< Bayer Green-Blue 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerGB8	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerGB8,	\/*!< Bayer Green-Blue 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerGR10	include/CameraDefs.h	/^		PixelFormat_BayerGR10,	\/*!< Bayer Green-Red 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerGR10	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerGR10,	\/*!< Bayer Green-Red 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerGR10Packed	include/CameraDefs.h	/^		PixelFormat_BayerGR10Packed,	\/*!< Bayer GR 10 bit packed (GigE Vision 2.0).*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerGR10Packed	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerGR10Packed,	\/*!< Bayer GR 10 bit packed (GigE Vision 2.0).*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerGR10p	include/CameraDefs.h	/^		PixelFormat_BayerGR10p,	\/*!< Bayer Green-Red 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerGR10p	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerGR10p,	\/*!< Bayer Green-Red 10-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerGR12	include/CameraDefs.h	/^		PixelFormat_BayerGR12,	\/*!< Bayer Green-Red 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerGR12	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerGR12,	\/*!< Bayer Green-Red 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerGR12Packed	include/CameraDefs.h	/^		PixelFormat_BayerGR12Packed,	\/*!< Pixel format set BayerGR 12 Packed. (GigE Vision 2.0)*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerGR12Packed	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerGR12Packed,	\/*!< Pixel format set BayerGR 12 Packed. (GigE Vision 2.0)*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerGR12p	include/CameraDefs.h	/^		PixelFormat_BayerGR12p,	\/*!< Bayer Green-Red 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerGR12p	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerGR12p,	\/*!< Bayer Green-Red 12-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerGR16	include/CameraDefs.h	/^		PixelFormat_BayerGR16,	\/*!< Bayer Green-Red 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerGR16	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerGR16,	\/*!< Bayer Green-Red 16-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerGR8	include/CameraDefs.h	/^		PixelFormat_BayerGR8,	\/*!< Bayer Green-Red 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerGR8	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerGR8,	\/*!< Bayer Green-Red 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerRG10	include/CameraDefs.h	/^		PixelFormat_BayerRG10,	\/*!< Bayer Red-Green 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerRG10	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerRG10,	\/*!< Bayer Red-Green 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerRG10Packed	include/CameraDefs.h	/^		PixelFormat_BayerRG10Packed,	\/*!< Bayer RG 10 bit packed (GigE Vision 2.0).*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerRG10Packed	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerRG10Packed,	\/*!< Bayer RG 10 bit packed (GigE Vision 2.0).*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerRG10p	include/CameraDefs.h	/^		PixelFormat_BayerRG10p,	\/*!< Bayer Red-Green 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerRG10p	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerRG10p,	\/*!< Bayer Red-Green 10-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerRG12	include/CameraDefs.h	/^		PixelFormat_BayerRG12,	\/*!< Bayer Red-Green 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerRG12	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerRG12,	\/*!< Bayer Red-Green 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerRG12Packed	include/CameraDefs.h	/^		PixelFormat_BayerRG12Packed,	\/*!< Pixel format set BayerRG 12 Packed. (GigE Vision 2.0)*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerRG12Packed	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerRG12Packed,	\/*!< Pixel format set BayerRG 12 Packed. (GigE Vision 2.0)*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerRG12p	include/CameraDefs.h	/^		PixelFormat_BayerRG12p,	\/*!< Bayer Red-Green 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerRG12p	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerRG12p,	\/*!< Bayer Red-Green 12-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerRG16	include/CameraDefs.h	/^		PixelFormat_BayerRG16,	\/*!< Bayer Red-Green 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerRG16	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerRG16,	\/*!< Bayer Red-Green 16-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BayerRG8	include/CameraDefs.h	/^		PixelFormat_BayerRG8,	\/*!< Bayer Red-Green 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BayerRG8	include/spinc/CameraDefsC.h	/^	PixelFormat_BayerRG8,	\/*!< Bayer Red-Green 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BiColorBGRG10	include/CameraDefs.h	/^		PixelFormat_BiColorBGRG10,	\/*!< Bi-color Blue\/Green - Red\/Green 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BiColorBGRG10	include/spinc/CameraDefsC.h	/^	PixelFormat_BiColorBGRG10,	\/*!< Bi-color Blue\/Green - Red\/Green 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BiColorBGRG10p	include/CameraDefs.h	/^		PixelFormat_BiColorBGRG10p,	\/*!< Bi-color Blue\/Green - Red\/Green 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BiColorBGRG10p	include/spinc/CameraDefsC.h	/^	PixelFormat_BiColorBGRG10p,	\/*!< Bi-color Blue\/Green - Red\/Green 10-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BiColorBGRG12	include/CameraDefs.h	/^		PixelFormat_BiColorBGRG12,	\/*!< Bi-color Blue\/Green - Red\/Green 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BiColorBGRG12	include/spinc/CameraDefsC.h	/^	PixelFormat_BiColorBGRG12,	\/*!< Bi-color Blue\/Green - Red\/Green 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BiColorBGRG12p	include/CameraDefs.h	/^		PixelFormat_BiColorBGRG12p,	\/*!< Bi-color Blue\/Green - Red\/Green 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BiColorBGRG12p	include/spinc/CameraDefsC.h	/^	PixelFormat_BiColorBGRG12p,	\/*!< Bi-color Blue\/Green - Red\/Green 12-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BiColorBGRG8	include/CameraDefs.h	/^		PixelFormat_BiColorBGRG8,	\/*!< Bi-color Blue\/Green - Red\/Green 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BiColorBGRG8	include/spinc/CameraDefsC.h	/^	PixelFormat_BiColorBGRG8,	\/*!< Bi-color Blue\/Green - Red\/Green 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BiColorRGBG10	include/CameraDefs.h	/^		PixelFormat_BiColorRGBG10,	\/*!< Bi-color Red\/Green - Blue\/Green 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BiColorRGBG10	include/spinc/CameraDefsC.h	/^	PixelFormat_BiColorRGBG10,	\/*!< Bi-color Red\/Green - Blue\/Green 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BiColorRGBG10p	include/CameraDefs.h	/^		PixelFormat_BiColorRGBG10p,	\/*!< Bi-color Red\/Green - Blue\/Green 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BiColorRGBG10p	include/spinc/CameraDefsC.h	/^	PixelFormat_BiColorRGBG10p,	\/*!< Bi-color Red\/Green - Blue\/Green 10-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BiColorRGBG12	include/CameraDefs.h	/^		PixelFormat_BiColorRGBG12,	\/*!< Bi-color Red\/Green - Blue\/Green 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BiColorRGBG12	include/spinc/CameraDefsC.h	/^	PixelFormat_BiColorRGBG12,	\/*!< Bi-color Red\/Green - Blue\/Green 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BiColorRGBG12p	include/CameraDefs.h	/^		PixelFormat_BiColorRGBG12p,	\/*!< Bi-color Red\/Green - Blue\/Green 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BiColorRGBG12p	include/spinc/CameraDefsC.h	/^	PixelFormat_BiColorRGBG12p,	\/*!< Bi-color Red\/Green - Blue\/Green 12-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_BiColorRGBG8	include/CameraDefs.h	/^		PixelFormat_BiColorRGBG8,	\/*!< Bi-color Red\/Green - Blue\/Green 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_BiColorRGBG8	include/spinc/CameraDefsC.h	/^	PixelFormat_BiColorRGBG8,	\/*!< Bi-color Red\/Green - Blue\/Green 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Confidence1	include/CameraDefs.h	/^		PixelFormat_Confidence1,	\/*!< Confidence 1-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Confidence1	include/spinc/CameraDefsC.h	/^	PixelFormat_Confidence1,	\/*!< Confidence 1-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Confidence16	include/CameraDefs.h	/^		PixelFormat_Confidence16,	\/*!< Confidence 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Confidence16	include/spinc/CameraDefsC.h	/^	PixelFormat_Confidence16,	\/*!< Confidence 16-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Confidence1p	include/CameraDefs.h	/^		PixelFormat_Confidence1p,	\/*!< Confidence 1-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Confidence1p	include/spinc/CameraDefsC.h	/^	PixelFormat_Confidence1p,	\/*!< Confidence 1-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Confidence32f	include/CameraDefs.h	/^		PixelFormat_Confidence32f,	\/*!< Confidence 32-bit floating point*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Confidence32f	include/spinc/CameraDefsC.h	/^	PixelFormat_Confidence32f,	\/*!< Confidence 32-bit floating point*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Confidence8	include/CameraDefs.h	/^		PixelFormat_Confidence8,	\/*!< Confidence 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Confidence8	include/spinc/CameraDefsC.h	/^	PixelFormat_Confidence8,	\/*!< Confidence 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_A10p	include/CameraDefs.h	/^		PixelFormat_Coord3D_A10p,	\/*!< 3D coordinate A 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_A10p	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_A10p,	\/*!< 3D coordinate A 10-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_A12p	include/CameraDefs.h	/^		PixelFormat_Coord3D_A12p,	\/*!< 3D coordinate A 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_A12p	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_A12p,	\/*!< 3D coordinate A 12-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_A16	include/CameraDefs.h	/^		PixelFormat_Coord3D_A16,	\/*!< 3D coordinate A 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_A16	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_A16,	\/*!< 3D coordinate A 16-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_A32f	include/CameraDefs.h	/^		PixelFormat_Coord3D_A32f,	\/*!< 3D coordinate A 32-bit floating point*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_A32f	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_A32f,	\/*!< 3D coordinate A 32-bit floating point*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_A8	include/CameraDefs.h	/^		PixelFormat_Coord3D_A8,	\/*!< 3D coordinate A 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_A8	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_A8,	\/*!< 3D coordinate A 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_ABC10p	include/CameraDefs.h	/^		PixelFormat_Coord3D_ABC10p,	\/*!< 3D coordinate A-B-C 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_ABC10p	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_ABC10p,	\/*!< 3D coordinate A-B-C 10-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_ABC10p_Planar	include/CameraDefs.h	/^		PixelFormat_Coord3D_ABC10p_Planar,	\/*!< 3D coordinate A-B-C 10-bit packed planar*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_ABC10p_Planar	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_ABC10p_Planar,	\/*!< 3D coordinate A-B-C 10-bit packed planar*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_ABC12p	include/CameraDefs.h	/^		PixelFormat_Coord3D_ABC12p,	\/*!< 3D coordinate A-B-C 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_ABC12p	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_ABC12p,	\/*!< 3D coordinate A-B-C 12-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_ABC12p_Planar	include/CameraDefs.h	/^		PixelFormat_Coord3D_ABC12p_Planar,	\/*!< 3D coordinate A-B-C 12-bit packed planar*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_ABC12p_Planar	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_ABC12p_Planar,	\/*!< 3D coordinate A-B-C 12-bit packed planar*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_ABC16	include/CameraDefs.h	/^		PixelFormat_Coord3D_ABC16,	\/*!< 3D coordinate A-B-C 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_ABC16	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_ABC16,	\/*!< 3D coordinate A-B-C 16-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_ABC16_Planar	include/CameraDefs.h	/^		PixelFormat_Coord3D_ABC16_Planar,	\/*!< 3D coordinate A-B-C 16-bit planar*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_ABC16_Planar	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_ABC16_Planar,	\/*!< 3D coordinate A-B-C 16-bit planar*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_ABC32f	include/CameraDefs.h	/^		PixelFormat_Coord3D_ABC32f,	\/*!< 3D coordinate A-B-C 32-bit floating point*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_ABC32f	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_ABC32f,	\/*!< 3D coordinate A-B-C 32-bit floating point*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_ABC32f_Planar	include/CameraDefs.h	/^		PixelFormat_Coord3D_ABC32f_Planar,	\/*!< 3D coordinate A-B-C 32-bit floating point planar*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_ABC32f_Planar	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_ABC32f_Planar,	\/*!< 3D coordinate A-B-C 32-bit floating point planar*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_ABC8	include/CameraDefs.h	/^		PixelFormat_Coord3D_ABC8,	\/*!< 3D coordinate A-B-C 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_ABC8	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_ABC8,	\/*!< 3D coordinate A-B-C 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_ABC8_Planar	include/CameraDefs.h	/^		PixelFormat_Coord3D_ABC8_Planar,	\/*!< 3D coordinate A-B-C 8-bit planar*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_ABC8_Planar	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_ABC8_Planar,	\/*!< 3D coordinate A-B-C 8-bit planar*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_AC10p	include/CameraDefs.h	/^		PixelFormat_Coord3D_AC10p,	\/*!< 3D coordinate A-C 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_AC10p	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_AC10p,	\/*!< 3D coordinate A-C 10-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_AC10p_Planar	include/CameraDefs.h	/^		PixelFormat_Coord3D_AC10p_Planar,	\/*!< 3D coordinate A-C 10-bit packed planar*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_AC10p_Planar	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_AC10p_Planar,	\/*!< 3D coordinate A-C 10-bit packed planar*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_AC12p	include/CameraDefs.h	/^		PixelFormat_Coord3D_AC12p,	\/*!< 3D coordinate A-C 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_AC12p	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_AC12p,	\/*!< 3D coordinate A-C 12-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_AC12p_Planar	include/CameraDefs.h	/^		PixelFormat_Coord3D_AC12p_Planar,	\/*!< 3D coordinate A-C 12-bit packed planar*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_AC12p_Planar	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_AC12p_Planar,	\/*!< 3D coordinate A-C 12-bit packed planar*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_AC16	include/CameraDefs.h	/^		PixelFormat_Coord3D_AC16,	\/*!< 3D coordinate A-C 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_AC16	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_AC16,	\/*!< 3D coordinate A-C 16-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_AC16_Planar	include/CameraDefs.h	/^		PixelFormat_Coord3D_AC16_Planar,	\/*!< 3D coordinate A-C 16-bit planar*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_AC16_Planar	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_AC16_Planar,	\/*!< 3D coordinate A-C 16-bit planar*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_AC32f	include/CameraDefs.h	/^		PixelFormat_Coord3D_AC32f,	\/*!< 3D coordinate A-C 32-bit floating point*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_AC32f	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_AC32f,	\/*!< 3D coordinate A-C 32-bit floating point*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_AC32f_Planar	include/CameraDefs.h	/^		PixelFormat_Coord3D_AC32f_Planar,	\/*!< 3D coordinate A-C 32-bit floating point planar*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_AC32f_Planar	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_AC32f_Planar,	\/*!< 3D coordinate A-C 32-bit floating point planar*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_AC8	include/CameraDefs.h	/^		PixelFormat_Coord3D_AC8,	\/*!< 3D coordinate A-C 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_AC8	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_AC8,	\/*!< 3D coordinate A-C 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_AC8_Planar	include/CameraDefs.h	/^		PixelFormat_Coord3D_AC8_Planar,	\/*!< 3D coordinate A-C 8-bit planar*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_AC8_Planar	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_AC8_Planar,	\/*!< 3D coordinate A-C 8-bit planar*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_B10p	include/CameraDefs.h	/^		PixelFormat_Coord3D_B10p,	\/*!< 3D coordinate B 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_B10p	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_B10p,	\/*!< 3D coordinate B 10-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_B12p	include/CameraDefs.h	/^		PixelFormat_Coord3D_B12p,	\/*!< 3D coordinate B 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_B12p	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_B12p,	\/*!< 3D coordinate B 12-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_B16	include/CameraDefs.h	/^		PixelFormat_Coord3D_B16,	\/*!< 3D coordinate B 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_B16	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_B16,	\/*!< 3D coordinate B 16-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_B32f	include/CameraDefs.h	/^		PixelFormat_Coord3D_B32f,	\/*!< 3D coordinate B 32-bit floating point*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_B32f	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_B32f,	\/*!< 3D coordinate B 32-bit floating point*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_B8	include/CameraDefs.h	/^		PixelFormat_Coord3D_B8,	\/*!< 3D coordinate B 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_B8	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_B8,	\/*!< 3D coordinate B 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_C10p	include/CameraDefs.h	/^		PixelFormat_Coord3D_C10p,	\/*!< 3D coordinate C 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_C10p	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_C10p,	\/*!< 3D coordinate C 10-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_C12p	include/CameraDefs.h	/^		PixelFormat_Coord3D_C12p,	\/*!< 3D coordinate C 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_C12p	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_C12p,	\/*!< 3D coordinate C 12-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_C16	include/CameraDefs.h	/^		PixelFormat_Coord3D_C16,	\/*!< 3D coordinate C 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_C16	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_C16,	\/*!< 3D coordinate C 16-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_C32f	include/CameraDefs.h	/^		PixelFormat_Coord3D_C32f,	\/*!< 3D coordinate C 32-bit floating point*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_C32f	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_C32f,	\/*!< 3D coordinate C 32-bit floating point*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Coord3D_C8	include/CameraDefs.h	/^		PixelFormat_Coord3D_C8,	\/*!< 3D coordinate C 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Coord3D_C8	include/spinc/CameraDefsC.h	/^	PixelFormat_Coord3D_C8,	\/*!< 3D coordinate C 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_G10	include/CameraDefs.h	/^		PixelFormat_G10,	\/*!< Green 10-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_G10	include/spinc/CameraDefsC.h	/^	PixelFormat_G10,	\/*!< Green 10-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_G12	include/CameraDefs.h	/^		PixelFormat_G12,	\/*!< Green 12-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_G12	include/spinc/CameraDefsC.h	/^	PixelFormat_G12,	\/*!< Green 12-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_G16	include/CameraDefs.h	/^		PixelFormat_G16,	\/*!< Green 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_G16	include/spinc/CameraDefsC.h	/^	PixelFormat_G16,	\/*!< Green 16-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_G8	include/CameraDefs.h	/^		PixelFormat_G8,	\/*!< Green 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_G8	include/spinc/CameraDefsC.h	/^	PixelFormat_G8,	\/*!< Green 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Mono10	include/CameraDefs.h	/^		PixelFormat_Mono10,	\/*!< Monochrome 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Mono10	include/spinc/CameraDefsC.h	/^	PixelFormat_Mono10,	\/*!< Monochrome 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Mono10p	include/CameraDefs.h	/^		PixelFormat_Mono10p,	\/*!< Monochrome 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Mono10p	include/spinc/CameraDefsC.h	/^	PixelFormat_Mono10p,	\/*!< Monochrome 10-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Mono12	include/CameraDefs.h	/^		PixelFormat_Mono12,	\/*!< Monochrome 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Mono12	include/spinc/CameraDefsC.h	/^	PixelFormat_Mono12,	\/*!< Monochrome 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Mono12Packed	include/CameraDefs.h	/^		PixelFormat_Mono12Packed,	\/*!< Pixel format set Mono 12 Packed.*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Mono12Packed	include/spinc/CameraDefsC.h	/^	PixelFormat_Mono12Packed,	\/*!< Pixel format set Mono 12 Packed.*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Mono12p	include/CameraDefs.h	/^		PixelFormat_Mono12p,	\/*!< Monochrome 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Mono12p	include/spinc/CameraDefsC.h	/^	PixelFormat_Mono12p,	\/*!< Monochrome 12-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Mono14	include/CameraDefs.h	/^		PixelFormat_Mono14,	\/*!< Monochrome 14-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Mono14	include/spinc/CameraDefsC.h	/^	PixelFormat_Mono14,	\/*!< Monochrome 14-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Mono16	include/CameraDefs.h	/^		PixelFormat_Mono16,	\/*!< Monochrome 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Mono16	include/spinc/CameraDefsC.h	/^	PixelFormat_Mono16,	\/*!< Monochrome 16-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Mono1p	include/CameraDefs.h	/^		PixelFormat_Mono1p,	\/*!< Monochrome 1-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Mono1p	include/spinc/CameraDefsC.h	/^	PixelFormat_Mono1p,	\/*!< Monochrome 1-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Mono2p	include/CameraDefs.h	/^		PixelFormat_Mono2p,	\/*!< Monochrome 2-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Mono2p	include/spinc/CameraDefsC.h	/^	PixelFormat_Mono2p,	\/*!< Monochrome 2-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Mono4p	include/CameraDefs.h	/^		PixelFormat_Mono4p,	\/*!< Monochrome 4-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Mono4p	include/spinc/CameraDefsC.h	/^	PixelFormat_Mono4p,	\/*!< Monochrome 4-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Mono8	include/CameraDefs.h	/^		PixelFormat_Mono8,	\/*!< Monochrome 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Mono8	include/spinc/CameraDefsC.h	/^	PixelFormat_Mono8,	\/*!< Monochrome 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Mono8s	include/CameraDefs.h	/^		PixelFormat_Mono8s,	\/*!< Monochrome 8-bit signed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Mono8s	include/spinc/CameraDefsC.h	/^	PixelFormat_Mono8s,	\/*!< Monochrome 8-bit signed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_R10	include/CameraDefs.h	/^		PixelFormat_R10,	\/*!< Red 10-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_R10	include/spinc/CameraDefsC.h	/^	PixelFormat_R10,	\/*!< Red 10-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_R12	include/CameraDefs.h	/^		PixelFormat_R12,	\/*!< Red 12-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_R12	include/spinc/CameraDefsC.h	/^	PixelFormat_R12,	\/*!< Red 12-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_R16	include/CameraDefs.h	/^		PixelFormat_R16,	\/*!< Red 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_R16	include/spinc/CameraDefsC.h	/^	PixelFormat_R16,	\/*!< Red 16-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_R8	include/CameraDefs.h	/^		PixelFormat_R8,	\/*!< Red 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_R8	include/spinc/CameraDefsC.h	/^	PixelFormat_R8,	\/*!< Red 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_RGB10	include/CameraDefs.h	/^		PixelFormat_RGB10,	\/*!< Red-Green-Blue 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_RGB10	include/spinc/CameraDefsC.h	/^	PixelFormat_RGB10,	\/*!< Red-Green-Blue 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_RGB10_Planar	include/CameraDefs.h	/^		PixelFormat_RGB10_Planar,	\/*!< Red-Green-Blue 10-bit unpacked planar*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_RGB10_Planar	include/spinc/CameraDefsC.h	/^	PixelFormat_RGB10_Planar,	\/*!< Red-Green-Blue 10-bit unpacked planar*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_RGB10p	include/CameraDefs.h	/^		PixelFormat_RGB10p,	\/*!< Red-Green-Blue 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_RGB10p	include/spinc/CameraDefsC.h	/^	PixelFormat_RGB10p,	\/*!< Red-Green-Blue 10-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_RGB10p32	include/CameraDefs.h	/^		PixelFormat_RGB10p32,	\/*!< Red-Green-Blue 10-bit packed into 32-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_RGB10p32	include/spinc/CameraDefsC.h	/^	PixelFormat_RGB10p32,	\/*!< Red-Green-Blue 10-bit packed into 32-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_RGB12	include/CameraDefs.h	/^		PixelFormat_RGB12,	\/*!< Red-Green-Blue 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_RGB12	include/spinc/CameraDefsC.h	/^	PixelFormat_RGB12,	\/*!< Red-Green-Blue 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_RGB12_Planar	include/CameraDefs.h	/^		PixelFormat_RGB12_Planar,	\/*!< Red-Green-Blue 12-bit unpacked planar*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_RGB12_Planar	include/spinc/CameraDefsC.h	/^	PixelFormat_RGB12_Planar,	\/*!< Red-Green-Blue 12-bit unpacked planar*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_RGB12p	include/CameraDefs.h	/^		PixelFormat_RGB12p,	\/*!< Red-Green-Blue 12-bit packed  *\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_RGB12p	include/spinc/CameraDefsC.h	/^	PixelFormat_RGB12p,	\/*!< Red-Green-Blue 12-bit packed  *\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_RGB14	include/CameraDefs.h	/^		PixelFormat_RGB14,	\/*!< Red-Green-Blue 14-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_RGB14	include/spinc/CameraDefsC.h	/^	PixelFormat_RGB14,	\/*!< Red-Green-Blue 14-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_RGB16	include/CameraDefs.h	/^		PixelFormat_RGB16,	\/*!< Red-Green-Blue 16-bit  *\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_RGB16	include/spinc/CameraDefsC.h	/^	PixelFormat_RGB16,	\/*!< Red-Green-Blue 16-bit  *\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_RGB16_Planar	include/CameraDefs.h	/^		PixelFormat_RGB16_Planar,	\/*!< Red-Green-Blue 16-bit planar*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_RGB16_Planar	include/spinc/CameraDefsC.h	/^	PixelFormat_RGB16_Planar,	\/*!< Red-Green-Blue 16-bit planar*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_RGB565p	include/CameraDefs.h	/^		PixelFormat_RGB565p,	\/*!< Red-Green-Blue 5\/6\/5-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_RGB565p	include/spinc/CameraDefsC.h	/^	PixelFormat_RGB565p,	\/*!< Red-Green-Blue 5\/6\/5-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_RGB8	include/CameraDefs.h	/^		PixelFormat_RGB8,	\/*!< Red-Green-Blue 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_RGB8	include/spinc/CameraDefsC.h	/^	PixelFormat_RGB8,	\/*!< Red-Green-Blue 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_RGB8Packed	include/CameraDefs.h	/^		PixelFormat_RGB8Packed,	\/*!< Pixel format set RGB 8 Packed.*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_RGB8Packed	include/spinc/CameraDefsC.h	/^	PixelFormat_RGB8Packed,	\/*!< Pixel format set RGB 8 Packed.*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_RGB8_Planar	include/CameraDefs.h	/^		PixelFormat_RGB8_Planar,	\/*!< Red-Green-Blue 8-bit planar*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_RGB8_Planar	include/spinc/CameraDefsC.h	/^	PixelFormat_RGB8_Planar,	\/*!< Red-Green-Blue 8-bit planar*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_RGBa10	include/CameraDefs.h	/^		PixelFormat_RGBa10,	\/*!< Red-Green-Blue-alpha 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_RGBa10	include/spinc/CameraDefsC.h	/^	PixelFormat_RGBa10,	\/*!< Red-Green-Blue-alpha 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_RGBa10p	include/CameraDefs.h	/^		PixelFormat_RGBa10p,	\/*!< Red-Green-Blue-alpha 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_RGBa10p	include/spinc/CameraDefsC.h	/^	PixelFormat_RGBa10p,	\/*!< Red-Green-Blue-alpha 10-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_RGBa12	include/CameraDefs.h	/^		PixelFormat_RGBa12,	\/*!< Red-Green-Blue-alpha 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_RGBa12	include/spinc/CameraDefsC.h	/^	PixelFormat_RGBa12,	\/*!< Red-Green-Blue-alpha 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_RGBa12p	include/CameraDefs.h	/^		PixelFormat_RGBa12p,	\/*!< Red-Green-Blue-alpha 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_RGBa12p	include/spinc/CameraDefsC.h	/^	PixelFormat_RGBa12p,	\/*!< Red-Green-Blue-alpha 12-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_RGBa14	include/CameraDefs.h	/^		PixelFormat_RGBa14,	\/*!< Red-Green-Blue-alpha 14-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_RGBa14	include/spinc/CameraDefsC.h	/^	PixelFormat_RGBa14,	\/*!< Red-Green-Blue-alpha 14-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_RGBa16	include/CameraDefs.h	/^		PixelFormat_RGBa16,	\/*!< Red-Green-Blue-alpha 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_RGBa16	include/spinc/CameraDefsC.h	/^	PixelFormat_RGBa16,	\/*!< Red-Green-Blue-alpha 16-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_RGBa8	include/CameraDefs.h	/^		PixelFormat_RGBa8,	\/*!< Red-Green-Blue-alpha 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_RGBa8	include/spinc/CameraDefsC.h	/^	PixelFormat_RGBa8,	\/*!< Red-Green-Blue-alpha 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Raw16	include/CameraDefs.h	/^		PixelFormat_Raw16,	\/*!< Raw 16 bit.*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Raw16	include/spinc/CameraDefsC.h	/^	PixelFormat_Raw16,	\/*!< Raw 16 bit.*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_Raw8	include/CameraDefs.h	/^		PixelFormat_Raw8,	\/*!< Raw bit.*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_Raw8	include/spinc/CameraDefsC.h	/^	PixelFormat_Raw8,	\/*!< Raw bit.*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_SCF1WBWG10	include/CameraDefs.h	/^		PixelFormat_SCF1WBWG10,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_SCF1WBWG10	include/spinc/CameraDefsC.h	/^	PixelFormat_SCF1WBWG10,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_SCF1WBWG10p	include/CameraDefs.h	/^		PixelFormat_SCF1WBWG10p,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_SCF1WBWG10p	include/spinc/CameraDefsC.h	/^	PixelFormat_SCF1WBWG10p,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 10-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_SCF1WBWG12	include/CameraDefs.h	/^		PixelFormat_SCF1WBWG12,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_SCF1WBWG12	include/spinc/CameraDefsC.h	/^	PixelFormat_SCF1WBWG12,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_SCF1WBWG12p	include/CameraDefs.h	/^		PixelFormat_SCF1WBWG12p,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_SCF1WBWG12p	include/spinc/CameraDefsC.h	/^	PixelFormat_SCF1WBWG12p,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 12-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_SCF1WBWG14	include/CameraDefs.h	/^		PixelFormat_SCF1WBWG14,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 14-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_SCF1WBWG14	include/spinc/CameraDefsC.h	/^	PixelFormat_SCF1WBWG14,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 14-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_SCF1WBWG16	include/CameraDefs.h	/^		PixelFormat_SCF1WBWG16,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 16-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_SCF1WBWG16	include/spinc/CameraDefsC.h	/^	PixelFormat_SCF1WBWG16,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 16-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_SCF1WBWG8	include/CameraDefs.h	/^		PixelFormat_SCF1WBWG8,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_SCF1WBWG8	include/spinc/CameraDefsC.h	/^	PixelFormat_SCF1WBWG8,	\/*!< Sparse Color Filter #1 White-Blue-White-Green 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_SCF1WGWB10	include/CameraDefs.h	/^		PixelFormat_SCF1WGWB10,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_SCF1WGWB10	include/spinc/CameraDefsC.h	/^	PixelFormat_SCF1WGWB10,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_SCF1WGWB10p	include/CameraDefs.h	/^		PixelFormat_SCF1WGWB10p,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_SCF1WGWB10p	include/spinc/CameraDefsC.h	/^	PixelFormat_SCF1WGWB10p,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 10-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_SCF1WGWB12	include/CameraDefs.h	/^		PixelFormat_SCF1WGWB12,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_SCF1WGWB12	include/spinc/CameraDefsC.h	/^	PixelFormat_SCF1WGWB12,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_SCF1WGWB12p	include/CameraDefs.h	/^		PixelFormat_SCF1WGWB12p,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_SCF1WGWB12p	include/spinc/CameraDefsC.h	/^	PixelFormat_SCF1WGWB12p,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 12-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_SCF1WGWB14	include/CameraDefs.h	/^		PixelFormat_SCF1WGWB14,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 14-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_SCF1WGWB14	include/spinc/CameraDefsC.h	/^	PixelFormat_SCF1WGWB14,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 14-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_SCF1WGWB16	include/CameraDefs.h	/^		PixelFormat_SCF1WGWB16,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_SCF1WGWB16	include/spinc/CameraDefsC.h	/^	PixelFormat_SCF1WGWB16,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 16-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_SCF1WGWB8	include/CameraDefs.h	/^		PixelFormat_SCF1WGWB8,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_SCF1WGWB8	include/spinc/CameraDefsC.h	/^	PixelFormat_SCF1WGWB8,	\/*!< Sparse Color Filter #1 White-Green-White-Blue 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_SCF1WGWR10	include/CameraDefs.h	/^		PixelFormat_SCF1WGWR10,	\/*!< Sparse Color Filter #1 White-Green-White-Red 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_SCF1WGWR10	include/spinc/CameraDefsC.h	/^	PixelFormat_SCF1WGWR10,	\/*!< Sparse Color Filter #1 White-Green-White-Red 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_SCF1WGWR10p	include/CameraDefs.h	/^		PixelFormat_SCF1WGWR10p,	\/*!< Sparse Color Filter #1 White-Green-White-Red 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_SCF1WGWR10p	include/spinc/CameraDefsC.h	/^	PixelFormat_SCF1WGWR10p,	\/*!< Sparse Color Filter #1 White-Green-White-Red 10-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_SCF1WGWR12	include/CameraDefs.h	/^		PixelFormat_SCF1WGWR12,	\/*!< Sparse Color Filter #1 White-Green-White-Red 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_SCF1WGWR12	include/spinc/CameraDefsC.h	/^	PixelFormat_SCF1WGWR12,	\/*!< Sparse Color Filter #1 White-Green-White-Red 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_SCF1WGWR12p	include/CameraDefs.h	/^		PixelFormat_SCF1WGWR12p,	\/*!< Sparse Color Filter #1 White-Green-White-Red 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_SCF1WGWR12p	include/spinc/CameraDefsC.h	/^	PixelFormat_SCF1WGWR12p,	\/*!< Sparse Color Filter #1 White-Green-White-Red 12-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_SCF1WGWR14	include/CameraDefs.h	/^		PixelFormat_SCF1WGWR14,	\/*!< Sparse Color Filter #1 White-Green-White-Red 14-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_SCF1WGWR14	include/spinc/CameraDefsC.h	/^	PixelFormat_SCF1WGWR14,	\/*!< Sparse Color Filter #1 White-Green-White-Red 14-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_SCF1WGWR16	include/CameraDefs.h	/^		PixelFormat_SCF1WGWR16,	\/*!< Sparse Color Filter #1 White-Green-White-Red 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_SCF1WGWR16	include/spinc/CameraDefsC.h	/^	PixelFormat_SCF1WGWR16,	\/*!< Sparse Color Filter #1 White-Green-White-Red 16-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_SCF1WGWR8	include/CameraDefs.h	/^		PixelFormat_SCF1WGWR8,	\/*!< Sparse Color Filter #1 White-Green-White-Red 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_SCF1WGWR8	include/spinc/CameraDefsC.h	/^	PixelFormat_SCF1WGWR8,	\/*!< Sparse Color Filter #1 White-Green-White-Red 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_SCF1WRWG10	include/CameraDefs.h	/^		PixelFormat_SCF1WRWG10,	\/*!< Sparse Color Filter #1 White-Red-White-Green 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_SCF1WRWG10	include/spinc/CameraDefsC.h	/^	PixelFormat_SCF1WRWG10,	\/*!< Sparse Color Filter #1 White-Red-White-Green 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_SCF1WRWG10p	include/CameraDefs.h	/^		PixelFormat_SCF1WRWG10p,	\/*!< Sparse Color Filter #1 White-Red-White-Green 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_SCF1WRWG10p	include/spinc/CameraDefsC.h	/^	PixelFormat_SCF1WRWG10p,	\/*!< Sparse Color Filter #1 White-Red-White-Green 10-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_SCF1WRWG12	include/CameraDefs.h	/^		PixelFormat_SCF1WRWG12,	\/*!< Sparse Color Filter #1 White-Red-White-Green 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_SCF1WRWG12	include/spinc/CameraDefsC.h	/^	PixelFormat_SCF1WRWG12,	\/*!< Sparse Color Filter #1 White-Red-White-Green 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_SCF1WRWG12p	include/CameraDefs.h	/^		PixelFormat_SCF1WRWG12p,	\/*!< Sparse Color Filter #1 White-Red-White-Green 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_SCF1WRWG12p	include/spinc/CameraDefsC.h	/^	PixelFormat_SCF1WRWG12p,	\/*!< Sparse Color Filter #1 White-Red-White-Green 12-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_SCF1WRWG14	include/CameraDefs.h	/^		PixelFormat_SCF1WRWG14,	\/*!< Sparse Color Filter #1 White-Red-White-Green 14-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_SCF1WRWG14	include/spinc/CameraDefsC.h	/^	PixelFormat_SCF1WRWG14,	\/*!< Sparse Color Filter #1 White-Red-White-Green 14-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_SCF1WRWG16	include/CameraDefs.h	/^		PixelFormat_SCF1WRWG16,	\/*!< Sparse Color Filter #1 White-Red-White-Green 16-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_SCF1WRWG16	include/spinc/CameraDefsC.h	/^	PixelFormat_SCF1WRWG16,	\/*!< Sparse Color Filter #1 White-Red-White-Green 16-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_SCF1WRWG8	include/CameraDefs.h	/^		PixelFormat_SCF1WRWG8,	\/*!< Sparse Color Filter #1 White-Red-White-Green 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_SCF1WRWG8	include/spinc/CameraDefsC.h	/^	PixelFormat_SCF1WRWG8,	\/*!< Sparse Color Filter #1 White-Red-White-Green 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr10_CbYCr	include/CameraDefs.h	/^		PixelFormat_YCbCr10_CbYCr,	\/*!< YCbCr 4:4:4 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr10_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr10_CbYCr,	\/*!< YCbCr 4:4:4 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr10p_CbYCr	include/CameraDefs.h	/^		PixelFormat_YCbCr10p_CbYCr,	\/*!< YCbCr 4:4:4 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr10p_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr10p_CbYCr,	\/*!< YCbCr 4:4:4 10-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr12_CbYCr	include/CameraDefs.h	/^		PixelFormat_YCbCr12_CbYCr,	\/*!< YCbCr 4:4:4 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr12_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr12_CbYCr,	\/*!< YCbCr 4:4:4 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr12p_CbYCr	include/CameraDefs.h	/^		PixelFormat_YCbCr12p_CbYCr,	\/*!< YCbCr 4:4:4 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr12p_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr12p_CbYCr,	\/*!< YCbCr 4:4:4 12-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr411_8	include/CameraDefs.h	/^		PixelFormat_YCbCr411_8,	\/*!< YCbCr 4:1:1 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr411_8	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr411_8,	\/*!< YCbCr 4:1:1 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr411_8_CbYYCrYY	include/CameraDefs.h	/^		PixelFormat_YCbCr411_8_CbYYCrYY,	\/*!< YCbCr 4:1:1 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr411_8_CbYYCrYY	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr411_8_CbYYCrYY,	\/*!< YCbCr 4:1:1 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr422_10	include/CameraDefs.h	/^		PixelFormat_YCbCr422_10,	\/*!< YCbCr 4:2:2 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr422_10	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr422_10,	\/*!< YCbCr 4:2:2 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr422_10_CbYCrY	include/CameraDefs.h	/^		PixelFormat_YCbCr422_10_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr422_10_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr422_10_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr422_10p	include/CameraDefs.h	/^		PixelFormat_YCbCr422_10p,	\/*!< YCbCr 4:2:2 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr422_10p	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr422_10p,	\/*!< YCbCr 4:2:2 10-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr422_10p_CbYCrY	include/CameraDefs.h	/^		PixelFormat_YCbCr422_10p_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr422_10p_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr422_10p_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr422_12	include/CameraDefs.h	/^		PixelFormat_YCbCr422_12,	\/*!< YCbCr 4:2:2 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr422_12	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr422_12,	\/*!< YCbCr 4:2:2 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr422_12_CbYCrY	include/CameraDefs.h	/^		PixelFormat_YCbCr422_12_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit unpacked*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr422_12_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr422_12_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit unpacked*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr422_12p	include/CameraDefs.h	/^		PixelFormat_YCbCr422_12p,	\/*!< YCbCr 4:2:2 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr422_12p	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr422_12p,	\/*!< YCbCr 4:2:2 12-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr422_12p_CbYCrY	include/CameraDefs.h	/^		PixelFormat_YCbCr422_12p_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit packed*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr422_12p_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr422_12p_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit packed*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr422_8	include/CameraDefs.h	/^		PixelFormat_YCbCr422_8,	\/*!< YCbCr 4:2:2 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr422_8	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr422_8,	\/*!< YCbCr 4:2:2 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr422_8_CbYCrY	include/CameraDefs.h	/^		PixelFormat_YCbCr422_8_CbYCrY,	\/*!< YCbCr 4:2:2 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr422_8_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr422_8_CbYCrY,	\/*!< YCbCr 4:2:2 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr601_10_CbYCr	include/CameraDefs.h	/^		PixelFormat_YCbCr601_10_CbYCr,	\/*!< YCbCr 4:4:4 10-bit unpacked BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr601_10_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr601_10_CbYCr,	\/*!< YCbCr 4:4:4 10-bit unpacked BT.601*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr601_10p_CbYCr	include/CameraDefs.h	/^		PixelFormat_YCbCr601_10p_CbYCr,	\/*!< YCbCr 4:4:4 10-bit packed BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr601_10p_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr601_10p_CbYCr,	\/*!< YCbCr 4:4:4 10-bit packed BT.601*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr601_12_CbYCr	include/CameraDefs.h	/^		PixelFormat_YCbCr601_12_CbYCr,	\/*!< YCbCr 4:4:4 12-bit unpacked BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr601_12_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr601_12_CbYCr,	\/*!< YCbCr 4:4:4 12-bit unpacked BT.601*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr601_12p_CbYCr	include/CameraDefs.h	/^		PixelFormat_YCbCr601_12p_CbYCr,	\/*!< YCbCr 4:4:4 12-bit packed BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr601_12p_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr601_12p_CbYCr,	\/*!< YCbCr 4:4:4 12-bit packed BT.601*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr601_411_8_CbYYCrYY	include/CameraDefs.h	/^		PixelFormat_YCbCr601_411_8_CbYYCrYY,	\/*!< YCbCr 4:1:1 8-bit BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr601_411_8_CbYYCrYY	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr601_411_8_CbYYCrYY,	\/*!< YCbCr 4:1:1 8-bit BT.601*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr601_422_10	include/CameraDefs.h	/^		PixelFormat_YCbCr601_422_10,	\/*!< YCbCr 4:2:2 10-bit unpacked BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr601_422_10	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr601_422_10,	\/*!< YCbCr 4:2:2 10-bit unpacked BT.601*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr601_422_10_CbYCrY	include/CameraDefs.h	/^		PixelFormat_YCbCr601_422_10_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit unpacked BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr601_422_10_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr601_422_10_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit unpacked BT.601*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr601_422_10p	include/CameraDefs.h	/^		PixelFormat_YCbCr601_422_10p,	\/*!< YCbCr 4:2:2 10-bit packed BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr601_422_10p	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr601_422_10p,	\/*!< YCbCr 4:2:2 10-bit packed BT.601*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr601_422_10p_CbYCrY	include/CameraDefs.h	/^		PixelFormat_YCbCr601_422_10p_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit packed BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr601_422_10p_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr601_422_10p_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit packed BT.601*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr601_422_12	include/CameraDefs.h	/^		PixelFormat_YCbCr601_422_12,	\/*!< YCbCr 4:2:2 12-bit unpacked BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr601_422_12	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr601_422_12,	\/*!< YCbCr 4:2:2 12-bit unpacked BT.601*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr601_422_12_CbYCrY	include/CameraDefs.h	/^		PixelFormat_YCbCr601_422_12_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit unpacked BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr601_422_12_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr601_422_12_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit unpacked BT.601*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr601_422_12p	include/CameraDefs.h	/^		PixelFormat_YCbCr601_422_12p,	\/*!< YCbCr 4:2:2 12-bit packed BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr601_422_12p	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr601_422_12p,	\/*!< YCbCr 4:2:2 12-bit packed BT.601*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr601_422_12p_CbYCrY	include/CameraDefs.h	/^		PixelFormat_YCbCr601_422_12p_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit packed BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr601_422_12p_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr601_422_12p_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit packed BT.601*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr601_422_8	include/CameraDefs.h	/^		PixelFormat_YCbCr601_422_8,	\/*!< YCbCr 4:2:2 8-bit BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr601_422_8	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr601_422_8,	\/*!< YCbCr 4:2:2 8-bit BT.601*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr601_422_8_CbYCrY	include/CameraDefs.h	/^		PixelFormat_YCbCr601_422_8_CbYCrY,	\/*!< YCbCr 4:2:2 8-bit BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr601_422_8_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr601_422_8_CbYCrY,	\/*!< YCbCr 4:2:2 8-bit BT.601*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr601_8_CbYCr	include/CameraDefs.h	/^		PixelFormat_YCbCr601_8_CbYCr,	\/*!< YCbCr 4:4:4 8-bit BT.601*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr601_8_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr601_8_CbYCr,	\/*!< YCbCr 4:4:4 8-bit BT.601*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr709_10_CbYCr	include/CameraDefs.h	/^		PixelFormat_YCbCr709_10_CbYCr,	\/*!< YCbCr 4:4:4 10-bit unpacked BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr709_10_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr709_10_CbYCr,	\/*!< YCbCr 4:4:4 10-bit unpacked BT.709*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr709_10p_CbYCr	include/CameraDefs.h	/^		PixelFormat_YCbCr709_10p_CbYCr,	\/*!< YCbCr 4:4:4 10-bit packed BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr709_10p_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr709_10p_CbYCr,	\/*!< YCbCr 4:4:4 10-bit packed BT.709*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr709_12_CbYCr	include/CameraDefs.h	/^		PixelFormat_YCbCr709_12_CbYCr,	\/*!< YCbCr 4:4:4 12-bit unpacked BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr709_12_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr709_12_CbYCr,	\/*!< YCbCr 4:4:4 12-bit unpacked BT.709*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr709_12p_CbYCr	include/CameraDefs.h	/^		PixelFormat_YCbCr709_12p_CbYCr,	\/*!< YCbCr 4:4:4 12-bit packed BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr709_12p_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr709_12p_CbYCr,	\/*!< YCbCr 4:4:4 12-bit packed BT.709*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr709_411_8_CbYYCrYY	include/CameraDefs.h	/^		PixelFormat_YCbCr709_411_8_CbYYCrYY,	\/*!< YCbCr 4:1:1 8-bit BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr709_411_8_CbYYCrYY	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr709_411_8_CbYYCrYY,	\/*!< YCbCr 4:1:1 8-bit BT.709*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr709_422_10	include/CameraDefs.h	/^		PixelFormat_YCbCr709_422_10,	\/*!< YCbCr 4:2:2 10-bit unpacked BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr709_422_10	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr709_422_10,	\/*!< YCbCr 4:2:2 10-bit unpacked BT.709*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr709_422_10_CbYCrY	include/CameraDefs.h	/^		PixelFormat_YCbCr709_422_10_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit unpacked BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr709_422_10_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr709_422_10_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit unpacked BT.709*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr709_422_10p	include/CameraDefs.h	/^		PixelFormat_YCbCr709_422_10p,	\/*!< YCbCr 4:2:2 10-bit packed BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr709_422_10p	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr709_422_10p,	\/*!< YCbCr 4:2:2 10-bit packed BT.709*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr709_422_10p_CbYCrY	include/CameraDefs.h	/^		PixelFormat_YCbCr709_422_10p_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit packed BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr709_422_10p_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr709_422_10p_CbYCrY,	\/*!< YCbCr 4:2:2 10-bit packed BT.709*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr709_422_12	include/CameraDefs.h	/^		PixelFormat_YCbCr709_422_12,	\/*!< YCbCr 4:2:2 12-bit unpacked BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr709_422_12	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr709_422_12,	\/*!< YCbCr 4:2:2 12-bit unpacked BT.709*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr709_422_12_CbYCrY	include/CameraDefs.h	/^		PixelFormat_YCbCr709_422_12_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit unpacked BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr709_422_12_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr709_422_12_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit unpacked BT.709*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr709_422_12p	include/CameraDefs.h	/^		PixelFormat_YCbCr709_422_12p,	\/*!< YCbCr 4:2:2 12-bit packed BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr709_422_12p	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr709_422_12p,	\/*!< YCbCr 4:2:2 12-bit packed BT.709*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr709_422_12p_CbYCrY	include/CameraDefs.h	/^		PixelFormat_YCbCr709_422_12p_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit packed BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr709_422_12p_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr709_422_12p_CbYCrY,	\/*!< YCbCr 4:2:2 12-bit packed BT.709*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr709_422_8	include/CameraDefs.h	/^		PixelFormat_YCbCr709_422_8,	\/*!< YCbCr 4:2:2 8-bit BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr709_422_8	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr709_422_8,	\/*!< YCbCr 4:2:2 8-bit BT.709*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr709_422_8_CbYCrY	include/CameraDefs.h	/^		PixelFormat_YCbCr709_422_8_CbYCrY,	\/*!< YCbCr 4:2:2 8-bit BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr709_422_8_CbYCrY	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr709_422_8_CbYCrY,	\/*!< YCbCr 4:2:2 8-bit BT.709*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr709_8_CbYCr	include/CameraDefs.h	/^		PixelFormat_YCbCr709_8_CbYCr,	\/*!< YCbCr 4:4:4 8-bit BT.709*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr709_8_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr709_8_CbYCr,	\/*!< YCbCr 4:4:4 8-bit BT.709*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr8	include/CameraDefs.h	/^		PixelFormat_YCbCr8,	\/*!< YCbCr 4:4:4 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr8	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr8,	\/*!< YCbCr 4:4:4 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YCbCr8_CbYCr	include/CameraDefs.h	/^		PixelFormat_YCbCr8_CbYCr,	\/*!< YCbCr 4:4:4 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YCbCr8_CbYCr	include/spinc/CameraDefsC.h	/^	PixelFormat_YCbCr8_CbYCr,	\/*!< YCbCr 4:4:4 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YUV411Packed	include/CameraDefs.h	/^		PixelFormat_YUV411Packed,	\/*!< Pixel format set YUV411 Packed.*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YUV411Packed	include/spinc/CameraDefsC.h	/^	PixelFormat_YUV411Packed,	\/*!< Pixel format set YUV411 Packed.*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YUV411_8_UYYVYY	include/CameraDefs.h	/^		PixelFormat_YUV411_8_UYYVYY,	\/*!< YUV 4:1:1 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YUV411_8_UYYVYY	include/spinc/CameraDefsC.h	/^	PixelFormat_YUV411_8_UYYVYY,	\/*!< YUV 4:1:1 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YUV422Packed	include/CameraDefs.h	/^		PixelFormat_YUV422Packed,	\/*!< Pixel format set to YUV 422 Packed.*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YUV422Packed	include/spinc/CameraDefsC.h	/^	PixelFormat_YUV422Packed,	\/*!< Pixel format set to YUV 422 Packed.*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YUV422_8	include/CameraDefs.h	/^		PixelFormat_YUV422_8,	\/*!< YUV 4:2:2 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YUV422_8	include/spinc/CameraDefsC.h	/^	PixelFormat_YUV422_8,	\/*!< YUV 4:2:2 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YUV422_8_UYVY	include/CameraDefs.h	/^		PixelFormat_YUV422_8_UYVY,	\/*!< YUV 4:2:2 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YUV422_8_UYVY	include/spinc/CameraDefsC.h	/^	PixelFormat_YUV422_8_UYVY,	\/*!< YUV 4:2:2 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YUV444Packed	include/CameraDefs.h	/^		PixelFormat_YUV444Packed,	\/*!< Pixel format set to YUV 444 Packed.*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YUV444Packed	include/spinc/CameraDefsC.h	/^	PixelFormat_YUV444Packed,	\/*!< Pixel format set to YUV 444 Packed.*\/$/;"	e	enum:_spinPixelFormatEnums
PixelFormat_YUV8_UYV	include/CameraDefs.h	/^		PixelFormat_YUV8_UYV,	\/*!< YUV 4:4:4 8-bit*\/$/;"	e	enum:Spinnaker::PixelFormatEnums
PixelFormat_YUV8_UYV	include/spinc/CameraDefsC.h	/^	PixelFormat_YUV8_UYV,	\/*!< YUV 4:4:4 8-bit*\/$/;"	e	enum:_spinPixelFormatEnums
PixelSize	include/Camera.h	/^		GenApi::IEnumerationT<PixelSizeEnums> &PixelSize;$/;"	m	class:Spinnaker::Camera
PixelSize	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode PixelSize;$/;"	m	struct:_quickSpin
PixelSizeEnums	include/CameraDefs.h	/^	enum PixelSizeEnums	\/*!< Total size in bits of a pixel of the image.*\/$/;"	g	namespace:Spinnaker
PixelSize_Bpp1	include/CameraDefs.h	/^		PixelSize_Bpp1,	\/*!< 1 bit per pixel.*\/$/;"	e	enum:Spinnaker::PixelSizeEnums
PixelSize_Bpp1	include/spinc/CameraDefsC.h	/^	PixelSize_Bpp1,	\/*!< 1 bit per pixel.*\/$/;"	e	enum:_spinPixelSizeEnums
PixelSize_Bpp10	include/CameraDefs.h	/^		PixelSize_Bpp10,	\/*!< 10 bits per pixel.*\/$/;"	e	enum:Spinnaker::PixelSizeEnums
PixelSize_Bpp10	include/spinc/CameraDefsC.h	/^	PixelSize_Bpp10,	\/*!< 10 bits per pixel.*\/$/;"	e	enum:_spinPixelSizeEnums
PixelSize_Bpp12	include/CameraDefs.h	/^		PixelSize_Bpp12,	\/*!< 12 bits per pixel.*\/$/;"	e	enum:Spinnaker::PixelSizeEnums
PixelSize_Bpp12	include/spinc/CameraDefsC.h	/^	PixelSize_Bpp12,	\/*!< 12 bits per pixel.*\/$/;"	e	enum:_spinPixelSizeEnums
PixelSize_Bpp14	include/CameraDefs.h	/^		PixelSize_Bpp14,	\/*!< 14 bits per pixel.*\/$/;"	e	enum:Spinnaker::PixelSizeEnums
PixelSize_Bpp14	include/spinc/CameraDefsC.h	/^	PixelSize_Bpp14,	\/*!< 14 bits per pixel.*\/$/;"	e	enum:_spinPixelSizeEnums
PixelSize_Bpp16	include/CameraDefs.h	/^		PixelSize_Bpp16,	\/*!< 16 bits per pixel.*\/$/;"	e	enum:Spinnaker::PixelSizeEnums
PixelSize_Bpp16	include/spinc/CameraDefsC.h	/^	PixelSize_Bpp16,	\/*!< 16 bits per pixel.*\/$/;"	e	enum:_spinPixelSizeEnums
PixelSize_Bpp2	include/CameraDefs.h	/^		PixelSize_Bpp2,	\/*!< 2 bits per pixel.*\/$/;"	e	enum:Spinnaker::PixelSizeEnums
PixelSize_Bpp2	include/spinc/CameraDefsC.h	/^	PixelSize_Bpp2,	\/*!< 2 bits per pixel.*\/$/;"	e	enum:_spinPixelSizeEnums
PixelSize_Bpp20	include/CameraDefs.h	/^		PixelSize_Bpp20,	\/*!< 20 bits per pixel.*\/$/;"	e	enum:Spinnaker::PixelSizeEnums
PixelSize_Bpp20	include/spinc/CameraDefsC.h	/^	PixelSize_Bpp20,	\/*!< 20 bits per pixel.*\/$/;"	e	enum:_spinPixelSizeEnums
PixelSize_Bpp24	include/CameraDefs.h	/^		PixelSize_Bpp24,	\/*!< 24 bits per pixel.*\/$/;"	e	enum:Spinnaker::PixelSizeEnums
PixelSize_Bpp24	include/spinc/CameraDefsC.h	/^	PixelSize_Bpp24,	\/*!< 24 bits per pixel.*\/$/;"	e	enum:_spinPixelSizeEnums
PixelSize_Bpp30	include/CameraDefs.h	/^		PixelSize_Bpp30,	\/*!< 30 bits per pixel.*\/$/;"	e	enum:Spinnaker::PixelSizeEnums
PixelSize_Bpp30	include/spinc/CameraDefsC.h	/^	PixelSize_Bpp30,	\/*!< 30 bits per pixel.*\/$/;"	e	enum:_spinPixelSizeEnums
PixelSize_Bpp32	include/CameraDefs.h	/^		PixelSize_Bpp32,	\/*!< 32 bits per pixel.*\/$/;"	e	enum:Spinnaker::PixelSizeEnums
PixelSize_Bpp32	include/spinc/CameraDefsC.h	/^	PixelSize_Bpp32,	\/*!< 32 bits per pixel.*\/$/;"	e	enum:_spinPixelSizeEnums
PixelSize_Bpp36	include/CameraDefs.h	/^		PixelSize_Bpp36,	\/*!< 36 bits per pixel.*\/$/;"	e	enum:Spinnaker::PixelSizeEnums
PixelSize_Bpp36	include/spinc/CameraDefsC.h	/^	PixelSize_Bpp36,	\/*!< 36 bits per pixel.*\/$/;"	e	enum:_spinPixelSizeEnums
PixelSize_Bpp4	include/CameraDefs.h	/^		PixelSize_Bpp4,	\/*!< 4 bits per pixel.*\/$/;"	e	enum:Spinnaker::PixelSizeEnums
PixelSize_Bpp4	include/spinc/CameraDefsC.h	/^	PixelSize_Bpp4,	\/*!< 4 bits per pixel.*\/$/;"	e	enum:_spinPixelSizeEnums
PixelSize_Bpp48	include/CameraDefs.h	/^		PixelSize_Bpp48,	\/*!< 48 bits per pixel.*\/$/;"	e	enum:Spinnaker::PixelSizeEnums
PixelSize_Bpp48	include/spinc/CameraDefsC.h	/^	PixelSize_Bpp48,	\/*!< 48 bits per pixel.*\/$/;"	e	enum:_spinPixelSizeEnums
PixelSize_Bpp64	include/CameraDefs.h	/^		PixelSize_Bpp64,	\/*!< 64 bits per pixel.*\/$/;"	e	enum:Spinnaker::PixelSizeEnums
PixelSize_Bpp64	include/spinc/CameraDefsC.h	/^	PixelSize_Bpp64,	\/*!< 64 bits per pixel.*\/$/;"	e	enum:_spinPixelSizeEnums
PixelSize_Bpp8	include/CameraDefs.h	/^		PixelSize_Bpp8,	\/*!< 8 bits per pixel.*\/$/;"	e	enum:Spinnaker::PixelSizeEnums
PixelSize_Bpp8	include/spinc/CameraDefsC.h	/^	PixelSize_Bpp8,	\/*!< 8 bits per pixel.*\/$/;"	e	enum:_spinPixelSizeEnums
PixelSize_Bpp96	include/CameraDefs.h	/^		PixelSize_Bpp96,	\/*!< 96 bits per pixel.*\/$/;"	e	enum:Spinnaker::PixelSizeEnums
PixelSize_Bpp96	include/spinc/CameraDefsC.h	/^	PixelSize_Bpp96,	\/*!< 96 bits per pixel.*\/$/;"	e	enum:_spinPixelSizeEnums
PortNode	include/SpinGenApi/PortNode.h	/^		class SPINNAKER_API PortNode :$/;"	c	namespace:Spinnaker::GenApi
PortNode	include/spinc/SpinnakerGenApiDefsC.h	/^	PortNode,$/;"	e	enum:_spinNodeType
PortRecorder	include/SpinGenApi/PortRecorder.h	/^		class SPINNAKER_API PortRecorder : virtual public IPortRecorder, virtual public PortReplay$/;"	c	namespace:Spinnaker::GenApi
PortReplay	include/SpinGenApi/PortReplay.h	/^		class SPINNAKER_API PortReplay : virtual public IPortReplay, virtual public PortNode$/;"	c	namespace:Spinnaker::GenApi
Prefix	include/SpinGenApi/EventAdapterU3V.h	/^			uint32_t  Prefix;$/;"	m	struct:Spinnaker::GenApi::U3V_COMMAND_HEADER
PrintDeviceInfo	Abhinay/Abhi_hardware/Abhi_hardware.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap, unsigned int camNum)$/;"	f
PrintDeviceInfo	Abhinay/Abhi_test1/Abhi_test1.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	Abhinay/Abhi_test1/Abhi_test1OLD.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	Abhinay/Abhi_test2/Abhi_test2.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap, unsigned int camNum)$/;"	f
PrintDeviceInfo	Abhinay/Abhi_test3/Abhi_test3.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap, unsigned int camNum)$/;"	f
PrintDeviceInfo	Abhinay/Abhi_trigger/Trigger.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	SpinnakerTest/Abhi_test1/Abhi_test1.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	SpinnakerTest/Abhi_test1/Abhi_test1OLD.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	SpinnakerTest/Abhi_test2/Abhi_test2.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap, unsigned int camNum)$/;"	f
PrintDeviceInfo	SpinnakerTest/Abhi_trigger/Trigger.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	SpinnakerTest/Acquisition/Acquisition.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	SpinnakerTest/AcquisitionMultipleCamera/AcquisitionMultipleCamera.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap, unsigned int camNum)$/;"	f
PrintDeviceInfo	SpinnakerTest/AcquisitionMultipleCamera_C/AcquisitionMultipleCamera_C.cpp	/^spinError PrintDeviceInfo(spinNodeMapHandle hNodeMap, unsigned int camNum)$/;"	f
PrintDeviceInfo	SpinnakerTest/Acquisition_C/Acquisition_C.cpp	/^spinError PrintDeviceInfo(spinNodeMapHandle hNodeMap)$/;"	f
PrintDeviceInfo	SpinnakerTest/ChunkData/ChunkData.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	SpinnakerTest/ChunkData_C/ChunkData_C.cpp	/^spinError PrintDeviceInfo(spinNodeMapHandle hNodeMap)$/;"	f
PrintDeviceInfo	SpinnakerTest/DeviceEvents/DeviceEvents.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	SpinnakerTest/DeviceEvents_C/DeviceEvents_C.cpp	/^spinError PrintDeviceInfo(spinNodeMapHandle hNodeMap)$/;"	f
PrintDeviceInfo	SpinnakerTest/Exposure/Exposure.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	SpinnakerTest/Exposure_C/Exposure_C.cpp	/^spinError PrintDeviceInfo(spinNodeMapHandle hNodeMap)$/;"	f
PrintDeviceInfo	SpinnakerTest/Exposure_C_QuickSpin/Exposure_C_QuickSpin.cpp	/^spinError PrintDeviceInfo(spinCamera hCamera)$/;"	f
PrintDeviceInfo	SpinnakerTest/Exposure_QuickSpin/Exposure_QuickSpin.cpp	/^int PrintDeviceInfo(CameraPtr pCam)$/;"	f
PrintDeviceInfo	SpinnakerTest/ImageEvents/ImageEvents.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	SpinnakerTest/ImageEvents_C/ImageEvents_C.cpp	/^spinError PrintDeviceInfo(spinNodeMapHandle hNodeMap)$/;"	f
PrintDeviceInfo	SpinnakerTest/ImageFormatControl/ImageFormatControl.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	SpinnakerTest/ImageFormatControl_C/ImageFormatControl_C.cpp	/^spinError PrintDeviceInfo(spinNodeMapHandle hNodeMap)$/;"	f
PrintDeviceInfo	SpinnakerTest/ImageFormatControl_C_QuickSpin/ImageFormatControl_C_QuickSpin.cpp	/^spinError PrintDeviceInfo(spinCamera hCamera)$/;"	f
PrintDeviceInfo	SpinnakerTest/ImageFormatControl_QuickSpin/ImageFormatControl_QuickSpin.cpp	/^int PrintDeviceInfo(CameraPtr pCam)$/;"	f
PrintDeviceInfo	SpinnakerTest/LookupTable/LookupTable.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	SpinnakerTest/LookupTable_C/LookupTable_C.cpp	/^spinError PrintDeviceInfo(spinNodeMapHandle hNodeMap)$/;"	f
PrintDeviceInfo	SpinnakerTest/NodeMapCallback/NodeMapCallback.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	SpinnakerTest/NodeMapCallback_C/NodeMapCallback_C.cpp	/^spinError PrintDeviceInfo(spinNodeMapHandle hNodeMap)$/;"	f
PrintDeviceInfo	SpinnakerTest/SaveToAvi/SaveToAvi.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	SpinnakerTest/SaveToAvi_C/SaveToAvi_C.cpp	/^spinError PrintDeviceInfo(spinNodeMapHandle hNodeMap)$/;"	f
PrintDeviceInfo	SpinnakerTest/Sequencer/Sequencer.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	SpinnakerTest/Sequencer_C/Sequencer_C.cpp	/^spinError PrintDeviceInfo(spinNodeMapHandle hNodeMap)$/;"	f
PrintDeviceInfo	SpinnakerTest/Trigger/Trigger.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	SpinnakerTest/Trigger_C/Trigger_C.cpp	/^spinError PrintDeviceInfo(spinNodeMapHandle hNodeMap)$/;"	f
PrintDeviceInfo	SpinnakerTest/Trigger_C_QuickSpin/Trigger_C_QuickSpin.cpp	/^spinError PrintDeviceInfo(spinCamera hCamera)$/;"	f
PrintDeviceInfo	SpinnakerTest/Trigger_QuickSpin/Trigger_QuickSpin.cpp	/^int PrintDeviceInfo(CameraPtr pCam)$/;"	f
PrintDeviceInfo	src/Abhi_hardware/Abhi_hardware.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap, unsigned int camNum)$/;"	f
PrintDeviceInfo	src/Abhi_test1/Abhi_test1.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	src/Abhi_test1/Abhi_test1OLD.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	src/Abhi_test2/Abhi_test2.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap, unsigned int camNum)$/;"	f
PrintDeviceInfo	src/Abhi_test3/Abhi_test3.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap, unsigned int camNum)$/;"	f
PrintDeviceInfo	src/Abhi_trigger/Trigger.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	src/Acquisition/Acquisition.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	src/AcquisitionMultipleCamera/AcquisitionMultipleCamera.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap, unsigned int camNum)$/;"	f
PrintDeviceInfo	src/AcquisitionMultipleCamera_C/AcquisitionMultipleCamera_C.cpp	/^spinError PrintDeviceInfo(spinNodeMapHandle hNodeMap, unsigned int camNum)$/;"	f
PrintDeviceInfo	src/Acquisition_C/Acquisition_C.cpp	/^spinError PrintDeviceInfo(spinNodeMapHandle hNodeMap)$/;"	f
PrintDeviceInfo	src/ChunkData/ChunkData.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	src/ChunkData_C/ChunkData_C.cpp	/^spinError PrintDeviceInfo(spinNodeMapHandle hNodeMap)$/;"	f
PrintDeviceInfo	src/DeviceEvents/DeviceEvents.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	src/DeviceEvents_C/DeviceEvents_C.cpp	/^spinError PrintDeviceInfo(spinNodeMapHandle hNodeMap)$/;"	f
PrintDeviceInfo	src/Exposure/Exposure.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	src/Exposure_C/Exposure_C.cpp	/^spinError PrintDeviceInfo(spinNodeMapHandle hNodeMap)$/;"	f
PrintDeviceInfo	src/Exposure_C_QuickSpin/Exposure_C_QuickSpin.cpp	/^spinError PrintDeviceInfo(spinCamera hCamera)$/;"	f
PrintDeviceInfo	src/Exposure_QuickSpin/Exposure_QuickSpin.cpp	/^int PrintDeviceInfo(CameraPtr pCam)$/;"	f
PrintDeviceInfo	src/ImageEvents/ImageEvents.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	src/ImageEvents_C/ImageEvents_C.cpp	/^spinError PrintDeviceInfo(spinNodeMapHandle hNodeMap)$/;"	f
PrintDeviceInfo	src/ImageFormatControl/ImageFormatControl.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	src/ImageFormatControl_C/ImageFormatControl_C.cpp	/^spinError PrintDeviceInfo(spinNodeMapHandle hNodeMap)$/;"	f
PrintDeviceInfo	src/ImageFormatControl_C_QuickSpin/ImageFormatControl_C_QuickSpin.cpp	/^spinError PrintDeviceInfo(spinCamera hCamera)$/;"	f
PrintDeviceInfo	src/ImageFormatControl_QuickSpin/ImageFormatControl_QuickSpin.cpp	/^int PrintDeviceInfo(CameraPtr pCam)$/;"	f
PrintDeviceInfo	src/LookupTable/LookupTable.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	src/LookupTable_C/LookupTable_C.cpp	/^spinError PrintDeviceInfo(spinNodeMapHandle hNodeMap)$/;"	f
PrintDeviceInfo	src/NodeMapCallback/NodeMapCallback.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	src/NodeMapCallback_C/NodeMapCallback_C.cpp	/^spinError PrintDeviceInfo(spinNodeMapHandle hNodeMap)$/;"	f
PrintDeviceInfo	src/SaveToAvi/SaveToAvi.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	src/SaveToAvi_C/SaveToAvi_C.cpp	/^spinError PrintDeviceInfo(spinNodeMapHandle hNodeMap)$/;"	f
PrintDeviceInfo	src/Sequencer/Sequencer.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	src/Sequencer_C/Sequencer_C.cpp	/^spinError PrintDeviceInfo(spinNodeMapHandle hNodeMap)$/;"	f
PrintDeviceInfo	src/Trigger/Trigger.cpp	/^int PrintDeviceInfo(INodeMap & nodeMap)$/;"	f
PrintDeviceInfo	src/Trigger_C/Trigger_C.cpp	/^spinError PrintDeviceInfo(spinNodeMapHandle hNodeMap)$/;"	f
PrintDeviceInfo	src/Trigger_C_QuickSpin/Trigger_C_QuickSpin.cpp	/^spinError PrintDeviceInfo(spinCamera hCamera)$/;"	f
PrintDeviceInfo	src/Trigger_QuickSpin/Trigger_QuickSpin.cpp	/^int PrintDeviceInfo(CameraPtr pCam)$/;"	f
PrintGenICamDeviceInfo	SpinnakerTest/NodeMapInfo_QuickSpin/NodeMapInfo_QuickSpin.cpp	/^int PrintGenICamDeviceInfo(CameraPtr pCamera)$/;"	f
PrintGenICamDeviceInfo	src/NodeMapInfo_QuickSpin/NodeMapInfo_QuickSpin.cpp	/^int PrintGenICamDeviceInfo(CameraPtr pCamera)$/;"	f
PrintGenICamInfo	SpinnakerTest/NodeMapInfo_C_QuickSpin/NodeMapInfo_C_QuickSpin.cpp	/^spinError PrintGenICamInfo(spinCamera hCamera)$/;"	f
PrintGenICamInfo	src/NodeMapInfo_C_QuickSpin/NodeMapInfo_C_QuickSpin.cpp	/^spinError PrintGenICamInfo(spinCamera hCamera)$/;"	f
PrintTransportLayerDeviceInfo	SpinnakerTest/NodeMapInfo_C_QuickSpin/NodeMapInfo_C_QuickSpin.cpp	/^spinError PrintTransportLayerDeviceInfo(spinCamera hCamera)$/;"	f
PrintTransportLayerDeviceInfo	SpinnakerTest/NodeMapInfo_QuickSpin/NodeMapInfo_QuickSpin.cpp	/^int PrintTransportLayerDeviceInfo(CameraPtr pCamera)$/;"	f
PrintTransportLayerDeviceInfo	src/NodeMapInfo_C_QuickSpin/NodeMapInfo_C_QuickSpin.cpp	/^spinError PrintTransportLayerDeviceInfo(spinCamera hCamera)$/;"	f
PrintTransportLayerDeviceInfo	src/NodeMapInfo_QuickSpin/NodeMapInfo_QuickSpin.cpp	/^int PrintTransportLayerDeviceInfo(CameraPtr pCamera)$/;"	f
PrintTransportLayerInterfaceInfo	SpinnakerTest/NodeMapInfo_C_QuickSpin/NodeMapInfo_C_QuickSpin.cpp	/^spinError PrintTransportLayerInterfaceInfo(spinInterface hInterface)$/;"	f
PrintTransportLayerInterfaceInfo	SpinnakerTest/NodeMapInfo_QuickSpin/NodeMapInfo_QuickSpin.cpp	/^int PrintTransportLayerInterfaceInfo(InterfacePtr pInterface)$/;"	f
PrintTransportLayerInterfaceInfo	src/NodeMapInfo_C_QuickSpin/NodeMapInfo_C_QuickSpin.cpp	/^spinError PrintTransportLayerInterfaceInfo(spinInterface hInterface)$/;"	f
PrintTransportLayerInterfaceInfo	src/NodeMapInfo_QuickSpin/NodeMapInfo_QuickSpin.cpp	/^int PrintTransportLayerInterfaceInfo(InterfacePtr pInterface)$/;"	f
PrintTransportLayerStreamInfo	SpinnakerTest/NodeMapInfo_C_QuickSpin/NodeMapInfo_C_QuickSpin.cpp	/^spinError PrintTransportLayerStreamInfo(spinCamera hCamera)$/;"	f
PrintTransportLayerStreamInfo	SpinnakerTest/NodeMapInfo_QuickSpin/NodeMapInfo_QuickSpin.cpp	/^int PrintTransportLayerStreamInfo(CameraPtr pCamera)$/;"	f
PrintTransportLayerStreamInfo	src/NodeMapInfo_C_QuickSpin/NodeMapInfo_C_QuickSpin.cpp	/^spinError PrintTransportLayerStreamInfo(spinCamera hCamera)$/;"	f
PrintTransportLayerStreamInfo	src/NodeMapInfo_QuickSpin/NodeMapInfo_QuickSpin.cpp	/^int PrintTransportLayerStreamInfo(CameraPtr pCamera)$/;"	f
PropertyGrid	include/GUI/PropertyGrid.h	/^		class SPINNAKER_API PropertyGrid$/;"	c	namespace:Spinnaker::GUI_GTKmm
PropertyGridDlg	include/GUI/PropertyGridDlg.h	/^		class SPINNAKER_API PropertyGridDlg$/;"	c	namespace:Spinnaker::GUI
PropertyGridWidget	include/GUI/PropertyGridWidget.h	/^		class SPINNAKER_API PropertyGridWidget : public Gtk::VBox$/;"	c	namespace:Spinnaker::GUI_GTKmm
PropertyGridWindow	include/GUI/SpinnakerGUI_WPF.h	/^		class SPINNAKER_API PropertyGridWindow$/;"	c	namespace:Spinnaker::GUI_WPF
PtGreyVideoCodecFormat	include/PtGreyVideoEncoder.h	/^enum PtGreyVideoCodecFormat {$/;"	g
PtGreyVideoEncoderOptions	include/PtGreyVideoEncoder.h	/^struct PtGreyVideoEncoderOptions {$/;"	s
PtGreyVideoScalerMode	include/PtGreyVideoEncoder.h	/^enum PtGreyVideoScalerMode {$/;"	g
PureNumber	include/SpinGenApi/Types.h	/^			PureNumber,                 \/\/!< Decimal number in an edit control$/;"	e	enum:Spinnaker::GenApi::_ERepresentation
PureNumber	include/spinc/SpinnakerGenApiDefsC.h	/^	PureNumber,                 \/\/!< Decimal number in an edit control$/;"	e	enum:_spinRepresentation
QUEUE_ALL_DISCARD	include/SpinnakerDefs.h	/^		QUEUE_ALL_DISCARD		= 4,	\/\/ Discards all buffers in the input pool and output queue. $/;"	e	enum:Spinnaker::FLUSH_QUEUE_TYPE
QUEUE_ALL_TO_INPUT	include/SpinnakerDefs.h	/^		QUEUE_ALL_TO_INPUT		= 2,	\/\/ Puts all buffers in the input pool. Even those in the output queue and discard entries in the event data queue. $/;"	e	enum:Spinnaker::FLUSH_QUEUE_TYPE
QUEUE_INPUT_TO_OUTPUT	include/SpinnakerDefs.h	/^		QUEUE_INPUT_TO_OUTPUT	= 0,	\/\/ Flushes the input pool to the output queue and if necessary adds entries in the New Buffer event data queue. $/;"	e	enum:Spinnaker::FLUSH_QUEUE_TYPE
QUEUE_OUTPUT_DISCARD	include/SpinnakerDefs.h	/^		QUEUE_OUTPUT_DISCARD	= 1,	\/\/ Discards all buffers in the output queue and if necessary remove the entries from the event data queue. $/;"	e	enum:Spinnaker::FLUSH_QUEUE_TYPE
QUEUE_UNQUEUED_TO_INPUT	include/SpinnakerDefs.h	/^		QUEUE_UNQUEUED_TO_INPUT = 3,    \/\/ Puts all buffers that are not in the input pool or the output queue in the input pool. $/;"	e	enum:Spinnaker::FLUSH_QUEUE_TYPE
QueryInterface	SpinnakerTest/Enumeration/Enumeration.cpp	/^int QueryInterface(InterfacePtr pInterface)$/;"	f
QueryInterface	SpinnakerTest/Enumeration_C/Enumeration_C.cpp	/^spinError QueryInterface(spinInterface hInterface)$/;"	f
QueryInterface	SpinnakerTest/Enumeration_C_QuickSpin/Enumeration_C_QuickSpin.cpp	/^spinError QueryInterface(spinInterface hInterface)$/;"	f
QueryInterface	SpinnakerTest/Enumeration_QuickSpin/Enumeration_QuickSpin.cpp	/^int QueryInterface(InterfacePtr pInterface)$/;"	f
QueryInterface	src/Enumeration/Enumeration.cpp	/^int QueryInterface(InterfacePtr pInterface)$/;"	f
QueryInterface	src/Enumeration_C/Enumeration_C.cpp	/^spinError QueryInterface(spinInterface hInterface)$/;"	f
QueryInterface	src/Enumeration_C_QuickSpin/Enumeration_C_QuickSpin.cpp	/^spinError QueryInterface(spinInterface hInterface)$/;"	f
QueryInterface	src/Enumeration_QuickSpin/Enumeration_QuickSpin.cpp	/^int QueryInterface(InterfacePtr pInterface)$/;"	f
RAPIDXML_ALIGNMENT	include/GUI/RapidXML/rapidxml.hpp	131;"	d
RAPIDXML_DYNAMIC_POOL_SIZE	include/GUI/RapidXML/rapidxml.hpp	123;"	d
RAPIDXML_HPP_INCLUDED	include/GUI/RapidXML/rapidxml.hpp	2;"	d
RAPIDXML_ITERATORS_HPP_INCLUDED	include/GUI/RapidXML/rapidxml_iterators.hpp	2;"	d
RAPIDXML_PARSE_ERROR	include/GUI/RapidXML/rapidxml.hpp	2589;"	d
RAPIDXML_PARSE_ERROR	include/GUI/RapidXML/rapidxml.hpp	28;"	d
RAPIDXML_PRINT_HPP_INCLUDED	include/GUI/RapidXML/rapidxml_print.hpp	2;"	d
RAPIDXML_STATIC_POOL_SIZE	include/GUI/RapidXML/rapidxml.hpp	116;"	d
RAPIDXML_UTILS_HPP_INCLUDED	include/GUI/RapidXML/rapidxml_utils.hpp	2;"	d
RAW	include/SpinnakerDefs.h	/^		RAW, \/**< Raw data. *\/$/;"	e	enum:Spinnaker::ImageFileFormat
RAW	include/spinc/SpinnakerDefsC.h	/^	RAW, \/**< Raw data. *\/$/;"	e	enum:_spinImageFileFormat
RED	include/SpinnakerDefs.h	/^		RED,$/;"	e	enum:Spinnaker::StatisticsChannel
RED	include/spinc/SpinnakerDefsC.h	/^	RED,$/;"	e	enum:_spinStatisticsChannel
RIGOROUS	include/SpinnakerDefs.h	/^        RIGOROUS,$/;"	e	enum:Spinnaker::ColorProcessingAlgorithm
RIGOROUS	include/spinc/SpinnakerDefsC.h	/^	RIGOROUS,$/;"	e	enum:_spinColorProcessingAlgorithm
RO	include/SpinGenApi/Types.h	/^			RO,        \/\/!< Read Only$/;"	e	enum:Spinnaker::GenApi::_EAccessMode
RO	include/spinc/SpinnakerGenApiDefsC.h	/^	RO,$/;"	e	enum:_spinAccessMode
RW	include/SpinGenApi/Types.h	/^			RW,        \/\/!< Read and Write$/;"	e	enum:Spinnaker::GenApi::_EAccessMode
RW	include/spinc/SpinnakerGenApiDefsC.h	/^	RW,$/;"	e	enum:_spinAccessMode
Read	include/SpinGenApi/RegisterPortImpl.h	/^			virtual void Read(void *pBuffer, int64_t Address, int64_t Length){};$/;"	f	class:Spinnaker::GenApi::CRegisterPortImpl
Read	include/SpinGenApi/StructPort.h	/^			virtual void Read(void *pBuffer, int64_t Address, int64_t Length)$/;"	f	class:Spinnaker::GenApi::CTestPortStruct
RegionDestination	include/Camera.h	/^		GenApi::IEnumerationT<RegionDestinationEnums> &RegionDestination;$/;"	m	class:Spinnaker::Camera
RegionDestination	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode RegionDestination;$/;"	m	struct:_quickSpin
RegionDestinationEnums	include/CameraDefs.h	/^	enum RegionDestinationEnums	\/*!< Control the destination of the selected region.*\/$/;"	g	namespace:Spinnaker
RegionDestination_Stream0	include/CameraDefs.h	/^		RegionDestination_Stream0,	\/*!< The destination of the region is the data stream 0.*\/$/;"	e	enum:Spinnaker::RegionDestinationEnums
RegionDestination_Stream0	include/spinc/CameraDefsC.h	/^	RegionDestination_Stream0,	\/*!< The destination of the region is the data stream 0.*\/$/;"	e	enum:_spinRegionDestinationEnums
RegionDestination_Stream1	include/CameraDefs.h	/^		RegionDestination_Stream1,	\/*!< The destination of the region is the data stream 1.*\/$/;"	e	enum:Spinnaker::RegionDestinationEnums
RegionDestination_Stream1	include/spinc/CameraDefsC.h	/^	RegionDestination_Stream1,	\/*!< The destination of the region is the data stream 1.*\/$/;"	e	enum:_spinRegionDestinationEnums
RegionDestination_Stream2	include/CameraDefs.h	/^		RegionDestination_Stream2,	\/*!< The destination of the region is the data stream 2.*\/$/;"	e	enum:Spinnaker::RegionDestinationEnums
RegionDestination_Stream2	include/spinc/CameraDefsC.h	/^	RegionDestination_Stream2,	\/*!< The destination of the region is the data stream 2.*\/$/;"	e	enum:_spinRegionDestinationEnums
RegionMode	include/Camera.h	/^		GenApi::IEnumerationT<RegionModeEnums> &RegionMode;$/;"	m	class:Spinnaker::Camera
RegionMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode RegionMode;$/;"	m	struct:_quickSpin
RegionModeEnums	include/CameraDefs.h	/^	enum RegionModeEnums	\/*!< Controls if the selected Region of interest is active and streaming.*\/$/;"	g	namespace:Spinnaker
RegionMode_Off	include/CameraDefs.h	/^		RegionMode_Off,	\/*!< Disable the usage of the Region.*\/$/;"	e	enum:Spinnaker::RegionModeEnums
RegionMode_Off	include/spinc/CameraDefsC.h	/^	RegionMode_Off,	\/*!< Disable the usage of the Region.*\/$/;"	e	enum:_spinRegionModeEnums
RegionMode_On	include/CameraDefs.h	/^		RegionMode_On,	\/*!< Enable the usage of the Region.*\/$/;"	e	enum:Spinnaker::RegionModeEnums
RegionMode_On	include/spinc/CameraDefsC.h	/^	RegionMode_On,	\/*!< Enable the usage of the Region.*\/$/;"	e	enum:_spinRegionModeEnums
RegionSelector	include/Camera.h	/^		GenApi::IEnumerationT<RegionSelectorEnums> &RegionSelector;$/;"	m	class:Spinnaker::Camera
RegionSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode RegionSelector;$/;"	m	struct:_quickSpin
RegionSelectorEnums	include/CameraDefs.h	/^	enum RegionSelectorEnums	\/*!< Selects the Region of interest to control. The RegionSelector feature allows devices that are able to extract multiple regions out of an image, to configure the features of those individual regions independently.*\/$/;"	g	namespace:Spinnaker
RegionSelector_All	include/CameraDefs.h	/^		RegionSelector_All,	\/*!< Selected features will control all the regions at the same time.*\/$/;"	e	enum:Spinnaker::RegionSelectorEnums
RegionSelector_All	include/spinc/CameraDefsC.h	/^	RegionSelector_All,	\/*!< Selected features will control all the regions at the same time.*\/$/;"	e	enum:_spinRegionSelectorEnums
RegionSelector_Region0	include/CameraDefs.h	/^		RegionSelector_Region0,	\/*!< Selected feature will control the region 0.*\/$/;"	e	enum:Spinnaker::RegionSelectorEnums
RegionSelector_Region0	include/spinc/CameraDefsC.h	/^	RegionSelector_Region0,	\/*!< Selected feature will control the region 0.*\/$/;"	e	enum:_spinRegionSelectorEnums
RegionSelector_Region1	include/CameraDefs.h	/^		RegionSelector_Region1,	\/*!< Selected feature will control the region 1.*\/$/;"	e	enum:Spinnaker::RegionSelectorEnums
RegionSelector_Region1	include/spinc/CameraDefsC.h	/^	RegionSelector_Region1,	\/*!< Selected feature will control the region 1.*\/$/;"	e	enum:_spinRegionSelectorEnums
RegionSelector_Region2	include/CameraDefs.h	/^		RegionSelector_Region2,	\/*!< Selected feature will control the region 2.*\/$/;"	e	enum:Spinnaker::RegionSelectorEnums
RegionSelector_Region2	include/spinc/CameraDefsC.h	/^	RegionSelector_Region2,	\/*!< Selected feature will control the region 2.*\/$/;"	e	enum:_spinRegionSelectorEnums
Register	include/SpinGenApi/NodeCallback.h	/^		intptr_t Register(INode* pNode, Client &c, Member m, ECallbackType CallbackType = cbPostInsideLock)$/;"	f	namespace:Spinnaker::GenApi
Register	include/SpinGenApi/NodeCallback.h	/^		intptr_t Register(INode* pNode, Function f, ECallbackType CallbackType = cbPostInsideLock)$/;"	f	namespace:Spinnaker::GenApi
RegisterNode	include/SpinGenApi/RegisterNode.h	/^        class SPINNAKER_API RegisterNode : virtual public IRegister, virtual public ValueNode$/;"	c	namespace:Spinnaker::GenApi
RegisterNode	include/spinc/SpinnakerGenApiDefsC.h	/^	RegisterNode,$/;"	e	enum:_spinNodeType
Release	include/SpinGenApi/NodeMapRef.h	/^		void GenApi::CNodeMapRefT<TCameraParams>::Release()$/;"	f	class:Spinnaker::GenApi::GenApi::CNodeMapRefT
RemovalEvent	include/RemovalEvent.h	/^	class SPINNAKER_API RemovalEvent : public virtual Event$/;"	c	namespace:Spinnaker
Replay	include/SpinGenApi/PortImpl.h	/^			virtual void Replay( IPortWriteList *pPortRecorder, bool Invalidate = true )$/;"	f	class:Spinnaker::GenApi::CPortImpl
ReqId	include/SpinGenApi/EventAdapterGEV.h	/^        uint16_t ReqId;$/;"	m	struct:Spinnaker::GenApi::GVCP_REQUEST_HEADER
ReqId	include/SpinGenApi/EventAdapterU3V.h	/^			uint16_t ReqId;$/;"	m	struct:Spinnaker::GenApi::U3V_COMMAND_HEADER
Reserved	include/SpinGenApi/EventAdapterU3V.h	/^			uint16_t Reserved;$/;"	m	struct:Spinnaker::GenApi::U3V_EVENT_DATA
ReservedOrEventSize	include/SpinGenApi/EventAdapterGEV.h	/^        uint16_t ReservedOrEventSize;$/;"	m	struct:Spinnaker::GenApi::GVCP_EVENT_ITEM
ReservedOrEventSize	include/SpinGenApi/EventAdapterGEV.h	/^        uint16_t ReservedOrEventSize;$/;"	m	struct:Spinnaker::GenApi::GVCP_EVENT_ITEM_BASIC
ReservedOrEventSize	include/SpinGenApi/EventAdapterGEV.h	/^        uint16_t ReservedOrEventSize;$/;"	m	struct:Spinnaker::GenApi::GVCP_EVENT_ITEM_EXTENDED_ID
ResetCallbacks	SpinnakerTest/NodeMapCallback/NodeMapCallback.cpp	/^int ResetCallbacks(INodeMap & nodeMap, int64_t & callbackHeight, int64_t & callbackGain)$/;"	f
ResetCallbacks	SpinnakerTest/NodeMapCallback_C/NodeMapCallback_C.cpp	/^spinError ResetCallbacks(spinNodeMapHandle hNodeMap, spinNodeCallbackHandle callbackHeight, spinNodeCallbackHandle callbackGain)$/;"	f
ResetCallbacks	src/NodeMapCallback/NodeMapCallback.cpp	/^int ResetCallbacks(INodeMap & nodeMap, int64_t & callbackHeight, int64_t & callbackGain)$/;"	f
ResetCallbacks	src/NodeMapCallback_C/NodeMapCallback_C.cpp	/^spinError ResetCallbacks(spinNodeMapHandle hNodeMap, spinNodeCallbackHandle callbackHeight, spinNodeCallbackHandle callbackGain)$/;"	f
ResetDeviceEvents	SpinnakerTest/DeviceEvents/DeviceEvents.cpp	/^int ResetDeviceEvents(CameraPtr pCam, DeviceEventHandler*& deviceEventHandler)$/;"	f
ResetDeviceEvents	SpinnakerTest/DeviceEvents_C/DeviceEvents_C.cpp	/^spinError ResetDeviceEvents(spinCamera hCam, spinDeviceEvent deviceEvent)$/;"	f
ResetDeviceEvents	src/DeviceEvents/DeviceEvents.cpp	/^int ResetDeviceEvents(CameraPtr pCam, DeviceEventHandler*& deviceEventHandler)$/;"	f
ResetDeviceEvents	src/DeviceEvents_C/DeviceEvents_C.cpp	/^spinError ResetDeviceEvents(spinCamera hCam, spinDeviceEvent deviceEvent)$/;"	f
ResetExposure	SpinnakerTest/Exposure/Exposure.cpp	/^int ResetExposure(INodeMap & nodeMap)$/;"	f
ResetExposure	SpinnakerTest/Exposure_C/Exposure_C.cpp	/^spinError ResetExposure(spinNodeHandle hNodeMap)$/;"	f
ResetExposure	SpinnakerTest/Exposure_C_QuickSpin/Exposure_C_QuickSpin.cpp	/^spinError ResetExposure(quickSpin qs)$/;"	f
ResetExposure	SpinnakerTest/Exposure_QuickSpin/Exposure_QuickSpin.cpp	/^int ResetExposure(CameraPtr pCam)$/;"	f
ResetExposure	src/Exposure/Exposure.cpp	/^int ResetExposure(INodeMap & nodeMap)$/;"	f
ResetExposure	src/Exposure_C/Exposure_C.cpp	/^spinError ResetExposure(spinNodeHandle hNodeMap)$/;"	f
ResetExposure	src/Exposure_C_QuickSpin/Exposure_C_QuickSpin.cpp	/^spinError ResetExposure(quickSpin qs)$/;"	f
ResetExposure	src/Exposure_QuickSpin/Exposure_QuickSpin.cpp	/^int ResetExposure(CameraPtr pCam)$/;"	f
ResetImageEvents	SpinnakerTest/ImageEvents/ImageEvents.cpp	/^int ResetImageEvents(CameraPtr pCam, ImageEventHandler*& imageEventHandler)$/;"	f
ResetImageEvents	SpinnakerTest/ImageEvents_C/ImageEvents_C.cpp	/^spinError ResetImageEvents(spinCamera hCam, spinImageEvent imageEvent)$/;"	f
ResetImageEvents	src/ImageEvents/ImageEvents.cpp	/^int ResetImageEvents(CameraPtr pCam, ImageEventHandler*& imageEventHandler)$/;"	f
ResetImageEvents	src/ImageEvents_C/ImageEvents_C.cpp	/^spinError ResetImageEvents(spinCamera hCam, spinImageEvent imageEvent)$/;"	f
ResetLookupTables	SpinnakerTest/LookupTable/LookupTable.cpp	/^int ResetLookupTables(INodeMap & nodeMap)$/;"	f
ResetLookupTables	SpinnakerTest/LookupTable_C/LookupTable_C.cpp	/^spinError ResetLookupTables(spinNodeMapHandle hNodeMap)$/;"	f
ResetLookupTables	src/LookupTable/LookupTable.cpp	/^int ResetLookupTables(INodeMap & nodeMap)$/;"	f
ResetLookupTables	src/LookupTable_C/LookupTable_C.cpp	/^spinError ResetLookupTables(spinNodeMapHandle hNodeMap)$/;"	f
ResetSequencer	SpinnakerTest/Sequencer/Sequencer.cpp	/^int ResetSequencer(INodeMap & nodeMap)$/;"	f
ResetSequencer	SpinnakerTest/Sequencer_C/Sequencer_C.cpp	/^spinError ResetSequencer(spinNodeMapHandle hNodeMap)$/;"	f
ResetSequencer	src/Sequencer/Sequencer.cpp	/^int ResetSequencer(INodeMap & nodeMap)$/;"	f
ResetSequencer	src/Sequencer_C/Sequencer_C.cpp	/^spinError ResetSequencer(spinNodeMapHandle hNodeMap)$/;"	f
ResetStatistics	include/SpinGenApi/StructPort.h	/^			void ResetStatistics()$/;"	f	class:Spinnaker::GenApi::CTestPortStruct
ResetTrigger	Abhinay/Abhi_hardware/Abhi_hardware.cpp	/^int ResetTrigger(INodeMap & nodeMap)$/;"	f
ResetTrigger	Abhinay/Abhi_test3/Abhi_test3.cpp	/^int ResetTrigger(INodeMap & nodeMap)$/;"	f
ResetTrigger	Abhinay/Abhi_trigger/Trigger.cpp	/^int ResetTrigger(INodeMap & nodeMap)$/;"	f
ResetTrigger	SpinnakerTest/Abhi_test3/Abhi_test3.cpp	/^int ResetTrigger(INodeMap & nodeMap)$/;"	f
ResetTrigger	SpinnakerTest/Abhi_trigger/Trigger.cpp	/^int ResetTrigger(INodeMap & nodeMap)$/;"	f
ResetTrigger	SpinnakerTest/Trigger/Trigger.cpp	/^int ResetTrigger(INodeMap & nodeMap)$/;"	f
ResetTrigger	SpinnakerTest/Trigger_C/Trigger_C.cpp	/^spinError ResetTrigger(spinNodeMapHandle hNodeMap)$/;"	f
ResetTrigger	SpinnakerTest/Trigger_C_QuickSpin/Trigger_C_QuickSpin.cpp	/^spinError ResetTrigger(quickSpin qs)$/;"	f
ResetTrigger	SpinnakerTest/Trigger_QuickSpin/Trigger_QuickSpin.cpp	/^int ResetTrigger(CameraPtr pCam)$/;"	f
ResetTrigger	src/Abhi_hardware/Abhi_hardware.cpp	/^int ResetTrigger(INodeMap & nodeMap)$/;"	f
ResetTrigger	src/Abhi_test3/Abhi_test3.cpp	/^int ResetTrigger(INodeMap & nodeMap)$/;"	f
ResetTrigger	src/Abhi_trigger/Trigger.cpp	/^int ResetTrigger(INodeMap & nodeMap)$/;"	f
ResetTrigger	src/Trigger/Trigger.cpp	/^int ResetTrigger(INodeMap & nodeMap)$/;"	f
ResetTrigger	src/Trigger_C/Trigger_C.cpp	/^spinError ResetTrigger(spinNodeMapHandle hNodeMap)$/;"	f
ResetTrigger	src/Trigger_C_QuickSpin/Trigger_C_QuickSpin.cpp	/^spinError ResetTrigger(quickSpin qs)$/;"	f
ResetTrigger	src/Trigger_QuickSpin/Trigger_QuickSpin.cpp	/^int ResetTrigger(CameraPtr pCam)$/;"	f
ReverseX	include/Camera.h	/^		GenApi::IBoolean &ReverseX;$/;"	m	class:Spinnaker::Camera
ReverseX	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode ReverseX;$/;"	m	struct:_quickSpin
ReverseY	include/Camera.h	/^		GenApi::IBoolean &ReverseY;$/;"	m	class:Spinnaker::Camera
ReverseY	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode ReverseY;$/;"	m	struct:_quickSpin
RunMultipleCameras	Abhinay/Abhi_hardware/Abhi_hardware.cpp	/^int RunMultipleCameras(CameraList camList)$/;"	f
RunMultipleCameras	Abhinay/Abhi_test1/MultiCamStream.cpp	/^int RunMultipleCameras(CameraList camList)$/;"	f
RunMultipleCameras	Abhinay/Abhi_test2/Abhi_test2.cpp	/^int RunMultipleCameras(CameraList camList)$/;"	f
RunMultipleCameras	Abhinay/Abhi_test3/Abhi_test3.cpp	/^int RunMultipleCameras(CameraList camList)$/;"	f
RunMultipleCameras	Abhinay/Abhi_test4/Abhi_test4.cpp	/^int RunMultipleCameras(CameraList camList)$/;"	f
RunMultipleCameras	SpinnakerTest/Abhi_test1/MultiCamStream.cpp	/^int RunMultipleCameras(CameraList camList)$/;"	f
RunMultipleCameras	SpinnakerTest/Abhi_test2/Abhi_test2.cpp	/^int RunMultipleCameras(CameraList camList)$/;"	f
RunMultipleCameras	SpinnakerTest/Abhi_test3/Abhi_test3.cpp	/^int RunMultipleCameras(CameraList camList)$/;"	f
RunMultipleCameras	SpinnakerTest/Abhi_test4/Abhi_test4.cpp	/^int RunMultipleCameras(CameraList camList)$/;"	f
RunMultipleCameras	SpinnakerTest/AcquisitionMultipleCamera/AcquisitionMultipleCamera.cpp	/^int RunMultipleCameras(CameraList camList)$/;"	f
RunMultipleCameras	SpinnakerTest/AcquisitionMultipleCamera_C/AcquisitionMultipleCamera_C.cpp	/^spinError RunMultipleCameras(spinCameraList hCameraList, size_t numCameras)$/;"	f
RunMultipleCameras	src/Abhi_hardware/Abhi_hardware.cpp	/^int RunMultipleCameras(CameraList camList)$/;"	f
RunMultipleCameras	src/Abhi_test1/MultiCamStream.cpp	/^int RunMultipleCameras(CameraList camList)$/;"	f
RunMultipleCameras	src/Abhi_test2/Abhi_test2.cpp	/^int RunMultipleCameras(CameraList camList)$/;"	f
RunMultipleCameras	src/Abhi_test3/Abhi_test3.cpp	/^int RunMultipleCameras(CameraList camList)$/;"	f
RunMultipleCameras	src/Abhi_test4/Abhi_test4.cpp	/^int RunMultipleCameras(CameraList camList)$/;"	f
RunMultipleCameras	src/AcquisitionMultipleCamera/AcquisitionMultipleCamera.cpp	/^int RunMultipleCameras(CameraList camList)$/;"	f
RunMultipleCameras	src/AcquisitionMultipleCamera_C/AcquisitionMultipleCamera_C.cpp	/^spinError RunMultipleCameras(spinCameraList hCameraList, size_t numCameras)$/;"	f
RunSingleCamera	Abhinay/Abhi_test1/Abhi_test1.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	Abhinay/Abhi_test1/Abhi_test1OLD.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	Abhinay/Abhi_trigger/Trigger.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	SpinnakerTest/Abhi_test1/Abhi_test1.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	SpinnakerTest/Abhi_test1/Abhi_test1OLD.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	SpinnakerTest/Abhi_trigger/Trigger.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	SpinnakerTest/Acquisition/Acquisition.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	SpinnakerTest/Acquisition_C/Acquisition_C.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	SpinnakerTest/ChunkData/ChunkData.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	SpinnakerTest/ChunkData_C/ChunkData_C.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	SpinnakerTest/DeviceEvents/DeviceEvents.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	SpinnakerTest/DeviceEvents_C/DeviceEvents_C.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	SpinnakerTest/Exposure/Exposure.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	SpinnakerTest/Exposure_C/Exposure_C.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	SpinnakerTest/Exposure_C_QuickSpin/Exposure_C_QuickSpin.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	SpinnakerTest/Exposure_QuickSpin/Exposure_QuickSpin.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	SpinnakerTest/ImageEvents/ImageEvents.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	SpinnakerTest/ImageEvents_C/ImageEvents_C.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	SpinnakerTest/ImageFormatControl/ImageFormatControl.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	SpinnakerTest/ImageFormatControl_C/ImageFormatControl_C.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	SpinnakerTest/ImageFormatControl_C_QuickSpin/ImageFormatControl_C_QuickSpin.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	SpinnakerTest/ImageFormatControl_QuickSpin/ImageFormatControl_QuickSpin.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	SpinnakerTest/LookupTable/LookupTable.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	SpinnakerTest/LookupTable_C/LookupTable_C.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	SpinnakerTest/NodeMapCallback/NodeMapCallback.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	SpinnakerTest/NodeMapCallback_C/NodeMapCallback_C.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	SpinnakerTest/NodeMapInfo/NodeMapInfo.cpp	/^int RunSingleCamera(CameraPtr cam)$/;"	f
RunSingleCamera	SpinnakerTest/NodeMapInfo_C/NodeMapInfo_C.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	SpinnakerTest/SaveToAvi/SaveToAvi.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	SpinnakerTest/SaveToAvi_C/SaveToAvi_C.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	SpinnakerTest/Sequencer/Sequencer.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	SpinnakerTest/Sequencer_C/Sequencer_C.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	SpinnakerTest/Trigger/Trigger.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	SpinnakerTest/Trigger_C/Trigger_C.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	SpinnakerTest/Trigger_C_QuickSpin/Trigger_C_QuickSpin.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	SpinnakerTest/Trigger_QuickSpin/Trigger_QuickSpin.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	src/Abhi_test1/Abhi_test1.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	src/Abhi_test1/Abhi_test1OLD.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	src/Abhi_trigger/Trigger.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	src/Acquisition/Acquisition.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	src/Acquisition_C/Acquisition_C.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	src/ChunkData/ChunkData.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	src/ChunkData_C/ChunkData_C.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	src/DeviceEvents/DeviceEvents.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	src/DeviceEvents_C/DeviceEvents_C.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	src/Exposure/Exposure.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	src/Exposure_C/Exposure_C.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	src/Exposure_C_QuickSpin/Exposure_C_QuickSpin.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	src/Exposure_QuickSpin/Exposure_QuickSpin.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	src/ImageEvents/ImageEvents.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	src/ImageEvents_C/ImageEvents_C.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	src/ImageFormatControl/ImageFormatControl.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	src/ImageFormatControl_C/ImageFormatControl_C.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	src/ImageFormatControl_C_QuickSpin/ImageFormatControl_C_QuickSpin.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	src/ImageFormatControl_QuickSpin/ImageFormatControl_QuickSpin.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	src/LookupTable/LookupTable.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	src/LookupTable_C/LookupTable_C.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	src/NodeMapCallback/NodeMapCallback.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	src/NodeMapCallback_C/NodeMapCallback_C.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	src/NodeMapInfo/NodeMapInfo.cpp	/^int RunSingleCamera(CameraPtr cam)$/;"	f
RunSingleCamera	src/NodeMapInfo_C/NodeMapInfo_C.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	src/SaveToAvi/SaveToAvi.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	src/SaveToAvi_C/SaveToAvi_C.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	src/Sequencer/Sequencer.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	src/Sequencer_C/Sequencer_C.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	src/Trigger/Trigger.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
RunSingleCamera	src/Trigger_C/Trigger_C.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	src/Trigger_C_QuickSpin/Trigger_C_QuickSpin.cpp	/^spinError RunSingleCamera(spinCamera hCam)$/;"	f
RunSingleCamera	src/Trigger_QuickSpin/Trigger_QuickSpin.cpp	/^int RunSingleCamera(CameraPtr pCam)$/;"	f
SATURATION	include/SpinnakerDefs.h	/^		SATURATION,$/;"	e	enum:Spinnaker::StatisticsChannel
SATURATION	include/spinc/SpinnakerDefsC.h	/^	SATURATION,$/;"	e	enum:_spinStatisticsChannel
SOFTWARE	Abhinay/Abhi_hardware/Abhi_hardware.cpp	/^	SOFTWARE,$/;"	e	enum:triggerType	file:
SOFTWARE	Abhinay/Abhi_test3/Abhi_test3.cpp	/^	SOFTWARE,$/;"	e	enum:triggerType	file:
SOFTWARE	Abhinay/Abhi_trigger/Trigger.cpp	/^	SOFTWARE,$/;"	e	enum:triggerType	file:
SOFTWARE	SpinnakerTest/Abhi_test3/Abhi_test3.cpp	/^	SOFTWARE,$/;"	e	enum:triggerType	file:
SOFTWARE	SpinnakerTest/Abhi_trigger/Trigger.cpp	/^	SOFTWARE,$/;"	e	enum:triggerType	file:
SOFTWARE	SpinnakerTest/Trigger/Trigger.cpp	/^	SOFTWARE,$/;"	e	enum:triggerType	file:
SOFTWARE	SpinnakerTest/Trigger_C/Trigger_C.cpp	/^	SOFTWARE,$/;"	e	enum:_triggerType	file:
SOFTWARE	SpinnakerTest/Trigger_C_QuickSpin/Trigger_C_QuickSpin.cpp	/^	SOFTWARE,$/;"	e	enum:_triggerType	file:
SOFTWARE	SpinnakerTest/Trigger_QuickSpin/Trigger_QuickSpin.cpp	/^	SOFTWARE,$/;"	e	enum:triggerType	file:
SOFTWARE	src/Abhi_hardware/Abhi_hardware.cpp	/^	SOFTWARE,$/;"	e	enum:triggerType	file:
SOFTWARE	src/Abhi_test3/Abhi_test3.cpp	/^	SOFTWARE,$/;"	e	enum:triggerType	file:
SOFTWARE	src/Abhi_trigger/Trigger.cpp	/^	SOFTWARE,$/;"	e	enum:triggerType	file:
SOFTWARE	src/Trigger/Trigger.cpp	/^	SOFTWARE,$/;"	e	enum:triggerType	file:
SOFTWARE	src/Trigger_C/Trigger_C.cpp	/^	SOFTWARE,$/;"	e	enum:_triggerType	file:
SOFTWARE	src/Trigger_C_QuickSpin/Trigger_C_QuickSpin.cpp	/^	SOFTWARE,$/;"	e	enum:_triggerType	file:
SOFTWARE	src/Trigger_QuickSpin/Trigger_QuickSpin.cpp	/^	SOFTWARE,$/;"	e	enum:triggerType	file:
SPECIFIC	SpinnakerTest/DeviceEvents/DeviceEvents.cpp	/^	SPECIFIC$/;"	e	enum:eventType	file:
SPECIFIC	SpinnakerTest/DeviceEvents_C/DeviceEvents_C.cpp	/^	SPECIFIC$/;"	e	enum:_deviceEventType	file:
SPECIFIC	src/DeviceEvents/DeviceEvents.cpp	/^	SPECIFIC$/;"	e	enum:eventType	file:
SPECIFIC	src/DeviceEvents_C/DeviceEvents_C.cpp	/^	SPECIFIC$/;"	e	enum:_deviceEventType	file:
SPINC_CALLTYPE	include/spinc/SpinnakerPlatformC.h	62;"	d
SPINC_CALLTYPE	include/spinc/SpinnakerPlatformC.h	64;"	d
SPINC_CALLTYPE	include/spinc/SpinnakerPlatformC.h	75;"	d
SPINC_CALLTYPE	include/spinc/SpinnakerPlatformC.h	77;"	d
SPINC_IMPORT_EXPORT	include/spinc/SpinnakerPlatformC.h	54;"	d
SPINC_IMPORT_EXPORT	include/spinc/SpinnakerPlatformC.h	56;"	d
SPINC_IMPORT_EXPORT	include/spinc/SpinnakerPlatformC.h	59;"	d
SPINC_IMPORT_EXPORT	include/spinc/SpinnakerPlatformC.h	73;"	d
SPINNAKERC_API	include/spinc/SpinnakerPlatformC.h	89;"	d
SPINNAKER_API	include/SpinnakerPlatform.h	47;"	d
SPINNAKER_API	include/SpinnakerPlatform.h	49;"	d
SPINNAKER_API	include/SpinnakerPlatform.h	51;"	d
SPINNAKER_API	include/SpinnakerPlatform.h	66;"	d
SPINNAKER_API_ABSTRACT	include/SpinnakerPlatform.h	42;"	d
SPINNAKER_ERR_ABORT	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_ABORT               = -1012,$/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_ABORT	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_ABORT = -1012,$/;"	e	enum:_spinError
SPINNAKER_ERR_ACCESS_DENIED	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_ACCESS_DENIED       = -1005,$/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_ACCESS_DENIED	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_ACCESS_DENIED = -1005,$/;"	e	enum:_spinError
SPINNAKER_ERR_BUFFER_TOO_SMALL	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_BUFFER_TOO_SMALL	  = -1016, $/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_BUFFER_TOO_SMALL	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_BUFFER_TOO_SMALL = -1016,$/;"	e	enum:_spinError
SPINNAKER_ERR_BUSY	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_BUSY                = -1022, $/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_BUSY	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_BUSY = -1022,$/;"	e	enum:_spinError
SPINNAKER_ERR_CUSTOM_ID	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_CUSTOM_ID           = -10000$/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_CUSTOM_ID	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_CUSTOM_ID = -10000$/;"	e	enum:_spinError
SPINNAKER_ERR_ERROR	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_ERROR               = -1001,$/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_ERROR	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_ERROR = -1001,$/;"	e	enum:_spinError
SPINNAKER_ERR_IM_COLOR_CONVERSION	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_IM_COLOR_CONVERSION = -3008,$/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_IM_COLOR_CONVERSION	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_IM_COLOR_CONVERSION = -3008,$/;"	e	enum:_spinError
SPINNAKER_ERR_IM_CONVERT	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_IM_CONVERT		  = -3001,$/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_IM_CONVERT	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_IM_CONVERT = -3001,$/;"	e	enum:_spinError
SPINNAKER_ERR_IM_COPY	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_IM_COPY			  = -3002,$/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_IM_COPY	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_IM_COPY = -3002,$/;"	e	enum:_spinError
SPINNAKER_ERR_IM_HISTOGRAM_MEAN	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_IM_HISTOGRAM_MEAN   = -3006,$/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_IM_HISTOGRAM_MEAN	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_IM_HISTOGRAM_MEAN = -3006,$/;"	e	enum:_spinError
SPINNAKER_ERR_IM_HISTOGRAM_RANGE	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_IM_HISTOGRAM_RANGE  = -3005,$/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_IM_HISTOGRAM_RANGE	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_IM_HISTOGRAM_RANGE = -3005,$/;"	e	enum:_spinError
SPINNAKER_ERR_IM_MALLOC	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_IM_MALLOC			  = -3003,$/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_IM_MALLOC	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_IM_MALLOC = -3003,$/;"	e	enum:_spinError
SPINNAKER_ERR_IM_MIN_MAX	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_IM_MIN_MAX		  = -3007,$/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_IM_MIN_MAX	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_IM_MIN_MAX = -3007,$/;"	e	enum:_spinError
SPINNAKER_ERR_IM_NOT_SUPPORTED	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_IM_NOT_SUPPORTED	  = -3004,$/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_IM_NOT_SUPPORTED	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_IM_NOT_SUPPORTED = -3004,$/;"	e	enum:_spinError
SPINNAKER_ERR_INVALID_ADDRESS	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_INVALID_ADDRESS     = -1015,$/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_INVALID_ADDRESS	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_INVALID_ADDRESS = -1015,$/;"	e	enum:_spinError
SPINNAKER_ERR_INVALID_BUFFER	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_INVALID_BUFFER      = -1013,$/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_INVALID_BUFFER	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_INVALID_BUFFER = -1013,$/;"	e	enum:_spinError
SPINNAKER_ERR_INVALID_HANDLE	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_INVALID_HANDLE      = -1006,$/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_INVALID_HANDLE	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_INVALID_HANDLE = -1006,$/;"	e	enum:_spinError
SPINNAKER_ERR_INVALID_ID	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_INVALID_ID          = -1007,$/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_INVALID_ID	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_INVALID_ID = -1007,$/;"	e	enum:_spinError
SPINNAKER_ERR_INVALID_INDEX	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_INVALID_INDEX       = -1017, $/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_INVALID_INDEX	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_INVALID_INDEX = -1017,$/;"	e	enum:_spinError
SPINNAKER_ERR_INVALID_PARAMETER	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_INVALID_PARAMETER   = -1009,$/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_INVALID_PARAMETER	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_INVALID_PARAMETER = -1009,$/;"	e	enum:_spinError
SPINNAKER_ERR_INVALID_VALUE	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_INVALID_VALUE       = -1019, $/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_INVALID_VALUE	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_INVALID_VALUE = -1019,$/;"	e	enum:_spinError
SPINNAKER_ERR_IO	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_IO                  = -1010,$/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_IO	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_IO = -1010,$/;"	e	enum:_spinError
SPINNAKER_ERR_NOT_AVAILABLE	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_NOT_AVAILABLE       = -1014,$/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_NOT_AVAILABLE	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_NOT_AVAILABLE = -1014,$/;"	e	enum:_spinError
SPINNAKER_ERR_NOT_IMPLEMENTED	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_NOT_IMPLEMENTED     = -1003,$/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_NOT_IMPLEMENTED	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_NOT_IMPLEMENTED = -1003,$/;"	e	enum:_spinError
SPINNAKER_ERR_NOT_INITIALIZED	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_NOT_INITIALIZED     = -1002,$/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_NOT_INITIALIZED	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_NOT_INITIALIZED = -1002,$/;"	e	enum:_spinError
SPINNAKER_ERR_NO_DATA	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_NO_DATA             = -1008,$/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_NO_DATA	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_NO_DATA = -1008,$/;"	e	enum:_spinError
SPINNAKER_ERR_OUT_OF_MEMORY	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_OUT_OF_MEMORY       = -1021, $/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_OUT_OF_MEMORY	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_OUT_OF_MEMORY = -1021,$/;"	e	enum:_spinError
SPINNAKER_ERR_PARSING_CHUNK_DATA	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_PARSING_CHUNK_DATA  = -1018, $/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_PARSING_CHUNK_DATA	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_PARSING_CHUNK_DATA = -1018,$/;"	e	enum:_spinError
SPINNAKER_ERR_RESOURCE_EXHAUSTED	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_RESOURCE_EXHAUSTED  = -1020, $/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_RESOURCE_EXHAUSTED	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_RESOURCE_EXHAUSTED = -1020,$/;"	e	enum:_spinError
SPINNAKER_ERR_RESOURCE_IN_USE	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_RESOURCE_IN_USE     = -1004,$/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_RESOURCE_IN_USE	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_RESOURCE_IN_USE = -1004,$/;"	e	enum:_spinError
SPINNAKER_ERR_SUCCESS	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_SUCCESS             = 0,$/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_SUCCESS	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_SUCCESS = 0,$/;"	e	enum:_spinError
SPINNAKER_ERR_TIMEOUT	include/SpinnakerDefs.h	/^		SPINNAKER_ERR_TIMEOUT             = -1011,$/;"	e	enum:Spinnaker::Error
SPINNAKER_ERR_TIMEOUT	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_ERR_TIMEOUT = -1011,$/;"	e	enum:_spinError
SPINNAKER_EVENT_ARRIVAL_REMOVAL	include/SpinnakerDefs.h	/^		SPINNAKER_EVENT_ARRIVAL_REMOVAL,$/;"	e	enum:Spinnaker::EventType
SPINNAKER_EVENT_DEVICE	include/SpinnakerDefs.h	/^		SPINNAKER_EVENT_DEVICE,$/;"	e	enum:Spinnaker::EventType
SPINNAKER_EVENT_DEVICE_SPECIFIC	include/SpinnakerDefs.h	/^		SPINNAKER_EVENT_DEVICE_SPECIFIC,$/;"	e	enum:Spinnaker::EventType
SPINNAKER_EVENT_LOGGING_EVENT	include/SpinnakerDefs.h	/^		SPINNAKER_EVENT_LOGGING_EVENT,$/;"	e	enum:Spinnaker::EventType
SPINNAKER_EVENT_NEW_BUFFER	include/SpinnakerDefs.h	/^		SPINNAKER_EVENT_NEW_BUFFER,$/;"	e	enum:Spinnaker::EventType
SPINNAKER_EVENT_UNKNOWN	include/SpinnakerDefs.h	/^		SPINNAKER_EVENT_UNKNOWN$/;"	e	enum:Spinnaker::EventType
SPINNAKER_GENAPI_AUTOVECTOR_H	include/SpinGenApi/Autovector.h	31;"	d
SPINNAKER_GENAPI_BOOLEANNODE_H	include/SpinGenApi/BooleanNode.h	24;"	d
SPINNAKER_GENAPI_CATEGORYNODE_H	include/SpinGenApi/CategoryNode.h	24;"	d
SPINNAKER_GENAPI_CHUNKADAPTERDCAM_H	include/SpinGenApi/ChunkAdapterDcam.h	30;"	d
SPINNAKER_GENAPI_CHUNKADAPTERGENERIC_H	include/SpinGenApi/ChunkAdapterGeneric.h	29;"	d
SPINNAKER_GENAPI_CHUNKADAPTERGEV_H	include/SpinGenApi/ChunkAdapterGEV.h	29;"	d
SPINNAKER_GENAPI_CHUNKADAPTERU3V_H	include/SpinGenApi/ChunkAdapterU3V.h	29;"	d
SPINNAKER_GENAPI_CHUNKADAPTER_H	include/SpinGenApi/ChunkAdapter.h	30;"	d
SPINNAKER_GENAPI_CHUNKPORT_H	include/SpinGenApi/ChunkPort.h	29;"	d
SPINNAKER_GENAPI_COMMANDNODE_H	include/SpinGenApi/CommandNode.h	24;"	d
SPINNAKER_GENAPI_COMPATIBILITY_H	include/SpinGenApi/Compatibility.h	29;"	d
SPINNAKER_GENAPI_COUNTER_H	include/SpinGenApi/Counter.h	29;"	d
SPINNAKER_GENAPI_DEVICEINFO_H	include/SpinGenApi/IDeviceInfo.h	29;"	d
SPINNAKER_GENAPI_ENUMCLASSES_H	include/SpinGenApi/EnumClasses.h	29;"	d
SPINNAKER_GENAPI_ENUMENTRYNODE_H	include/SpinGenApi/EnumEntryNode.h	24;"	d
SPINNAKER_GENAPI_ENUMNODET_H	include/SpinGenApi/EnumNodeT.h	24;"	d
SPINNAKER_GENAPI_ENUMNODE_H	include/SpinGenApi/EnumNode.h	24;"	d
SPINNAKER_GENAPI_EVENTADAPTER1394_H	include/SpinGenApi/EventAdapter1394.h	27;"	d
SPINNAKER_GENAPI_EVENTADAPTERGENERIC_H	include/SpinGenApi/EventAdapterGeneric.h	28;"	d
SPINNAKER_GENAPI_EVENTADAPTERGEV_H	include/SpinGenApi/EventAdapterGEV.h	28;"	d
SPINNAKER_GENAPI_EVENTADAPTERU3V_H	include/SpinGenApi/EventAdapterU3V.h	28;"	d
SPINNAKER_GENAPI_EVENTADAPTER_H	include/SpinGenApi/EventAdapter.h	29;"	d
SPINNAKER_GENAPI_EVENTPORT_H	include/SpinGenApi/EventPort.h	29;"	d
SPINNAKER_GENAPI_FILESTREAM_H_	include/SpinGenApi/Filestream.h	28;"	d
SPINNAKER_GENAPI_FLOATNODE_H	include/SpinGenApi/FloatNode.h	24;"	d
SPINNAKER_GENAPI_FLOATREGNODE_H	include/SpinGenApi/FloatRegNode.h	24;"	d
SPINNAKER_GENAPI_GCSYNCH_H	include/SpinGenApi/GCSynch.h	29;"	d
SPINNAKER_GENAPI_H	include/SpinGenApi/SpinnakerGenApi.h	24;"	d
SPINNAKER_GENAPI_IBASE_H	include/SpinGenApi/Base.h	24;"	d
SPINNAKER_GENAPI_IBOOLEAN_H	include/SpinGenApi/IBoolean.h	24;"	d
SPINNAKER_GENAPI_ICATEGORY_H	include/SpinGenApi/ICategory.h	30;"	d
SPINNAKER_GENAPI_ICHUNKPORT_H	include/SpinGenApi/IChunkPort.h	29;"	d
SPINNAKER_GENAPI_ICOMMAND_H	include/SpinGenApi/ICommand.h	29;"	d
SPINNAKER_GENAPI_IDESTROY_H	include/SpinGenApi/IDestroy.h	29;"	d
SPINNAKER_GENAPI_IENUMENTRY_H	include/SpinGenApi/IEnumEntry.h	29;"	d
SPINNAKER_GENAPI_IENUMERATIONT_H	include/SpinGenApi/IEnumerationT.h	29;"	d
SPINNAKER_GENAPI_IENUMERATION_H	include/SpinGenApi/IEnumeration.h	29;"	d
SPINNAKER_GENAPI_IFLOAT_H	include/SpinGenApi/IFloat.h	29;"	d
SPINNAKER_GENAPI_IIINTEGER_H	include/SpinGenApi/IInteger.h	29;"	d
SPINNAKER_GENAPI_INODEMAPDYN_H	include/SpinGenApi/INodeMapDyn.h	29;"	d
SPINNAKER_GENAPI_INODEMAP_H	include/SpinGenApi/INodeMap.h	29;"	d
SPINNAKER_GENAPI_INODE_H	include/SpinGenApi/INode.h	30;"	d
SPINNAKER_GENAPI_INTEGERNODE_H	include/SpinGenApi/IntegerNode.h	24;"	d
SPINNAKER_GENAPI_INTREGNODE_H	include/SpinGenApi/IntRegNode.h	24;"	d
SPINNAKER_GENAPI_IPORTCONSTRUCT_H	include/SpinGenApi/IPortConstruct.h	29;"	d
SPINNAKER_GENAPI_IPORTRECORDER_H	include/SpinGenApi/IPortRecorder.h	29;"	d
SPINNAKER_GENAPI_IPORT_H	include/SpinGenApi/IPort.h	29;"	d
SPINNAKER_GENAPI_IREGISTER_H	include/SpinGenApi/IRegister.h	29;"	d
SPINNAKER_GENAPI_ISELECTORDIGIT_H	include/SpinGenApi/ISelectorDigit.h	29;"	d
SPINNAKER_GENAPI_ISELECTOR_H	include/SpinGenApi/ISelector.h	24;"	d
SPINNAKER_GENAPI_ISTRING_H	include/SpinGenApi/IString.h	29;"	d
SPINNAKER_GENAPI_IVALUE_H	include/SpinGenApi/IValue.h	29;"	d
SPINNAKER_GENAPI_NODECALLBACK_H	include/SpinGenApi/NodeCallback.h	35;"	d
SPINNAKER_GENAPI_NODEMAPREF_H	include/SpinGenApi/NodeMapRef.h	30;"	d
SPINNAKER_GENAPI_NODEMAP_H	include/SpinGenApi/NodeMap.h	29;"	d
SPINNAKER_GENAPI_NODEVECTOR_H	include/SpinGenApi/Container.h	29;"	d
SPINNAKER_GENAPI_NODE_H	include/SpinGenApi/Node.h	24;"	d
SPINNAKER_GENAPI_PERSISTENCE_H	include/SpinGenApi/Persistence.h	29;"	d
SPINNAKER_GENAPI_POINTER_H	include/SpinGenApi/Pointer.h	29;"	d
SPINNAKER_GENAPI_PORTNODE_H	include/SpinGenApi/PortNode.h	24;"	d
SPINNAKER_GENAPI_PORTRECORDER_H	include/SpinGenApi/PortRecorder.h	24;"	d
SPINNAKER_GENAPI_PORTREPLAY_H	include/SpinGenApi/PortReplay.h	24;"	d
SPINNAKER_GENAPI_PORTWRITELIST_H	include/SpinGenApi/PortWriteList.h	29;"	d
SPINNAKER_GENAPI_REFERENCE_H	include/SpinGenApi/Reference.h	29;"	d
SPINNAKER_GENAPI_REGISTERNODE_H	include/SpinGenApi/RegisterNode.h	29;"	d
SPINNAKER_GENAPI_REGISTERPORTIMPL_H	include/SpinGenApi/RegisterPortImpl.h	29;"	d
SPINNAKER_GENAPI_SELECTORSET_H	include/SpinGenApi/SelectorSet.h	29;"	d
SPINNAKER_GENAPI_SPINTESTCAMERA_H	include/SpinGenApi/SpinTestCamera.h	29;"	d
SPINNAKER_GENAPI_STRINGNODE_H	include/SpinGenApi/StringNode.h	29;"	d
SPINNAKER_GENAPI_STRINGREGNODE_H	include/SpinGenApi/StringRegNode.h	29;"	d
SPINNAKER_GENAPI_STRUCTPORT_H	include/SpinGenApi/StructPort.h	29;"	d
SPINNAKER_GENAPI_SYNCH_H	include/SpinGenApi/Synch.h	29;"	d
SPINNAKER_GENAPI_TYPES_H	include/SpinGenApi/Types.h	24;"	d
SPINNAKER_GENAPI_VALUENODE_H	include/SpinGenApi/ValueNode.h	30;"	d
SPINNAKER_GENICAM_GCBASE_H	include/SpinGenApi/GCBase.h	28;"	d
SPINNAKER_GENICAM_GCSTRINGLIST_H	include/SpinGenApi/GCStringVector.h	29;"	d
SPINNAKER_GENICAM_GCSTRING_H	include/SpinGenApi/GCString.h	29;"	d
SPINNAKER_GENICAM_GCUTILITIES_H_	include/SpinGenApi/GCUtilities.h	29;"	d
SPINNAKER_GENICAM_TYPES_H	include/SpinGenApi/GCTypes.h	29;"	d
SPINNAKER_LIB	Abhinay/Abhi_hardware/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	Abhinay/Abhi_test1/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	Abhinay/Abhi_test2/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	Abhinay/Abhi_test3/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	Abhinay/Abhi_test4/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	Abhinay/Abhi_trigger/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/Abhi_test1/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/Abhi_test2/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/Abhi_test3/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/Abhi_test4/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/Abhi_trigger/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/Acquisition/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/AcquisitionMultipleCamera/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/AcquisitionMultipleCamera_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/Acquisition_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/ChunkData/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/ChunkData_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/DeviceEvents/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/DeviceEvents_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/Enumeration/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/EnumerationEvents/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/EnumerationEvents_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/Enumeration_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/Enumeration_C_QuickSpin/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/Enumeration_QuickSpin/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/Exposure/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/Exposure_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/Exposure_C_QuickSpin/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/Exposure_QuickSpin/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/ImageEvents/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/ImageEvents_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/ImageFormatControl/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/ImageFormatControl_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/ImageFormatControl_C_QuickSpin/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/ImageFormatControl_QuickSpin/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/Logging/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/Logging_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/LookupTable/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/LookupTable_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/NodeMapCallback/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/NodeMapCallback_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/NodeMapInfo/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/NodeMapInfo_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/NodeMapInfo_C_QuickSpin/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/NodeMapInfo_QuickSpin/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/SaveToAvi/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/SaveToAvi_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/Sequencer/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/Sequencer_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/Trigger/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/Trigger_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/Trigger_C_QuickSpin/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	SpinnakerTest/Trigger_QuickSpin/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	src/Abhi_hardware/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	src/Abhi_test1/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	src/Abhi_test2/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	src/Abhi_test3/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	src/Abhi_test4/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	src/Abhi_trigger/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	src/Acquisition/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	src/AcquisitionMultipleCamera/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	src/AcquisitionMultipleCamera_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	src/Acquisition_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	src/ChunkData/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	src/ChunkData_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	src/DeviceEvents/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	src/DeviceEvents_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	src/Enumeration/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	src/EnumerationEvents/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	src/EnumerationEvents_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	src/Enumeration_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	src/Enumeration_C_QuickSpin/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	src/Enumeration_QuickSpin/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	src/Exposure/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	src/Exposure_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	src/Exposure_C_QuickSpin/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	src/Exposure_QuickSpin/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	src/ImageEvents/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	src/ImageEvents_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	src/ImageFormatControl/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	src/ImageFormatControl_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	src/ImageFormatControl_C_QuickSpin/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	src/ImageFormatControl_QuickSpin/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	src/Logging/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	src/Logging_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	src/LookupTable/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	src/LookupTable_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	src/NodeMapCallback/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	src/NodeMapCallback_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	src/NodeMapInfo/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	src/NodeMapInfo_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	src/NodeMapInfo_C_QuickSpin/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	src/NodeMapInfo_QuickSpin/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	src/SaveToAvi/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	src/SaveToAvi_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	src/Sequencer/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	src/Sequencer_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	src/Trigger/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LIB	src/Trigger_C/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	src/Trigger_C_QuickSpin/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D} -lSpinnaker_C${D}$/;"	m
SPINNAKER_LIB	src/Trigger_QuickSpin/Makefile	/^SPINNAKER_LIB = -L..\/..\/lib -lSpinnaker${D}$/;"	m
SPINNAKER_LOCAL	include/SpinnakerPlatform.h	67;"	d
SPINNAKER_PIXELFORMAT_NAMESPACE_CUSTOM_ID	include/SpinnakerDefs.h	/^		SPINNAKER_PIXELFORMAT_NAMESPACE_CUSTOM_ID  = 1000$/;"	e	enum:Spinnaker::PixelFormatNamespaceID
SPINNAKER_PIXELFORMAT_NAMESPACE_CUSTOM_ID	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_PIXELFORMAT_NAMESPACE_CUSTOM_ID = 1000$/;"	e	enum:_spinPixelFormatNamespaceID
SPINNAKER_PIXELFORMAT_NAMESPACE_GEV	include/SpinnakerDefs.h	/^		SPINNAKER_PIXELFORMAT_NAMESPACE_GEV        = 1,   \/* GenTL v1.2 *\/$/;"	e	enum:Spinnaker::PixelFormatNamespaceID
SPINNAKER_PIXELFORMAT_NAMESPACE_GEV	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_PIXELFORMAT_NAMESPACE_GEV = 1,   \/* GenTL v1.2 *\/$/;"	e	enum:_spinPixelFormatNamespaceID
SPINNAKER_PIXELFORMAT_NAMESPACE_IIDC	include/SpinnakerDefs.h	/^		SPINNAKER_PIXELFORMAT_NAMESPACE_IIDC       = 2,   \/* GenTL v1.2 *\/$/;"	e	enum:Spinnaker::PixelFormatNamespaceID
SPINNAKER_PIXELFORMAT_NAMESPACE_IIDC	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_PIXELFORMAT_NAMESPACE_IIDC = 2,   \/* GenTL v1.2 *\/$/;"	e	enum:_spinPixelFormatNamespaceID
SPINNAKER_PIXELFORMAT_NAMESPACE_PFNC_16BIT	include/SpinnakerDefs.h	/^        SPINNAKER_PIXELFORMAT_NAMESPACE_PFNC_16BIT = 3,   \/* GenTL v1.4 *\/$/;"	e	enum:Spinnaker::PixelFormatNamespaceID
SPINNAKER_PIXELFORMAT_NAMESPACE_PFNC_16BIT	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_PIXELFORMAT_NAMESPACE_PFNC_16BIT = 3,   \/* GenTL v1.4 *\/$/;"	e	enum:_spinPixelFormatNamespaceID
SPINNAKER_PIXELFORMAT_NAMESPACE_PFNC_32BIT	include/SpinnakerDefs.h	/^        SPINNAKER_PIXELFORMAT_NAMESPACE_PFNC_32BIT = 4,   \/* GenTL v1.4 *\/$/;"	e	enum:Spinnaker::PixelFormatNamespaceID
SPINNAKER_PIXELFORMAT_NAMESPACE_PFNC_32BIT	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_PIXELFORMAT_NAMESPACE_PFNC_32BIT = 4,   \/* GenTL v1.4 *\/$/;"	e	enum:_spinPixelFormatNamespaceID
SPINNAKER_PIXELFORMAT_NAMESPACE_UNKNOWN	include/SpinnakerDefs.h	/^		SPINNAKER_PIXELFORMAT_NAMESPACE_UNKNOWN    = 0,   \/* GenTL v1.2 *\/$/;"	e	enum:Spinnaker::PixelFormatNamespaceID
SPINNAKER_PIXELFORMAT_NAMESPACE_UNKNOWN	include/spinc/SpinnakerDefsC.h	/^	SPINNAKER_PIXELFORMAT_NAMESPACE_UNKNOWN = 0,   \/* GenTL v1.2 *\/$/;"	e	enum:_spinPixelFormatNamespaceID
SPINNAKER_PORTIMPL_H	include/SpinGenApi/PortImpl.h	29;"	d
SPIN_GUID	include/SpinGenApi/Compatibility.h	/^} SPIN_GUID;$/;"	t	typeref:struct:_SPIN_GUID
SPIN_GUID	include/SpinGenApi/Compatibility.h	/^} __attribute__ ((packed)) SPIN_GUID;$/;"	t	typeref:struct:_SPIN_GUID
SaveArrayToAVI	SpinnakerTest/SaveToAvi_C/SaveToAvi_C.cpp	/^spinError SaveArrayToAVI(spinNodeMapHandle hNodeMap, spinNodeMapHandle hNodeMapTLDevice, spinImage hImages[])$/;"	f
SaveArrayToAVI	src/SaveToAvi_C/SaveToAvi_C.cpp	/^spinError SaveArrayToAVI(spinNodeMapHandle hNodeMap, spinNodeMapHandle hNodeMapTLDevice, spinImage hImages[])$/;"	f
SaveVectorToAVI	SpinnakerTest/SaveToAvi/SaveToAvi.cpp	/^int SaveVectorToAVI(INodeMap & nodeMap, INodeMap & nodeMapTLDevice, vector<ImagePtr> & images)$/;"	f
SaveVectorToAVI	src/SaveToAvi/SaveToAvi.cpp	/^int SaveVectorToAVI(INodeMap & nodeMap, INodeMap & nodeMapTLDevice, vector<ImagePtr> & images)$/;"	f
Scan3dAxisMax	include/Camera.h	/^		GenApi::IFloat &Scan3dAxisMax;$/;"	m	class:Spinnaker::Camera
Scan3dAxisMax	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode Scan3dAxisMax;$/;"	m	struct:_quickSpin
Scan3dAxisMin	include/Camera.h	/^		GenApi::IFloat &Scan3dAxisMin;$/;"	m	class:Spinnaker::Camera
Scan3dAxisMin	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode Scan3dAxisMin;$/;"	m	struct:_quickSpin
Scan3dCoordinateOffset	include/Camera.h	/^		GenApi::IFloat &Scan3dCoordinateOffset;$/;"	m	class:Spinnaker::Camera
Scan3dCoordinateOffset	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode Scan3dCoordinateOffset;$/;"	m	struct:_quickSpin
Scan3dCoordinateReferenceSelector	include/Camera.h	/^		GenApi::IEnumerationT<Scan3dCoordinateReferenceSelectorEnums> &Scan3dCoordinateReferenceSelector;$/;"	m	class:Spinnaker::Camera
Scan3dCoordinateReferenceSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode Scan3dCoordinateReferenceSelector;$/;"	m	struct:_quickSpin
Scan3dCoordinateReferenceSelectorEnums	include/CameraDefs.h	/^	enum Scan3dCoordinateReferenceSelectorEnums	\/*!< Sets the index to read a coordinate system reference value defining the transform of a point from the current (Anchor or Transformed) system to the reference system.*\/$/;"	g	namespace:Spinnaker
Scan3dCoordinateReferenceSelector_RotationX	include/CameraDefs.h	/^		Scan3dCoordinateReferenceSelector_RotationX,	\/*!< Rotation around X axis.*\/$/;"	e	enum:Spinnaker::Scan3dCoordinateReferenceSelectorEnums
Scan3dCoordinateReferenceSelector_RotationX	include/spinc/CameraDefsC.h	/^	Scan3dCoordinateReferenceSelector_RotationX,	\/*!< Rotation around X axis.*\/$/;"	e	enum:_spinScan3dCoordinateReferenceSelectorEnums
Scan3dCoordinateReferenceSelector_RotationY	include/CameraDefs.h	/^		Scan3dCoordinateReferenceSelector_RotationY,	\/*!< Rotation around Y axis.*\/$/;"	e	enum:Spinnaker::Scan3dCoordinateReferenceSelectorEnums
Scan3dCoordinateReferenceSelector_RotationY	include/spinc/CameraDefsC.h	/^	Scan3dCoordinateReferenceSelector_RotationY,	\/*!< Rotation around Y axis.*\/$/;"	e	enum:_spinScan3dCoordinateReferenceSelectorEnums
Scan3dCoordinateReferenceSelector_RotationZ	include/CameraDefs.h	/^		Scan3dCoordinateReferenceSelector_RotationZ,	\/*!< Rotation around Z axis.*\/$/;"	e	enum:Spinnaker::Scan3dCoordinateReferenceSelectorEnums
Scan3dCoordinateReferenceSelector_RotationZ	include/spinc/CameraDefsC.h	/^	Scan3dCoordinateReferenceSelector_RotationZ,	\/*!< Rotation around Z axis.*\/$/;"	e	enum:_spinScan3dCoordinateReferenceSelectorEnums
Scan3dCoordinateReferenceSelector_TranslationX	include/CameraDefs.h	/^		Scan3dCoordinateReferenceSelector_TranslationX,	\/*!< X axis translation.*\/$/;"	e	enum:Spinnaker::Scan3dCoordinateReferenceSelectorEnums
Scan3dCoordinateReferenceSelector_TranslationX	include/spinc/CameraDefsC.h	/^	Scan3dCoordinateReferenceSelector_TranslationX,	\/*!< X axis translation.*\/$/;"	e	enum:_spinScan3dCoordinateReferenceSelectorEnums
Scan3dCoordinateReferenceSelector_TranslationY	include/CameraDefs.h	/^		Scan3dCoordinateReferenceSelector_TranslationY,	\/*!< Y axis translation.*\/$/;"	e	enum:Spinnaker::Scan3dCoordinateReferenceSelectorEnums
Scan3dCoordinateReferenceSelector_TranslationY	include/spinc/CameraDefsC.h	/^	Scan3dCoordinateReferenceSelector_TranslationY,	\/*!< Y axis translation.*\/$/;"	e	enum:_spinScan3dCoordinateReferenceSelectorEnums
Scan3dCoordinateReferenceSelector_TranslationZ	include/CameraDefs.h	/^		Scan3dCoordinateReferenceSelector_TranslationZ,	\/*!< Z axis translation.*\/$/;"	e	enum:Spinnaker::Scan3dCoordinateReferenceSelectorEnums
Scan3dCoordinateReferenceSelector_TranslationZ	include/spinc/CameraDefsC.h	/^	Scan3dCoordinateReferenceSelector_TranslationZ,	\/*!< Z axis translation.*\/$/;"	e	enum:_spinScan3dCoordinateReferenceSelectorEnums
Scan3dCoordinateReferenceValue	include/Camera.h	/^		GenApi::IFloat &Scan3dCoordinateReferenceValue;$/;"	m	class:Spinnaker::Camera
Scan3dCoordinateReferenceValue	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode Scan3dCoordinateReferenceValue;$/;"	m	struct:_quickSpin
Scan3dCoordinateScale	include/Camera.h	/^		GenApi::IFloat &Scan3dCoordinateScale;$/;"	m	class:Spinnaker::Camera
Scan3dCoordinateScale	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode Scan3dCoordinateScale;$/;"	m	struct:_quickSpin
Scan3dCoordinateSelector	include/Camera.h	/^		GenApi::IEnumerationT<Scan3dCoordinateSelectorEnums> &Scan3dCoordinateSelector;$/;"	m	class:Spinnaker::Camera
Scan3dCoordinateSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode Scan3dCoordinateSelector;$/;"	m	struct:_quickSpin
Scan3dCoordinateSelectorEnums	include/CameraDefs.h	/^	enum Scan3dCoordinateSelectorEnums	\/*!< Selects the individual coordinates in the vectors for 3D information\/transformation.*\/$/;"	g	namespace:Spinnaker
Scan3dCoordinateSelector_CoordinateA	include/CameraDefs.h	/^		Scan3dCoordinateSelector_CoordinateA,	\/*!< The first (X or Theta) coordinate*\/$/;"	e	enum:Spinnaker::Scan3dCoordinateSelectorEnums
Scan3dCoordinateSelector_CoordinateA	include/spinc/CameraDefsC.h	/^	Scan3dCoordinateSelector_CoordinateA,	\/*!< The first (X or Theta) coordinate*\/$/;"	e	enum:_spinScan3dCoordinateSelectorEnums
Scan3dCoordinateSelector_CoordinateB	include/CameraDefs.h	/^		Scan3dCoordinateSelector_CoordinateB,	\/*!< The second (Y or Phi) coordinate*\/$/;"	e	enum:Spinnaker::Scan3dCoordinateSelectorEnums
Scan3dCoordinateSelector_CoordinateB	include/spinc/CameraDefsC.h	/^	Scan3dCoordinateSelector_CoordinateB,	\/*!< The second (Y or Phi) coordinate*\/$/;"	e	enum:_spinScan3dCoordinateSelectorEnums
Scan3dCoordinateSelector_CoordinateC	include/CameraDefs.h	/^		Scan3dCoordinateSelector_CoordinateC,	\/*!< The third (Z or Rho) coordinate.*\/$/;"	e	enum:Spinnaker::Scan3dCoordinateSelectorEnums
Scan3dCoordinateSelector_CoordinateC	include/spinc/CameraDefsC.h	/^	Scan3dCoordinateSelector_CoordinateC,	\/*!< The third (Z or Rho) coordinate.*\/$/;"	e	enum:_spinScan3dCoordinateSelectorEnums
Scan3dCoordinateSystem	include/Camera.h	/^		GenApi::IEnumerationT<Scan3dCoordinateSystemEnums> &Scan3dCoordinateSystem;$/;"	m	class:Spinnaker::Camera
Scan3dCoordinateSystem	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode Scan3dCoordinateSystem;$/;"	m	struct:_quickSpin
Scan3dCoordinateSystemEnums	include/CameraDefs.h	/^	enum Scan3dCoordinateSystemEnums	\/*!< Specifies the Coordinate system to use for the device.*\/$/;"	g	namespace:Spinnaker
Scan3dCoordinateSystemReference	include/Camera.h	/^		GenApi::IEnumerationT<Scan3dCoordinateSystemReferenceEnums> &Scan3dCoordinateSystemReference;$/;"	m	class:Spinnaker::Camera
Scan3dCoordinateSystemReference	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode Scan3dCoordinateSystemReference;$/;"	m	struct:_quickSpin
Scan3dCoordinateSystemReferenceEnums	include/CameraDefs.h	/^	enum Scan3dCoordinateSystemReferenceEnums	\/*!< Defines coordinate system reference location.*\/$/;"	g	namespace:Spinnaker
Scan3dCoordinateSystemReference_Anchor	include/CameraDefs.h	/^		Scan3dCoordinateSystemReference_Anchor,	\/*!< Default value. Original fixed reference. The coordinate system fixed relative the camera reference point marker is used.*\/$/;"	e	enum:Spinnaker::Scan3dCoordinateSystemReferenceEnums
Scan3dCoordinateSystemReference_Anchor	include/spinc/CameraDefsC.h	/^	Scan3dCoordinateSystemReference_Anchor,	\/*!< Default value. Original fixed reference. The coordinate system fixed relative the camera reference point marker is used.*\/$/;"	e	enum:_spinScan3dCoordinateSystemReferenceEnums
Scan3dCoordinateSystemReference_Transformed	include/CameraDefs.h	/^		Scan3dCoordinateSystemReference_Transformed,	\/*!< Transformed reference system. The transformed coordinate system is used according to the definition in the rotation and translation matrices.*\/$/;"	e	enum:Spinnaker::Scan3dCoordinateSystemReferenceEnums
Scan3dCoordinateSystemReference_Transformed	include/spinc/CameraDefsC.h	/^	Scan3dCoordinateSystemReference_Transformed,	\/*!< Transformed reference system. The transformed coordinate system is used according to the definition in the rotation and translation matrices.*\/$/;"	e	enum:_spinScan3dCoordinateSystemReferenceEnums
Scan3dCoordinateSystem_Cartesian	include/CameraDefs.h	/^		Scan3dCoordinateSystem_Cartesian,	\/*!< Default value. 3-axis orthogonal, right-hand X-Y-Z.*\/$/;"	e	enum:Spinnaker::Scan3dCoordinateSystemEnums
Scan3dCoordinateSystem_Cartesian	include/spinc/CameraDefsC.h	/^	Scan3dCoordinateSystem_Cartesian,	\/*!< Default value. 3-axis orthogonal, right-hand X-Y-Z.*\/$/;"	e	enum:_spinScan3dCoordinateSystemEnums
Scan3dCoordinateSystem_Cylindrical	include/CameraDefs.h	/^		Scan3dCoordinateSystem_Cylindrical,	\/*!< A Theta-Y-Rho coordinate system.*\/$/;"	e	enum:Spinnaker::Scan3dCoordinateSystemEnums
Scan3dCoordinateSystem_Cylindrical	include/spinc/CameraDefsC.h	/^	Scan3dCoordinateSystem_Cylindrical,	\/*!< A Theta-Y-Rho coordinate system.*\/$/;"	e	enum:_spinScan3dCoordinateSystemEnums
Scan3dCoordinateSystem_Spherical	include/CameraDefs.h	/^		Scan3dCoordinateSystem_Spherical,	\/*!< A Theta-Phi-Rho coordinate system.*\/$/;"	e	enum:Spinnaker::Scan3dCoordinateSystemEnums
Scan3dCoordinateSystem_Spherical	include/spinc/CameraDefsC.h	/^	Scan3dCoordinateSystem_Spherical,	\/*!< A Theta-Phi-Rho coordinate system.*\/$/;"	e	enum:_spinScan3dCoordinateSystemEnums
Scan3dCoordinateTransformSelector	include/Camera.h	/^		GenApi::IEnumerationT<Scan3dCoordinateTransformSelectorEnums> &Scan3dCoordinateTransformSelector;$/;"	m	class:Spinnaker::Camera
Scan3dCoordinateTransformSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode Scan3dCoordinateTransformSelector;$/;"	m	struct:_quickSpin
Scan3dCoordinateTransformSelectorEnums	include/CameraDefs.h	/^	enum Scan3dCoordinateTransformSelectorEnums	\/*!< Sets the index to read\/write a coordinate transform value.*\/$/;"	g	namespace:Spinnaker
Scan3dCoordinateTransformSelector_RotationX	include/CameraDefs.h	/^		Scan3dCoordinateTransformSelector_RotationX,	\/*!< Rotation around X axis.*\/$/;"	e	enum:Spinnaker::Scan3dCoordinateTransformSelectorEnums
Scan3dCoordinateTransformSelector_RotationX	include/spinc/CameraDefsC.h	/^	Scan3dCoordinateTransformSelector_RotationX,	\/*!< Rotation around X axis.*\/$/;"	e	enum:_spinScan3dCoordinateTransformSelectorEnums
Scan3dCoordinateTransformSelector_RotationY	include/CameraDefs.h	/^		Scan3dCoordinateTransformSelector_RotationY,	\/*!< Rotation around Y axis.*\/$/;"	e	enum:Spinnaker::Scan3dCoordinateTransformSelectorEnums
Scan3dCoordinateTransformSelector_RotationY	include/spinc/CameraDefsC.h	/^	Scan3dCoordinateTransformSelector_RotationY,	\/*!< Rotation around Y axis.*\/$/;"	e	enum:_spinScan3dCoordinateTransformSelectorEnums
Scan3dCoordinateTransformSelector_RotationZ	include/CameraDefs.h	/^		Scan3dCoordinateTransformSelector_RotationZ,	\/*!< Rotation around Z axis.*\/$/;"	e	enum:Spinnaker::Scan3dCoordinateTransformSelectorEnums
Scan3dCoordinateTransformSelector_RotationZ	include/spinc/CameraDefsC.h	/^	Scan3dCoordinateTransformSelector_RotationZ,	\/*!< Rotation around Z axis.*\/$/;"	e	enum:_spinScan3dCoordinateTransformSelectorEnums
Scan3dCoordinateTransformSelector_TranslationX	include/CameraDefs.h	/^		Scan3dCoordinateTransformSelector_TranslationX,	\/*!< Translation along X axis.*\/$/;"	e	enum:Spinnaker::Scan3dCoordinateTransformSelectorEnums
Scan3dCoordinateTransformSelector_TranslationX	include/spinc/CameraDefsC.h	/^	Scan3dCoordinateTransformSelector_TranslationX,	\/*!< Translation along X axis.*\/$/;"	e	enum:_spinScan3dCoordinateTransformSelectorEnums
Scan3dCoordinateTransformSelector_TranslationY	include/CameraDefs.h	/^		Scan3dCoordinateTransformSelector_TranslationY,	\/*!< Translation along Y axis.*\/$/;"	e	enum:Spinnaker::Scan3dCoordinateTransformSelectorEnums
Scan3dCoordinateTransformSelector_TranslationY	include/spinc/CameraDefsC.h	/^	Scan3dCoordinateTransformSelector_TranslationY,	\/*!< Translation along Y axis.*\/$/;"	e	enum:_spinScan3dCoordinateTransformSelectorEnums
Scan3dCoordinateTransformSelector_TranslationZ	include/CameraDefs.h	/^		Scan3dCoordinateTransformSelector_TranslationZ,	\/*!< Translation along Z axis.*\/$/;"	e	enum:Spinnaker::Scan3dCoordinateTransformSelectorEnums
Scan3dCoordinateTransformSelector_TranslationZ	include/spinc/CameraDefsC.h	/^	Scan3dCoordinateTransformSelector_TranslationZ,	\/*!< Translation along Z axis.*\/$/;"	e	enum:_spinScan3dCoordinateTransformSelectorEnums
Scan3dDistanceUnit	include/Camera.h	/^		GenApi::IEnumerationT<Scan3dDistanceUnitEnums> &Scan3dDistanceUnit;$/;"	m	class:Spinnaker::Camera
Scan3dDistanceUnit	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode Scan3dDistanceUnit;$/;"	m	struct:_quickSpin
Scan3dDistanceUnitEnums	include/CameraDefs.h	/^	enum Scan3dDistanceUnitEnums	\/*!< Specifies the unit used when delivering calibrated distance data.*\/$/;"	g	namespace:Spinnaker
Scan3dDistanceUnit_Inch	include/CameraDefs.h	/^		Scan3dDistanceUnit_Inch,	\/*!< Distance values are in inch units.*\/$/;"	e	enum:Spinnaker::Scan3dDistanceUnitEnums
Scan3dDistanceUnit_Inch	include/spinc/CameraDefsC.h	/^	Scan3dDistanceUnit_Inch,	\/*!< Distance values are in inch units.*\/$/;"	e	enum:_spinScan3dDistanceUnitEnums
Scan3dDistanceUnit_Millimeter	include/CameraDefs.h	/^		Scan3dDistanceUnit_Millimeter,	\/*!< Distance values are in millimeter units (default).*\/$/;"	e	enum:Spinnaker::Scan3dDistanceUnitEnums
Scan3dDistanceUnit_Millimeter	include/spinc/CameraDefsC.h	/^	Scan3dDistanceUnit_Millimeter,	\/*!< Distance values are in millimeter units (default).*\/$/;"	e	enum:_spinScan3dDistanceUnitEnums
Scan3dInvalidDataFlag	include/Camera.h	/^		GenApi::IBoolean &Scan3dInvalidDataFlag;$/;"	m	class:Spinnaker::Camera
Scan3dInvalidDataFlag	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode Scan3dInvalidDataFlag;$/;"	m	struct:_quickSpin
Scan3dInvalidDataValue	include/Camera.h	/^		GenApi::IFloat &Scan3dInvalidDataValue;$/;"	m	class:Spinnaker::Camera
Scan3dInvalidDataValue	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode Scan3dInvalidDataValue;$/;"	m	struct:_quickSpin
Scan3dOutputMode	include/Camera.h	/^		GenApi::IEnumerationT<Scan3dOutputModeEnums> &Scan3dOutputMode;$/;"	m	class:Spinnaker::Camera
Scan3dOutputMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode Scan3dOutputMode;$/;"	m	struct:_quickSpin
Scan3dOutputModeEnums	include/CameraDefs.h	/^	enum Scan3dOutputModeEnums	\/*!< Controls the Calibration and data organization of the device, naming the coordinates transmitted.*\/$/;"	g	namespace:Spinnaker
Scan3dOutputMode_CalibratedABC_Grid	include/CameraDefs.h	/^		Scan3dOutputMode_CalibratedABC_Grid,	\/*!< 3 Coordinates in grid organization. The full 3 coordinate data with the grid array organization from the sensor kept.*\/$/;"	e	enum:Spinnaker::Scan3dOutputModeEnums
Scan3dOutputMode_CalibratedABC_Grid	include/spinc/CameraDefsC.h	/^	Scan3dOutputMode_CalibratedABC_Grid,	\/*!< 3 Coordinates in grid organization. The full 3 coordinate data with the grid array organization from the sensor kept.*\/$/;"	e	enum:_spinScan3dOutputModeEnums
Scan3dOutputMode_CalibratedABC_PointCloud	include/CameraDefs.h	/^		Scan3dOutputMode_CalibratedABC_PointCloud,	\/*!< 3 Coordinates without organization. The full 3 coordinate data without any organization of data points. Typically only valid points transmitted giving varying image size.*\/$/;"	e	enum:Spinnaker::Scan3dOutputModeEnums
Scan3dOutputMode_CalibratedABC_PointCloud	include/spinc/CameraDefsC.h	/^	Scan3dOutputMode_CalibratedABC_PointCloud,	\/*!< 3 Coordinates without organization. The full 3 coordinate data without any organization of data points. Typically only valid points transmitted giving varying image size.*\/$/;"	e	enum:_spinScan3dOutputModeEnums
Scan3dOutputMode_CalibratedAC	include/CameraDefs.h	/^		Scan3dOutputMode_CalibratedAC,	\/*!< 2 Coordinates with fixed B sampling. The data is sent as a A and C coordinates (X,Z or Theta,Rho). The B (Y) axis uses the scale and offset parameters for the B axis.*\/$/;"	e	enum:Spinnaker::Scan3dOutputModeEnums
Scan3dOutputMode_CalibratedAC	include/spinc/CameraDefsC.h	/^	Scan3dOutputMode_CalibratedAC,	\/*!< 2 Coordinates with fixed B sampling. The data is sent as a A and C coordinates (X,Z or Theta,Rho). The B (Y) axis uses the scale and offset parameters for the B axis.*\/$/;"	e	enum:_spinScan3dOutputModeEnums
Scan3dOutputMode_CalibratedAC_Linescan	include/CameraDefs.h	/^		Scan3dOutputMode_CalibratedAC_Linescan,	\/*!< 2 Coordinates with varying sampling. The data is sent as a A and C coordinates (X,Z or Theta,Rho). The B (Y) axis comes from the encoder chunk value.*\/$/;"	e	enum:Spinnaker::Scan3dOutputModeEnums
Scan3dOutputMode_CalibratedAC_Linescan	include/spinc/CameraDefsC.h	/^	Scan3dOutputMode_CalibratedAC_Linescan,	\/*!< 2 Coordinates with varying sampling. The data is sent as a A and C coordinates (X,Z or Theta,Rho). The B (Y) axis comes from the encoder chunk value.*\/$/;"	e	enum:_spinScan3dOutputModeEnums
Scan3dOutputMode_CalibratedC	include/CameraDefs.h	/^		Scan3dOutputMode_CalibratedC,	\/*!< Calibrated 2.5D Depth map. The distance data is expressed in the chosen distance unit. The data is a 2.5D range map. No information on X-Y axes available.*\/$/;"	e	enum:Spinnaker::Scan3dOutputModeEnums
Scan3dOutputMode_CalibratedC	include/spinc/CameraDefsC.h	/^	Scan3dOutputMode_CalibratedC,	\/*!< Calibrated 2.5D Depth map. The distance data is expressed in the chosen distance unit. The data is a 2.5D range map. No information on X-Y axes available.*\/$/;"	e	enum:_spinScan3dOutputModeEnums
Scan3dOutputMode_CalibratedC_Linescan	include/CameraDefs.h	/^		Scan3dOutputMode_CalibratedC_Linescan,	\/*!< Depth Map with varying B sampling. The distance data is expressed in the chosen distance unit. The data is a 2.5D range map. The B (Y) axis comes from the encoder chunk value.*\/$/;"	e	enum:Spinnaker::Scan3dOutputModeEnums
Scan3dOutputMode_CalibratedC_Linescan	include/spinc/CameraDefsC.h	/^	Scan3dOutputMode_CalibratedC_Linescan,	\/*!< Depth Map with varying B sampling. The distance data is expressed in the chosen distance unit. The data is a 2.5D range map. The B (Y) axis comes from the encoder chunk value.*\/$/;"	e	enum:_spinScan3dOutputModeEnums
Scan3dOutputMode_DisparityC	include/CameraDefs.h	/^		Scan3dOutputMode_DisparityC,	\/*!< Disparity 2.5D Depth map. The distance is inversely proportional to the pixel (disparity) value.*\/$/;"	e	enum:Spinnaker::Scan3dOutputModeEnums
Scan3dOutputMode_DisparityC	include/spinc/CameraDefsC.h	/^	Scan3dOutputMode_DisparityC,	\/*!< Disparity 2.5D Depth map. The distance is inversely proportional to the pixel (disparity) value.*\/$/;"	e	enum:_spinScan3dOutputModeEnums
Scan3dOutputMode_DisparityC_Linescan	include/CameraDefs.h	/^		Scan3dOutputMode_DisparityC_Linescan,	\/*!< Disparity 2.5D Depth map with varying B sampling. The distance is inversely proportional to the pixel (disparity) value. The B (Y) axis comes from the encoder chunk value.*\/$/;"	e	enum:Spinnaker::Scan3dOutputModeEnums
Scan3dOutputMode_DisparityC_Linescan	include/spinc/CameraDefsC.h	/^	Scan3dOutputMode_DisparityC_Linescan,	\/*!< Disparity 2.5D Depth map with varying B sampling. The distance is inversely proportional to the pixel (disparity) value. The B (Y) axis comes from the encoder chunk value.*\/$/;"	e	enum:_spinScan3dOutputModeEnums
Scan3dOutputMode_RectifiedC	include/CameraDefs.h	/^		Scan3dOutputMode_RectifiedC,	\/*!< Rectified 2.5D Depth map. The distance data has been rectified to a uniform sampling pattern in the X and Y direction. The data is a 2.5D range map only. If a complete 3D point cloud is rectified but transmitted as explicit coordinates it should be transmitted as one of the "CalibratedABC" formats.*\/$/;"	e	enum:Spinnaker::Scan3dOutputModeEnums
Scan3dOutputMode_RectifiedC	include/spinc/CameraDefsC.h	/^	Scan3dOutputMode_RectifiedC,	\/*!< Rectified 2.5D Depth map. The distance data has been rectified to a uniform sampling pattern in the X and Y direction. The data is a 2.5D range map only. If a complete 3D point cloud is rectified but transmitted as explicit coordinates it should be transmitted as one of the "CalibratedABC" formats.*\/$/;"	e	enum:_spinScan3dOutputModeEnums
Scan3dOutputMode_RectifiedC_Linescan	include/CameraDefs.h	/^		Scan3dOutputMode_RectifiedC_Linescan,	\/*!< Rectified 2.5D Depth map with varying B sampling. The data is sent as rectified 1D profiles using Coord3D_C pixels. The B (Y) axis comes from the encoder chunk value.*\/$/;"	e	enum:Spinnaker::Scan3dOutputModeEnums
Scan3dOutputMode_RectifiedC_Linescan	include/spinc/CameraDefsC.h	/^	Scan3dOutputMode_RectifiedC_Linescan,	\/*!< Rectified 2.5D Depth map with varying B sampling. The data is sent as rectified 1D profiles using Coord3D_C pixels. The B (Y) axis comes from the encoder chunk value.*\/$/;"	e	enum:_spinScan3dOutputModeEnums
Scan3dOutputMode_UncalibratedC	include/CameraDefs.h	/^		Scan3dOutputMode_UncalibratedC,	\/*!< Uncalibrated 2.5D Depth map. The distance data does not represent a physical unit and may be non-linear. The data is a 2.5D range map only.*\/$/;"	e	enum:Spinnaker::Scan3dOutputModeEnums
Scan3dOutputMode_UncalibratedC	include/spinc/CameraDefsC.h	/^	Scan3dOutputMode_UncalibratedC,	\/*!< Uncalibrated 2.5D Depth map. The distance data does not represent a physical unit and may be non-linear. The data is a 2.5D range map only.*\/$/;"	e	enum:_spinScan3dOutputModeEnums
Scan3dTransformValue	include/Camera.h	/^		GenApi::IFloat &Scan3dTransformValue;$/;"	m	class:Spinnaker::Camera
Scan3dTransformValue	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode Scan3dTransformValue;$/;"	m	struct:_quickSpin
SensorDigitizationTaps	include/Camera.h	/^		GenApi::IEnumerationT<SensorDigitizationTapsEnums> &SensorDigitizationTaps;$/;"	m	class:Spinnaker::Camera
SensorDigitizationTaps	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode SensorDigitizationTaps;$/;"	m	struct:_quickSpin
SensorDigitizationTapsEnums	include/CameraDefs.h	/^	enum SensorDigitizationTapsEnums	\/*!< Number of digitized samples outputted simultaneously by the camera A\/D conversion stage.*\/$/;"	g	namespace:Spinnaker
SensorDigitizationTaps_Eight	include/CameraDefs.h	/^		SensorDigitizationTaps_Eight,	\/*!< 8 taps.*\/$/;"	e	enum:Spinnaker::SensorDigitizationTapsEnums
SensorDigitizationTaps_Eight	include/spinc/CameraDefsC.h	/^	SensorDigitizationTaps_Eight,	\/*!< 8 taps.*\/$/;"	e	enum:_spinSensorDigitizationTapsEnums
SensorDigitizationTaps_Four	include/CameraDefs.h	/^		SensorDigitizationTaps_Four,	\/*!< 4 taps.*\/$/;"	e	enum:Spinnaker::SensorDigitizationTapsEnums
SensorDigitizationTaps_Four	include/spinc/CameraDefsC.h	/^	SensorDigitizationTaps_Four,	\/*!< 4 taps.*\/$/;"	e	enum:_spinSensorDigitizationTapsEnums
SensorDigitizationTaps_One	include/CameraDefs.h	/^		SensorDigitizationTaps_One,	\/*!< 1 tap.*\/$/;"	e	enum:Spinnaker::SensorDigitizationTapsEnums
SensorDigitizationTaps_One	include/spinc/CameraDefsC.h	/^	SensorDigitizationTaps_One,	\/*!< 1 tap.*\/$/;"	e	enum:_spinSensorDigitizationTapsEnums
SensorDigitizationTaps_Ten	include/CameraDefs.h	/^		SensorDigitizationTaps_Ten,	\/*!< 10 taps.*\/$/;"	e	enum:Spinnaker::SensorDigitizationTapsEnums
SensorDigitizationTaps_Ten	include/spinc/CameraDefsC.h	/^	SensorDigitizationTaps_Ten,	\/*!< 10 taps.*\/$/;"	e	enum:_spinSensorDigitizationTapsEnums
SensorDigitizationTaps_Three	include/CameraDefs.h	/^		SensorDigitizationTaps_Three,	\/*!< 3 taps.*\/$/;"	e	enum:Spinnaker::SensorDigitizationTapsEnums
SensorDigitizationTaps_Three	include/spinc/CameraDefsC.h	/^	SensorDigitizationTaps_Three,	\/*!< 3 taps.*\/$/;"	e	enum:_spinSensorDigitizationTapsEnums
SensorDigitizationTaps_Two	include/CameraDefs.h	/^		SensorDigitizationTaps_Two,	\/*!< 2 taps.*\/$/;"	e	enum:Spinnaker::SensorDigitizationTapsEnums
SensorDigitizationTaps_Two	include/spinc/CameraDefsC.h	/^	SensorDigitizationTaps_Two,	\/*!< 2 taps.*\/$/;"	e	enum:_spinSensorDigitizationTapsEnums
SensorHeight	include/Camera.h	/^		GenApi::IInteger &SensorHeight;$/;"	m	class:Spinnaker::Camera
SensorHeight	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode SensorHeight;$/;"	m	struct:_quickSpin
SensorShutterMode	include/Camera.h	/^		GenApi::IEnumerationT<SensorShutterModeEnums> &SensorShutterMode;$/;"	m	class:Spinnaker::Camera
SensorShutterMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode SensorShutterMode;$/;"	m	struct:_quickSpin
SensorShutterModeEnums	include/CameraDefs.h	/^	enum SensorShutterModeEnums	\/*!< Sets the shutter mode of the device.*\/$/;"	g	namespace:Spinnaker
SensorShutterMode_Global	include/CameraDefs.h	/^		SensorShutterMode_Global,	\/*!< The shutter opens and closes at the same time for all pixels. All the pixels are exposed for the same length of time at the same time.*\/$/;"	e	enum:Spinnaker::SensorShutterModeEnums
SensorShutterMode_Global	include/spinc/CameraDefsC.h	/^	SensorShutterMode_Global,	\/*!< The shutter opens and closes at the same time for all pixels. All the pixels are exposed for the same length of time at the same time.*\/$/;"	e	enum:_spinSensorShutterModeEnums
SensorShutterMode_GlobalReset	include/CameraDefs.h	/^		SensorShutterMode_GlobalReset,	\/*!< The shutter opens at the same time for all pixels but ends in a sequential manner. The pixels are exposed for different lengths of time.*\/$/;"	e	enum:Spinnaker::SensorShutterModeEnums
SensorShutterMode_GlobalReset	include/spinc/CameraDefsC.h	/^	SensorShutterMode_GlobalReset,	\/*!< The shutter opens at the same time for all pixels but ends in a sequential manner. The pixels are exposed for different lengths of time.*\/$/;"	e	enum:_spinSensorShutterModeEnums
SensorShutterMode_Rolling	include/CameraDefs.h	/^		SensorShutterMode_Rolling,	\/*!< The shutter opens and closes sequentially for groups (typically lines) of pixels. All the pixels are exposed for the same length of time but not at the same time.*\/$/;"	e	enum:Spinnaker::SensorShutterModeEnums
SensorShutterMode_Rolling	include/spinc/CameraDefsC.h	/^	SensorShutterMode_Rolling,	\/*!< The shutter opens and closes sequentially for groups (typically lines) of pixels. All the pixels are exposed for the same length of time but not at the same time.*\/$/;"	e	enum:_spinSensorShutterModeEnums
SensorTaps	include/Camera.h	/^		GenApi::IEnumerationT<SensorTapsEnums> &SensorTaps;$/;"	m	class:Spinnaker::Camera
SensorTaps	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode SensorTaps;$/;"	m	struct:_quickSpin
SensorTapsEnums	include/CameraDefs.h	/^	enum SensorTapsEnums	\/*!< Number of taps of the camera sensor.*\/$/;"	g	namespace:Spinnaker
SensorTaps_Eight	include/CameraDefs.h	/^		SensorTaps_Eight,	\/*!< 8 taps.*\/$/;"	e	enum:Spinnaker::SensorTapsEnums
SensorTaps_Eight	include/spinc/CameraDefsC.h	/^	SensorTaps_Eight,	\/*!< 8 taps.*\/$/;"	e	enum:_spinSensorTapsEnums
SensorTaps_Four	include/CameraDefs.h	/^		SensorTaps_Four,	\/*!< 4 taps.*\/$/;"	e	enum:Spinnaker::SensorTapsEnums
SensorTaps_Four	include/spinc/CameraDefsC.h	/^	SensorTaps_Four,	\/*!< 4 taps.*\/$/;"	e	enum:_spinSensorTapsEnums
SensorTaps_One	include/CameraDefs.h	/^		SensorTaps_One,	\/*!< 1 tap.*\/$/;"	e	enum:Spinnaker::SensorTapsEnums
SensorTaps_One	include/spinc/CameraDefsC.h	/^	SensorTaps_One,	\/*!< 1 tap.*\/$/;"	e	enum:_spinSensorTapsEnums
SensorTaps_Ten	include/CameraDefs.h	/^		SensorTaps_Ten,	\/*!< 10 taps.*\/$/;"	e	enum:Spinnaker::SensorTapsEnums
SensorTaps_Ten	include/spinc/CameraDefsC.h	/^	SensorTaps_Ten,	\/*!< 10 taps.*\/$/;"	e	enum:_spinSensorTapsEnums
SensorTaps_Three	include/CameraDefs.h	/^		SensorTaps_Three,	\/*!< 3 taps.*\/$/;"	e	enum:Spinnaker::SensorTapsEnums
SensorTaps_Three	include/spinc/CameraDefsC.h	/^	SensorTaps_Three,	\/*!< 3 taps.*\/$/;"	e	enum:_spinSensorTapsEnums
SensorTaps_Two	include/CameraDefs.h	/^		SensorTaps_Two,	\/*!< 2 taps.*\/$/;"	e	enum:Spinnaker::SensorTapsEnums
SensorTaps_Two	include/spinc/CameraDefsC.h	/^	SensorTaps_Two,	\/*!< 2 taps.*\/$/;"	e	enum:_spinSensorTapsEnums
SensorWidth	include/Camera.h	/^		GenApi::IInteger &SensorWidth;$/;"	m	class:Spinnaker::Camera
SensorWidth	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode SensorWidth;$/;"	m	struct:_quickSpin
SequencerConfigurationMode	include/Camera.h	/^		GenApi::IEnumerationT<SequencerConfigurationModeEnums> &SequencerConfigurationMode;$/;"	m	class:Spinnaker::Camera
SequencerConfigurationMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode SequencerConfigurationMode;$/;"	m	struct:_quickSpin
SequencerConfigurationModeEnums	include/CameraDefs.h	/^	enum SequencerConfigurationModeEnums	\/*!< Controls if the sequencer configuration mode is active.*\/$/;"	g	namespace:Spinnaker
SequencerConfigurationMode_Off	include/CameraDefs.h	/^		SequencerConfigurationMode_Off,	\/*!< Disables the sequencer configuration mode.*\/$/;"	e	enum:Spinnaker::SequencerConfigurationModeEnums
SequencerConfigurationMode_Off	include/spinc/CameraDefsC.h	/^	SequencerConfigurationMode_Off,	\/*!< Disables the sequencer configuration mode.*\/$/;"	e	enum:_spinSequencerConfigurationModeEnums
SequencerConfigurationMode_On	include/CameraDefs.h	/^		SequencerConfigurationMode_On,	\/*!< Enables the sequencer configuration mode.*\/$/;"	e	enum:Spinnaker::SequencerConfigurationModeEnums
SequencerConfigurationMode_On	include/spinc/CameraDefsC.h	/^	SequencerConfigurationMode_On,	\/*!< Enables the sequencer configuration mode.*\/$/;"	e	enum:_spinSequencerConfigurationModeEnums
SequencerFeatureEnable	include/Camera.h	/^		GenApi::IBoolean &SequencerFeatureEnable;$/;"	m	class:Spinnaker::Camera
SequencerFeatureEnable	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode SequencerFeatureEnable;$/;"	m	struct:_quickSpin
SequencerFeatureSelector	include/Camera.h	/^		GenApi::IEnumerationT<SequencerFeatureSelectorEnums> &SequencerFeatureSelector;$/;"	m	class:Spinnaker::Camera
SequencerFeatureSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode SequencerFeatureSelector;$/;"	m	struct:_quickSpin
SequencerFeatureSelectorEnums	include/CameraDefs.h	/^	enum SequencerFeatureSelectorEnums	\/*!< Selects which sequencer features to control.*\/$/;"	g	namespace:Spinnaker
SequencerFeatureSelector_ExposureTime	include/CameraDefs.h	/^		SequencerFeatureSelector_ExposureTime,	\/*!< *\/$/;"	e	enum:Spinnaker::SequencerFeatureSelectorEnums
SequencerFeatureSelector_ExposureTime	include/spinc/CameraDefsC.h	/^	SequencerFeatureSelector_ExposureTime,	\/*!< *\/$/;"	e	enum:_spinSequencerFeatureSelectorEnums
SequencerFeatureSelector_Gain	include/CameraDefs.h	/^		SequencerFeatureSelector_Gain,	\/*!< *\/$/;"	e	enum:Spinnaker::SequencerFeatureSelectorEnums
SequencerFeatureSelector_Gain	include/spinc/CameraDefsC.h	/^	SequencerFeatureSelector_Gain,	\/*!< *\/$/;"	e	enum:_spinSequencerFeatureSelectorEnums
SequencerFeatureSelector_Height	include/CameraDefs.h	/^		SequencerFeatureSelector_Height,	\/*!< *\/$/;"	e	enum:Spinnaker::SequencerFeatureSelectorEnums
SequencerFeatureSelector_Height	include/spinc/CameraDefsC.h	/^	SequencerFeatureSelector_Height,	\/*!< *\/$/;"	e	enum:_spinSequencerFeatureSelectorEnums
SequencerFeatureSelector_OffsetX	include/CameraDefs.h	/^		SequencerFeatureSelector_OffsetX,	\/*!< *\/$/;"	e	enum:Spinnaker::SequencerFeatureSelectorEnums
SequencerFeatureSelector_OffsetX	include/spinc/CameraDefsC.h	/^	SequencerFeatureSelector_OffsetX,	\/*!< *\/$/;"	e	enum:_spinSequencerFeatureSelectorEnums
SequencerFeatureSelector_OffsetY	include/CameraDefs.h	/^		SequencerFeatureSelector_OffsetY,	\/*!< *\/$/;"	e	enum:Spinnaker::SequencerFeatureSelectorEnums
SequencerFeatureSelector_OffsetY	include/spinc/CameraDefsC.h	/^	SequencerFeatureSelector_OffsetY,	\/*!< *\/$/;"	e	enum:_spinSequencerFeatureSelectorEnums
SequencerFeatureSelector_Width	include/CameraDefs.h	/^		SequencerFeatureSelector_Width,	\/*!< *\/$/;"	e	enum:Spinnaker::SequencerFeatureSelectorEnums
SequencerFeatureSelector_Width	include/spinc/CameraDefsC.h	/^	SequencerFeatureSelector_Width,	\/*!< *\/$/;"	e	enum:_spinSequencerFeatureSelectorEnums
SequencerMode	include/Camera.h	/^		GenApi::IEnumerationT<SequencerModeEnums> &SequencerMode;$/;"	m	class:Spinnaker::Camera
SequencerMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode SequencerMode;$/;"	m	struct:_quickSpin
SequencerModeEnums	include/CameraDefs.h	/^	enum SequencerModeEnums	\/*!< Controls if the sequencer mechanism is active.*\/$/;"	g	namespace:Spinnaker
SequencerMode_Off	include/CameraDefs.h	/^		SequencerMode_Off,	\/*!< Disables the sequencer.*\/$/;"	e	enum:Spinnaker::SequencerModeEnums
SequencerMode_Off	include/spinc/CameraDefsC.h	/^	SequencerMode_Off,	\/*!< Disables the sequencer.*\/$/;"	e	enum:_spinSequencerModeEnums
SequencerMode_On	include/CameraDefs.h	/^		SequencerMode_On,	\/*!< Enables the sequencer.*\/$/;"	e	enum:Spinnaker::SequencerModeEnums
SequencerMode_On	include/spinc/CameraDefsC.h	/^	SequencerMode_On,	\/*!< Enables the sequencer.*\/$/;"	e	enum:_spinSequencerModeEnums
SequencerPathSelector	include/Camera.h	/^		GenApi::IInteger &SequencerPathSelector;$/;"	m	class:Spinnaker::Camera
SequencerPathSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode SequencerPathSelector;$/;"	m	struct:_quickSpin
SequencerSetActive	include/Camera.h	/^		GenApi::IInteger &SequencerSetActive;$/;"	m	class:Spinnaker::Camera
SequencerSetActive	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode SequencerSetActive;$/;"	m	struct:_quickSpin
SequencerSetLoad	include/Camera.h	/^		GenApi::ICommand &SequencerSetLoad;$/;"	m	class:Spinnaker::Camera
SequencerSetLoad	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode SequencerSetLoad;$/;"	m	struct:_quickSpin
SequencerSetNext	include/Camera.h	/^		GenApi::IInteger &SequencerSetNext;$/;"	m	class:Spinnaker::Camera
SequencerSetNext	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode SequencerSetNext;$/;"	m	struct:_quickSpin
SequencerSetSave	include/Camera.h	/^		GenApi::ICommand &SequencerSetSave;$/;"	m	class:Spinnaker::Camera
SequencerSetSave	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode SequencerSetSave;$/;"	m	struct:_quickSpin
SequencerSetSelector	include/Camera.h	/^		GenApi::IInteger &SequencerSetSelector;$/;"	m	class:Spinnaker::Camera
SequencerSetSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode SequencerSetSelector;$/;"	m	struct:_quickSpin
SequencerSetStart	include/Camera.h	/^		GenApi::IInteger &SequencerSetStart;$/;"	m	class:Spinnaker::Camera
SequencerSetStart	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode SequencerSetStart;$/;"	m	struct:_quickSpin
SequencerTriggerActivation	include/Camera.h	/^		GenApi::IEnumerationT<SequencerTriggerActivationEnums> &SequencerTriggerActivation;$/;"	m	class:Spinnaker::Camera
SequencerTriggerActivation	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode SequencerTriggerActivation;$/;"	m	struct:_quickSpin
SequencerTriggerActivationEnums	include/CameraDefs.h	/^	enum SequencerTriggerActivationEnums	\/*!< Specifies the activation mode of the sequencer trigger.*\/$/;"	g	namespace:Spinnaker
SequencerTriggerActivation_AnyEdge	include/CameraDefs.h	/^		SequencerTriggerActivation_AnyEdge,	\/*!< Specifies that the trigger is considered valid on the falling or rising edge of the source signal.*\/$/;"	e	enum:Spinnaker::SequencerTriggerActivationEnums
SequencerTriggerActivation_AnyEdge	include/spinc/CameraDefsC.h	/^	SequencerTriggerActivation_AnyEdge,	\/*!< Specifies that the trigger is considered valid on the falling or rising edge of the source signal.*\/$/;"	e	enum:_spinSequencerTriggerActivationEnums
SequencerTriggerActivation_FallingEdge	include/CameraDefs.h	/^		SequencerTriggerActivation_FallingEdge,	\/*!< Specifies that the trigger is considered valid on the falling edge of the source signal.*\/$/;"	e	enum:Spinnaker::SequencerTriggerActivationEnums
SequencerTriggerActivation_FallingEdge	include/spinc/CameraDefsC.h	/^	SequencerTriggerActivation_FallingEdge,	\/*!< Specifies that the trigger is considered valid on the falling edge of the source signal.*\/$/;"	e	enum:_spinSequencerTriggerActivationEnums
SequencerTriggerActivation_LevelHigh	include/CameraDefs.h	/^		SequencerTriggerActivation_LevelHigh,	\/*!< Specifies that the trigger is considered valid as long as the level of the source signal is high.*\/$/;"	e	enum:Spinnaker::SequencerTriggerActivationEnums
SequencerTriggerActivation_LevelHigh	include/spinc/CameraDefsC.h	/^	SequencerTriggerActivation_LevelHigh,	\/*!< Specifies that the trigger is considered valid as long as the level of the source signal is high.*\/$/;"	e	enum:_spinSequencerTriggerActivationEnums
SequencerTriggerActivation_LevelLow	include/CameraDefs.h	/^		SequencerTriggerActivation_LevelLow,	\/*!< Specifies that the trigger is considered valid as long as the level of the source signal is low.*\/$/;"	e	enum:Spinnaker::SequencerTriggerActivationEnums
SequencerTriggerActivation_LevelLow	include/spinc/CameraDefsC.h	/^	SequencerTriggerActivation_LevelLow,	\/*!< Specifies that the trigger is considered valid as long as the level of the source signal is low.*\/$/;"	e	enum:_spinSequencerTriggerActivationEnums
SequencerTriggerActivation_RisingEdge	include/CameraDefs.h	/^		SequencerTriggerActivation_RisingEdge,	\/*!< Specifies that the trigger is considered valid on the rising edge of the source signal.*\/$/;"	e	enum:Spinnaker::SequencerTriggerActivationEnums
SequencerTriggerActivation_RisingEdge	include/spinc/CameraDefsC.h	/^	SequencerTriggerActivation_RisingEdge,	\/*!< Specifies that the trigger is considered valid on the rising edge of the source signal.*\/$/;"	e	enum:_spinSequencerTriggerActivationEnums
SequencerTriggerSource	include/Camera.h	/^		GenApi::IEnumerationT<SequencerTriggerSourceEnums> &SequencerTriggerSource;$/;"	m	class:Spinnaker::Camera
SequencerTriggerSource	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode SequencerTriggerSource;$/;"	m	struct:_quickSpin
SequencerTriggerSourceEnums	include/CameraDefs.h	/^	enum SequencerTriggerSourceEnums	\/*!< Specifies the internal signal or physical input line to use as the sequencer trigger source.*\/$/;"	g	namespace:Spinnaker
SequencerTriggerSource_AcquisitionEnd	include/CameraDefs.h	/^		SequencerTriggerSource_AcquisitionEnd,	\/*!< Starts with the reception of the Acquisition End.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_AcquisitionEnd	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_AcquisitionEnd,	\/*!< Starts with the reception of the Acquisition End.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_AcquisitionStart	include/CameraDefs.h	/^		SequencerTriggerSource_AcquisitionStart,	\/*!< Starts with the reception of the Acquisition Start.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_AcquisitionStart	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_AcquisitionStart,	\/*!< Starts with the reception of the Acquisition Start.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_AcquisitionTrigger	include/CameraDefs.h	/^		SequencerTriggerSource_AcquisitionTrigger,	\/*!< Starts with the reception of the Acquisition Trigger.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_AcquisitionTrigger	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_AcquisitionTrigger,	\/*!< Starts with the reception of the Acquisition Trigger.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_Action0	include/CameraDefs.h	/^		SequencerTriggerSource_Action0,	\/*!< Starts with the assertion of the chosen action signal.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_Action0	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_Action0,	\/*!< Starts with the assertion of the chosen action signal.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_Action1	include/CameraDefs.h	/^		SequencerTriggerSource_Action1,	\/*!< Starts with the assertion of the chosen action signal.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_Action1	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_Action1,	\/*!< Starts with the assertion of the chosen action signal.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_Action2	include/CameraDefs.h	/^		SequencerTriggerSource_Action2,	\/*!< Starts with the assertion of the chosen action signal.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_Action2	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_Action2,	\/*!< Starts with the assertion of the chosen action signal.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_CC1	include/CameraDefs.h	/^		SequencerTriggerSource_CC1,	\/*!< Index of the Camera Link physical line and associated I\/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_CC1	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_CC1,	\/*!< Index of the Camera Link physical line and associated I\/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_CC2	include/CameraDefs.h	/^		SequencerTriggerSource_CC2,	\/*!< Index of the Camera Link physical line and associated I\/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_CC2	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_CC2,	\/*!< Index of the Camera Link physical line and associated I\/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_CC3	include/CameraDefs.h	/^		SequencerTriggerSource_CC3,	\/*!< Index of the Camera Link physical line and associated I\/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_CC3	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_CC3,	\/*!< Index of the Camera Link physical line and associated I\/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_CC4	include/CameraDefs.h	/^		SequencerTriggerSource_CC4,	\/*!< Index of the Camera Link physical line and associated I\/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_CC4	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_CC4,	\/*!< Index of the Camera Link physical line and associated I\/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_Counter0End	include/CameraDefs.h	/^		SequencerTriggerSource_Counter0End,	\/*!< Starts with the reception of the Counter End.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_Counter0End	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_Counter0End,	\/*!< Starts with the reception of the Counter End.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_Counter0Start	include/CameraDefs.h	/^		SequencerTriggerSource_Counter0Start,	\/*!< Starts with the reception of the Counter Start.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_Counter0Start	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_Counter0Start,	\/*!< Starts with the reception of the Counter Start.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_Counter1End	include/CameraDefs.h	/^		SequencerTriggerSource_Counter1End,	\/*!< Starts with the reception of the Counter End.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_Counter1End	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_Counter1End,	\/*!< Starts with the reception of the Counter End.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_Counter1Start	include/CameraDefs.h	/^		SequencerTriggerSource_Counter1Start,	\/*!< Starts with the reception of the Counter Start.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_Counter1Start	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_Counter1Start,	\/*!< Starts with the reception of the Counter Start.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_Counter2End	include/CameraDefs.h	/^		SequencerTriggerSource_Counter2End,	\/*!< Starts with the reception of the Counter End.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_Counter2End	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_Counter2End,	\/*!< Starts with the reception of the Counter End.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_Counter2Start	include/CameraDefs.h	/^		SequencerTriggerSource_Counter2Start,	\/*!< Starts with the reception of the Counter Start.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_Counter2Start	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_Counter2Start,	\/*!< Starts with the reception of the Counter Start.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_Encoder0	include/CameraDefs.h	/^		SequencerTriggerSource_Encoder0,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_Encoder0	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_Encoder0,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_Encoder1	include/CameraDefs.h	/^		SequencerTriggerSource_Encoder1,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_Encoder1	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_Encoder1,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_Encoder2	include/CameraDefs.h	/^		SequencerTriggerSource_Encoder2,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_Encoder2	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_Encoder2,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_ExposureEnd	include/CameraDefs.h	/^		SequencerTriggerSource_ExposureEnd,	\/*!< Starts with the reception of the Exposure End.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_ExposureEnd	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_ExposureEnd,	\/*!< Starts with the reception of the Exposure End.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_ExposureStart	include/CameraDefs.h	/^		SequencerTriggerSource_ExposureStart,	\/*!< Starts with the reception of the Exposure Start.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_ExposureStart	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_ExposureStart,	\/*!< Starts with the reception of the Exposure Start.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_FrameBurstEnd	include/CameraDefs.h	/^		SequencerTriggerSource_FrameBurstEnd,	\/*!< Starts with the reception of the Frame Burst End.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_FrameBurstEnd	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_FrameBurstEnd,	\/*!< Starts with the reception of the Frame Burst End.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_FrameBurstStart	include/CameraDefs.h	/^		SequencerTriggerSource_FrameBurstStart,	\/*!< Starts with the reception of the Frame Burst Start.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_FrameBurstStart	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_FrameBurstStart,	\/*!< Starts with the reception of the Frame Burst Start.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_FrameEnd	include/CameraDefs.h	/^		SequencerTriggerSource_FrameEnd,	\/*!< Starts with the reception of the Frame End.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_FrameEnd	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_FrameEnd,	\/*!< Starts with the reception of the Frame End.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_FrameStart	include/CameraDefs.h	/^		SequencerTriggerSource_FrameStart,	\/*!< Starts with the reception of the Frame Start.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_FrameStart	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_FrameStart,	\/*!< Starts with the reception of the Frame Start.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_FrameTrigger	include/CameraDefs.h	/^		SequencerTriggerSource_FrameTrigger,	\/*!< Starts with the reception of the Frame Start Trigger.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_FrameTrigger	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_FrameTrigger,	\/*!< Starts with the reception of the Frame Start Trigger.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_Line0	include/CameraDefs.h	/^		SequencerTriggerSource_Line0,	\/*!< Starts when the specidfied TimerTriggerActivation condition is met on the chosen I\/O Line.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_Line0	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_Line0,	\/*!< Starts when the specidfied TimerTriggerActivation condition is met on the chosen I\/O Line.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_Line1	include/CameraDefs.h	/^		SequencerTriggerSource_Line1,	\/*!< Starts when the specidfied TimerTriggerActivation condition is met on the chosen I\/O Line.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_Line1	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_Line1,	\/*!< Starts when the specidfied TimerTriggerActivation condition is met on the chosen I\/O Line.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_Line2	include/CameraDefs.h	/^		SequencerTriggerSource_Line2,	\/*!< Starts when the specidfied TimerTriggerActivation condition is met on the chosen I\/O Line.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_Line2	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_Line2,	\/*!< Starts when the specidfied TimerTriggerActivation condition is met on the chosen I\/O Line.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_LinkTrigger0	include/CameraDefs.h	/^		SequencerTriggerSource_LinkTrigger0,	\/*!< Starts with the reception of the chosen Link Trigger.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_LinkTrigger0	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_LinkTrigger0,	\/*!< Starts with the reception of the chosen Link Trigger.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_LinkTrigger1	include/CameraDefs.h	/^		SequencerTriggerSource_LinkTrigger1,	\/*!< Starts with the reception of the chosen Link Trigger.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_LinkTrigger1	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_LinkTrigger1,	\/*!< Starts with the reception of the chosen Link Trigger.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_LinkTrigger2	include/CameraDefs.h	/^		SequencerTriggerSource_LinkTrigger2,	\/*!< Starts with the reception of the chosen Link Trigger.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_LinkTrigger2	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_LinkTrigger2,	\/*!< Starts with the reception of the chosen Link Trigger.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_Off	include/CameraDefs.h	/^		SequencerTriggerSource_Off,	\/*!< Disables the sequencer trigger.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_Off	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_Off,	\/*!< Disables the sequencer trigger.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_SoftwareSignal0	include/CameraDefs.h	/^		SequencerTriggerSource_SoftwareSignal0,	\/*!< Starts on the reception of the Software Signal.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_SoftwareSignal0	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_SoftwareSignal0,	\/*!< Starts on the reception of the Software Signal.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_SoftwareSignal1	include/CameraDefs.h	/^		SequencerTriggerSource_SoftwareSignal1,	\/*!< Starts on the reception of the Software Signal.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_SoftwareSignal1	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_SoftwareSignal1,	\/*!< Starts on the reception of the Software Signal.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_SoftwareSignal2	include/CameraDefs.h	/^		SequencerTriggerSource_SoftwareSignal2,	\/*!< Starts on the reception of the Software Signal.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_SoftwareSignal2	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_SoftwareSignal2,	\/*!< Starts on the reception of the Software Signal.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_Timer0End	include/CameraDefs.h	/^		SequencerTriggerSource_Timer0End,	\/*!< Starts with the reception of the Timer End.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_Timer0End	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_Timer0End,	\/*!< Starts with the reception of the Timer End.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_Timer0Start	include/CameraDefs.h	/^		SequencerTriggerSource_Timer0Start,	\/*!< Starts with the reception of the Timer Start.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_Timer0Start	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_Timer0Start,	\/*!< Starts with the reception of the Timer Start.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_Timer1End	include/CameraDefs.h	/^		SequencerTriggerSource_Timer1End,	\/*!< Starts with the reception of the Timer End.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_Timer1End	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_Timer1End,	\/*!< Starts with the reception of the Timer End.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_Timer1Start	include/CameraDefs.h	/^		SequencerTriggerSource_Timer1Start,	\/*!< Starts with the reception of the Timer Start.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_Timer1Start	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_Timer1Start,	\/*!< Starts with the reception of the Timer Start.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_Timer2End	include/CameraDefs.h	/^		SequencerTriggerSource_Timer2End,	\/*!< Starts with the reception of the Timer End.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_Timer2End	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_Timer2End,	\/*!< Starts with the reception of the Timer End.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_Timer2Start	include/CameraDefs.h	/^		SequencerTriggerSource_Timer2Start,	\/*!< Starts with the reception of the Timer Start.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_Timer2Start	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_Timer2Start,	\/*!< Starts with the reception of the Timer Start.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_UserOutput0	include/CameraDefs.h	/^		SequencerTriggerSource_UserOutput0,	\/*!< Specifies which User Output bit signal to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_UserOutput0	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_UserOutput0,	\/*!< Specifies which User Output bit signal to use as internal source for the trigger.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_UserOutput1	include/CameraDefs.h	/^		SequencerTriggerSource_UserOutput1,	\/*!< Specifies which User Output bit signal to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_UserOutput1	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_UserOutput1,	\/*!< Specifies which User Output bit signal to use as internal source for the trigger.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SequencerTriggerSource_UserOutput2	include/CameraDefs.h	/^		SequencerTriggerSource_UserOutput2,	\/*!< Specifies which User Output bit signal to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::SequencerTriggerSourceEnums
SequencerTriggerSource_UserOutput2	include/spinc/CameraDefsC.h	/^	SequencerTriggerSource_UserOutput2,	\/*!< Specifies which User Output bit signal to use as internal source for the trigger.*\/$/;"	e	enum:_spinSequencerTriggerSourceEnums
SetPortImpl	include/SpinGenApi/PortImpl.h	/^			virtual void SetPortImpl(IPort* pPort)$/;"	f	class:Spinnaker::GenApi::CPortImpl
SetPortImpl	include/SpinGenApi/RegisterPortImpl.h	/^			virtual void SetPortImpl(IPort* pPort)$/;"	f	class:Spinnaker::GenApi::CRegisterPortImpl
SetSingleState	SpinnakerTest/Sequencer/Sequencer.cpp	/^int SetSingleState(INodeMap & nodeMap, unsigned int sequenceNumber, int64_t widthToSet, int64_t heightToSet, double exposureTimeToSet, double gainToSet)$/;"	f
SetSingleState	SpinnakerTest/Sequencer_C/Sequencer_C.cpp	/^spinError SetSingleState(spinNodeMapHandle hNodeMap, unsigned int sequenceNumber, int64_t widthToSet, int64_t heightToSet, double exposureTimeToSet, double gainToSet)$/;"	f
SetSingleState	src/Sequencer/Sequencer.cpp	/^int SetSingleState(INodeMap & nodeMap, unsigned int sequenceNumber, int64_t widthToSet, int64_t heightToSet, double exposureTimeToSet, double gainToSet)$/;"	f
SetSingleState	src/Sequencer_C/Sequencer_C.cpp	/^spinError SetSingleState(spinNodeMapHandle hNodeMap, unsigned int sequenceNumber, int64_t widthToSet, int64_t heightToSet, double exposureTimeToSet, double gainToSet)$/;"	f
Signed	include/SpinGenApi/Types.h	/^			Signed,         \/\/!< Integer is signed$/;"	e	enum:Spinnaker::GenApi::_ESign
Signed	include/spinc/SpinnakerGenApiDefsC.h	/^	Signed,$/;"	e	enum:_spinSign
SingleChunkDataStr_t	include/SpinGenApi/ChunkAdapterGeneric.h	/^		typedef struct SingleChunkDataStr_t$/;"	s	namespace:Spinnaker::GenApi
SingleChunkDataStr_t	include/SpinGenApi/ChunkAdapterGeneric.h	/^		} SingleChunkDataStr_t;$/;"	t	namespace:Spinnaker::GenApi	typeref:struct:Spinnaker::GenApi::SingleChunkDataStr_t
SingleChunkData_t	include/SpinGenApi/ChunkAdapterGeneric.h	/^		typedef struct SingleChunkData_t$/;"	s	namespace:Spinnaker::GenApi
SingleChunkData_t	include/SpinGenApi/ChunkAdapterGeneric.h	/^		} SingleChunkData_t;$/;"	t	namespace:Spinnaker::GenApi	typeref:struct:Spinnaker::GenApi::SingleChunkData_t
SleepyWrapper	SpinnakerTest/ImageEvents/ImageEvents.cpp	/^void SleepyWrapper(int milliseconds)$/;"	f
SleepyWrapper	SpinnakerTest/ImageEvents_C/ImageEvents_C.cpp	/^void SleepyWrapper(int milliseconds)$/;"	f
SleepyWrapper	src/ImageEvents/ImageEvents.cpp	/^void SleepyWrapper(int milliseconds)$/;"	f
SleepyWrapper	src/ImageEvents_C/ImageEvents_C.cpp	/^void SleepyWrapper(int milliseconds)$/;"	f
SoftwareSignalPulse	include/Camera.h	/^		GenApi::ICommand &SoftwareSignalPulse;$/;"	m	class:Spinnaker::Camera
SoftwareSignalPulse	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode SoftwareSignalPulse;$/;"	m	struct:_quickSpin
SoftwareSignalSelector	include/Camera.h	/^		GenApi::IEnumerationT<SoftwareSignalSelectorEnums> &SoftwareSignalSelector;$/;"	m	class:Spinnaker::Camera
SoftwareSignalSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode SoftwareSignalSelector;$/;"	m	struct:_quickSpin
SoftwareSignalSelectorEnums	include/CameraDefs.h	/^	enum SoftwareSignalSelectorEnums	\/*!< Selects which Software Signal features to control.*\/$/;"	g	namespace:Spinnaker
SoftwareSignalSelector_SoftwareSignal0	include/CameraDefs.h	/^		SoftwareSignalSelector_SoftwareSignal0,	\/*!< Selects the software generated signal to control.*\/$/;"	e	enum:Spinnaker::SoftwareSignalSelectorEnums
SoftwareSignalSelector_SoftwareSignal0	include/spinc/CameraDefsC.h	/^	SoftwareSignalSelector_SoftwareSignal0,	\/*!< Selects the software generated signal to control.*\/$/;"	e	enum:_spinSoftwareSignalSelectorEnums
SoftwareSignalSelector_SoftwareSignal1	include/CameraDefs.h	/^		SoftwareSignalSelector_SoftwareSignal1,	\/*!< Selects the software generated signal to control.*\/$/;"	e	enum:Spinnaker::SoftwareSignalSelectorEnums
SoftwareSignalSelector_SoftwareSignal1	include/spinc/CameraDefsC.h	/^	SoftwareSignalSelector_SoftwareSignal1,	\/*!< Selects the software generated signal to control.*\/$/;"	e	enum:_spinSoftwareSignalSelectorEnums
SoftwareSignalSelector_SoftwareSignal2	include/CameraDefs.h	/^		SoftwareSignalSelector_SoftwareSignal2,	\/*!< Selects the software generated signal to control.*\/$/;"	e	enum:Spinnaker::SoftwareSignalSelectorEnums
SoftwareSignalSelector_SoftwareSignal2	include/spinc/CameraDefsC.h	/^	SoftwareSignalSelector_SoftwareSignal2,	\/*!< Selects the software generated signal to control.*\/$/;"	e	enum:_spinSoftwareSignalSelectorEnums
SourceCount	include/Camera.h	/^		GenApi::IInteger &SourceCount;$/;"	m	class:Spinnaker::Camera
SourceCount	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode SourceCount;$/;"	m	struct:_quickSpin
SourceSelector	include/Camera.h	/^		GenApi::IEnumerationT<SourceSelectorEnums> &SourceSelector;$/;"	m	class:Spinnaker::Camera
SourceSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode SourceSelector;$/;"	m	struct:_quickSpin
SourceSelectorEnums	include/CameraDefs.h	/^	enum SourceSelectorEnums	\/*!< Selects the source to control.*\/$/;"	g	namespace:Spinnaker
SourceSelector_All	include/CameraDefs.h	/^		SourceSelector_All,	\/*!< Selects all the data sources.*\/$/;"	e	enum:Spinnaker::SourceSelectorEnums
SourceSelector_All	include/spinc/CameraDefsC.h	/^	SourceSelector_All,	\/*!< Selects all the data sources.*\/$/;"	e	enum:_spinSourceSelectorEnums
SourceSelector_Source0	include/CameraDefs.h	/^		SourceSelector_Source0,	\/*!< Selects the data source 0.*\/$/;"	e	enum:Spinnaker::SourceSelectorEnums
SourceSelector_Source0	include/spinc/CameraDefsC.h	/^	SourceSelector_Source0,	\/*!< Selects the data source 0.*\/$/;"	e	enum:_spinSourceSelectorEnums
SourceSelector_Source1	include/CameraDefs.h	/^		SourceSelector_Source1,	\/*!< Selects the data source 1.*\/$/;"	e	enum:Spinnaker::SourceSelectorEnums
SourceSelector_Source1	include/spinc/CameraDefsC.h	/^	SourceSelector_Source1,	\/*!< Selects the data source 1.*\/$/;"	e	enum:_spinSourceSelectorEnums
SourceSelector_Source2	include/CameraDefs.h	/^		SourceSelector_Source2,	\/*!< Selects the data source 2.*\/$/;"	e	enum:Spinnaker::SourceSelectorEnums
SourceSelector_Source2	include/spinc/CameraDefsC.h	/^	SourceSelector_Source2,	\/*!< Selects the data source 2.*\/$/;"	e	enum:_spinSourceSelectorEnums
SpinTestCamera	include/SpinGenApi/SpinTestCamera.h	/^		class SPINNAKER_API SpinTestCamera : virtual public NodeMap$/;"	c	namespace:Spinnaker::GenApi
Spinnaker	include/AVIRecorder.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/ArrivalEvent.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/BasePtr.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/Camera.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/CameraBase.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/CameraDefs.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/CameraList.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/CameraPtr.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/ChunkData.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/DeviceEvent.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/Event.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/Exception.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/GUI/CameraSelection.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/GUI/CameraSelectionDlg.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/GUI/CameraSelectionWidget.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/GUI/PropertyGrid.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/GUI/PropertyGridDlg.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/GUI/PropertyGridWidget.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/GUI/SpinnakerGUI.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/GUI/SpinnakerGUI_GTKmm.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/GUI/SpinnakerGUI_WPF.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/GUI/Viewer.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/GUI/ViewerDlg.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/GUI/ViewerWidget.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/Image.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/ImageEvent.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/ImagePtr.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/ImageStatistics.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/Interface.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/InterfaceEvent.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/InterfaceList.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/InterfacePtr.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/LoggingEvent.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/LoggingEventData.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/LoggingEventDataPtr.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/RemovalEvent.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/Autovector.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/Base.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/BooleanNode.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/CategoryNode.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/ChunkAdapter.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/ChunkAdapterDcam.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/ChunkAdapterGEV.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/ChunkAdapterGeneric.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/ChunkAdapterU3V.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/ChunkPort.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/CommandNode.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/Container.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/Counter.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/EnumClasses.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/EnumEntryNode.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/EnumNode.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/EnumNodeT.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/EventAdapter.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/EventAdapter1394.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/EventAdapterGEV.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/EventAdapterGeneric.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/EventAdapterU3V.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/EventPort.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/Filestream.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/FloatNode.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/FloatRegNode.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/GCString.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/GCStringVector.h	/^namespace Spinnaker $/;"	n
Spinnaker	include/SpinGenApi/GCSynch.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/GCTypes.h	/^namespace Spinnaker $/;"	n
Spinnaker	include/SpinGenApi/GCUtilities.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/IBoolean.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/ICategory.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/IChunkPort.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/ICommand.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/IDestroy.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/IDeviceInfo.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/IEnumEntry.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/IEnumeration.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/IEnumerationT.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/IFloat.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/IInteger.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/INode.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/INodeMap.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/INodeMapDyn.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/IPort.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/IPortConstruct.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/IPortRecorder.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/IRegister.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/ISelector.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/ISelectorDigit.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/IString.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/IValue.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/IntRegNode.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/IntegerNode.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/Node.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/NodeCallback.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/NodeMap.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/NodeMapFactory.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/NodeMapRef.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/Persistence.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/Pointer.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/PortImpl.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/PortNode.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/PortRecorder.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/PortReplay.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/PortWriteList.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/Reference.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/RegisterNode.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/RegisterPortImpl.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/SelectorSet.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/SpinTestCamera.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/StringNode.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/StringRegNode.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/StructPort.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/Synch.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/Types.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinGenApi/ValueNode.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SpinnakerDefs.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/System.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/SystemPtr.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/TransportLayerDefs.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/TransportLayerDevice.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/TransportLayerInterface.h	/^namespace Spinnaker$/;"	n
Spinnaker	include/TransportLayerStream.h	/^namespace Spinnaker$/;"	n
SpinnakerLogLevel	include/SpinnakerDefs.h	/^	enum SpinnakerLogLevel$/;"	g	namespace:Spinnaker
Standard	include/SpinGenApi/Types.h	/^			Standard,           \/\/!< name resides in one of the standard namespaces$/;"	e	enum:Spinnaker::GenApi::_ENameSpace
Standard	include/spinc/SpinnakerGenApiDefsC.h	/^	Standard,           \/\/!< name resides in one of the standard namespaces$/;"	e	enum:_spinNameSpace
StatisticsChannel	include/SpinnakerDefs.h	/^	enum StatisticsChannel$/;"	g	namespace:Spinnaker
StreamBufferHandlingMode	include/TransportLayerStream.h	/^		GenApi::IEnumerationT<StreamBufferHandlingModeEnum> &StreamBufferHandlingMode;$/;"	m	class:Spinnaker::TransportLayerStream
StreamBufferHandlingMode	include/spinc/TransportLayerStreamC.h	/^	quickSpinEnumerationNode StreamBufferHandlingMode;$/;"	m	struct:_quickSpinTLStream
StreamBufferHandlingModeEnum	include/TransportLayerDefs.h	/^	enum StreamBufferHandlingModeEnum	\/*!< Available buffer handling modes of this data stream:*\/$/;"	g	namespace:Spinnaker
StreamBufferHandlingMode_NewestFirst	include/TransportLayerDefs.h	/^		StreamBufferHandlingMode_NewestFirst,	\/*!< The application always gets the buffer from the tail of the output buffer queue (thus, the newest available one). If the output buffer queue is empty, the application waits for a newly acquired buffer until the timeout expires.*\/$/;"	e	enum:Spinnaker::StreamBufferHandlingModeEnum
StreamBufferHandlingMode_NewestFirst	include/spinc/TransportLayerDefsC.h	/^	StreamBufferHandlingMode_NewestFirst,\/*!< The application always gets the buffer from the tail of the output buffer queue (thus, the newest available one). If the output buffer queue is empty, the application waits for a newly acquired buffer until the timeout expires.*\/$/;"	e	enum:_spinTLStreamBufferHandlingModeEnums
StreamBufferHandlingMode_NewestFirstOverwrite	include/TransportLayerDefs.h	/^		StreamBufferHandlingMode_NewestFirstOverwrite,	\/*!< The application always gets the buffer from the tail of the output buffer queue (thus, the newest available one). If the output buffer queue is empty, the application waits for a newly acquired buffer until the timeout expires. If a new buffer arrives it will overwrite the existing buffer from the tail of the queue.*\/$/;"	e	enum:Spinnaker::StreamBufferHandlingModeEnum
StreamBufferHandlingMode_NewestFirstOverwrite	include/spinc/TransportLayerDefsC.h	/^	StreamBufferHandlingMode_NewestFirstOverwrite,\/*!< The application always gets the buffer from the tail of the output buffer queue (thus, the newest available one). If the output buffer queue is empty, the application waits for a newly acquired buffer until the timeout expires. If a new buffer arrives it will overwrite the existing buffer from the tail of the queue.*\/$/;"	e	enum:_spinTLStreamBufferHandlingModeEnums
StreamBufferHandlingMode_OldestFirst	include/TransportLayerDefs.h	/^		StreamBufferHandlingMode_OldestFirst,	\/*!< The application always gets the buffer from the head of the output buffer queue (thus, the oldest available one). If the output buffer queue is empty, the application waits for a newly acquired buffer until the timeout expires.*\/$/;"	e	enum:Spinnaker::StreamBufferHandlingModeEnum
StreamBufferHandlingMode_OldestFirst	include/spinc/TransportLayerDefsC.h	/^	StreamBufferHandlingMode_OldestFirst,\/*!< The application always gets the buffer from the head of the output buffer queue (thus, the oldest available one). If the output buffer queue is empty, the application waits for a newly acquired buffer until the timeout expires.*\/$/;"	e	enum:_spinTLStreamBufferHandlingModeEnums
StreamBufferHandlingMode_OldestFirstOverwrite	include/TransportLayerDefs.h	/^		StreamBufferHandlingMode_OldestFirstOverwrite,	\/*!< The application always gets the buffer from the head of the output buffer queue (thus, the oldest available one). If the output buffer queue is empty, the application waits for a newly acquired buffer until the timeout expires. If a new buffer arrives it will overwrite the existing buffer from the head of the queue (behaves like a circular buffer).*\/$/;"	e	enum:Spinnaker::StreamBufferHandlingModeEnum
StreamBufferHandlingMode_OldestFirstOverwrite	include/spinc/TransportLayerDefsC.h	/^	StreamBufferHandlingMode_OldestFirstOverwrite,\/*!< The application always gets the buffer from the head of the output buffer queue (thus, the oldest available one). If the output buffer queue is empty, the application waits for a newly acquired buffer until the timeout expires. If a new buffer arrives it will overwrite the existing buffer from the head of the queue (behaves like a circular buffer).*\/$/;"	e	enum:_spinTLStreamBufferHandlingModeEnums
StreamBufferUnderrunCount	include/TransportLayerStream.h	/^		GenApi::IInteger &StreamBufferUnderrunCount;$/;"	m	class:Spinnaker::TransportLayerStream
StreamBufferUnderrunCount	include/spinc/TransportLayerStreamC.h	/^	quickSpinIntegerNode StreamBufferUnderrunCount;$/;"	m	struct:_quickSpinTLStream
StreamCRCCheckEnable	include/TransportLayerStream.h	/^		GenApi::IBoolean &StreamCRCCheckEnable;$/;"	m	class:Spinnaker::TransportLayerStream
StreamCRCCheckEnable	include/spinc/TransportLayerStreamC.h	/^	quickSpinBooleanNode StreamCRCCheckEnable;$/;"	m	struct:_quickSpinTLStream
StreamChannelId	include/SpinGenApi/EventAdapterGEV.h	/^        uint16_t StreamChannelId;$/;"	m	struct:Spinnaker::GenApi::GVCP_EVENT_ITEM
StreamChannelId	include/SpinGenApi/EventAdapterGEV.h	/^        uint16_t StreamChannelId;$/;"	m	struct:Spinnaker::GenApi::GVCP_EVENT_ITEM_EXTENDED_ID
StreamDefaultBufferCount	include/TransportLayerStream.h	/^		GenApi::IInteger &StreamDefaultBufferCount;$/;"	m	class:Spinnaker::TransportLayerStream
StreamDefaultBufferCount	include/spinc/TransportLayerStreamC.h	/^	quickSpinIntegerNode StreamDefaultBufferCount;$/;"	m	struct:_quickSpinTLStream
StreamDefaultBufferCountMax	include/TransportLayerStream.h	/^		GenApi::IInteger &StreamDefaultBufferCountMax;$/;"	m	class:Spinnaker::TransportLayerStream
StreamDefaultBufferCountMax	include/spinc/TransportLayerStreamC.h	/^	quickSpinIntegerNode StreamDefaultBufferCountMax;$/;"	m	struct:_quickSpinTLStream
StreamDefaultBufferCountMode	include/TransportLayerStream.h	/^		GenApi::IEnumerationT<StreamDefaultBufferCountModeEnum> &StreamDefaultBufferCountMode;$/;"	m	class:Spinnaker::TransportLayerStream
StreamDefaultBufferCountMode	include/spinc/TransportLayerStreamC.h	/^	quickSpinEnumerationNode StreamDefaultBufferCountMode;$/;"	m	struct:_quickSpinTLStream
StreamDefaultBufferCountModeEnum	include/TransportLayerDefs.h	/^	enum StreamDefaultBufferCountModeEnum	\/*!< Controls the number of buffers used for the stream.*\/$/;"	g	namespace:Spinnaker
StreamDefaultBufferCountMode_Auto	include/TransportLayerDefs.h	/^		StreamDefaultBufferCountMode_Auto,	\/*!< The number of buffers used for the stream is automatically calculated based on the device bandwidth.*\/$/;"	e	enum:Spinnaker::StreamDefaultBufferCountModeEnum
StreamDefaultBufferCountMode_Auto	include/spinc/TransportLayerDefsC.h	/^	StreamDefaultBufferCountMode_Auto,\/*!< The number of buffers used for the stream is automatically calculated based on the device bandwidth.*\/$/;"	e	enum:_spinTLStreamDefaultBufferCountModeEnums
StreamDefaultBufferCountMode_Manual	include/TransportLayerDefs.h	/^		StreamDefaultBufferCountMode_Manual,	\/*!< Controls the number of buffers used for the stream.*\/$/;"	e	enum:Spinnaker::StreamDefaultBufferCountModeEnum
StreamDefaultBufferCountMode_Manual	include/spinc/TransportLayerDefsC.h	/^	StreamDefaultBufferCountMode_Manual,\/*!< Controls the number of buffers used for the stream.*\/$/;"	e	enum:_spinTLStreamDefaultBufferCountModeEnums
StreamFailedBufferCount	include/TransportLayerStream.h	/^		GenApi::IInteger &StreamFailedBufferCount;$/;"	m	class:Spinnaker::TransportLayerStream
StreamFailedBufferCount	include/spinc/TransportLayerStreamC.h	/^	quickSpinIntegerNode StreamFailedBufferCount;$/;"	m	struct:_quickSpinTLStream
StreamID	include/TransportLayerStream.h	/^		GenApi::IString &StreamID;$/;"	m	class:Spinnaker::TransportLayerStream
StreamID	include/spinc/TransportLayerStreamC.h	/^	quickSpinStringNode StreamID;$/;"	m	struct:_quickSpinTLStream
StreamTotalBufferCount	include/TransportLayerStream.h	/^		GenApi::IInteger &StreamTotalBufferCount;$/;"	m	class:Spinnaker::TransportLayerStream
StreamTotalBufferCount	include/spinc/TransportLayerStreamC.h	/^	quickSpinIntegerNode StreamTotalBufferCount;$/;"	m	struct:_quickSpinTLStream
StreamType	include/TransportLayerStream.h	/^		GenApi::IEnumerationT<StreamTypeEnum> &StreamType;$/;"	m	class:Spinnaker::TransportLayerStream
StreamType	include/spinc/TransportLayerStreamC.h	/^	quickSpinEnumerationNode StreamType;$/;"	m	struct:_quickSpinTLStream
StreamTypeEnum	include/TransportLayerDefs.h	/^	enum StreamTypeEnum	\/*!< Stream type of the device.*\/$/;"	g	namespace:Spinnaker
StreamType_CL	include/TransportLayerDefs.h	/^		StreamType_CL,	\/*!< Stream Type - CL*\/$/;"	e	enum:Spinnaker::StreamTypeEnum
StreamType_CL	include/spinc/TransportLayerDefsC.h	/^	StreamType_CL,\/*!< Stream Type - CL*\/$/;"	e	enum:_spinTLStreamTypeEnums
StreamType_CLHS	include/TransportLayerDefs.h	/^		StreamType_CLHS,	\/*!< Stream Type - CLHS*\/$/;"	e	enum:Spinnaker::StreamTypeEnum
StreamType_CLHS	include/spinc/TransportLayerDefsC.h	/^	StreamType_CLHS,\/*!< Stream Type - CLHS*\/$/;"	e	enum:_spinTLStreamTypeEnums
StreamType_CXP	include/TransportLayerDefs.h	/^		StreamType_CXP,	\/*!< Stream Type - CXP*\/$/;"	e	enum:Spinnaker::StreamTypeEnum
StreamType_CXP	include/spinc/TransportLayerDefsC.h	/^	StreamType_CXP,\/*!< Stream Type - CXP*\/$/;"	e	enum:_spinTLStreamTypeEnums
StreamType_Custom	include/TransportLayerDefs.h	/^		StreamType_Custom,	\/*!< Stream Type - Custom*\/$/;"	e	enum:Spinnaker::StreamTypeEnum
StreamType_Custom	include/spinc/TransportLayerDefsC.h	/^	StreamType_Custom,\/*!< Stream Type - Custom*\/$/;"	e	enum:_spinTLStreamTypeEnums
StreamType_ETHERNET	include/TransportLayerDefs.h	/^		StreamType_ETHERNET,	\/*!< Stream Type - ETHERNET*\/$/;"	e	enum:Spinnaker::StreamTypeEnum
StreamType_ETHERNET	include/spinc/TransportLayerDefsC.h	/^	StreamType_ETHERNET,\/*!< Stream Type - ETHERNET*\/$/;"	e	enum:_spinTLStreamTypeEnums
StreamType_GEV	include/TransportLayerDefs.h	/^		StreamType_GEV,	\/*!< Stream Type - GEV*\/$/;"	e	enum:Spinnaker::StreamTypeEnum
StreamType_GEV	include/spinc/TransportLayerDefsC.h	/^	StreamType_GEV,\/*!< Stream Type - GEV*\/$/;"	e	enum:_spinTLStreamTypeEnums
StreamType_IIDC	include/TransportLayerDefs.h	/^		StreamType_IIDC,	\/*!< Stream Type - IIDC*\/$/;"	e	enum:Spinnaker::StreamTypeEnum
StreamType_IIDC	include/spinc/TransportLayerDefsC.h	/^	StreamType_IIDC,\/*!< Stream Type - IIDC*\/$/;"	e	enum:_spinTLStreamTypeEnums
StreamType_Mixed	include/TransportLayerDefs.h	/^		StreamType_Mixed,	\/*!< Stream Type - Mixed*\/$/;"	e	enum:Spinnaker::StreamTypeEnum
StreamType_Mixed	include/spinc/TransportLayerDefsC.h	/^	StreamType_Mixed,\/*!< Stream Type - Mixed*\/$/;"	e	enum:_spinTLStreamTypeEnums
StreamType_PCI	include/TransportLayerDefs.h	/^		StreamType_PCI,	\/*!< Stream Type - PCI*\/$/;"	e	enum:Spinnaker::StreamTypeEnum
StreamType_PCI	include/spinc/TransportLayerDefsC.h	/^	StreamType_PCI,\/*!< Stream Type - PCI*\/$/;"	e	enum:_spinTLStreamTypeEnums
StreamType_U3V	include/TransportLayerDefs.h	/^		StreamType_U3V,	\/*!< Stream Type - U3V*\/$/;"	e	enum:Spinnaker::StreamTypeEnum
StreamType_U3V	include/spinc/TransportLayerDefsC.h	/^	StreamType_U3V,\/*!< Stream Type - U3V*\/$/;"	e	enum:_spinTLStreamTypeEnums
StreamType_UVC	include/TransportLayerDefs.h	/^		StreamType_UVC,	\/*!< Stream Type - UVC*\/$/;"	e	enum:Spinnaker::StreamTypeEnum
StreamType_UVC	include/spinc/TransportLayerDefsC.h	/^	StreamType_UVC,\/*!< Stream Type - UVC*\/$/;"	e	enum:_spinTLStreamTypeEnums
StringList_t	include/SpinGenApi/Types.h	/^		typedef GenICam::gcstring_vector StringList_t;$/;"	t	namespace:Spinnaker::GenApi
StringNode	include/SpinGenApi/StringNode.h	/^        class SPINNAKER_API StringNode : virtual public IString, virtual public ValueNode$/;"	c	namespace:Spinnaker::GenApi
StringNode	include/spinc/SpinnakerGenApiDefsC.h	/^	StringNode,$/;"	e	enum:_spinNodeType
StringRegNode	include/SpinGenApi/StringRegNode.h	/^		class SPINNAKER_API StringRegNode : virtual public StringNode, virtual public RegisterNode$/;"	c	namespace:Spinnaker::GenApi
SubMinor	include/SpinGenApi/GCTypes.h	/^			uint16_t SubMinor;     \/\/!> a is aways compatible with b$/;"	m	struct:Spinnaker::GenICam::Version_t
System	include/System.h	/^    class SPINNAKER_API System$/;"	c	namespace:Spinnaker
SystemEventHandler	SpinnakerTest/EnumerationEvents/EnumerationEvents.cpp	/^	SystemEventHandler(SystemPtr system) : m_system(system) {};$/;"	f	class:SystemEventHandler
SystemEventHandler	SpinnakerTest/EnumerationEvents/EnumerationEvents.cpp	/^class SystemEventHandler : public ArrivalEvent, public RemovalEvent$/;"	c	file:
SystemEventHandler	src/EnumerationEvents/EnumerationEvents.cpp	/^	SystemEventHandler(SystemPtr system) : m_system(system) {};$/;"	f	class:SystemEventHandler
SystemEventHandler	src/EnumerationEvents/EnumerationEvents.cpp	/^class SystemEventHandler : public ArrivalEvent, public RemovalEvent$/;"	c	file:
SystemPtr	include/SystemPtr.h	/^	class SPINNAKER_API SystemPtr : public BasePtr<System>$/;"	c	namespace:Spinnaker
T	include/SpinGenApi/Container.h	/^			typedef INode* T;$/;"	t	class:Spinnaker::GenApi::node_vector
T	include/SpinGenApi/Container.h	/^			typedef IValue* T;$/;"	t	class:Spinnaker::GenApi::value_vector
TAG_EVENTDATA_CMD	include/SpinGenApi/EventAdapterGEV.h	/^        TAG_EVENTDATA_CMD     = 0xc2$/;"	e	enum:Spinnaker::GenApi::GVCP_MESSAGE_TAGS
TAG_EVENT_CMD	include/SpinGenApi/EventAdapterGEV.h	/^        TAG_EVENT_CMD         = 0xc0,$/;"	e	enum:Spinnaker::GenApi::GVCP_MESSAGE_TAGS
TIFF	include/SpinnakerDefs.h	/^		TIFF, \/**< Tagged image file format. *\/$/;"	e	enum:Spinnaker::ImageFileFormat
TIFF	include/spinc/SpinnakerDefsC.h	/^	TIFF, \/**< Tagged image file format. *\/$/;"	e	enum:_spinImageFileFormat
TIFFOption	include/SpinnakerDefs.h	/^        TIFFOption()$/;"	f	struct:Spinnaker::TIFFOption
TIFFOption	include/SpinnakerDefs.h	/^    struct TIFFOption$/;"	s	namespace:Spinnaker
TLDevice	include/CameraBase.h	/^		TransportLayerDevice TLDevice;$/;"	m	class:Spinnaker::CameraBase
TLInterface	include/Interface.h	/^		TransportLayerInterface TLInterface;$/;"	m	class:Spinnaker::Interface
TLStream	include/CameraBase.h	/^		TransportLayerStream TLStream;$/;"	m	class:Spinnaker::CameraBase
TRUE	include/PtGreyVideoEncoder.h	34;"	d
TestEventGenerate	include/Camera.h	/^		GenApi::ICommand &TestEventGenerate;$/;"	m	class:Spinnaker::Camera
TestEventGenerate	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode TestEventGenerate;$/;"	m	struct:_quickSpin
TestPattern	include/Camera.h	/^		GenApi::IEnumerationT<TestPatternEnums> &TestPattern;$/;"	m	class:Spinnaker::Camera
TestPattern	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode TestPattern;$/;"	m	struct:_quickSpin
TestPatternEnums	include/CameraDefs.h	/^	enum TestPatternEnums	\/*!< Selects the type of test pattern that is generated by the device as image source.*\/$/;"	g	namespace:Spinnaker
TestPatternGeneratorSelector	include/Camera.h	/^		GenApi::IEnumerationT<TestPatternGeneratorSelectorEnums> &TestPatternGeneratorSelector;$/;"	m	class:Spinnaker::Camera
TestPatternGeneratorSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode TestPatternGeneratorSelector;$/;"	m	struct:_quickSpin
TestPatternGeneratorSelectorEnums	include/CameraDefs.h	/^	enum TestPatternGeneratorSelectorEnums	\/*!< Selects which test pattern generator is controlled by the TestPattern feature.*\/$/;"	g	namespace:Spinnaker
TestPatternGeneratorSelector_Region0	include/CameraDefs.h	/^		TestPatternGeneratorSelector_Region0,	\/*!< TestPattern feature will control the region 0 test pattern generator.*\/$/;"	e	enum:Spinnaker::TestPatternGeneratorSelectorEnums
TestPatternGeneratorSelector_Region0	include/spinc/CameraDefsC.h	/^	TestPatternGeneratorSelector_Region0,	\/*!< TestPattern feature will control the region 0 test pattern generator.*\/$/;"	e	enum:_spinTestPatternGeneratorSelectorEnums
TestPatternGeneratorSelector_Region1	include/CameraDefs.h	/^		TestPatternGeneratorSelector_Region1,	\/*!< TestPattern feature will control the region 1 test pattern generator.*\/$/;"	e	enum:Spinnaker::TestPatternGeneratorSelectorEnums
TestPatternGeneratorSelector_Region1	include/spinc/CameraDefsC.h	/^	TestPatternGeneratorSelector_Region1,	\/*!< TestPattern feature will control the region 1 test pattern generator.*\/$/;"	e	enum:_spinTestPatternGeneratorSelectorEnums
TestPatternGeneratorSelector_Region2	include/CameraDefs.h	/^		TestPatternGeneratorSelector_Region2,	\/*!< TestPattern feature will control the region 2 test pattern generator.*\/$/;"	e	enum:Spinnaker::TestPatternGeneratorSelectorEnums
TestPatternGeneratorSelector_Region2	include/spinc/CameraDefsC.h	/^	TestPatternGeneratorSelector_Region2,	\/*!< TestPattern feature will control the region 2 test pattern generator.*\/$/;"	e	enum:_spinTestPatternGeneratorSelectorEnums
TestPatternGeneratorSelector_Sensor	include/CameraDefs.h	/^		TestPatternGeneratorSelector_Sensor,	\/*!< TestPattern feature will control the sensor's test pattern generator.*\/$/;"	e	enum:Spinnaker::TestPatternGeneratorSelectorEnums
TestPatternGeneratorSelector_Sensor	include/spinc/CameraDefsC.h	/^	TestPatternGeneratorSelector_Sensor,	\/*!< TestPattern feature will control the sensor's test pattern generator.*\/$/;"	e	enum:_spinTestPatternGeneratorSelectorEnums
TestPattern_Black	include/CameraDefs.h	/^		TestPattern_Black,	\/*!< Image is filled with the darkest possible image.*\/$/;"	e	enum:Spinnaker::TestPatternEnums
TestPattern_Black	include/spinc/CameraDefsC.h	/^	TestPattern_Black,	\/*!< Image is filled with the darkest possible image.*\/$/;"	e	enum:_spinTestPatternEnums
TestPattern_ColorBar	include/CameraDefs.h	/^		TestPattern_ColorBar,	\/*!< Image is filled with stripes of color including White, Black, Red, Green, Blue, Cyan, Magenta and Yellow.*\/$/;"	e	enum:Spinnaker::TestPatternEnums
TestPattern_ColorBar	include/spinc/CameraDefsC.h	/^	TestPattern_ColorBar,	\/*!< Image is filled with stripes of color including White, Black, Red, Green, Blue, Cyan, Magenta and Yellow.*\/$/;"	e	enum:_spinTestPatternEnums
TestPattern_FrameCounter	include/CameraDefs.h	/^		TestPattern_FrameCounter,	\/*!< A frame counter is superimposed on the live image.*\/$/;"	e	enum:Spinnaker::TestPatternEnums
TestPattern_FrameCounter	include/spinc/CameraDefsC.h	/^	TestPattern_FrameCounter,	\/*!< A frame counter is superimposed on the live image.*\/$/;"	e	enum:_spinTestPatternEnums
TestPattern_GreyHorizontalRamp	include/CameraDefs.h	/^		TestPattern_GreyHorizontalRamp,	\/*!< Image is filled horizontally with an image that goes from the darkest possible value to the brightest.*\/$/;"	e	enum:Spinnaker::TestPatternEnums
TestPattern_GreyHorizontalRamp	include/spinc/CameraDefsC.h	/^	TestPattern_GreyHorizontalRamp,	\/*!< Image is filled horizontally with an image that goes from the darkest possible value to the brightest.*\/$/;"	e	enum:_spinTestPatternEnums
TestPattern_GreyHorizontalRampMoving	include/CameraDefs.h	/^		TestPattern_GreyHorizontalRampMoving,	\/*!< Image is filled horizontally with an image that goes from the darkest possible value to the brightest and that moves horizontally from left to right at each frame.*\/$/;"	e	enum:Spinnaker::TestPatternEnums
TestPattern_GreyHorizontalRampMoving	include/spinc/CameraDefsC.h	/^	TestPattern_GreyHorizontalRampMoving,	\/*!< Image is filled horizontally with an image that goes from the darkest possible value to the brightest and that moves horizontally from left to right at each frame.*\/$/;"	e	enum:_spinTestPatternEnums
TestPattern_GreyVerticalRamp	include/CameraDefs.h	/^		TestPattern_GreyVerticalRamp,	\/*!< Image is filled vertically with an image that goes from the darkest possible value to the brightest.*\/$/;"	e	enum:Spinnaker::TestPatternEnums
TestPattern_GreyVerticalRamp	include/spinc/CameraDefsC.h	/^	TestPattern_GreyVerticalRamp,	\/*!< Image is filled vertically with an image that goes from the darkest possible value to the brightest.*\/$/;"	e	enum:_spinTestPatternEnums
TestPattern_GreyVerticalRampMoving	include/CameraDefs.h	/^		TestPattern_GreyVerticalRampMoving,	\/*!< Image is filled vertically with an image that goes from the darkest possible value to the brightest and that moves verticaly from top to bottom at each frame.*\/$/;"	e	enum:Spinnaker::TestPatternEnums
TestPattern_GreyVerticalRampMoving	include/spinc/CameraDefsC.h	/^	TestPattern_GreyVerticalRampMoving,	\/*!< Image is filled vertically with an image that goes from the darkest possible value to the brightest and that moves verticaly from top to bottom at each frame.*\/$/;"	e	enum:_spinTestPatternEnums
TestPattern_HorizontalLineMoving	include/CameraDefs.h	/^		TestPattern_HorizontalLineMoving,	\/*!< A moving horizontal line is superimposed on the live image.*\/$/;"	e	enum:Spinnaker::TestPatternEnums
TestPattern_HorizontalLineMoving	include/spinc/CameraDefsC.h	/^	TestPattern_HorizontalLineMoving,	\/*!< A moving horizontal line is superimposed on the live image.*\/$/;"	e	enum:_spinTestPatternEnums
TestPattern_Off	include/CameraDefs.h	/^		TestPattern_Off,	\/*!< Image is coming from the sensor.*\/$/;"	e	enum:Spinnaker::TestPatternEnums
TestPattern_Off	include/spinc/CameraDefsC.h	/^	TestPattern_Off,	\/*!< Image is coming from the sensor.*\/$/;"	e	enum:_spinTestPatternEnums
TestPattern_VerticalLineMoving	include/CameraDefs.h	/^		TestPattern_VerticalLineMoving,	\/*!< A moving vertical line is superimposed on the live image.*\/$/;"	e	enum:Spinnaker::TestPatternEnums
TestPattern_VerticalLineMoving	include/spinc/CameraDefsC.h	/^	TestPattern_VerticalLineMoving,	\/*!< A moving vertical line is superimposed on the live image.*\/$/;"	e	enum:_spinTestPatternEnums
TestPattern_White	include/CameraDefs.h	/^		TestPattern_White,	\/*!< Image is filled with the brightest possible image.*\/$/;"	e	enum:Spinnaker::TestPatternEnums
TestPattern_White	include/spinc/CameraDefsC.h	/^	TestPattern_White,	\/*!< Image is filled with the brightest possible image.*\/$/;"	e	enum:_spinTestPatternEnums
TestPendingAck	include/Camera.h	/^		GenApi::IInteger &TestPendingAck;$/;"	m	class:Spinnaker::Camera
TestPendingAck	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode TestPendingAck;$/;"	m	struct:_quickSpin
TimerDelay	include/Camera.h	/^		GenApi::IFloat &TimerDelay;$/;"	m	class:Spinnaker::Camera
TimerDelay	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode TimerDelay;$/;"	m	struct:_quickSpin
TimerDuration	include/Camera.h	/^		GenApi::IFloat &TimerDuration;$/;"	m	class:Spinnaker::Camera
TimerDuration	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode TimerDuration;$/;"	m	struct:_quickSpin
TimerReset	include/Camera.h	/^		GenApi::ICommand &TimerReset;$/;"	m	class:Spinnaker::Camera
TimerReset	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode TimerReset;$/;"	m	struct:_quickSpin
TimerSelector	include/Camera.h	/^		GenApi::IEnumerationT<TimerSelectorEnums> &TimerSelector;$/;"	m	class:Spinnaker::Camera
TimerSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode TimerSelector;$/;"	m	struct:_quickSpin
TimerSelectorEnums	include/CameraDefs.h	/^	enum TimerSelectorEnums	\/*!< Selects which Timer to configure.*\/$/;"	g	namespace:Spinnaker
TimerSelector_Timer0	include/CameraDefs.h	/^		TimerSelector_Timer0,	\/*!< Selects the Timer 0.*\/$/;"	e	enum:Spinnaker::TimerSelectorEnums
TimerSelector_Timer0	include/spinc/CameraDefsC.h	/^	TimerSelector_Timer0,	\/*!< Selects the Timer 0.*\/$/;"	e	enum:_spinTimerSelectorEnums
TimerSelector_Timer1	include/CameraDefs.h	/^		TimerSelector_Timer1,	\/*!< Selects the Timer 1.*\/$/;"	e	enum:Spinnaker::TimerSelectorEnums
TimerSelector_Timer1	include/spinc/CameraDefsC.h	/^	TimerSelector_Timer1,	\/*!< Selects the Timer 1.*\/$/;"	e	enum:_spinTimerSelectorEnums
TimerSelector_Timer2	include/CameraDefs.h	/^		TimerSelector_Timer2,	\/*!< Selects the Timer 2.*\/$/;"	e	enum:Spinnaker::TimerSelectorEnums
TimerSelector_Timer2	include/spinc/CameraDefsC.h	/^	TimerSelector_Timer2,	\/*!< Selects the Timer 2.*\/$/;"	e	enum:_spinTimerSelectorEnums
TimerStatus	include/Camera.h	/^		GenApi::IEnumerationT<TimerStatusEnums> &TimerStatus;$/;"	m	class:Spinnaker::Camera
TimerStatus	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode TimerStatus;$/;"	m	struct:_quickSpin
TimerStatusEnums	include/CameraDefs.h	/^	enum TimerStatusEnums	\/*!< Returns the current status of the Timer.*\/$/;"	g	namespace:Spinnaker
TimerStatus_TimerActive	include/CameraDefs.h	/^		TimerStatus_TimerActive,	\/*!< The Timer is counting for the specified duration.*\/$/;"	e	enum:Spinnaker::TimerStatusEnums
TimerStatus_TimerActive	include/spinc/CameraDefsC.h	/^	TimerStatus_TimerActive,	\/*!< The Timer is counting for the specified duration.*\/$/;"	e	enum:_spinTimerStatusEnums
TimerStatus_TimerCompleted	include/CameraDefs.h	/^		TimerStatus_TimerCompleted,	\/*!< The Timer reached the TimerDuration count.*\/$/;"	e	enum:Spinnaker::TimerStatusEnums
TimerStatus_TimerCompleted	include/spinc/CameraDefsC.h	/^	TimerStatus_TimerCompleted,	\/*!< The Timer reached the TimerDuration count.*\/$/;"	e	enum:_spinTimerStatusEnums
TimerStatus_TimerIdle	include/CameraDefs.h	/^		TimerStatus_TimerIdle,	\/*!< The Timer is idle.*\/$/;"	e	enum:Spinnaker::TimerStatusEnums
TimerStatus_TimerIdle	include/spinc/CameraDefsC.h	/^	TimerStatus_TimerIdle,	\/*!< The Timer is idle.*\/$/;"	e	enum:_spinTimerStatusEnums
TimerStatus_TimerTriggerWait	include/CameraDefs.h	/^		TimerStatus_TimerTriggerWait,	\/*!< The Timer is waiting for a start trigger.*\/$/;"	e	enum:Spinnaker::TimerStatusEnums
TimerStatus_TimerTriggerWait	include/spinc/CameraDefsC.h	/^	TimerStatus_TimerTriggerWait,	\/*!< The Timer is waiting for a start trigger.*\/$/;"	e	enum:_spinTimerStatusEnums
TimerTriggerActivation	include/Camera.h	/^		GenApi::IEnumerationT<TimerTriggerActivationEnums> &TimerTriggerActivation;$/;"	m	class:Spinnaker::Camera
TimerTriggerActivation	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode TimerTriggerActivation;$/;"	m	struct:_quickSpin
TimerTriggerActivationEnums	include/CameraDefs.h	/^	enum TimerTriggerActivationEnums	\/*!< Selects the activation mode of the trigger to start the Timer.*\/$/;"	g	namespace:Spinnaker
TimerTriggerActivation_AnyEdge	include/CameraDefs.h	/^		TimerTriggerActivation_AnyEdge,	\/*!< Starts counting on the Falling or Rising Edge of the selected trigger signal.*\/$/;"	e	enum:Spinnaker::TimerTriggerActivationEnums
TimerTriggerActivation_AnyEdge	include/spinc/CameraDefsC.h	/^	TimerTriggerActivation_AnyEdge,	\/*!< Starts counting on the Falling or Rising Edge of the selected trigger signal.*\/$/;"	e	enum:_spinTimerTriggerActivationEnums
TimerTriggerActivation_FallingEdge	include/CameraDefs.h	/^		TimerTriggerActivation_FallingEdge,	\/*!< Starts counting on the Falling Edge of the selected trigger signal.*\/$/;"	e	enum:Spinnaker::TimerTriggerActivationEnums
TimerTriggerActivation_FallingEdge	include/spinc/CameraDefsC.h	/^	TimerTriggerActivation_FallingEdge,	\/*!< Starts counting on the Falling Edge of the selected trigger signal.*\/$/;"	e	enum:_spinTimerTriggerActivationEnums
TimerTriggerActivation_LevelHigh	include/CameraDefs.h	/^		TimerTriggerActivation_LevelHigh,	\/*!< Counts as long as the selected trigger signal level is High.*\/$/;"	e	enum:Spinnaker::TimerTriggerActivationEnums
TimerTriggerActivation_LevelHigh	include/spinc/CameraDefsC.h	/^	TimerTriggerActivation_LevelHigh,	\/*!< Counts as long as the selected trigger signal level is High.*\/$/;"	e	enum:_spinTimerTriggerActivationEnums
TimerTriggerActivation_LevelLow	include/CameraDefs.h	/^		TimerTriggerActivation_LevelLow,	\/*!< Counts as long as the selected trigger signal level is Low.*\/$/;"	e	enum:Spinnaker::TimerTriggerActivationEnums
TimerTriggerActivation_LevelLow	include/spinc/CameraDefsC.h	/^	TimerTriggerActivation_LevelLow,	\/*!< Counts as long as the selected trigger signal level is Low.*\/$/;"	e	enum:_spinTimerTriggerActivationEnums
TimerTriggerActivation_RisingEdge	include/CameraDefs.h	/^		TimerTriggerActivation_RisingEdge,	\/*!< Starts counting on the Rising Edge of the selected trigger signal.*\/$/;"	e	enum:Spinnaker::TimerTriggerActivationEnums
TimerTriggerActivation_RisingEdge	include/spinc/CameraDefsC.h	/^	TimerTriggerActivation_RisingEdge,	\/*!< Starts counting on the Rising Edge of the selected trigger signal.*\/$/;"	e	enum:_spinTimerTriggerActivationEnums
TimerTriggerSource	include/Camera.h	/^		GenApi::IEnumerationT<TimerTriggerSourceEnums> &TimerTriggerSource;$/;"	m	class:Spinnaker::Camera
TimerTriggerSource	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode TimerTriggerSource;$/;"	m	struct:_quickSpin
TimerTriggerSourceEnums	include/CameraDefs.h	/^	enum TimerTriggerSourceEnums	\/*!< Selects the source of the trigger to start the Timer.*\/$/;"	g	namespace:Spinnaker
TimerTriggerSource_AcquisitionEnd	include/CameraDefs.h	/^		TimerTriggerSource_AcquisitionEnd,	\/*!< Starts with the reception of the Acquisition End.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_AcquisitionEnd	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_AcquisitionEnd,	\/*!< Starts with the reception of the Acquisition End.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_AcquisitionStart	include/CameraDefs.h	/^		TimerTriggerSource_AcquisitionStart,	\/*!< Starts with the reception of the Acquisition Start.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_AcquisitionStart	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_AcquisitionStart,	\/*!< Starts with the reception of the Acquisition Start.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_AcquisitionTrigger	include/CameraDefs.h	/^		TimerTriggerSource_AcquisitionTrigger,	\/*!< Starts with the reception of the Acquisition Trigger.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_AcquisitionTrigger	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_AcquisitionTrigger,	\/*!< Starts with the reception of the Acquisition Trigger.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_Action0	include/CameraDefs.h	/^		TimerTriggerSource_Action0,	\/*!< Starts with the assertion of the chosen action signal.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_Action0	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_Action0,	\/*!< Starts with the assertion of the chosen action signal.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_Action1	include/CameraDefs.h	/^		TimerTriggerSource_Action1,	\/*!< Starts with the assertion of the chosen action signal.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_Action1	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_Action1,	\/*!< Starts with the assertion of the chosen action signal.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_Action2	include/CameraDefs.h	/^		TimerTriggerSource_Action2,	\/*!< Starts with the assertion of the chosen action signal.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_Action2	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_Action2,	\/*!< Starts with the assertion of the chosen action signal.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_Counter0End	include/CameraDefs.h	/^		TimerTriggerSource_Counter0End,	\/*!< Starts with the reception of the Counter End.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_Counter0End	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_Counter0End,	\/*!< Starts with the reception of the Counter End.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_Counter0Start	include/CameraDefs.h	/^		TimerTriggerSource_Counter0Start,	\/*!< Starts with the reception of the Counter Start.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_Counter0Start	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_Counter0Start,	\/*!< Starts with the reception of the Counter Start.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_Counter1End	include/CameraDefs.h	/^		TimerTriggerSource_Counter1End,	\/*!< Starts with the reception of the Counter End.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_Counter1End	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_Counter1End,	\/*!< Starts with the reception of the Counter End.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_Counter1Start	include/CameraDefs.h	/^		TimerTriggerSource_Counter1Start,	\/*!< Starts with the reception of the Counter Start.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_Counter1Start	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_Counter1Start,	\/*!< Starts with the reception of the Counter Start.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_Counter2End	include/CameraDefs.h	/^		TimerTriggerSource_Counter2End,	\/*!< Starts with the reception of the Counter End.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_Counter2End	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_Counter2End,	\/*!< Starts with the reception of the Counter End.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_Counter2Start	include/CameraDefs.h	/^		TimerTriggerSource_Counter2Start,	\/*!< Starts with the reception of the Counter Start.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_Counter2Start	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_Counter2Start,	\/*!< Starts with the reception of the Counter Start.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_Encoder0	include/CameraDefs.h	/^		TimerTriggerSource_Encoder0,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_Encoder0	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_Encoder0,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_Encoder1	include/CameraDefs.h	/^		TimerTriggerSource_Encoder1,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_Encoder1	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_Encoder1,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_Encoder2	include/CameraDefs.h	/^		TimerTriggerSource_Encoder2,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_Encoder2	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_Encoder2,	\/*!< Starts with the reception of the Encoder output signal.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_ExposureEnd	include/CameraDefs.h	/^		TimerTriggerSource_ExposureEnd,	\/*!< Starts with the reception of the Exposure End.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_ExposureEnd	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_ExposureEnd,	\/*!< Starts with the reception of the Exposure End.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_ExposureStart	include/CameraDefs.h	/^		TimerTriggerSource_ExposureStart,	\/*!< Starts with the reception of the Exposure Start.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_ExposureStart	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_ExposureStart,	\/*!< Starts with the reception of the Exposure Start.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_FrameBurstEnd	include/CameraDefs.h	/^		TimerTriggerSource_FrameBurstEnd,	\/*!< Starts with the reception of the Frame Burst End.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_FrameBurstEnd	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_FrameBurstEnd,	\/*!< Starts with the reception of the Frame Burst End.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_FrameBurstStart	include/CameraDefs.h	/^		TimerTriggerSource_FrameBurstStart,	\/*!< Starts with the reception of the Frame Burst Start.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_FrameBurstStart	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_FrameBurstStart,	\/*!< Starts with the reception of the Frame Burst Start.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_FrameEnd	include/CameraDefs.h	/^		TimerTriggerSource_FrameEnd,	\/*!< Starts with the reception of the Frame End.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_FrameEnd	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_FrameEnd,	\/*!< Starts with the reception of the Frame End.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_FrameStart	include/CameraDefs.h	/^		TimerTriggerSource_FrameStart,	\/*!< Starts with the reception of the Frame Start.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_FrameStart	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_FrameStart,	\/*!< Starts with the reception of the Frame Start.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_FrameTrigger	include/CameraDefs.h	/^		TimerTriggerSource_FrameTrigger,	\/*!< Starts with the reception of the Frame Start Trigger.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_FrameTrigger	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_FrameTrigger,	\/*!< Starts with the reception of the Frame Start Trigger.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_Line0	include/CameraDefs.h	/^		TimerTriggerSource_Line0,	\/*!< Starts when the specidfied TimerTriggerActivation condition is met on the chosen I\/O Line.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_Line0	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_Line0,	\/*!< Starts when the specidfied TimerTriggerActivation condition is met on the chosen I\/O Line.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_Line1	include/CameraDefs.h	/^		TimerTriggerSource_Line1,	\/*!< Starts when the specidfied TimerTriggerActivation condition is met on the chosen I\/O Line.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_Line1	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_Line1,	\/*!< Starts when the specidfied TimerTriggerActivation condition is met on the chosen I\/O Line.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_Line2	include/CameraDefs.h	/^		TimerTriggerSource_Line2,	\/*!< Starts when the specidfied TimerTriggerActivation condition is met on the chosen I\/O Line.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_Line2	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_Line2,	\/*!< Starts when the specidfied TimerTriggerActivation condition is met on the chosen I\/O Line.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_LineEnd	include/CameraDefs.h	/^		TimerTriggerSource_LineEnd,	\/*!< Starts with the reception of the Line End.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_LineEnd	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_LineEnd,	\/*!< Starts with the reception of the Line End.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_LineStart	include/CameraDefs.h	/^		TimerTriggerSource_LineStart,	\/*!< Starts with the reception of the Line Start.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_LineStart	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_LineStart,	\/*!< Starts with the reception of the Line Start.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_LineTrigger	include/CameraDefs.h	/^		TimerTriggerSource_LineTrigger,	\/*!< Starts with the reception of the Line Start Trigger.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_LineTrigger	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_LineTrigger,	\/*!< Starts with the reception of the Line Start Trigger.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_LinkTrigger0	include/CameraDefs.h	/^		TimerTriggerSource_LinkTrigger0,	\/*!< Starts with the reception of the chosen Link Trigger.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_LinkTrigger0	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_LinkTrigger0,	\/*!< Starts with the reception of the chosen Link Trigger.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_LinkTrigger1	include/CameraDefs.h	/^		TimerTriggerSource_LinkTrigger1,	\/*!< Starts with the reception of the chosen Link Trigger.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_LinkTrigger1	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_LinkTrigger1,	\/*!< Starts with the reception of the chosen Link Trigger.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_LinkTrigger2	include/CameraDefs.h	/^		TimerTriggerSource_LinkTrigger2,	\/*!< Starts with the reception of the chosen Link Trigger.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_LinkTrigger2	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_LinkTrigger2,	\/*!< Starts with the reception of the chosen Link Trigger.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_Off	include/CameraDefs.h	/^		TimerTriggerSource_Off,	\/*!< Disables the Timer trigger.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_Off	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_Off,	\/*!< Disables the Timer trigger.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_SoftwareSignal0	include/CameraDefs.h	/^		TimerTriggerSource_SoftwareSignal0,	\/*!< Starts on the reception of the Software Signal.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_SoftwareSignal0	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_SoftwareSignal0,	\/*!< Starts on the reception of the Software Signal.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_SoftwareSignal1	include/CameraDefs.h	/^		TimerTriggerSource_SoftwareSignal1,	\/*!< Starts on the reception of the Software Signal.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_SoftwareSignal1	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_SoftwareSignal1,	\/*!< Starts on the reception of the Software Signal.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_SoftwareSignal2	include/CameraDefs.h	/^		TimerTriggerSource_SoftwareSignal2,	\/*!< Starts on the reception of the Software Signal.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_SoftwareSignal2	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_SoftwareSignal2,	\/*!< Starts on the reception of the Software Signal.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_Timer0End	include/CameraDefs.h	/^		TimerTriggerSource_Timer0End,	\/*!< Starts with the reception of the Timer End. Note that a timer can retrigger itself to achieve a free running Timer.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_Timer0End	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_Timer0End,	\/*!< Starts with the reception of the Timer End. Note that a timer can retrigger itself to achieve a free running Timer.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_Timer0Start	include/CameraDefs.h	/^		TimerTriggerSource_Timer0Start,	\/*!< Starts with the reception of the Timer Start.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_Timer0Start	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_Timer0Start,	\/*!< Starts with the reception of the Timer Start.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_Timer1End	include/CameraDefs.h	/^		TimerTriggerSource_Timer1End,	\/*!< Starts with the reception of the Timer End. Note that a timer can retrigger itself to achieve a free running Timer.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_Timer1End	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_Timer1End,	\/*!< Starts with the reception of the Timer End. Note that a timer can retrigger itself to achieve a free running Timer.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_Timer1Start	include/CameraDefs.h	/^		TimerTriggerSource_Timer1Start,	\/*!< Starts with the reception of the Timer Start.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_Timer1Start	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_Timer1Start,	\/*!< Starts with the reception of the Timer Start.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_Timer2End	include/CameraDefs.h	/^		TimerTriggerSource_Timer2End,	\/*!< Starts with the reception of the Timer End. Note that a timer can retrigger itself to achieve a free running Timer.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_Timer2End	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_Timer2End,	\/*!< Starts with the reception of the Timer End. Note that a timer can retrigger itself to achieve a free running Timer.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_Timer2Start	include/CameraDefs.h	/^		TimerTriggerSource_Timer2Start,	\/*!< Starts with the reception of the Timer Start.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_Timer2Start	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_Timer2Start,	\/*!< Starts with the reception of the Timer Start.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_UserOutput0	include/CameraDefs.h	/^		TimerTriggerSource_UserOutput0,	\/*!< Specifies which User Output bit signal to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_UserOutput0	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_UserOutput0,	\/*!< Specifies which User Output bit signal to use as internal source for the trigger.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_UserOutput1	include/CameraDefs.h	/^		TimerTriggerSource_UserOutput1,	\/*!< Specifies which User Output bit signal to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_UserOutput1	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_UserOutput1,	\/*!< Specifies which User Output bit signal to use as internal source for the trigger.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerTriggerSource_UserOutput2	include/CameraDefs.h	/^		TimerTriggerSource_UserOutput2,	\/*!< Specifies which User Output bit signal to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::TimerTriggerSourceEnums
TimerTriggerSource_UserOutput2	include/spinc/CameraDefsC.h	/^	TimerTriggerSource_UserOutput2,	\/*!< Specifies which User Output bit signal to use as internal source for the trigger.*\/$/;"	e	enum:_spinTimerTriggerSourceEnums
TimerValue	include/Camera.h	/^		GenApi::IFloat &TimerValue;$/;"	m	class:Spinnaker::Camera
TimerValue	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode TimerValue;$/;"	m	struct:_quickSpin
Timestamp	include/Camera.h	/^		GenApi::IInteger &Timestamp;$/;"	m	class:Spinnaker::Camera
Timestamp	include/SpinGenApi/EventAdapterU3V.h	/^			uint64_t Timestamp;$/;"	m	struct:Spinnaker::GenApi::U3V_EVENT_DATA
Timestamp	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode Timestamp;$/;"	m	struct:_quickSpin
TimestampHigh	include/SpinGenApi/EventAdapterGEV.h	/^        uint32_t TimestampHigh;$/;"	m	struct:Spinnaker::GenApi::GVCP_EVENT_ITEM
TimestampHigh	include/SpinGenApi/EventAdapterGEV.h	/^        uint32_t TimestampHigh;$/;"	m	struct:Spinnaker::GenApi::GVCP_EVENT_ITEM_EXTENDED_ID
TimestampLatch	include/Camera.h	/^		GenApi::ICommand &TimestampLatch;$/;"	m	class:Spinnaker::Camera
TimestampLatch	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode TimestampLatch;$/;"	m	struct:_quickSpin
TimestampLatchValue	include/Camera.h	/^		GenApi::IInteger &TimestampLatchValue;$/;"	m	class:Spinnaker::Camera
TimestampLatchValue	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode TimestampLatchValue;$/;"	m	struct:_quickSpin
TimestampLow	include/SpinGenApi/EventAdapterGEV.h	/^        uint32_t TimestampLow;$/;"	m	struct:Spinnaker::GenApi::GVCP_EVENT_ITEM
TimestampLow	include/SpinGenApi/EventAdapterGEV.h	/^        uint32_t TimestampLow;$/;"	m	struct:Spinnaker::GenApi::GVCP_EVENT_ITEM_EXTENDED_ID
TimestampReset	include/Camera.h	/^		GenApi::ICommand &TimestampReset;$/;"	m	class:Spinnaker::Camera
TimestampReset	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode TimestampReset;$/;"	m	struct:_quickSpin
TransferAbort	include/Camera.h	/^		GenApi::ICommand &TransferAbort;$/;"	m	class:Spinnaker::Camera
TransferAbort	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode TransferAbort;$/;"	m	struct:_quickSpin
TransferBlockCount	include/Camera.h	/^		GenApi::IInteger &TransferBlockCount;$/;"	m	class:Spinnaker::Camera
TransferBlockCount	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode TransferBlockCount;$/;"	m	struct:_quickSpin
TransferBurstCount	include/Camera.h	/^		GenApi::IInteger &TransferBurstCount;$/;"	m	class:Spinnaker::Camera
TransferBurstCount	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode TransferBurstCount;$/;"	m	struct:_quickSpin
TransferComponentSelector	include/Camera.h	/^		GenApi::IEnumerationT<TransferComponentSelectorEnums> &TransferComponentSelector;$/;"	m	class:Spinnaker::Camera
TransferComponentSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode TransferComponentSelector;$/;"	m	struct:_quickSpin
TransferComponentSelectorEnums	include/CameraDefs.h	/^	enum TransferComponentSelectorEnums	\/*!< Selects the color component for the control of the TransferStreamChannel feature.*\/$/;"	g	namespace:Spinnaker
TransferComponentSelector_All	include/CameraDefs.h	/^		TransferComponentSelector_All,	\/*!< The TransferStreamChannel feature controls the index of the stream channel for the streaming of all the planes of the planar pixel formats simultaneously or non planar pixel formats.*\/$/;"	e	enum:Spinnaker::TransferComponentSelectorEnums
TransferComponentSelector_All	include/spinc/CameraDefsC.h	/^	TransferComponentSelector_All,	\/*!< The TransferStreamChannel feature controls the index of the stream channel for the streaming of all the planes of the planar pixel formats simultaneously or non planar pixel formats.*\/$/;"	e	enum:_spinTransferComponentSelectorEnums
TransferComponentSelector_Blue	include/CameraDefs.h	/^		TransferComponentSelector_Blue,	\/*!< The TransferStreamChannel feature controls the index of the stream channel for the streaming of blue plane of the planar pixel formats.*\/$/;"	e	enum:Spinnaker::TransferComponentSelectorEnums
TransferComponentSelector_Blue	include/spinc/CameraDefsC.h	/^	TransferComponentSelector_Blue,	\/*!< The TransferStreamChannel feature controls the index of the stream channel for the streaming of blue plane of the planar pixel formats.*\/$/;"	e	enum:_spinTransferComponentSelectorEnums
TransferComponentSelector_Green	include/CameraDefs.h	/^		TransferComponentSelector_Green,	\/*!< The TransferStreamChannel feature controls the index of the stream channel for the streaming of the green plane of the planar pixel formats.*\/$/;"	e	enum:Spinnaker::TransferComponentSelectorEnums
TransferComponentSelector_Green	include/spinc/CameraDefsC.h	/^	TransferComponentSelector_Green,	\/*!< The TransferStreamChannel feature controls the index of the stream channel for the streaming of the green plane of the planar pixel formats.*\/$/;"	e	enum:_spinTransferComponentSelectorEnums
TransferComponentSelector_Red	include/CameraDefs.h	/^		TransferComponentSelector_Red,	\/*!< The TransferStreamChannel feature controls the index of the stream channel for the streaming of the red plane of the planar pixel formats.*\/$/;"	e	enum:Spinnaker::TransferComponentSelectorEnums
TransferComponentSelector_Red	include/spinc/CameraDefsC.h	/^	TransferComponentSelector_Red,	\/*!< The TransferStreamChannel feature controls the index of the stream channel for the streaming of the red plane of the planar pixel formats.*\/$/;"	e	enum:_spinTransferComponentSelectorEnums
TransferControlMode	include/Camera.h	/^		GenApi::IEnumerationT<TransferControlModeEnums> &TransferControlMode;$/;"	m	class:Spinnaker::Camera
TransferControlMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode TransferControlMode;$/;"	m	struct:_quickSpin
TransferControlModeEnums	include/CameraDefs.h	/^	enum TransferControlModeEnums	\/*!< Selects the control method for the transfers.*\/$/;"	g	namespace:Spinnaker
TransferControlMode_Automatic	include/CameraDefs.h	/^		TransferControlMode_Automatic,	\/*!< Automatic*\/$/;"	e	enum:Spinnaker::TransferControlModeEnums
TransferControlMode_Automatic	include/spinc/CameraDefsC.h	/^	TransferControlMode_Automatic,	\/*!< Automatic*\/$/;"	e	enum:_spinTransferControlModeEnums
TransferControlMode_Basic	include/CameraDefs.h	/^		TransferControlMode_Basic,	\/*!< Basic*\/$/;"	e	enum:Spinnaker::TransferControlModeEnums
TransferControlMode_Basic	include/spinc/CameraDefsC.h	/^	TransferControlMode_Basic,	\/*!< Basic*\/$/;"	e	enum:_spinTransferControlModeEnums
TransferControlMode_UserControlled	include/CameraDefs.h	/^		TransferControlMode_UserControlled,	\/*!< User Controlled*\/$/;"	e	enum:Spinnaker::TransferControlModeEnums
TransferControlMode_UserControlled	include/spinc/CameraDefsC.h	/^	TransferControlMode_UserControlled,	\/*!< User Controlled*\/$/;"	e	enum:_spinTransferControlModeEnums
TransferOperationMode	include/Camera.h	/^		GenApi::IEnumerationT<TransferOperationModeEnums> &TransferOperationMode;$/;"	m	class:Spinnaker::Camera
TransferOperationMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode TransferOperationMode;$/;"	m	struct:_quickSpin
TransferOperationModeEnums	include/CameraDefs.h	/^	enum TransferOperationModeEnums	\/*!< Selects the operation mode of the transfer.*\/$/;"	g	namespace:Spinnaker
TransferOperationMode_Continuous	include/CameraDefs.h	/^		TransferOperationMode_Continuous,	\/*!< Continuous*\/$/;"	e	enum:Spinnaker::TransferOperationModeEnums
TransferOperationMode_Continuous	include/spinc/CameraDefsC.h	/^	TransferOperationMode_Continuous,	\/*!< Continuous*\/$/;"	e	enum:_spinTransferOperationModeEnums
TransferOperationMode_MultiBlock	include/CameraDefs.h	/^		TransferOperationMode_MultiBlock,	\/*!< Multi Block*\/$/;"	e	enum:Spinnaker::TransferOperationModeEnums
TransferOperationMode_MultiBlock	include/spinc/CameraDefsC.h	/^	TransferOperationMode_MultiBlock,	\/*!< Multi Block*\/$/;"	e	enum:_spinTransferOperationModeEnums
TransferPause	include/Camera.h	/^		GenApi::ICommand &TransferPause;$/;"	m	class:Spinnaker::Camera
TransferPause	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode TransferPause;$/;"	m	struct:_quickSpin
TransferQueueCurrentBlockCount	include/Camera.h	/^		GenApi::IInteger &TransferQueueCurrentBlockCount;$/;"	m	class:Spinnaker::Camera
TransferQueueCurrentBlockCount	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode TransferQueueCurrentBlockCount;$/;"	m	struct:_quickSpin
TransferQueueMaxBlockCount	include/Camera.h	/^		GenApi::IInteger &TransferQueueMaxBlockCount;$/;"	m	class:Spinnaker::Camera
TransferQueueMaxBlockCount	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode TransferQueueMaxBlockCount;$/;"	m	struct:_quickSpin
TransferQueueMode	include/Camera.h	/^		GenApi::IEnumerationT<TransferQueueModeEnums> &TransferQueueMode;$/;"	m	class:Spinnaker::Camera
TransferQueueMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode TransferQueueMode;$/;"	m	struct:_quickSpin
TransferQueueModeEnums	include/CameraDefs.h	/^	enum TransferQueueModeEnums	\/*!< Specifies the operation mode of the transfer queue.*\/$/;"	g	namespace:Spinnaker
TransferQueueMode_FirstInFirstOut	include/CameraDefs.h	/^		TransferQueueMode_FirstInFirstOut,	\/*!< Blocks first In are transferred Out first.*\/$/;"	e	enum:Spinnaker::TransferQueueModeEnums
TransferQueueMode_FirstInFirstOut	include/spinc/CameraDefsC.h	/^	TransferQueueMode_FirstInFirstOut,	\/*!< Blocks first In are transferred Out first.*\/$/;"	e	enum:_spinTransferQueueModeEnums
TransferResume	include/Camera.h	/^		GenApi::ICommand &TransferResume;$/;"	m	class:Spinnaker::Camera
TransferResume	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode TransferResume;$/;"	m	struct:_quickSpin
TransferSelector	include/Camera.h	/^		GenApi::IEnumerationT<TransferSelectorEnums> &TransferSelector;$/;"	m	class:Spinnaker::Camera
TransferSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode TransferSelector;$/;"	m	struct:_quickSpin
TransferSelectorEnums	include/CameraDefs.h	/^	enum TransferSelectorEnums	\/*!< Selects which stream transfers are currently controlled by the selected Transfer features.*\/$/;"	g	namespace:Spinnaker
TransferSelector_All	include/CameraDefs.h	/^		TransferSelector_All,	\/*!< The transfer features control all the data streams simulateneously.*\/$/;"	e	enum:Spinnaker::TransferSelectorEnums
TransferSelector_All	include/spinc/CameraDefsC.h	/^	TransferSelector_All,	\/*!< The transfer features control all the data streams simulateneously.*\/$/;"	e	enum:_spinTransferSelectorEnums
TransferSelector_Stream0	include/CameraDefs.h	/^		TransferSelector_Stream0,	\/*!< The transfer features control the data stream 0.*\/$/;"	e	enum:Spinnaker::TransferSelectorEnums
TransferSelector_Stream0	include/spinc/CameraDefsC.h	/^	TransferSelector_Stream0,	\/*!< The transfer features control the data stream 0.*\/$/;"	e	enum:_spinTransferSelectorEnums
TransferSelector_Stream1	include/CameraDefs.h	/^		TransferSelector_Stream1,	\/*!< The transfer features control the data stream 1.*\/$/;"	e	enum:Spinnaker::TransferSelectorEnums
TransferSelector_Stream1	include/spinc/CameraDefsC.h	/^	TransferSelector_Stream1,	\/*!< The transfer features control the data stream 1.*\/$/;"	e	enum:_spinTransferSelectorEnums
TransferSelector_Stream2	include/CameraDefs.h	/^		TransferSelector_Stream2,	\/*!< The transfer features control the data stream 2.*\/$/;"	e	enum:Spinnaker::TransferSelectorEnums
TransferSelector_Stream2	include/spinc/CameraDefsC.h	/^	TransferSelector_Stream2,	\/*!< The transfer features control the data stream 2.*\/$/;"	e	enum:_spinTransferSelectorEnums
TransferStart	include/Camera.h	/^		GenApi::ICommand &TransferStart;$/;"	m	class:Spinnaker::Camera
TransferStart	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode TransferStart;$/;"	m	struct:_quickSpin
TransferStatus	include/Camera.h	/^		GenApi::IBoolean &TransferStatus;$/;"	m	class:Spinnaker::Camera
TransferStatus	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode TransferStatus;$/;"	m	struct:_quickSpin
TransferStatusSelector	include/Camera.h	/^		GenApi::IEnumerationT<TransferStatusSelectorEnums> &TransferStatusSelector;$/;"	m	class:Spinnaker::Camera
TransferStatusSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode TransferStatusSelector;$/;"	m	struct:_quickSpin
TransferStatusSelectorEnums	include/CameraDefs.h	/^	enum TransferStatusSelectorEnums	\/*!< Selects which status of the transfer module to read.*\/$/;"	g	namespace:Spinnaker
TransferStatusSelector_Paused	include/CameraDefs.h	/^		TransferStatusSelector_Paused,	\/*!< Data blocks transmission is suspended immediately.*\/$/;"	e	enum:Spinnaker::TransferStatusSelectorEnums
TransferStatusSelector_Paused	include/spinc/CameraDefsC.h	/^	TransferStatusSelector_Paused,	\/*!< Data blocks transmission is suspended immediately.*\/$/;"	e	enum:_spinTransferStatusSelectorEnums
TransferStatusSelector_QueueOverflow	include/CameraDefs.h	/^		TransferStatusSelector_QueueOverflow,	\/*!< Data blocks queue is in overflow state.*\/$/;"	e	enum:Spinnaker::TransferStatusSelectorEnums
TransferStatusSelector_QueueOverflow	include/spinc/CameraDefsC.h	/^	TransferStatusSelector_QueueOverflow,	\/*!< Data blocks queue is in overflow state.*\/$/;"	e	enum:_spinTransferStatusSelectorEnums
TransferStatusSelector_Stopped	include/CameraDefs.h	/^		TransferStatusSelector_Stopped,	\/*!< Data blocks transmission is stopped.*\/$/;"	e	enum:Spinnaker::TransferStatusSelectorEnums
TransferStatusSelector_Stopped	include/spinc/CameraDefsC.h	/^	TransferStatusSelector_Stopped,	\/*!< Data blocks transmission is stopped.*\/$/;"	e	enum:_spinTransferStatusSelectorEnums
TransferStatusSelector_Stopping	include/CameraDefs.h	/^		TransferStatusSelector_Stopping,	\/*!< Data blocks transmission is stopping. The current block transmission will be completed and the transfer state will stop.*\/$/;"	e	enum:Spinnaker::TransferStatusSelectorEnums
TransferStatusSelector_Stopping	include/spinc/CameraDefsC.h	/^	TransferStatusSelector_Stopping,	\/*!< Data blocks transmission is stopping. The current block transmission will be completed and the transfer state will stop.*\/$/;"	e	enum:_spinTransferStatusSelectorEnums
TransferStatusSelector_Streaming	include/CameraDefs.h	/^		TransferStatusSelector_Streaming,	\/*!< Data blocks are transmitted when enough data is available.*\/$/;"	e	enum:Spinnaker::TransferStatusSelectorEnums
TransferStatusSelector_Streaming	include/spinc/CameraDefsC.h	/^	TransferStatusSelector_Streaming,	\/*!< Data blocks are transmitted when enough data is available.*\/$/;"	e	enum:_spinTransferStatusSelectorEnums
TransferStop	include/Camera.h	/^		GenApi::ICommand &TransferStop;$/;"	m	class:Spinnaker::Camera
TransferStop	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode TransferStop;$/;"	m	struct:_quickSpin
TransferStreamChannel	include/Camera.h	/^		GenApi::IInteger &TransferStreamChannel;$/;"	m	class:Spinnaker::Camera
TransferStreamChannel	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode TransferStreamChannel;$/;"	m	struct:_quickSpin
TransferTriggerActivation	include/Camera.h	/^		GenApi::IEnumerationT<TransferTriggerActivationEnums> &TransferTriggerActivation;$/;"	m	class:Spinnaker::Camera
TransferTriggerActivation	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode TransferTriggerActivation;$/;"	m	struct:_quickSpin
TransferTriggerActivationEnums	include/CameraDefs.h	/^	enum TransferTriggerActivationEnums	\/*!< Specifies the activation mode of the transfer control trigger.*\/$/;"	g	namespace:Spinnaker
TransferTriggerActivation_AnyEdge	include/CameraDefs.h	/^		TransferTriggerActivation_AnyEdge,	\/*!< Specifies that the trigger is considered valid on the falling or rising edge of the source signal.*\/$/;"	e	enum:Spinnaker::TransferTriggerActivationEnums
TransferTriggerActivation_AnyEdge	include/spinc/CameraDefsC.h	/^	TransferTriggerActivation_AnyEdge,	\/*!< Specifies that the trigger is considered valid on the falling or rising edge of the source signal.*\/$/;"	e	enum:_spinTransferTriggerActivationEnums
TransferTriggerActivation_FallingEdge	include/CameraDefs.h	/^		TransferTriggerActivation_FallingEdge,	\/*!< Specifies that the trigger is considered valid on the falling edge of the source signal.*\/$/;"	e	enum:Spinnaker::TransferTriggerActivationEnums
TransferTriggerActivation_FallingEdge	include/spinc/CameraDefsC.h	/^	TransferTriggerActivation_FallingEdge,	\/*!< Specifies that the trigger is considered valid on the falling edge of the source signal.*\/$/;"	e	enum:_spinTransferTriggerActivationEnums
TransferTriggerActivation_LevelHigh	include/CameraDefs.h	/^		TransferTriggerActivation_LevelHigh,	\/*!< Specifies that the trigger is considered valid as long as the level of the source signal is high. This can apply to TransferActive and TransferPause trigger.*\/$/;"	e	enum:Spinnaker::TransferTriggerActivationEnums
TransferTriggerActivation_LevelHigh	include/spinc/CameraDefsC.h	/^	TransferTriggerActivation_LevelHigh,	\/*!< Specifies that the trigger is considered valid as long as the level of the source signal is high. This can apply to TransferActive and TransferPause trigger.*\/$/;"	e	enum:_spinTransferTriggerActivationEnums
TransferTriggerActivation_LevelLow	include/CameraDefs.h	/^		TransferTriggerActivation_LevelLow,	\/*!< Specifies that the trigger is considered valid as long as the level of the source signal is low. This can apply to TransferActive and TransferPause trigger.*\/$/;"	e	enum:Spinnaker::TransferTriggerActivationEnums
TransferTriggerActivation_LevelLow	include/spinc/CameraDefsC.h	/^	TransferTriggerActivation_LevelLow,	\/*!< Specifies that the trigger is considered valid as long as the level of the source signal is low. This can apply to TransferActive and TransferPause trigger.*\/$/;"	e	enum:_spinTransferTriggerActivationEnums
TransferTriggerActivation_RisingEdge	include/CameraDefs.h	/^		TransferTriggerActivation_RisingEdge,	\/*!< Specifies that the trigger is considered valid on the rising edge of the source signal.*\/$/;"	e	enum:Spinnaker::TransferTriggerActivationEnums
TransferTriggerActivation_RisingEdge	include/spinc/CameraDefsC.h	/^	TransferTriggerActivation_RisingEdge,	\/*!< Specifies that the trigger is considered valid on the rising edge of the source signal.*\/$/;"	e	enum:_spinTransferTriggerActivationEnums
TransferTriggerMode	include/Camera.h	/^		GenApi::IEnumerationT<TransferTriggerModeEnums> &TransferTriggerMode;$/;"	m	class:Spinnaker::Camera
TransferTriggerMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode TransferTriggerMode;$/;"	m	struct:_quickSpin
TransferTriggerModeEnums	include/CameraDefs.h	/^	enum TransferTriggerModeEnums	\/*!< Controls if the selected trigger is active.*\/$/;"	g	namespace:Spinnaker
TransferTriggerMode_Off	include/CameraDefs.h	/^		TransferTriggerMode_Off,	\/*!< Disables the selected trigger.*\/$/;"	e	enum:Spinnaker::TransferTriggerModeEnums
TransferTriggerMode_Off	include/spinc/CameraDefsC.h	/^	TransferTriggerMode_Off,	\/*!< Disables the selected trigger.*\/$/;"	e	enum:_spinTransferTriggerModeEnums
TransferTriggerMode_On	include/CameraDefs.h	/^		TransferTriggerMode_On,	\/*!< Enable the selected trigger.*\/$/;"	e	enum:Spinnaker::TransferTriggerModeEnums
TransferTriggerMode_On	include/spinc/CameraDefsC.h	/^	TransferTriggerMode_On,	\/*!< Enable the selected trigger.*\/$/;"	e	enum:_spinTransferTriggerModeEnums
TransferTriggerSelector	include/Camera.h	/^		GenApi::IEnumerationT<TransferTriggerSelectorEnums> &TransferTriggerSelector;$/;"	m	class:Spinnaker::Camera
TransferTriggerSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode TransferTriggerSelector;$/;"	m	struct:_quickSpin
TransferTriggerSelectorEnums	include/CameraDefs.h	/^	enum TransferTriggerSelectorEnums	\/*!< Selects the type of transfer trigger to configure.*\/$/;"	g	namespace:Spinnaker
TransferTriggerSelector_TransferAbort	include/CameraDefs.h	/^		TransferTriggerSelector_TransferAbort,	\/*!< Selects a trigger to abort the transfers.*\/$/;"	e	enum:Spinnaker::TransferTriggerSelectorEnums
TransferTriggerSelector_TransferAbort	include/spinc/CameraDefsC.h	/^	TransferTriggerSelector_TransferAbort,	\/*!< Selects a trigger to abort the transfers.*\/$/;"	e	enum:_spinTransferTriggerSelectorEnums
TransferTriggerSelector_TransferActive	include/CameraDefs.h	/^		TransferTriggerSelector_TransferActive,	\/*!< Selects a trigger to Activate the transfers. This trigger type is used when TriggerActivation is set LevelHigh or levelLow.*\/$/;"	e	enum:Spinnaker::TransferTriggerSelectorEnums
TransferTriggerSelector_TransferActive	include/spinc/CameraDefsC.h	/^	TransferTriggerSelector_TransferActive,	\/*!< Selects a trigger to Activate the transfers. This trigger type is used when TriggerActivation is set LevelHigh or levelLow.*\/$/;"	e	enum:_spinTransferTriggerSelectorEnums
TransferTriggerSelector_TransferBurstStart	include/CameraDefs.h	/^		TransferTriggerSelector_TransferBurstStart,	\/*!< Selects a trigger to start the transfer of a burst of frames specified by TransferBurstCount.*\/$/;"	e	enum:Spinnaker::TransferTriggerSelectorEnums
TransferTriggerSelector_TransferBurstStart	include/spinc/CameraDefsC.h	/^	TransferTriggerSelector_TransferBurstStart,	\/*!< Selects a trigger to start the transfer of a burst of frames specified by TransferBurstCount.*\/$/;"	e	enum:_spinTransferTriggerSelectorEnums
TransferTriggerSelector_TransferBurstStop	include/CameraDefs.h	/^		TransferTriggerSelector_TransferBurstStop,	\/*!< Selects a trigger to end the transfer of a burst of frames.*\/$/;"	e	enum:Spinnaker::TransferTriggerSelectorEnums
TransferTriggerSelector_TransferBurstStop	include/spinc/CameraDefsC.h	/^	TransferTriggerSelector_TransferBurstStop,	\/*!< Selects a trigger to end the transfer of a burst of frames.*\/$/;"	e	enum:_spinTransferTriggerSelectorEnums
TransferTriggerSelector_TransferPause	include/CameraDefs.h	/^		TransferTriggerSelector_TransferPause,	\/*!< Selects a trigger to pause the transfers.*\/$/;"	e	enum:Spinnaker::TransferTriggerSelectorEnums
TransferTriggerSelector_TransferPause	include/spinc/CameraDefsC.h	/^	TransferTriggerSelector_TransferPause,	\/*!< Selects a trigger to pause the transfers.*\/$/;"	e	enum:_spinTransferTriggerSelectorEnums
TransferTriggerSelector_TransferResume	include/CameraDefs.h	/^		TransferTriggerSelector_TransferResume,	\/*!< Selects a trigger to Resume the transfers.*\/$/;"	e	enum:Spinnaker::TransferTriggerSelectorEnums
TransferTriggerSelector_TransferResume	include/spinc/CameraDefsC.h	/^	TransferTriggerSelector_TransferResume,	\/*!< Selects a trigger to Resume the transfers.*\/$/;"	e	enum:_spinTransferTriggerSelectorEnums
TransferTriggerSelector_TransferStart	include/CameraDefs.h	/^		TransferTriggerSelector_TransferStart,	\/*!< Selects a trigger to start the transfers.*\/$/;"	e	enum:Spinnaker::TransferTriggerSelectorEnums
TransferTriggerSelector_TransferStart	include/spinc/CameraDefsC.h	/^	TransferTriggerSelector_TransferStart,	\/*!< Selects a trigger to start the transfers.*\/$/;"	e	enum:_spinTransferTriggerSelectorEnums
TransferTriggerSelector_TransferStop	include/CameraDefs.h	/^		TransferTriggerSelector_TransferStop,	\/*!< Selects a trigger to stop the transfers.*\/$/;"	e	enum:Spinnaker::TransferTriggerSelectorEnums
TransferTriggerSelector_TransferStop	include/spinc/CameraDefsC.h	/^	TransferTriggerSelector_TransferStop,	\/*!< Selects a trigger to stop the transfers.*\/$/;"	e	enum:_spinTransferTriggerSelectorEnums
TransferTriggerSource	include/Camera.h	/^		GenApi::IEnumerationT<TransferTriggerSourceEnums> &TransferTriggerSource;$/;"	m	class:Spinnaker::Camera
TransferTriggerSource	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode TransferTriggerSource;$/;"	m	struct:_quickSpin
TransferTriggerSourceEnums	include/CameraDefs.h	/^	enum TransferTriggerSourceEnums	\/*!< Specifies the signal to use as the trigger source for transfers.*\/$/;"	g	namespace:Spinnaker
TransferTriggerSource_Action0	include/CameraDefs.h	/^		TransferTriggerSource_Action0,	\/*!< Specifies which Action command to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:Spinnaker::TransferTriggerSourceEnums
TransferTriggerSource_Action0	include/spinc/CameraDefsC.h	/^	TransferTriggerSource_Action0,	\/*!< Specifies which Action command to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:_spinTransferTriggerSourceEnums
TransferTriggerSource_Action1	include/CameraDefs.h	/^		TransferTriggerSource_Action1,	\/*!< Specifies which Action command to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:Spinnaker::TransferTriggerSourceEnums
TransferTriggerSource_Action1	include/spinc/CameraDefsC.h	/^	TransferTriggerSource_Action1,	\/*!< Specifies which Action command to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:_spinTransferTriggerSourceEnums
TransferTriggerSource_Action2	include/CameraDefs.h	/^		TransferTriggerSource_Action2,	\/*!< Specifies which Action command to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:Spinnaker::TransferTriggerSourceEnums
TransferTriggerSource_Action2	include/spinc/CameraDefsC.h	/^	TransferTriggerSource_Action2,	\/*!< Specifies which Action command to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:_spinTransferTriggerSourceEnums
TransferTriggerSource_Counter0End	include/CameraDefs.h	/^		TransferTriggerSource_Counter0End,	\/*!< Specifies which of the Counter signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:Spinnaker::TransferTriggerSourceEnums
TransferTriggerSource_Counter0End	include/spinc/CameraDefsC.h	/^	TransferTriggerSource_Counter0End,	\/*!< Specifies which of the Counter signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:_spinTransferTriggerSourceEnums
TransferTriggerSource_Counter0Start	include/CameraDefs.h	/^		TransferTriggerSource_Counter0Start,	\/*!< Specifies which of the Counter signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:Spinnaker::TransferTriggerSourceEnums
TransferTriggerSource_Counter0Start	include/spinc/CameraDefsC.h	/^	TransferTriggerSource_Counter0Start,	\/*!< Specifies which of the Counter signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:_spinTransferTriggerSourceEnums
TransferTriggerSource_Counter1End	include/CameraDefs.h	/^		TransferTriggerSource_Counter1End,	\/*!< Specifies which of the Counter signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:Spinnaker::TransferTriggerSourceEnums
TransferTriggerSource_Counter1End	include/spinc/CameraDefsC.h	/^	TransferTriggerSource_Counter1End,	\/*!< Specifies which of the Counter signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:_spinTransferTriggerSourceEnums
TransferTriggerSource_Counter1Start	include/CameraDefs.h	/^		TransferTriggerSource_Counter1Start,	\/*!< Specifies which of the Counter signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:Spinnaker::TransferTriggerSourceEnums
TransferTriggerSource_Counter1Start	include/spinc/CameraDefsC.h	/^	TransferTriggerSource_Counter1Start,	\/*!< Specifies which of the Counter signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:_spinTransferTriggerSourceEnums
TransferTriggerSource_Counter2End	include/CameraDefs.h	/^		TransferTriggerSource_Counter2End,	\/*!< Specifies which of the Counter signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:Spinnaker::TransferTriggerSourceEnums
TransferTriggerSource_Counter2End	include/spinc/CameraDefsC.h	/^	TransferTriggerSource_Counter2End,	\/*!< Specifies which of the Counter signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:_spinTransferTriggerSourceEnums
TransferTriggerSource_Counter2Start	include/CameraDefs.h	/^		TransferTriggerSource_Counter2Start,	\/*!< Specifies which of the Counter signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:Spinnaker::TransferTriggerSourceEnums
TransferTriggerSource_Counter2Start	include/spinc/CameraDefsC.h	/^	TransferTriggerSource_Counter2Start,	\/*!< Specifies which of the Counter signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:_spinTransferTriggerSourceEnums
TransferTriggerSource_Line0	include/CameraDefs.h	/^		TransferTriggerSource_Line0,	\/*!< Specifies which physical line (or pin) and associated I\/O control block to use as external source for the transfer control trigger signal.*\/$/;"	e	enum:Spinnaker::TransferTriggerSourceEnums
TransferTriggerSource_Line0	include/spinc/CameraDefsC.h	/^	TransferTriggerSource_Line0,	\/*!< Specifies which physical line (or pin) and associated I\/O control block to use as external source for the transfer control trigger signal.*\/$/;"	e	enum:_spinTransferTriggerSourceEnums
TransferTriggerSource_Line1	include/CameraDefs.h	/^		TransferTriggerSource_Line1,	\/*!< Specifies which physical line (or pin) and associated I\/O control block to use as external source for the transfer control trigger signal.*\/$/;"	e	enum:Spinnaker::TransferTriggerSourceEnums
TransferTriggerSource_Line1	include/spinc/CameraDefsC.h	/^	TransferTriggerSource_Line1,	\/*!< Specifies which physical line (or pin) and associated I\/O control block to use as external source for the transfer control trigger signal.*\/$/;"	e	enum:_spinTransferTriggerSourceEnums
TransferTriggerSource_Line2	include/CameraDefs.h	/^		TransferTriggerSource_Line2,	\/*!< Specifies which physical line (or pin) and associated I\/O control block to use as external source for the transfer control trigger signal.*\/$/;"	e	enum:Spinnaker::TransferTriggerSourceEnums
TransferTriggerSource_Line2	include/spinc/CameraDefsC.h	/^	TransferTriggerSource_Line2,	\/*!< Specifies which physical line (or pin) and associated I\/O control block to use as external source for the transfer control trigger signal.*\/$/;"	e	enum:_spinTransferTriggerSourceEnums
TransferTriggerSource_SoftwareSignal0	include/CameraDefs.h	/^		TransferTriggerSource_SoftwareSignal0,	\/*!< Specifies which Software Signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:Spinnaker::TransferTriggerSourceEnums
TransferTriggerSource_SoftwareSignal0	include/spinc/CameraDefsC.h	/^	TransferTriggerSource_SoftwareSignal0,	\/*!< Specifies which Software Signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:_spinTransferTriggerSourceEnums
TransferTriggerSource_SoftwareSignal1	include/CameraDefs.h	/^		TransferTriggerSource_SoftwareSignal1,	\/*!< Specifies which Software Signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:Spinnaker::TransferTriggerSourceEnums
TransferTriggerSource_SoftwareSignal1	include/spinc/CameraDefsC.h	/^	TransferTriggerSource_SoftwareSignal1,	\/*!< Specifies which Software Signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:_spinTransferTriggerSourceEnums
TransferTriggerSource_SoftwareSignal2	include/CameraDefs.h	/^		TransferTriggerSource_SoftwareSignal2,	\/*!< Specifies which Software Signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:Spinnaker::TransferTriggerSourceEnums
TransferTriggerSource_SoftwareSignal2	include/spinc/CameraDefsC.h	/^	TransferTriggerSource_SoftwareSignal2,	\/*!< Specifies which Software Signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:_spinTransferTriggerSourceEnums
TransferTriggerSource_Timer0End	include/CameraDefs.h	/^		TransferTriggerSource_Timer0End,	\/*!< Specifies which Timer signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:Spinnaker::TransferTriggerSourceEnums
TransferTriggerSource_Timer0End	include/spinc/CameraDefsC.h	/^	TransferTriggerSource_Timer0End,	\/*!< Specifies which Timer signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:_spinTransferTriggerSourceEnums
TransferTriggerSource_Timer0Start	include/CameraDefs.h	/^		TransferTriggerSource_Timer0Start,	\/*!< Specifies which Timer signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:Spinnaker::TransferTriggerSourceEnums
TransferTriggerSource_Timer0Start	include/spinc/CameraDefsC.h	/^	TransferTriggerSource_Timer0Start,	\/*!< Specifies which Timer signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:_spinTransferTriggerSourceEnums
TransferTriggerSource_Timer1End	include/CameraDefs.h	/^		TransferTriggerSource_Timer1End,	\/*!< Specifies which Timer signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:Spinnaker::TransferTriggerSourceEnums
TransferTriggerSource_Timer1End	include/spinc/CameraDefsC.h	/^	TransferTriggerSource_Timer1End,	\/*!< Specifies which Timer signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:_spinTransferTriggerSourceEnums
TransferTriggerSource_Timer1Start	include/CameraDefs.h	/^		TransferTriggerSource_Timer1Start,	\/*!< Specifies which Timer signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:Spinnaker::TransferTriggerSourceEnums
TransferTriggerSource_Timer1Start	include/spinc/CameraDefsC.h	/^	TransferTriggerSource_Timer1Start,	\/*!< Specifies which Timer signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:_spinTransferTriggerSourceEnums
TransferTriggerSource_Timer2End	include/CameraDefs.h	/^		TransferTriggerSource_Timer2End,	\/*!< Specifies which Timer signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:Spinnaker::TransferTriggerSourceEnums
TransferTriggerSource_Timer2End	include/spinc/CameraDefsC.h	/^	TransferTriggerSource_Timer2End,	\/*!< Specifies which Timer signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:_spinTransferTriggerSourceEnums
TransferTriggerSource_Timer2Start	include/CameraDefs.h	/^		TransferTriggerSource_Timer2Start,	\/*!< Specifies which Timer signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:Spinnaker::TransferTriggerSourceEnums
TransferTriggerSource_Timer2Start	include/spinc/CameraDefsC.h	/^	TransferTriggerSource_Timer2Start,	\/*!< Specifies which Timer signal to use as internal source for the transfer control trigger signal.*\/$/;"	e	enum:_spinTransferTriggerSourceEnums
TransportLayerDevice	include/TransportLayerDevice.h	/^	class SPINNAKER_API TransportLayerDevice$/;"	c	namespace:Spinnaker
TransportLayerInterface	include/TransportLayerInterface.h	/^	class SPINNAKER_API TransportLayerInterface$/;"	c	namespace:Spinnaker
TransportLayerStream	include/TransportLayerStream.h	/^	class SPINNAKER_API TransportLayerStream$/;"	c	namespace:Spinnaker
TriggerActivation	include/Camera.h	/^		GenApi::IEnumerationT<TriggerActivationEnums> &TriggerActivation;$/;"	m	class:Spinnaker::Camera
TriggerActivation	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode TriggerActivation;$/;"	m	struct:_quickSpin
TriggerActivationEnums	include/CameraDefs.h	/^	enum TriggerActivationEnums	\/*!< Specifies the activation mode of the trigger.*\/$/;"	g	namespace:Spinnaker
TriggerActivation_AnyEdge	include/CameraDefs.h	/^		TriggerActivation_AnyEdge,	\/*!< Specifies that the trigger is considered valid on the falling or rising edge of the source signal.*\/$/;"	e	enum:Spinnaker::TriggerActivationEnums
TriggerActivation_AnyEdge	include/spinc/CameraDefsC.h	/^	TriggerActivation_AnyEdge,	\/*!< Specifies that the trigger is considered valid on the falling or rising edge of the source signal.*\/$/;"	e	enum:_spinTriggerActivationEnums
TriggerActivation_FallingEdge	include/CameraDefs.h	/^		TriggerActivation_FallingEdge,	\/*!< Specifies that the trigger is considered valid on the falling edge of the source signal.*\/$/;"	e	enum:Spinnaker::TriggerActivationEnums
TriggerActivation_FallingEdge	include/spinc/CameraDefsC.h	/^	TriggerActivation_FallingEdge,	\/*!< Specifies that the trigger is considered valid on the falling edge of the source signal.*\/$/;"	e	enum:_spinTriggerActivationEnums
TriggerActivation_LevelHigh	include/CameraDefs.h	/^		TriggerActivation_LevelHigh,	\/*!< Specifies that the trigger is considered valid as long as the level of the source signal is high.*\/$/;"	e	enum:Spinnaker::TriggerActivationEnums
TriggerActivation_LevelHigh	include/spinc/CameraDefsC.h	/^	TriggerActivation_LevelHigh,	\/*!< Specifies that the trigger is considered valid as long as the level of the source signal is high.*\/$/;"	e	enum:_spinTriggerActivationEnums
TriggerActivation_LevelLow	include/CameraDefs.h	/^		TriggerActivation_LevelLow,	\/*!< Specifies that the trigger is considered valid as long as the level of the source signal is low.*\/$/;"	e	enum:Spinnaker::TriggerActivationEnums
TriggerActivation_LevelLow	include/spinc/CameraDefsC.h	/^	TriggerActivation_LevelLow,	\/*!< Specifies that the trigger is considered valid as long as the level of the source signal is low.*\/$/;"	e	enum:_spinTriggerActivationEnums
TriggerActivation_RisingEdge	include/CameraDefs.h	/^		TriggerActivation_RisingEdge,	\/*!< Specifies that the trigger is considered valid on the rising edge of the source signal.*\/$/;"	e	enum:Spinnaker::TriggerActivationEnums
TriggerActivation_RisingEdge	include/spinc/CameraDefsC.h	/^	TriggerActivation_RisingEdge,	\/*!< Specifies that the trigger is considered valid on the rising edge of the source signal.*\/$/;"	e	enum:_spinTriggerActivationEnums
TriggerDelay	include/Camera.h	/^		GenApi::IFloat &TriggerDelay;$/;"	m	class:Spinnaker::Camera
TriggerDelay	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode TriggerDelay;$/;"	m	struct:_quickSpin
TriggerDivider	include/Camera.h	/^		GenApi::IInteger &TriggerDivider;$/;"	m	class:Spinnaker::Camera
TriggerDivider	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode TriggerDivider;$/;"	m	struct:_quickSpin
TriggerMode	include/Camera.h	/^		GenApi::IEnumerationT<TriggerModeEnums> &TriggerMode;$/;"	m	class:Spinnaker::Camera
TriggerMode	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode TriggerMode;$/;"	m	struct:_quickSpin
TriggerModeEnums	include/CameraDefs.h	/^	enum TriggerModeEnums	\/*!< Controls if the selected trigger is active.*\/$/;"	g	namespace:Spinnaker
TriggerMode_Off	include/CameraDefs.h	/^		TriggerMode_Off,	\/*!< Disables the selected trigger.*\/$/;"	e	enum:Spinnaker::TriggerModeEnums
TriggerMode_Off	include/spinc/CameraDefsC.h	/^	TriggerMode_Off,	\/*!< Disables the selected trigger.*\/$/;"	e	enum:_spinTriggerModeEnums
TriggerMode_On	include/CameraDefs.h	/^		TriggerMode_On,	\/*!< Enable the selected trigger.*\/$/;"	e	enum:Spinnaker::TriggerModeEnums
TriggerMode_On	include/spinc/CameraDefsC.h	/^	TriggerMode_On,	\/*!< Enable the selected trigger.*\/$/;"	e	enum:_spinTriggerModeEnums
TriggerMultiplier	include/Camera.h	/^		GenApi::IInteger &TriggerMultiplier;$/;"	m	class:Spinnaker::Camera
TriggerMultiplier	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode TriggerMultiplier;$/;"	m	struct:_quickSpin
TriggerOverlap	include/Camera.h	/^		GenApi::IEnumerationT<TriggerOverlapEnums> &TriggerOverlap;$/;"	m	class:Spinnaker::Camera
TriggerOverlap	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode TriggerOverlap;$/;"	m	struct:_quickSpin
TriggerOverlapEnums	include/CameraDefs.h	/^	enum TriggerOverlapEnums	\/*!< Specifies the type trigger overlap permitted with the previous frame or line. This defines when a valid trigger will be accepted (or latched) for a new frame or a new line.*\/$/;"	g	namespace:Spinnaker
TriggerOverlap_Off	include/CameraDefs.h	/^		TriggerOverlap_Off,	\/*!< No trigger overlap is permitted.*\/$/;"	e	enum:Spinnaker::TriggerOverlapEnums
TriggerOverlap_Off	include/spinc/CameraDefsC.h	/^	TriggerOverlap_Off,	\/*!< No trigger overlap is permitted.*\/$/;"	e	enum:_spinTriggerOverlapEnums
TriggerOverlap_PreviousFrame	include/CameraDefs.h	/^		TriggerOverlap_PreviousFrame,	\/*!< Trigger is accepted (latched) at any time during the capture of the previous frame.*\/$/;"	e	enum:Spinnaker::TriggerOverlapEnums
TriggerOverlap_PreviousFrame	include/spinc/CameraDefsC.h	/^	TriggerOverlap_PreviousFrame,	\/*!< Trigger is accepted (latched) at any time during the capture of the previous frame.*\/$/;"	e	enum:_spinTriggerOverlapEnums
TriggerOverlap_PreviousLine	include/CameraDefs.h	/^		TriggerOverlap_PreviousLine,	\/*!< Trigger is accepted (latched) at any time during the capture of the previous line.*\/$/;"	e	enum:Spinnaker::TriggerOverlapEnums
TriggerOverlap_PreviousLine	include/spinc/CameraDefsC.h	/^	TriggerOverlap_PreviousLine,	\/*!< Trigger is accepted (latched) at any time during the capture of the previous line.*\/$/;"	e	enum:_spinTriggerOverlapEnums
TriggerOverlap_ReadOut	include/CameraDefs.h	/^		TriggerOverlap_ReadOut,	\/*!< Trigger is accepted immediately after the exposure period.*\/$/;"	e	enum:Spinnaker::TriggerOverlapEnums
TriggerOverlap_ReadOut	include/spinc/CameraDefsC.h	/^	TriggerOverlap_ReadOut,	\/*!< Trigger is accepted immediately after the exposure period.*\/$/;"	e	enum:_spinTriggerOverlapEnums
TriggerSelector	include/Camera.h	/^		GenApi::IEnumerationT<TriggerSelectorEnums> &TriggerSelector;$/;"	m	class:Spinnaker::Camera
TriggerSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode TriggerSelector;$/;"	m	struct:_quickSpin
TriggerSelectorEnums	include/CameraDefs.h	/^	enum TriggerSelectorEnums	\/*!< Selects the type of trigger to configure.*\/$/;"	g	namespace:Spinnaker
TriggerSelector_AcquisitionActive	include/CameraDefs.h	/^		TriggerSelector_AcquisitionActive,	\/*!< Selects a trigger that controls the duration of the Acquisition of one or many frames. The Acquisition is activated when the trigger signal becomes active and terminated when it goes back to the inactive state.*\/$/;"	e	enum:Spinnaker::TriggerSelectorEnums
TriggerSelector_AcquisitionActive	include/spinc/CameraDefsC.h	/^	TriggerSelector_AcquisitionActive,	\/*!< Selects a trigger that controls the duration of the Acquisition of one or many frames. The Acquisition is activated when the trigger signal becomes active and terminated when it goes back to the inactive state.*\/$/;"	e	enum:_spinTriggerSelectorEnums
TriggerSelector_AcquisitionEnd	include/CameraDefs.h	/^		TriggerSelector_AcquisitionEnd,	\/*!< Selects a trigger that ends the Acquisition of one or many frames according to AcquisitionMode.*\/$/;"	e	enum:Spinnaker::TriggerSelectorEnums
TriggerSelector_AcquisitionEnd	include/spinc/CameraDefsC.h	/^	TriggerSelector_AcquisitionEnd,	\/*!< Selects a trigger that ends the Acquisition of one or many frames according to AcquisitionMode.*\/$/;"	e	enum:_spinTriggerSelectorEnums
TriggerSelector_AcquisitionStart	include/CameraDefs.h	/^		TriggerSelector_AcquisitionStart,	\/*!< Selects a trigger that starts the Acquisition of one or many frames according to AcquisitionMode.*\/$/;"	e	enum:Spinnaker::TriggerSelectorEnums
TriggerSelector_AcquisitionStart	include/spinc/CameraDefsC.h	/^	TriggerSelector_AcquisitionStart,	\/*!< Selects a trigger that starts the Acquisition of one or many frames according to AcquisitionMode.*\/$/;"	e	enum:_spinTriggerSelectorEnums
TriggerSelector_ExposureActive	include/CameraDefs.h	/^		TriggerSelector_ExposureActive,	\/*!< Selects a trigger controlling the duration of the exposure of one frame (or Line).*\/$/;"	e	enum:Spinnaker::TriggerSelectorEnums
TriggerSelector_ExposureActive	include/spinc/CameraDefsC.h	/^	TriggerSelector_ExposureActive,	\/*!< Selects a trigger controlling the duration of the exposure of one frame (or Line).*\/$/;"	e	enum:_spinTriggerSelectorEnums
TriggerSelector_ExposureEnd	include/CameraDefs.h	/^		TriggerSelector_ExposureEnd,	\/*!< Selects a trigger controlling the end of the exposure of one Frame (or Line).*\/$/;"	e	enum:Spinnaker::TriggerSelectorEnums
TriggerSelector_ExposureEnd	include/spinc/CameraDefsC.h	/^	TriggerSelector_ExposureEnd,	\/*!< Selects a trigger controlling the end of the exposure of one Frame (or Line).*\/$/;"	e	enum:_spinTriggerSelectorEnums
TriggerSelector_ExposureStart	include/CameraDefs.h	/^		TriggerSelector_ExposureStart,	\/*!< Selects a trigger controlling the start of the exposure of one Frame (or Line).*\/$/;"	e	enum:Spinnaker::TriggerSelectorEnums
TriggerSelector_ExposureStart	include/spinc/CameraDefsC.h	/^	TriggerSelector_ExposureStart,	\/*!< Selects a trigger controlling the start of the exposure of one Frame (or Line).*\/$/;"	e	enum:_spinTriggerSelectorEnums
TriggerSelector_FrameActive	include/CameraDefs.h	/^		TriggerSelector_FrameActive,	\/*!< Selects a trigger controlling the duration of one frame (mainly used in line scan mode).*\/$/;"	e	enum:Spinnaker::TriggerSelectorEnums
TriggerSelector_FrameActive	include/spinc/CameraDefsC.h	/^	TriggerSelector_FrameActive,	\/*!< Selects a trigger controlling the duration of one frame (mainly used in line scan mode).*\/$/;"	e	enum:_spinTriggerSelectorEnums
TriggerSelector_FrameBurstActive	include/CameraDefs.h	/^		TriggerSelector_FrameBurstActive,	\/*!< Selects a trigger controlling the duration of the capture of the bursts of frames in an acquisition.*\/$/;"	e	enum:Spinnaker::TriggerSelectorEnums
TriggerSelector_FrameBurstActive	include/spinc/CameraDefsC.h	/^	TriggerSelector_FrameBurstActive,	\/*!< Selects a trigger controlling the duration of the capture of the bursts of frames in an acquisition.*\/$/;"	e	enum:_spinTriggerSelectorEnums
TriggerSelector_FrameBurstEnd	include/CameraDefs.h	/^		TriggerSelector_FrameBurstEnd,	\/*!< Selects a trigger ending the capture of the bursts of frames in an acquisition.*\/$/;"	e	enum:Spinnaker::TriggerSelectorEnums
TriggerSelector_FrameBurstEnd	include/spinc/CameraDefsC.h	/^	TriggerSelector_FrameBurstEnd,	\/*!< Selects a trigger ending the capture of the bursts of frames in an acquisition.*\/$/;"	e	enum:_spinTriggerSelectorEnums
TriggerSelector_FrameBurstStart	include/CameraDefs.h	/^		TriggerSelector_FrameBurstStart,	\/*!< Selects a trigger starting the capture of the bursts of frames in an acquisition. AcquisitionBurstFrameCount controls the length of each burst unless a FrameBurstEnd trigger is active. The total number of frames captured is also conditioned by AcquisitionFrameCount if AcquisitionMode is MultiFrame.*\/$/;"	e	enum:Spinnaker::TriggerSelectorEnums
TriggerSelector_FrameBurstStart	include/spinc/CameraDefsC.h	/^	TriggerSelector_FrameBurstStart,	\/*!< Selects a trigger starting the capture of the bursts of frames in an acquisition. AcquisitionBurstFrameCount controls the length of each burst unless a FrameBurstEnd trigger is active. The total number of frames captured is also conditioned by AcquisitionFrameCount if AcquisitionMode is MultiFrame.*\/$/;"	e	enum:_spinTriggerSelectorEnums
TriggerSelector_FrameEnd	include/CameraDefs.h	/^		TriggerSelector_FrameEnd,	\/*!< Selects a trigger ending the capture of one frame (mainly used in line scan mode).*\/$/;"	e	enum:Spinnaker::TriggerSelectorEnums
TriggerSelector_FrameEnd	include/spinc/CameraDefsC.h	/^	TriggerSelector_FrameEnd,	\/*!< Selects a trigger ending the capture of one frame (mainly used in line scan mode).*\/$/;"	e	enum:_spinTriggerSelectorEnums
TriggerSelector_FrameStart	include/CameraDefs.h	/^		TriggerSelector_FrameStart,	\/*!< Selects a trigger starting the capture of one frame.*\/$/;"	e	enum:Spinnaker::TriggerSelectorEnums
TriggerSelector_FrameStart	include/spinc/CameraDefsC.h	/^	TriggerSelector_FrameStart,	\/*!< Selects a trigger starting the capture of one frame.*\/$/;"	e	enum:_spinTriggerSelectorEnums
TriggerSelector_LineStart	include/CameraDefs.h	/^		TriggerSelector_LineStart,	\/*!< Selects a trigger starting the capture of one Line of a Frame (mainly used in line scan mode).*\/$/;"	e	enum:Spinnaker::TriggerSelectorEnums
TriggerSelector_LineStart	include/spinc/CameraDefsC.h	/^	TriggerSelector_LineStart,	\/*!< Selects a trigger starting the capture of one Line of a Frame (mainly used in line scan mode).*\/$/;"	e	enum:_spinTriggerSelectorEnums
TriggerSoftware	include/Camera.h	/^		GenApi::ICommand &TriggerSoftware;$/;"	m	class:Spinnaker::Camera
TriggerSoftware	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode TriggerSoftware;$/;"	m	struct:_quickSpin
TriggerSource	include/Camera.h	/^		GenApi::IEnumerationT<TriggerSourceEnums> &TriggerSource;$/;"	m	class:Spinnaker::Camera
TriggerSource	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode TriggerSource;$/;"	m	struct:_quickSpin
TriggerSourceEnums	include/CameraDefs.h	/^	enum TriggerSourceEnums	\/*!< Specifies the internal signal or physical input Line to use as the trigger source. The selected trigger must have its TriggerMode set to On.*\/$/;"	g	namespace:Spinnaker
TriggerSource_Action0	include/CameraDefs.h	/^		TriggerSource_Action0,	\/*!< Specifies which Action command to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_Action0	include/spinc/CameraDefsC.h	/^	TriggerSource_Action0,	\/*!< Specifies which Action command to use as internal source for the trigger.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_Action1	include/CameraDefs.h	/^		TriggerSource_Action1,	\/*!< Specifies which Action command to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_Action1	include/spinc/CameraDefsC.h	/^	TriggerSource_Action1,	\/*!< Specifies which Action command to use as internal source for the trigger.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_Action2	include/CameraDefs.h	/^		TriggerSource_Action2,	\/*!< Specifies which Action command to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_Action2	include/spinc/CameraDefsC.h	/^	TriggerSource_Action2,	\/*!< Specifies which Action command to use as internal source for the trigger.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_CC1	include/CameraDefs.h	/^		TriggerSource_CC1,	\/*!< Index of the Camera Link physical line and associated I\/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_CC1	include/spinc/CameraDefsC.h	/^	TriggerSource_CC1,	\/*!< Index of the Camera Link physical line and associated I\/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_CC2	include/CameraDefs.h	/^		TriggerSource_CC2,	\/*!< Index of the Camera Link physical line and associated I\/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_CC2	include/spinc/CameraDefsC.h	/^	TriggerSource_CC2,	\/*!< Index of the Camera Link physical line and associated I\/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_CC3	include/CameraDefs.h	/^		TriggerSource_CC3,	\/*!< Index of the Camera Link physical line and associated I\/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_CC3	include/spinc/CameraDefsC.h	/^	TriggerSource_CC3,	\/*!< Index of the Camera Link physical line and associated I\/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_CC4	include/CameraDefs.h	/^		TriggerSource_CC4,	\/*!< Index of the Camera Link physical line and associated I\/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_CC4	include/spinc/CameraDefsC.h	/^	TriggerSource_CC4,	\/*!< Index of the Camera Link physical line and associated I\/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_Counter0End	include/CameraDefs.h	/^		TriggerSource_Counter0End,	\/*!< Specifies which of the Counter signal to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_Counter0End	include/spinc/CameraDefsC.h	/^	TriggerSource_Counter0End,	\/*!< Specifies which of the Counter signal to use as internal source for the trigger.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_Counter0Start	include/CameraDefs.h	/^		TriggerSource_Counter0Start,	\/*!< Specifies which of the Counter signal to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_Counter0Start	include/spinc/CameraDefsC.h	/^	TriggerSource_Counter0Start,	\/*!< Specifies which of the Counter signal to use as internal source for the trigger.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_Counter1End	include/CameraDefs.h	/^		TriggerSource_Counter1End,	\/*!< Specifies which of the Counter signal to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_Counter1End	include/spinc/CameraDefsC.h	/^	TriggerSource_Counter1End,	\/*!< Specifies which of the Counter signal to use as internal source for the trigger.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_Counter1Start	include/CameraDefs.h	/^		TriggerSource_Counter1Start,	\/*!< Specifies which of the Counter signal to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_Counter1Start	include/spinc/CameraDefsC.h	/^	TriggerSource_Counter1Start,	\/*!< Specifies which of the Counter signal to use as internal source for the trigger.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_Counter2End	include/CameraDefs.h	/^		TriggerSource_Counter2End,	\/*!< Specifies which of the Counter signal to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_Counter2End	include/spinc/CameraDefsC.h	/^	TriggerSource_Counter2End,	\/*!< Specifies which of the Counter signal to use as internal source for the trigger.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_Counter2Start	include/CameraDefs.h	/^		TriggerSource_Counter2Start,	\/*!< Specifies which of the Counter signal to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_Counter2Start	include/spinc/CameraDefsC.h	/^	TriggerSource_Counter2Start,	\/*!< Specifies which of the Counter signal to use as internal source for the trigger.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_Encoder0	include/CameraDefs.h	/^		TriggerSource_Encoder0,	\/*!< Specifies which Encoder signal to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_Encoder0	include/spinc/CameraDefsC.h	/^	TriggerSource_Encoder0,	\/*!< Specifies which Encoder signal to use as internal source for the trigger.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_Encoder1	include/CameraDefs.h	/^		TriggerSource_Encoder1,	\/*!< Specifies which Encoder signal to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_Encoder1	include/spinc/CameraDefsC.h	/^	TriggerSource_Encoder1,	\/*!< Specifies which Encoder signal to use as internal source for the trigger.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_Encoder2	include/CameraDefs.h	/^		TriggerSource_Encoder2,	\/*!< Specifies which Encoder signal to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_Encoder2	include/spinc/CameraDefsC.h	/^	TriggerSource_Encoder2,	\/*!< Specifies which Encoder signal to use as internal source for the trigger.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_Line0	include/CameraDefs.h	/^		TriggerSource_Line0,	\/*!< Specifies which physical line (or pin) and associated I\/O control block to use as external source for the trigger signal.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_Line0	include/spinc/CameraDefsC.h	/^	TriggerSource_Line0,	\/*!< Specifies which physical line (or pin) and associated I\/O control block to use as external source for the trigger signal.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_Line1	include/CameraDefs.h	/^		TriggerSource_Line1,	\/*!< Specifies which physical line (or pin) and associated I\/O control block to use as external source for the trigger signal.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_Line1	include/spinc/CameraDefsC.h	/^	TriggerSource_Line1,	\/*!< Specifies which physical line (or pin) and associated I\/O control block to use as external source for the trigger signal.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_Line2	include/CameraDefs.h	/^		TriggerSource_Line2,	\/*!< Specifies which physical line (or pin) and associated I\/O control block to use as external source for the trigger signal.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_Line2	include/spinc/CameraDefsC.h	/^	TriggerSource_Line2,	\/*!< Specifies which physical line (or pin) and associated I\/O control block to use as external source for the trigger signal.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_LinkTrigger0	include/CameraDefs.h	/^		TriggerSource_LinkTrigger0,	\/*!< Specifies which Link Trigger to use as  source for the trigger (received from the transport layer).*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_LinkTrigger0	include/spinc/CameraDefsC.h	/^	TriggerSource_LinkTrigger0,	\/*!< Specifies which Link Trigger to use as  source for the trigger (received from the transport layer).*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_LinkTrigger1	include/CameraDefs.h	/^		TriggerSource_LinkTrigger1,	\/*!< Specifies which Link Trigger to use as  source for the trigger (received from the transport layer).*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_LinkTrigger1	include/spinc/CameraDefsC.h	/^	TriggerSource_LinkTrigger1,	\/*!< Specifies which Link Trigger to use as  source for the trigger (received from the transport layer).*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_LinkTrigger2	include/CameraDefs.h	/^		TriggerSource_LinkTrigger2,	\/*!< Specifies which Link Trigger to use as  source for the trigger (received from the transport layer).*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_LinkTrigger2	include/spinc/CameraDefsC.h	/^	TriggerSource_LinkTrigger2,	\/*!< Specifies which Link Trigger to use as  source for the trigger (received from the transport layer).*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_Software	include/CameraDefs.h	/^		TriggerSource_Software,	\/*!< Specifies that the trigger source will be generated by software using the TriggerSoftware command.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_Software	include/spinc/CameraDefsC.h	/^	TriggerSource_Software,	\/*!< Specifies that the trigger source will be generated by software using the TriggerSoftware command.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_SoftwareSignal0	include/CameraDefs.h	/^		TriggerSource_SoftwareSignal0,	\/*!< Specifies that the trigger source will be a signal generated by software using the SoftwareSignalPulse command.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_SoftwareSignal0	include/spinc/CameraDefsC.h	/^	TriggerSource_SoftwareSignal0,	\/*!< Specifies that the trigger source will be a signal generated by software using the SoftwareSignalPulse command.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_SoftwareSignal1	include/CameraDefs.h	/^		TriggerSource_SoftwareSignal1,	\/*!< Specifies that the trigger source will be a signal generated by software using the SoftwareSignalPulse command.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_SoftwareSignal1	include/spinc/CameraDefsC.h	/^	TriggerSource_SoftwareSignal1,	\/*!< Specifies that the trigger source will be a signal generated by software using the SoftwareSignalPulse command.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_SoftwareSignal2	include/CameraDefs.h	/^		TriggerSource_SoftwareSignal2,	\/*!< Specifies that the trigger source will be a signal generated by software using the SoftwareSignalPulse command.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_SoftwareSignal2	include/spinc/CameraDefsC.h	/^	TriggerSource_SoftwareSignal2,	\/*!< Specifies that the trigger source will be a signal generated by software using the SoftwareSignalPulse command.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_Timer0End	include/CameraDefs.h	/^		TriggerSource_Timer0End,	\/*!< Specifies which Timer signal to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_Timer0End	include/spinc/CameraDefsC.h	/^	TriggerSource_Timer0End,	\/*!< Specifies which Timer signal to use as internal source for the trigger.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_Timer0Start	include/CameraDefs.h	/^		TriggerSource_Timer0Start,	\/*!< Specifies which Timer signal to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_Timer0Start	include/spinc/CameraDefsC.h	/^	TriggerSource_Timer0Start,	\/*!< Specifies which Timer signal to use as internal source for the trigger.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_Timer1End	include/CameraDefs.h	/^		TriggerSource_Timer1End,	\/*!< Specifies which Timer signal to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_Timer1End	include/spinc/CameraDefsC.h	/^	TriggerSource_Timer1End,	\/*!< Specifies which Timer signal to use as internal source for the trigger.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_Timer1Start	include/CameraDefs.h	/^		TriggerSource_Timer1Start,	\/*!< Specifies which Timer signal to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_Timer1Start	include/spinc/CameraDefsC.h	/^	TriggerSource_Timer1Start,	\/*!< Specifies which Timer signal to use as internal source for the trigger.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_Timer2End	include/CameraDefs.h	/^		TriggerSource_Timer2End,	\/*!< Specifies which Timer signal to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_Timer2End	include/spinc/CameraDefsC.h	/^	TriggerSource_Timer2End,	\/*!< Specifies which Timer signal to use as internal source for the trigger.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_Timer2Start	include/CameraDefs.h	/^		TriggerSource_Timer2Start,	\/*!< Specifies which Timer signal to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_Timer2Start	include/spinc/CameraDefsC.h	/^	TriggerSource_Timer2Start,	\/*!< Specifies which Timer signal to use as internal source for the trigger.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_UserOutput0	include/CameraDefs.h	/^		TriggerSource_UserOutput0,	\/*!< Specifies which User Output bit signal to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_UserOutput0	include/spinc/CameraDefsC.h	/^	TriggerSource_UserOutput0,	\/*!< Specifies which User Output bit signal to use as internal source for the trigger.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_UserOutput1	include/CameraDefs.h	/^		TriggerSource_UserOutput1,	\/*!< Specifies which User Output bit signal to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_UserOutput1	include/spinc/CameraDefsC.h	/^	TriggerSource_UserOutput1,	\/*!< Specifies which User Output bit signal to use as internal source for the trigger.*\/$/;"	e	enum:_spinTriggerSourceEnums
TriggerSource_UserOutput2	include/CameraDefs.h	/^		TriggerSource_UserOutput2,	\/*!< Specifies which User Output bit signal to use as internal source for the trigger.*\/$/;"	e	enum:Spinnaker::TriggerSourceEnums
TriggerSource_UserOutput2	include/spinc/CameraDefsC.h	/^	TriggerSource_UserOutput2,	\/*!< Specifies which User Output bit signal to use as internal source for the trigger.*\/$/;"	e	enum:_spinTriggerSourceEnums
True	include/spinc/SpinnakerDefsC.h	/^static const bool8_t True = 1;$/;"	v
U3V_CHUNK_TRAILER	include/SpinGenApi/ChunkAdapterU3V.h	/^		typedef struct U3V_CHUNK_TRAILER$/;"	s	namespace:Spinnaker::GenApi
U3V_CHUNK_TRAILER	include/SpinGenApi/ChunkAdapterU3V.h	/^		} U3V_CHUNK_TRAILER;$/;"	t	namespace:Spinnaker::GenApi	typeref:struct:Spinnaker::GenApi::U3V_CHUNK_TRAILER
U3V_COMMAND_HEADER	include/SpinGenApi/EventAdapterU3V.h	/^		typedef struct PACK_STRUCT U3V_COMMAND_HEADER$/;"	s	namespace:Spinnaker::GenApi
U3V_COMMAND_HEADER	include/SpinGenApi/EventAdapterU3V.h	/^		} U3V_COMMAND_HEADER;$/;"	t	namespace:Spinnaker::GenApi	typeref:struct:Spinnaker::GenApi::U3V_COMMAND_HEADER
U3V_EVENT_DATA	include/SpinGenApi/EventAdapterU3V.h	/^		typedef struct PACK_STRUCT U3V_EVENT_DATA$/;"	s	namespace:Spinnaker::GenApi
U3V_EVENT_DATA	include/SpinGenApi/EventAdapterU3V.h	/^		} U3V_EVENT_DATA;$/;"	t	namespace:Spinnaker::GenApi	typeref:struct:Spinnaker::GenApi::U3V_EVENT_DATA
U3V_EVENT_MESSAGE	include/SpinGenApi/EventAdapterU3V.h	/^		typedef struct PACK_STRUCT U3V_EVENT_MESSAGE$/;"	s	namespace:Spinnaker::GenApi
U3V_EVENT_MESSAGE	include/SpinGenApi/EventAdapterU3V.h	/^		} U3V_EVENT_MESSAGE;$/;"	t	namespace:Spinnaker::GenApi	typeref:struct:Spinnaker::GenApi::U3V_EVENT_MESSAGE
U3V_EVENT_PREFIX	include/SpinGenApi/EventAdapterU3V.h	/^		const uint32_t U3V_EVENT_PREFIX = 0x45563355;$/;"	m	namespace:Spinnaker::GenApi
UNCOMPRESSED	SpinnakerTest/SaveToAvi/SaveToAvi.cpp	/^	UNCOMPRESSED,$/;"	e	enum:aviType	file:
UNCOMPRESSED	SpinnakerTest/SaveToAvi_C/SaveToAvi_C.cpp	/^	UNCOMPRESSED,$/;"	e	enum:_fileType	file:
UNCOMPRESSED	src/SaveToAvi/SaveToAvi.cpp	/^	UNCOMPRESSED,$/;"	e	enum:aviType	file:
UNCOMPRESSED	src/SaveToAvi_C/SaveToAvi_C.cpp	/^	UNCOMPRESSED,$/;"	e	enum:_fileType	file:
UNKNOWN_PIXELFORMAT	include/CameraDefs.h	/^		UNKNOWN_PIXELFORMAT,$/;"	e	enum:Spinnaker::PixelFormatEnums
UNKNOWN_PIXELFORMAT	include/spinc/CameraDefsC.h	/^	UNKNOWN_PIXELFORMAT,$/;"	e	enum:_spinPixelFormatEnums
USB	include/SpinGenApi/Types.h	/^			USB,             \/\/!< name resides in USB namespace$/;"	e	enum:Spinnaker::GenApi::_EStandardNameSpace
USB	include/spinc/SpinnakerGenApiDefsC.h	/^	USB,             \/\/!< name resides in USB namespace$/;"	e	enum:_spinStandardNameSpace
USE_TEMP_CACHE_FILE	include/SpinGenApi/GCUtilities.h	41;"	d
USE_TEMP_CACHE_FILE	include/SpinGenApi/GCUtilities.h	43;"	d
USE_TEMP_CACHE_FILE	include/SpinGenApi/GCUtilities.h	47;"	d
USE_TEMP_CACHE_FILE	include/SpinGenApi/GCUtilities.h	49;"	d
UnknownNode	include/spinc/SpinnakerGenApiDefsC.h	/^	UnknownNode = -1$/;"	e	enum:_spinNodeType
UnlockEarly	include/SpinGenApi/GCSynch.h	/^			void UnlockEarly(void)$/;"	f	class:Spinnaker::GenICam::CGlobalLockUnlocker
Unsigned	include/SpinGenApi/Types.h	/^			Unsigned,       \/\/!< Integer is unsigned$/;"	e	enum:Spinnaker::GenApi::_ESign
Unsigned	include/spinc/SpinnakerGenApiDefsC.h	/^	Unsigned,$/;"	e	enum:_spinSign
UserOutputSelector	include/Camera.h	/^		GenApi::IEnumerationT<UserOutputSelectorEnums> &UserOutputSelector;$/;"	m	class:Spinnaker::Camera
UserOutputSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode UserOutputSelector;$/;"	m	struct:_quickSpin
UserOutputSelectorEnums	include/CameraDefs.h	/^	enum UserOutputSelectorEnums	\/*!< Selects which bit of the User Output register will be set by UserOutputValue.*\/$/;"	g	namespace:Spinnaker
UserOutputSelector_UserOutput0	include/CameraDefs.h	/^		UserOutputSelector_UserOutput0,	\/*!< Selects the bit 0 of the User Output register.*\/$/;"	e	enum:Spinnaker::UserOutputSelectorEnums
UserOutputSelector_UserOutput0	include/spinc/CameraDefsC.h	/^	UserOutputSelector_UserOutput0,	\/*!< Selects the bit 0 of the User Output register.*\/$/;"	e	enum:_spinUserOutputSelectorEnums
UserOutputSelector_UserOutput1	include/CameraDefs.h	/^		UserOutputSelector_UserOutput1,	\/*!< Selects the bit 1 of the User Output register.*\/$/;"	e	enum:Spinnaker::UserOutputSelectorEnums
UserOutputSelector_UserOutput1	include/spinc/CameraDefsC.h	/^	UserOutputSelector_UserOutput1,	\/*!< Selects the bit 1 of the User Output register.*\/$/;"	e	enum:_spinUserOutputSelectorEnums
UserOutputSelector_UserOutput2	include/CameraDefs.h	/^		UserOutputSelector_UserOutput2,	\/*!< Selects the bit 2 of the User Output register.*\/$/;"	e	enum:Spinnaker::UserOutputSelectorEnums
UserOutputSelector_UserOutput2	include/spinc/CameraDefsC.h	/^	UserOutputSelector_UserOutput2,	\/*!< Selects the bit 2 of the User Output register.*\/$/;"	e	enum:_spinUserOutputSelectorEnums
UserOutputValue	include/Camera.h	/^		GenApi::IBoolean &UserOutputValue;$/;"	m	class:Spinnaker::Camera
UserOutputValue	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode UserOutputValue;$/;"	m	struct:_quickSpin
UserOutputValueAll	include/Camera.h	/^		GenApi::IInteger &UserOutputValueAll;$/;"	m	class:Spinnaker::Camera
UserOutputValueAll	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode UserOutputValueAll;$/;"	m	struct:_quickSpin
UserOutputValueAllMask	include/Camera.h	/^		GenApi::IInteger &UserOutputValueAllMask;$/;"	m	class:Spinnaker::Camera
UserOutputValueAllMask	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode UserOutputValueAllMask;$/;"	m	struct:_quickSpin
UserSetDefault	include/Camera.h	/^		GenApi::IEnumerationT<UserSetDefaultEnums> &UserSetDefault;$/;"	m	class:Spinnaker::Camera
UserSetDefault	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode UserSetDefault;$/;"	m	struct:_quickSpin
UserSetDefaultEnums	include/CameraDefs.h	/^	enum UserSetDefaultEnums	\/*!< Selects the feature User Set to load and make active by default when the device is reset.*\/$/;"	g	namespace:Spinnaker
UserSetDefault_Default	include/CameraDefs.h	/^		UserSetDefault_Default,	\/*!< Select the factory setting user set.*\/$/;"	e	enum:Spinnaker::UserSetDefaultEnums
UserSetDefault_Default	include/spinc/CameraDefsC.h	/^	UserSetDefault_Default,	\/*!< Select the factory setting user set.*\/$/;"	e	enum:_spinUserSetDefaultEnums
UserSetDefault_UserSet0	include/CameraDefs.h	/^		UserSetDefault_UserSet0,	\/*!< Select the user set 0.*\/$/;"	e	enum:Spinnaker::UserSetDefaultEnums
UserSetDefault_UserSet0	include/spinc/CameraDefsC.h	/^	UserSetDefault_UserSet0,	\/*!< Select the user set 0.*\/$/;"	e	enum:_spinUserSetDefaultEnums
UserSetDefault_UserSet1	include/CameraDefs.h	/^		UserSetDefault_UserSet1,	\/*!< Select the user set 1.*\/$/;"	e	enum:Spinnaker::UserSetDefaultEnums
UserSetDefault_UserSet1	include/spinc/CameraDefsC.h	/^	UserSetDefault_UserSet1,	\/*!< Select the user set 1.*\/$/;"	e	enum:_spinUserSetDefaultEnums
UserSetFeatureEnable	include/Camera.h	/^		GenApi::IBoolean &UserSetFeatureEnable;$/;"	m	class:Spinnaker::Camera
UserSetFeatureEnable	include/spinc/QuickSpinDefsC.h	/^	quickSpinBooleanNode UserSetFeatureEnable;$/;"	m	struct:_quickSpin
UserSetFeatureSelector	include/Camera.h	/^		GenApi::IEnumerationT<UserSetFeatureSelectorEnums> &UserSetFeatureSelector;$/;"	m	class:Spinnaker::Camera
UserSetFeatureSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode UserSetFeatureSelector;$/;"	m	struct:_quickSpin
UserSetFeatureSelectorEnums	include/CameraDefs.h	/^	enum UserSetFeatureSelectorEnums	\/*!< Selects which individual UserSet feature to control.*\/$/;"	g	namespace:Spinnaker
UserSetLoad	include/Camera.h	/^		GenApi::ICommand &UserSetLoad;$/;"	m	class:Spinnaker::Camera
UserSetLoad	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode UserSetLoad;$/;"	m	struct:_quickSpin
UserSetSave	include/Camera.h	/^		GenApi::ICommand &UserSetSave;$/;"	m	class:Spinnaker::Camera
UserSetSave	include/spinc/QuickSpinDefsC.h	/^	quickSpinCommandNode UserSetSave;$/;"	m	struct:_quickSpin
UserSetSelector	include/Camera.h	/^		GenApi::IEnumerationT<UserSetSelectorEnums> &UserSetSelector;$/;"	m	class:Spinnaker::Camera
UserSetSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode UserSetSelector;$/;"	m	struct:_quickSpin
UserSetSelectorEnums	include/CameraDefs.h	/^	enum UserSetSelectorEnums	\/*!< Selects the feature User Set to load, save or configure.*\/$/;"	g	namespace:Spinnaker
UserSetSelector_Default	include/CameraDefs.h	/^		UserSetSelector_Default,	\/*!< Selects the factory setting user set.*\/$/;"	e	enum:Spinnaker::UserSetSelectorEnums
UserSetSelector_Default	include/spinc/CameraDefsC.h	/^	UserSetSelector_Default,	\/*!< Selects the factory setting user set.*\/$/;"	e	enum:_spinUserSetSelectorEnums
UserSetSelector_UserSet0	include/CameraDefs.h	/^		UserSetSelector_UserSet0,	\/*!< Selects the user set 0.*\/$/;"	e	enum:Spinnaker::UserSetSelectorEnums
UserSetSelector_UserSet0	include/spinc/CameraDefsC.h	/^	UserSetSelector_UserSet0,	\/*!< Selects the user set 0.*\/$/;"	e	enum:_spinUserSetSelectorEnums
UserSetSelector_UserSet1	include/CameraDefs.h	/^		UserSetSelector_UserSet1,	\/*!< Selects the user set 1.*\/$/;"	e	enum:Spinnaker::UserSetSelectorEnums
UserSetSelector_UserSet1	include/spinc/CameraDefsC.h	/^	UserSetSelector_UserSet1,	\/*!< Selects the user set 1.*\/$/;"	e	enum:_spinUserSetSelectorEnums
VALUE	SpinnakerTest/NodeMapInfo/NodeMapInfo.cpp	/^	VALUE,$/;"	e	enum:readType	file:
VALUE	SpinnakerTest/NodeMapInfo_C/NodeMapInfo_C.cpp	/^	VALUE,$/;"	e	enum:_readType	file:
VALUE	src/NodeMapInfo/NodeMapInfo.cpp	/^	VALUE,$/;"	e	enum:readType	file:
VALUE	src/NodeMapInfo_C/NodeMapInfo_C.cpp	/^	VALUE,$/;"	e	enum:_readType	file:
VS_VERSION_INFO	SpinnakerTest/LookupTable/resource.h	6;"	d
VS_VERSION_INFO	src/LookupTable/resource.h	6;"	d
VS_VERSION_INFO1	SpinnakerTest/LookupTable/resource.h	5;"	d
VS_VERSION_INFO1	src/LookupTable/resource.h	5;"	d
ValueNode	include/SpinGenApi/ValueNode.h	/^		class SPINNAKER_API ValueNode : virtual public IValue, virtual public Node$/;"	c	namespace:Spinnaker::GenApi
ValueNode	include/spinc/SpinnakerGenApiDefsC.h	/^	ValueNode,$/;"	e	enum:_spinNodeType
Varying	include/SpinGenApi/Types.h	/^			Varying,         \/\/!> slope changes, e.g. at run-time$/;"	e	enum:Spinnaker::GenApi::_ESlope
Varying	include/spinc/SpinnakerGenApiDefsC.h	/^	Varying,         \/\/!> slope changes, e.g. at run-time$/;"	e	enum:_spinSlope
Version_t	include/SpinGenApi/GCTypes.h	/^		struct SPINNAKER_API Version_t$/;"	s	namespace:Spinnaker::GenICam
Viewer	include/GUI/Viewer.h	/^		class SPINNAKER_API Viewer$/;"	c	namespace:Spinnaker::GUI_GTKmm
ViewerDlg	include/GUI/ViewerDlg.h	/^		class SPINNAKER_API ViewerDlg$/;"	c	namespace:Spinnaker::GUI
ViewerWidget	include/GUI/ViewerWidget.h	/^		class SPINNAKER_API ViewerWidget : public Gtk::VBox$/;"	c	namespace:Spinnaker::GUI_GTKmm
WIN32	include/SpinGenApi/GCTypes.h	35;"	d
WO	include/SpinGenApi/Types.h	/^			WO,        \/\/!< Write Only$/;"	e	enum:Spinnaker::GenApi::_EAccessMode
WO	include/spinc/SpinnakerGenApiDefsC.h	/^	WO,$/;"	e	enum:_spinAccessMode
WaitForImages	SpinnakerTest/ImageEvents/ImageEvents.cpp	/^int WaitForImages(ImageEventHandler*& imageEventHandler)$/;"	f
WaitForImages	SpinnakerTest/ImageEvents_C/ImageEvents_C.cpp	/^void WaitForImages(userData* imageEventInfo)$/;"	f
WaitForImages	src/ImageEvents/ImageEvents.cpp	/^int WaitForImages(ImageEventHandler*& imageEventHandler)$/;"	f
WaitForImages	src/ImageEvents_C/ImageEvents_C.cpp	/^void WaitForImages(userData* imageEventInfo)$/;"	f
WhiteClip	include/Camera.h	/^		GenApi::IFloat &WhiteClip;$/;"	m	class:Spinnaker::Camera
WhiteClip	include/spinc/QuickSpinDefsC.h	/^	quickSpinFloatNode WhiteClip;$/;"	m	struct:_quickSpin
WhiteClipSelector	include/Camera.h	/^		GenApi::IEnumerationT<WhiteClipSelectorEnums> &WhiteClipSelector;$/;"	m	class:Spinnaker::Camera
WhiteClipSelector	include/spinc/QuickSpinDefsC.h	/^	quickSpinEnumerationNode WhiteClipSelector;$/;"	m	struct:_quickSpin
WhiteClipSelectorEnums	include/CameraDefs.h	/^	enum WhiteClipSelectorEnums	\/*!< Selects which White Clip to control.*\/$/;"	g	namespace:Spinnaker
WhiteClipSelector_All	include/CameraDefs.h	/^		WhiteClipSelector_All,	\/*!< White Clip will be applied to all channels or taps.*\/$/;"	e	enum:Spinnaker::WhiteClipSelectorEnums
WhiteClipSelector_All	include/spinc/CameraDefsC.h	/^	WhiteClipSelector_All,	\/*!< White Clip will be applied to all channels or taps.*\/$/;"	e	enum:_spinWhiteClipSelectorEnums
WhiteClipSelector_Blue	include/CameraDefs.h	/^		WhiteClipSelector_Blue,	\/*!< White Clip will be applied to the blue channel.*\/$/;"	e	enum:Spinnaker::WhiteClipSelectorEnums
WhiteClipSelector_Blue	include/spinc/CameraDefsC.h	/^	WhiteClipSelector_Blue,	\/*!< White Clip will be applied to the blue channel.*\/$/;"	e	enum:_spinWhiteClipSelectorEnums
WhiteClipSelector_Green	include/CameraDefs.h	/^		WhiteClipSelector_Green,	\/*!< White Clip will be applied to the green channel.*\/$/;"	e	enum:Spinnaker::WhiteClipSelectorEnums
WhiteClipSelector_Green	include/spinc/CameraDefsC.h	/^	WhiteClipSelector_Green,	\/*!< White Clip will be applied to the green channel.*\/$/;"	e	enum:_spinWhiteClipSelectorEnums
WhiteClipSelector_Red	include/CameraDefs.h	/^		WhiteClipSelector_Red,	\/*!< White Clip will be applied to the red channel.*\/$/;"	e	enum:Spinnaker::WhiteClipSelectorEnums
WhiteClipSelector_Red	include/spinc/CameraDefsC.h	/^	WhiteClipSelector_Red,	\/*!< White Clip will be applied to the red channel.*\/$/;"	e	enum:_spinWhiteClipSelectorEnums
WhiteClipSelector_Tap1	include/CameraDefs.h	/^		WhiteClipSelector_Tap1,	\/*!< White Clip will be applied to Tap 1.*\/$/;"	e	enum:Spinnaker::WhiteClipSelectorEnums
WhiteClipSelector_Tap1	include/spinc/CameraDefsC.h	/^	WhiteClipSelector_Tap1,	\/*!< White Clip will be applied to Tap 1.*\/$/;"	e	enum:_spinWhiteClipSelectorEnums
WhiteClipSelector_Tap2	include/CameraDefs.h	/^		WhiteClipSelector_Tap2,	\/*!< White Clip will be applied to Tap 2.*\/$/;"	e	enum:Spinnaker::WhiteClipSelectorEnums
WhiteClipSelector_Tap2	include/spinc/CameraDefsC.h	/^	WhiteClipSelector_Tap2,	\/*!< White Clip will be applied to Tap 2.*\/$/;"	e	enum:_spinWhiteClipSelectorEnums
WhiteClipSelector_U	include/CameraDefs.h	/^		WhiteClipSelector_U,	\/*!< White Clip will be applied to U channel.*\/$/;"	e	enum:Spinnaker::WhiteClipSelectorEnums
WhiteClipSelector_U	include/spinc/CameraDefsC.h	/^	WhiteClipSelector_U,	\/*!< White Clip will be applied to U channel.*\/$/;"	e	enum:_spinWhiteClipSelectorEnums
WhiteClipSelector_V	include/CameraDefs.h	/^		WhiteClipSelector_V,	\/*!< White Clip will be applied to V channel.*\/$/;"	e	enum:Spinnaker::WhiteClipSelectorEnums
WhiteClipSelector_V	include/spinc/CameraDefsC.h	/^	WhiteClipSelector_V,	\/*!< White Clip will be applied to V channel.*\/$/;"	e	enum:_spinWhiteClipSelectorEnums
WhiteClipSelector_Y	include/CameraDefs.h	/^		WhiteClipSelector_Y,	\/*!< White Clip will be applied to Y channel.*\/$/;"	e	enum:Spinnaker::WhiteClipSelectorEnums
WhiteClipSelector_Y	include/spinc/CameraDefsC.h	/^	WhiteClipSelector_Y,	\/*!< White Clip will be applied to Y channel.*\/$/;"	e	enum:_spinWhiteClipSelectorEnums
Width	include/Camera.h	/^		GenApi::IInteger &Width;$/;"	m	class:Spinnaker::Camera
Width	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode Width;$/;"	m	struct:_quickSpin
WidthMax	include/Camera.h	/^		GenApi::IInteger &WidthMax;$/;"	m	class:Spinnaker::Camera
WidthMax	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode WidthMax;$/;"	m	struct:_quickSpin
Write	include/SpinGenApi/RegisterPortImpl.h	/^			virtual void Write(const void *pBuffer, int64_t Address, int64_t Length){};$/;"	f	class:Spinnaker::GenApi::CRegisterPortImpl
Write	include/SpinGenApi/StructPort.h	/^			virtual void Write(const void *pBuffer, int64_t Address, int64_t Length)$/;"	f	class:Spinnaker::GenApi::CTestPortStruct
WriteAround	include/SpinGenApi/Types.h	/^			WriteAround,          \/\/!< Write to register, write to cache on read$/;"	e	enum:Spinnaker::GenApi::_ECachingMode
WriteAround	include/spinc/SpinnakerGenApiDefsC.h	/^	WriteAround,          \/\/ Write to register, write to cache on read$/;"	e	enum:_spinCachingMode
WriteThrough	include/SpinGenApi/Types.h	/^			WriteThrough,         \/\/!< Write to cache and register$/;"	e	enum:Spinnaker::GenApi::_ECachingMode
WriteThrough	include/spinc/SpinnakerGenApiDefsC.h	/^	WriteThrough,         \/\/ Write to cache and register$/;"	e	enum:_spinCachingMode
Yes	include/SpinGenApi/Types.h	/^			Yes = 1,                \/\/!< yes$/;"	e	enum:Spinnaker::GenApi::_EYesNo
Yes	include/spinc/SpinnakerGenApiDefsC.h	/^	Yes = 1,                \/\/!< yes$/;"	e	enum:_spinYesNo
_APS_NEXT_COMMAND_VALUE	Abhinay/Abhi_hardware/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	Abhinay/Abhi_test1/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	Abhinay/Abhi_test2/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	Abhinay/Abhi_test3/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	Abhinay/Abhi_test4/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	Abhinay/Abhi_trigger/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/Abhi_test1/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/Abhi_test2/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/Abhi_test3/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/Abhi_test4/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/Abhi_trigger/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/Acquisition/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/AcquisitionMultipleCamera/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/AcquisitionMultipleCamera_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/Acquisition_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/ChunkData/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/ChunkData_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/DeviceEvents/resource.h	11;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/DeviceEvents_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/Enumeration/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/EnumerationEvents/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/EnumerationEvents_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/Enumeration_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/Enumeration_C_QuickSpin/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/Enumeration_QuickSpin/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/Exposure/resource.h	11;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/Exposure_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/Exposure_C_QuickSpin/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/Exposure_QuickSpin/resource.h	11;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/ImageEvents/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/ImageEvents_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/ImageFormatControl/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/ImageFormatControl_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/ImageFormatControl_C_QuickSpin/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/ImageFormatControl_QuickSpin/resource.h	11;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/Logging/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/Logging_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/LookupTable/resource.h	13;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/LookupTable_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/NodeMapCallback/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/NodeMapCallback_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/NodeMapInfo/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/NodeMapInfo_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/NodeMapInfo_C_QuickSpin/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/NodeMapInfo_QuickSpin/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/SaveToAvi/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/SaveToAvi_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/Sequencer/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/Sequencer_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/Trigger/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/Trigger_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/Trigger_C_QuickSpin/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	SpinnakerTest/Trigger_QuickSpin/resource.h	11;"	d
_APS_NEXT_COMMAND_VALUE	src/Abhi_hardware/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/Abhi_test1/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/Abhi_test2/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/Abhi_test3/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/Abhi_test4/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/Abhi_trigger/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/Acquisition/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/AcquisitionMultipleCamera/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/AcquisitionMultipleCamera_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/Acquisition_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/ChunkData/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/ChunkData_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/DeviceEvents/resource.h	11;"	d
_APS_NEXT_COMMAND_VALUE	src/DeviceEvents_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/Enumeration/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/EnumerationEvents/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/EnumerationEvents_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/Enumeration_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/Enumeration_C_QuickSpin/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/Enumeration_QuickSpin/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/Exposure/resource.h	11;"	d
_APS_NEXT_COMMAND_VALUE	src/Exposure_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/Exposure_C_QuickSpin/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/Exposure_QuickSpin/resource.h	11;"	d
_APS_NEXT_COMMAND_VALUE	src/ImageEvents/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/ImageEvents_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/ImageFormatControl/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/ImageFormatControl_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/ImageFormatControl_C_QuickSpin/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/ImageFormatControl_QuickSpin/resource.h	11;"	d
_APS_NEXT_COMMAND_VALUE	src/Logging/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/Logging_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/LookupTable/resource.h	13;"	d
_APS_NEXT_COMMAND_VALUE	src/LookupTable_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/NodeMapCallback/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/NodeMapCallback_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/NodeMapInfo/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/NodeMapInfo_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/NodeMapInfo_C_QuickSpin/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/NodeMapInfo_QuickSpin/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/SaveToAvi/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/SaveToAvi_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/Sequencer/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/Sequencer_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/Trigger/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/Trigger_C/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/Trigger_C_QuickSpin/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	src/Trigger_QuickSpin/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	Abhinay/Abhi_hardware/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	Abhinay/Abhi_test1/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	Abhinay/Abhi_test2/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	Abhinay/Abhi_test3/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	Abhinay/Abhi_test4/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	Abhinay/Abhi_trigger/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/Abhi_test1/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/Abhi_test2/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/Abhi_test3/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/Abhi_test4/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/Abhi_trigger/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/Acquisition/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/AcquisitionMultipleCamera/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/AcquisitionMultipleCamera_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/Acquisition_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/ChunkData/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/ChunkData_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/DeviceEvents/resource.h	12;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/DeviceEvents_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/Enumeration/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/EnumerationEvents/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/EnumerationEvents_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/Enumeration_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/Enumeration_C_QuickSpin/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/Enumeration_QuickSpin/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/Exposure/resource.h	12;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/Exposure_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/Exposure_C_QuickSpin/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/Exposure_QuickSpin/resource.h	12;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/ImageEvents/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/ImageEvents_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/ImageFormatControl/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/ImageFormatControl_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/ImageFormatControl_C_QuickSpin/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/ImageFormatControl_QuickSpin/resource.h	12;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/Logging/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/Logging_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/LookupTable/resource.h	14;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/LookupTable_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/NodeMapCallback/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/NodeMapCallback_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/NodeMapInfo/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/NodeMapInfo_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/NodeMapInfo_C_QuickSpin/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/NodeMapInfo_QuickSpin/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/SaveToAvi/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/SaveToAvi_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/Sequencer/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/Sequencer_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/Trigger/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/Trigger_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/Trigger_C_QuickSpin/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	SpinnakerTest/Trigger_QuickSpin/resource.h	12;"	d
_APS_NEXT_CONTROL_VALUE	src/Abhi_hardware/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/Abhi_test1/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/Abhi_test2/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/Abhi_test3/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/Abhi_test4/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/Abhi_trigger/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/Acquisition/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/AcquisitionMultipleCamera/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/AcquisitionMultipleCamera_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/Acquisition_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/ChunkData/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/ChunkData_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/DeviceEvents/resource.h	12;"	d
_APS_NEXT_CONTROL_VALUE	src/DeviceEvents_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/Enumeration/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/EnumerationEvents/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/EnumerationEvents_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/Enumeration_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/Enumeration_C_QuickSpin/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/Enumeration_QuickSpin/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/Exposure/resource.h	12;"	d
_APS_NEXT_CONTROL_VALUE	src/Exposure_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/Exposure_C_QuickSpin/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/Exposure_QuickSpin/resource.h	12;"	d
_APS_NEXT_CONTROL_VALUE	src/ImageEvents/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/ImageEvents_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/ImageFormatControl/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/ImageFormatControl_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/ImageFormatControl_C_QuickSpin/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/ImageFormatControl_QuickSpin/resource.h	12;"	d
_APS_NEXT_CONTROL_VALUE	src/Logging/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/Logging_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/LookupTable/resource.h	14;"	d
_APS_NEXT_CONTROL_VALUE	src/LookupTable_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/NodeMapCallback/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/NodeMapCallback_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/NodeMapInfo/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/NodeMapInfo_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/NodeMapInfo_C_QuickSpin/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/NodeMapInfo_QuickSpin/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/SaveToAvi/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/SaveToAvi_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/Sequencer/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/Sequencer_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/Trigger/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/Trigger_C/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/Trigger_C_QuickSpin/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	src/Trigger_QuickSpin/resource.h	12;"	d
_APS_NEXT_RESOURCE_VALUE	Abhinay/Abhi_hardware/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	Abhinay/Abhi_test1/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	Abhinay/Abhi_test2/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	Abhinay/Abhi_test3/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	Abhinay/Abhi_test4/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	Abhinay/Abhi_trigger/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/Abhi_test1/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/Abhi_test2/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/Abhi_test3/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/Abhi_test4/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/Abhi_trigger/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/Acquisition/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/AcquisitionMultipleCamera/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/AcquisitionMultipleCamera_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/Acquisition_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/ChunkData/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/ChunkData_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/DeviceEvents/resource.h	10;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/DeviceEvents_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/Enumeration/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/EnumerationEvents/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/EnumerationEvents_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/Enumeration_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/Enumeration_C_QuickSpin/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/Enumeration_QuickSpin/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/Exposure/resource.h	10;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/Exposure_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/Exposure_C_QuickSpin/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/Exposure_QuickSpin/resource.h	10;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/ImageEvents/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/ImageEvents_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/ImageFormatControl/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/ImageFormatControl_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/ImageFormatControl_C_QuickSpin/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/ImageFormatControl_QuickSpin/resource.h	10;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/Logging/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/Logging_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/LookupTable/resource.h	12;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/LookupTable_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/NodeMapCallback/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/NodeMapCallback_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/NodeMapInfo/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/NodeMapInfo_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/NodeMapInfo_C_QuickSpin/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/NodeMapInfo_QuickSpin/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/SaveToAvi/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/SaveToAvi_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/Sequencer/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/Sequencer_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/Trigger/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/Trigger_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/Trigger_C_QuickSpin/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	SpinnakerTest/Trigger_QuickSpin/resource.h	10;"	d
_APS_NEXT_RESOURCE_VALUE	src/Abhi_hardware/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/Abhi_test1/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/Abhi_test2/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/Abhi_test3/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/Abhi_test4/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/Abhi_trigger/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/Acquisition/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/AcquisitionMultipleCamera/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/AcquisitionMultipleCamera_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/Acquisition_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/ChunkData/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/ChunkData_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/DeviceEvents/resource.h	10;"	d
_APS_NEXT_RESOURCE_VALUE	src/DeviceEvents_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/Enumeration/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/EnumerationEvents/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/EnumerationEvents_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/Enumeration_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/Enumeration_C_QuickSpin/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/Enumeration_QuickSpin/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/Exposure/resource.h	10;"	d
_APS_NEXT_RESOURCE_VALUE	src/Exposure_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/Exposure_C_QuickSpin/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/Exposure_QuickSpin/resource.h	10;"	d
_APS_NEXT_RESOURCE_VALUE	src/ImageEvents/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/ImageEvents_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/ImageFormatControl/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/ImageFormatControl_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/ImageFormatControl_C_QuickSpin/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/ImageFormatControl_QuickSpin/resource.h	10;"	d
_APS_NEXT_RESOURCE_VALUE	src/Logging/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/Logging_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/LookupTable/resource.h	12;"	d
_APS_NEXT_RESOURCE_VALUE	src/LookupTable_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/NodeMapCallback/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/NodeMapCallback_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/NodeMapInfo/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/NodeMapInfo_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/NodeMapInfo_C_QuickSpin/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/NodeMapInfo_QuickSpin/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/SaveToAvi/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/SaveToAvi_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/Sequencer/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/Sequencer_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/Trigger/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/Trigger_C/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/Trigger_C_QuickSpin/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	src/Trigger_QuickSpin/resource.h	10;"	d
_APS_NEXT_SYMED_VALUE	Abhinay/Abhi_hardware/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	Abhinay/Abhi_test1/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	Abhinay/Abhi_test2/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	Abhinay/Abhi_test3/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	Abhinay/Abhi_test4/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	Abhinay/Abhi_trigger/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/Abhi_test1/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/Abhi_test2/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/Abhi_test3/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/Abhi_test4/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/Abhi_trigger/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/Acquisition/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/AcquisitionMultipleCamera/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/AcquisitionMultipleCamera_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/Acquisition_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/ChunkData/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/ChunkData_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/DeviceEvents/resource.h	13;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/DeviceEvents_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/Enumeration/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/EnumerationEvents/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/EnumerationEvents_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/Enumeration_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/Enumeration_C_QuickSpin/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/Enumeration_QuickSpin/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/Exposure/resource.h	13;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/Exposure_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/Exposure_C_QuickSpin/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/Exposure_QuickSpin/resource.h	13;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/ImageEvents/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/ImageEvents_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/ImageFormatControl/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/ImageFormatControl_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/ImageFormatControl_C_QuickSpin/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/ImageFormatControl_QuickSpin/resource.h	13;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/Logging/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/Logging_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/LookupTable/resource.h	15;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/LookupTable_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/NodeMapCallback/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/NodeMapCallback_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/NodeMapInfo/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/NodeMapInfo_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/NodeMapInfo_C_QuickSpin/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/NodeMapInfo_QuickSpin/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/SaveToAvi/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/SaveToAvi_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/Sequencer/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/Sequencer_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/Trigger/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/Trigger_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/Trigger_C_QuickSpin/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	SpinnakerTest/Trigger_QuickSpin/resource.h	13;"	d
_APS_NEXT_SYMED_VALUE	src/Abhi_hardware/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/Abhi_test1/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/Abhi_test2/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/Abhi_test3/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/Abhi_test4/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/Abhi_trigger/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/Acquisition/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/AcquisitionMultipleCamera/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/AcquisitionMultipleCamera_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/Acquisition_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/ChunkData/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/ChunkData_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/DeviceEvents/resource.h	13;"	d
_APS_NEXT_SYMED_VALUE	src/DeviceEvents_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/Enumeration/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/EnumerationEvents/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/EnumerationEvents_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/Enumeration_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/Enumeration_C_QuickSpin/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/Enumeration_QuickSpin/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/Exposure/resource.h	13;"	d
_APS_NEXT_SYMED_VALUE	src/Exposure_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/Exposure_C_QuickSpin/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/Exposure_QuickSpin/resource.h	13;"	d
_APS_NEXT_SYMED_VALUE	src/ImageEvents/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/ImageEvents_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/ImageFormatControl/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/ImageFormatControl_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/ImageFormatControl_C_QuickSpin/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/ImageFormatControl_QuickSpin/resource.h	13;"	d
_APS_NEXT_SYMED_VALUE	src/Logging/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/Logging_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/LookupTable/resource.h	15;"	d
_APS_NEXT_SYMED_VALUE	src/LookupTable_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/NodeMapCallback/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/NodeMapCallback_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/NodeMapInfo/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/NodeMapInfo_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/NodeMapInfo_C_QuickSpin/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/NodeMapInfo_QuickSpin/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/SaveToAvi/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/SaveToAvi_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/Sequencer/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/Sequencer_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/Trigger/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/Trigger_C/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/Trigger_C_QuickSpin/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	src/Trigger_QuickSpin/resource.h	13;"	d
_CycleDetectAccesMode	include/SpinGenApi/Types.h	/^			_CycleDetectAccesMode   \/\/!< used internally for AccessMode cycle detection$/;"	e	enum:Spinnaker::GenApi::_EAccessMode
_CycleDetectAccesMode	include/spinc/SpinnakerGenApiDefsC.h	/^	_CycleDetectAccesMode$/;"	e	enum:_spinAccessMode
_Destroy	include/SpinGenApi/NodeMapRef.h	/^		inline void CNodeMapRefT<TCameraParams>::_Destroy()$/;"	f	class:Spinnaker::GenApi::CNodeMapRefT
_DeviceName	include/SpinGenApi/NodeMapRef.h	/^			GenICam::gcstring _DeviceName;$/;"	m	class:Spinnaker::GenApi::CNodeMapRefT
_EAccessMode	include/SpinGenApi/Types.h	/^		typedef enum _EAccessMode$/;"	g	namespace:Spinnaker::GenApi
_ECachingMode	include/SpinGenApi/Types.h	/^		typedef enum _ECachingMode$/;"	g	namespace:Spinnaker::GenApi
_ECallbackType	include/SpinGenApi/NodeCallback.h	/^		typedef enum _ECallbackType$/;"	g	namespace:Spinnaker::GenApi
_EDisplayNotation	include/SpinGenApi/Types.h	/^		typedef enum _EDisplayNotation$/;"	g	namespace:Spinnaker::GenApi
_EEndianess	include/SpinGenApi/Types.h	/^		typedef enum _EEndianess$/;"	g	namespace:Spinnaker::GenApi
_EGenApiSchemaVersion	include/SpinGenApi/Types.h	/^		typedef enum _EGenApiSchemaVersion$/;"	g	namespace:Spinnaker::GenApi
_EIncMode	include/SpinGenApi/Types.h	/^		typedef enum _EIncMode$/;"	g	namespace:Spinnaker::GenApi
_EInputDirection	include/SpinGenApi/Types.h	/^		typedef enum _EInputDirection$/;"	g	namespace:Spinnaker::GenApi
_EInterfaceType	include/SpinGenApi/Types.h	/^		typedef enum _EInterfaceType$/;"	g	namespace:Spinnaker::GenApi
_ELinkType	include/SpinGenApi/Types.h	/^		typedef enum _ELinkType$/;"	g	namespace:Spinnaker::GenApi
_ENameSpace	include/SpinGenApi/Types.h	/^		typedef enum _ENameSpace$/;"	g	namespace:Spinnaker::GenApi
_ERepresentation	include/SpinGenApi/Types.h	/^		typedef enum _ERepresentation$/;"	g	namespace:Spinnaker::GenApi
_ESign	include/SpinGenApi/Types.h	/^		typedef enum _ESign$/;"	g	namespace:Spinnaker::GenApi
_ESlope	include/SpinGenApi/Types.h	/^		typedef enum _ESlope$/;"	g	namespace:Spinnaker::GenApi
_EStandardNameSpace	include/SpinGenApi/Types.h	/^		typedef enum _EStandardNameSpace$/;"	g	namespace:Spinnaker::GenApi
_EVisibility	include/SpinGenApi/Types.h	/^		typedef enum _EVisibility$/;"	g	namespace:Spinnaker::GenApi
_EXMLValidation	include/SpinGenApi/Types.h	/^		typedef enum _EXMLValidation$/;"	g	namespace:Spinnaker::GenApi
_EYesNo	include/SpinGenApi/Types.h	/^		typedef enum _EYesNo$/;"	g	namespace:Spinnaker::GenApi
_INTPTR_T_DEFINED	include/SpinGenApi/GCTypes.h	127;"	d
_Initialize	include/SpinGenApi/NodeMapRef.h	/^			virtual void _Initialize(GenApi::INodeMap*) {}$/;"	f	class:Spinnaker::GenApi::CGeneric_XMLLoaderParams
_PTGREY_VIDEOENCODER_H	include/PtGreyVideoEncoder.h	19;"	d
_Ptr	include/SpinGenApi/NodeMap.h	/^			INodeMap* _Ptr;$/;"	m	class:Spinnaker::GenApi::NodeMap
_Ptr	include/SpinGenApi/NodeMapRef.h	/^			INodeMap *_Ptr;$/;"	m	class:Spinnaker::GenApi::CNodeMapRefT
_SIZE_T_DEFINED	include/SpinGenApi/GCTypes.h	116;"	d
_SPIN_GUID	include/SpinGenApi/Compatibility.h	/^typedef struct _SPIN_GUID {$/;"	s
_TO_STRING	include/SpinGenApi/GCUtilities.h	202;"	d
_UINTPTR_T_DEFINED	include/SpinGenApi/GCTypes.h	138;"	d
_UndefindedRepresentation	include/SpinGenApi/Types.h	102;"	d
_Undefined	include/SpinGenApi/Types.h	/^			_Undefined = -1$/;"	e	enum:Spinnaker::GenApi::_EGenApiSchemaVersion
_UndefinedAccesMode	include/SpinGenApi/Types.h	/^			_UndefinedAccesMode,    \/\/!< Object is not yet initialized$/;"	e	enum:Spinnaker::GenApi::_EAccessMode
_UndefinedAccesMode	include/spinc/SpinnakerGenApiDefsC.h	/^	_UndefinedAccesMode,$/;"	e	enum:_spinAccessMode
_UndefinedCachingMode	include/SpinGenApi/Types.h	/^			_UndefinedCachingMode \/\/!< Not yet initialized$/;"	e	enum:Spinnaker::GenApi::_ECachingMode
_UndefinedCachingMode	include/spinc/SpinnakerGenApiDefsC.h	/^	_UndefinedCachingMode \/\/ Not yet initialized$/;"	e	enum:_spinCachingMode
_UndefinedEDisplayNotation	include/SpinGenApi/Types.h	/^			_UndefinedEDisplayNotation  \/\/!< Object is not yet initialized$/;"	e	enum:Spinnaker::GenApi::_EDisplayNotation
_UndefinedEDisplayNotation	include/spinc/SpinnakerGenApiDefsC.h	/^	_UndefinedEDisplayNotation  \/\/!< Object is not yet initialized$/;"	e	enum:_spinDisplayNotation
_UndefinedESlope	include/SpinGenApi/Types.h	/^			_UndefinedESlope \/\/!< Object is not yet initialized$/;"	e	enum:Spinnaker::GenApi::_ESlope
_UndefinedESlope	include/spinc/SpinnakerGenApiDefsC.h	/^	_UndefinedESlope \/\/!< Object is not yet initialized$/;"	e	enum:_spinSlope
_UndefinedEXMLValidation	include/SpinGenApi/Types.h	/^			_UndefinedEXMLValidation = 0x8000000L \/\/!< Object is not yet initialized$/;"	e	enum:Spinnaker::GenApi::_EXMLValidation
_UndefinedEXMLValidation	include/spinc/SpinnakerGenApiDefsC.h	/^	_UndefinedEXMLValidation = 0x8000000L \/\/!< Object is not yet initialized$/;"	e	enum:_spinXMLValidation
_UndefinedEndian	include/SpinGenApi/Types.h	/^			_UndefinedEndian  \/\/!< Object is not yet initialized$/;"	e	enum:Spinnaker::GenApi::_EEndianess
_UndefinedEndian	include/spinc/SpinnakerGenApiDefsC.h	/^	_UndefinedEndian  \/\/!< Object is not yet initialized$/;"	e	enum:_spinEndianess
_UndefinedNameSpace	include/SpinGenApi/Types.h	/^			_UndefinedNameSpace \/\/!< Object is not yet initialized$/;"	e	enum:Spinnaker::GenApi::_ENameSpace
_UndefinedNameSpace	include/spinc/SpinnakerGenApiDefsC.h	/^	_UndefinedNameSpace \/\/!< Object is not yet initialized$/;"	e	enum:_spinNameSpace
_UndefinedRepresentation	include/SpinGenApi/Types.h	/^			_UndefinedRepresentation$/;"	e	enum:Spinnaker::GenApi::_ERepresentation
_UndefinedRepresentation	include/spinc/SpinnakerGenApiDefsC.h	/^	_UndefinedRepresentation$/;"	e	enum:_spinRepresentation
_UndefinedSign	include/SpinGenApi/Types.h	/^			_UndefinedSign  \/\/!< Object is not yet initialized$/;"	e	enum:Spinnaker::GenApi::_ESign
_UndefinedSign	include/spinc/SpinnakerGenApiDefsC.h	/^	_UndefinedSign$/;"	e	enum:_spinSign
_UndefinedStandardNameSpace	include/SpinGenApi/Types.h	/^			_UndefinedStandardNameSpace  \/\/!< Object is not yet initialized$/;"	e	enum:Spinnaker::GenApi::_EStandardNameSpace
_UndefinedStandardNameSpace	include/spinc/SpinnakerGenApiDefsC.h	/^	_UndefinedStandardNameSpace  \/\/!< Object is not yet initialized$/;"	e	enum:_spinStandardNameSpace
_UndefinedVisibility	include/SpinGenApi/Types.h	/^			_UndefinedVisibility = 99 \/\/!< Object is not yet initialized$/;"	e	enum:Spinnaker::GenApi::_EVisibility
_UndefinedVisibility	include/spinc/SpinnakerGenApiDefsC.h	/^	_UndefinedVisibility  = 99$/;"	e	enum:_spinVisibility
_UndefinedYesNo	include/SpinGenApi/Types.h	/^			_UndefinedYesNo = 2     \/\/!< Object is not yet initialized$/;"	e	enum:Spinnaker::GenApi::_EYesNo
_UndefinedYesNo	include/spinc/SpinnakerGenApiDefsC.h	/^	_UndefinedYesNo = 2     \/\/!< Object is not yet initialized$/;"	e	enum:_spinYesNo
__ERR__	include/SpinGenApi/GCUtilities.h	210;"	d
__LINE_STR__	include/SpinGenApi/GCUtilities.h	204;"	d
__LOCATION__	include/SpinGenApi/GCUtilities.h	205;"	d
__OUTPUT_FORMATER__	include/SpinGenApi/GCUtilities.h	206;"	d
__STDC_CONSTANT_MACROS	include/SpinGenApi/GCTypes.h	45;"	d
__STDC_LIMIT_MACROS	include/SpinGenApi/GCTypes.h	41;"	d
__TODO__	include/SpinGenApi/GCUtilities.h	211;"	d
__WARN__	include/SpinGenApi/GCUtilities.h	209;"	d
_chunkDataType	SpinnakerTest/ChunkData_C/ChunkData_C.cpp	/^typedef enum _chunkDataType$/;"	g	file:
_chunkDataType	src/ChunkData_C/ChunkData_C.cpp	/^typedef enum _chunkDataType$/;"	g	file:
_deviceEventType	SpinnakerTest/DeviceEvents_C/DeviceEvents_C.cpp	/^typedef enum _deviceEventType$/;"	g	file:
_deviceEventType	src/DeviceEvents_C/DeviceEvents_C.cpp	/^typedef enum _deviceEventType$/;"	g	file:
_fileType	SpinnakerTest/SaveToAvi_C/SaveToAvi_C.cpp	/^typedef enum _fileType$/;"	g	file:
_fileType	src/SaveToAvi_C/SaveToAvi_C.cpp	/^typedef enum _fileType$/;"	g	file:
_pCount	include/SpinGenApi/Autovector.h	/^			ATOMIC_VARIABLE *_pCount;$/;"	m	class:Spinnaker::GenApi::double_autovector_t
_pCount	include/SpinGenApi/Autovector.h	/^			ATOMIC_VARIABLE *_pCount;$/;"	m	class:Spinnaker::GenApi::int64_autovector_t
_pRefCount	include/SpinGenApi/NodeMapRef.h	/^			int* _pRefCount;$/;"	m	class:Spinnaker::GenApi::CNodeMapRefT
_ps	include/SpinGenApi/Container.h	/^				T *              _ps;$/;"	m	class:Spinnaker::GenApi::node_vector::const_iterator
_ps	include/SpinGenApi/Container.h	/^				T *              _ps;$/;"	m	class:Spinnaker::GenApi::value_vector::const_iterator
_ps	include/SpinGenApi/GCStringVector.h	/^				gcstring *              _ps;$/;"	m	class:Spinnaker::GenICam::gcstring_vector::const_iterator
_pv	include/SpinGenApi/Autovector.h	/^			std::vector<double> * _pv;$/;"	m	class:Spinnaker::GenApi::double_autovector_t
_pv	include/SpinGenApi/Autovector.h	/^			std::vector<int64_t> * _pv;$/;"	m	class:Spinnaker::GenApi::int64_autovector_t
_pv	include/SpinGenApi/Container.h	/^			vector_t *_pv;$/;"	m	class:Spinnaker::GenApi::node_vector
_pv	include/SpinGenApi/Container.h	/^			vector_t *_pv;$/;"	m	class:Spinnaker::GenApi::value_vector
_pv	include/SpinGenApi/GCStringVector.h	/^			void *                    _pv;$/;"	m	class:Spinnaker::GenICam::gcstring_vector
_quickSpin	include/spinc/QuickSpinDefsC.h	/^typedef struct _quickSpin$/;"	s
_quickSpinTLDevice	include/spinc/TransportLayerDeviceC.h	/^typedef struct _quickSpinTLDevice$/;"	s
_quickSpinTLInterface	include/spinc/TransportLayerInterfaceC.h	/^typedef struct _quickSpinTLInterface$/;"	s
_quickSpinTLStream	include/spinc/TransportLayerStreamC.h	/^typedef struct _quickSpinTLStream$/;"	s
_readType	SpinnakerTest/NodeMapInfo_C/NodeMapInfo_C.cpp	/^typedef enum _readType$/;"	g	file:
_readType	src/NodeMapInfo_C/NodeMapInfo_C.cpp	/^typedef enum _readType$/;"	g	file:
_spinAVIOption	include/spinc/SpinnakerDefsC.h	/^typedef struct _spinAVIOption$/;"	s
_spinAccessMode	include/spinc/SpinnakerGenApiDefsC.h	/^typedef enum _spinAccessMode$/;"	g
_spinAcquisitionModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinAcquisitionModeEnums	\/*!< Sets the acquisition mode of the device. It defines mainly the number of frames to capture during an acquisition and the way the acquisition stops.*\/$/;"	g
_spinAcquisitionStatusSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinAcquisitionStatusSelectorEnums	\/*!< Selects the internal acquisition signal to read using AcquisitionStatus.*\/$/;"	g
_spinActionUnconditionalModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinActionUnconditionalModeEnums	\/*!< Enables the unconditional action command mode where action commands are processed even when the primary control channel is closed.*\/$/;"	g
_spinBMPOption	include/spinc/SpinnakerDefsC.h	/^typedef struct _spinBMPOption$/;"	s
_spinBalanceRatioSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinBalanceRatioSelectorEnums	\/*!< Selects which Balance ratio to control.*\/$/;"	g
_spinBalanceWhiteAutoEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinBalanceWhiteAutoEnums	\/*!< Controls the mode for automatic white balancing between the color channels. The white balancing ratios are automatically adjusted.*\/$/;"	g
_spinBinningHorizontalModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinBinningHorizontalModeEnums	\/*!< Sets the mode to use to combine horizontal photo-sensitive cells together when BinningHorizontal is used.*\/$/;"	g
_spinBinningSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinBinningSelectorEnums	\/*!< Selects which binning engine is controlled by the BinningHorizontal and BinningVertical features.*\/$/;"	g
_spinBinningVerticalModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinBinningVerticalModeEnums	\/*!< Sets the mode used to combine horizontal photo-sensitive cells together when BinningVertical is used.*\/$/;"	g
_spinBlackLevelAutoBalanceEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinBlackLevelAutoBalanceEnums	\/*!< Controls the mode for automatic black level balancing between the sensor color channels or taps. The black level coefficients of each channel are adjusted so they are matched.*\/$/;"	g
_spinBlackLevelAutoEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinBlackLevelAutoEnums	\/*!< Controls the mode for automatic black level adjustment. The exact algorithm used to implement this adjustment is device-specific.*\/$/;"	g
_spinBlackLevelSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinBlackLevelSelectorEnums	\/*!< Selects which Black Level is controlled by the various Black Level features.*\/$/;"	g
_spinCachingMode	include/spinc/SpinnakerGenApiDefsC.h	/^typedef enum _spinCachingMode$/;"	g
_spinChunkBlackLevelSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinChunkBlackLevelSelectorEnums	\/*!< Selects which Black Level to return. Possible values are:*\/$/;"	g
_spinChunkCounterSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinChunkCounterSelectorEnums	\/*!< Selects which counter to retrieve data from.*\/$/;"	g
_spinChunkData	include/spinc/ChunkDataDefC.h	/^typedef struct _spinChunkData$/;"	s
_spinChunkEncoderSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinChunkEncoderSelectorEnums	\/*!< Selects which Encoder to retrieve data from.*\/$/;"	g
_spinChunkEncoderStatusEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinChunkEncoderStatusEnums	\/*!< Returns the motion status of the selected encoder.*\/$/;"	g
_spinChunkExposureTimeSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinChunkExposureTimeSelectorEnums	\/*!< Selects which exposure time is read by the ChunkExposureTime feature.*\/$/;"	g
_spinChunkGainSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinChunkGainSelectorEnums	\/*!< Selects which Gain to return.*\/$/;"	g
_spinChunkImageComponentEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinChunkImageComponentEnums	\/*!< Returns the component of the payload image. This can be used to identify the image component of a generic part in a multipart transfer.*\/$/;"	g
_spinChunkPixelFormatEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinChunkPixelFormatEnums	\/*!< Returns the PixelFormat of the image included in the payload.*\/$/;"	g
_spinChunkRegionIDEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinChunkRegionIDEnums	\/*!< Returns the identifier of Region that the image comes from.*\/$/;"	g
_spinChunkScan3dCoordinateReferenceSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinChunkScan3dCoordinateReferenceSelectorEnums	\/*!< Selector to read a coordinate system reference value defining the transform of a point from one system to the other.*\/$/;"	g
_spinChunkScan3dCoordinateSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinChunkScan3dCoordinateSelectorEnums	\/*!< Selects which Coordinate to retrieve data from.*\/$/;"	g
_spinChunkScan3dCoordinateSystemEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinChunkScan3dCoordinateSystemEnums	\/*!< Returns the Coordinate System of the image included in the payload.*\/$/;"	g
_spinChunkScan3dCoordinateSystemReferenceEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinChunkScan3dCoordinateSystemReferenceEnums	\/*!< Returns the Coordinate System Position of the image included in the payload.*\/$/;"	g
_spinChunkScan3dCoordinateTransformSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinChunkScan3dCoordinateTransformSelectorEnums	\/*!< Selector for transform values.*\/$/;"	g
_spinChunkScan3dDistanceUnitEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinChunkScan3dDistanceUnitEnums	\/*!< Returns the Distance Unit of the payload image.*\/$/;"	g
_spinChunkScan3dOutputModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinChunkScan3dOutputModeEnums	\/*!< Returns the Calibrated Mode of the payload image.*\/$/;"	g
_spinChunkSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinChunkSelectorEnums	\/*!< Selects which Chunk to enable or control.*\/$/;"	g
_spinChunkSourceIDEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinChunkSourceIDEnums	\/*!< Returns the identifier of Source that the image comes from.*\/$/;"	g
_spinChunkTimerSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinChunkTimerSelectorEnums	\/*!< Selects which Timer to retrieve data from.*\/$/;"	g
_spinChunkTransferStreamIDEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinChunkTransferStreamIDEnums	\/*!< Returns identifier of the stream that generated this block.*\/$/;"	g
_spinClConfigurationEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinClConfigurationEnums	\/*!< This Camera Link specific feature describes the configuration used by the camera. It helps especially when a camera is capable of operation in a non-standard configuration, and when the features PixelSize, SensorDigitizationTaps, and DeviceTapGeometry do not provide enough information for interpretation of the image data provided by the camera.*\/$/;"	g
_spinClTimeSlotsCountEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinClTimeSlotsCountEnums	\/*!< This Camera Link specific feature describes the time multiplexing of the camera link connection to transfer more than the configuration allows, in one single clock.*\/$/;"	g
_spinColorProcessingAlgorithm	include/spinc/SpinnakerDefsC.h	/^typedef enum _spinColorProcessingAlgorithm$/;"	g
_spinColorTransformationSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinColorTransformationSelectorEnums	\/*!< Selects which Color Transformation module is controlled by the various Color Transformation features.*\/$/;"	g
_spinColorTransformationValueSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinColorTransformationValueSelectorEnums	\/*!< Selects the Gain factor or Offset of the Transformation matrix to access in the selected Color Transformation module.*\/$/;"	g
_spinCounterEventActivationEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinCounterEventActivationEnums	\/*!< Selects the Activation mode Event Source signal.*\/$/;"	g
_spinCounterEventSourceEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinCounterEventSourceEnums	\/*!< Select the events that will be the source to increment the Counter.*\/$/;"	g
_spinCounterResetActivationEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinCounterResetActivationEnums	\/*!< Selects the Activation mode of the Counter Reset Source signal.*\/$/;"	g
_spinCounterResetSourceEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinCounterResetSourceEnums	\/*!< Selects the signals that will be the source to reset the Counter.*\/$/;"	g
_spinCounterSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinCounterSelectorEnums	\/*!< Selects which Counter to configure.*\/$/;"	g
_spinCounterStatusEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinCounterStatusEnums	\/*!< Returns the current status of the Counter.*\/$/;"	g
_spinCounterTriggerActivationEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinCounterTriggerActivationEnums	\/*!< Selects the activation mode of the trigger to start the Counter.*\/$/;"	g
_spinCounterTriggerSourceEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinCounterTriggerSourceEnums	\/*!< Selects the source to start the Counter.*\/$/;"	g
_spinCxpConnectionTestModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinCxpConnectionTestModeEnums	\/*!< Enables the test mode for an individual physical connection of the Device.*\/$/;"	g
_spinCxpLinkConfigurationEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinCxpLinkConfigurationEnums	\/*!< This feature allows specifying the Link configuration for the communication between the Receiver and Transmitter Device. In most cases this feature does not need to be written because automatic discovery will set configuration correctly to the value returned by CxpLinkConfigurationPreferred. Note that the currently active configuration of the Link can be read using CxpLinkConfigurationStatus.*\/$/;"	g
_spinCxpLinkConfigurationPreferredEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinCxpLinkConfigurationPreferredEnums	\/*!< Provides the Link configuration that allows the Transmitter Device to operate in its default mode.*\/$/;"	g
_spinCxpLinkConfigurationStatusEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinCxpLinkConfigurationStatusEnums	\/*!< This feature indicates the current and active Link configuration used by the Device.*\/$/;"	g
_spinCxpPoCxpStatusEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinCxpPoCxpStatusEnums	\/*!< Returns the Power over CoaXPress (PoCXP) status of the Device.*\/$/;"	g
_spinDecimationHorizontalModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinDecimationHorizontalModeEnums	\/*!< Sets the mode used to reduce the horizontal resolution when DecimationHorizontal is used.*\/$/;"	g
_spinDecimationVerticalModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinDecimationVerticalModeEnums	\/*!< Sets the mode used to reduce the Vertical resolution when DecimationVertical is used.*\/$/;"	g
_spinDeinterlacingEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinDeinterlacingEnums	\/*!< Controls how the device performs de-interlacing.*\/$/;"	g
_spinDeviceCharacterSetEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinDeviceCharacterSetEnums	\/*!< Character set used by the strings of the device's bootstrap registers.*\/$/;"	g
_spinDeviceClockSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinDeviceClockSelectorEnums	\/*!< Selects the clock frequency to access from the device.*\/$/;"	g
_spinDeviceConnectionStatusEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinDeviceConnectionStatusEnums	\/*!< Indicates the status of the specified Connection.*\/$/;"	g
_spinDeviceIndicatorModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinDeviceIndicatorModeEnums	\/*!< Controls the behavior of the indicators (such as LEDs) showing the status of the Device.*\/$/;"	g
_spinDeviceLinkHeartbeatModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinDeviceLinkHeartbeatModeEnums	\/*!< Activate or deactivate the Link's heartbeat.*\/$/;"	g
_spinDeviceLinkThroughputLimitModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinDeviceLinkThroughputLimitModeEnums	\/*!< Controls if the DeviceLinkThroughputLimit is active. When disabled, lower level TL specific features are expected to control the throughput. When enabled, DeviceLinkThroughputLimit controls the overall throughput.*\/$/;"	g
_spinDeviceRegistersEndiannessEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinDeviceRegistersEndiannessEnums	\/*!< Endianess of the registers of the device.*\/$/;"	g
_spinDeviceScanTypeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinDeviceScanTypeEnums	\/*!< Scan type of the sensor of the device.*\/$/;"	g
_spinDeviceSerialPortBaudRateEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinDeviceSerialPortBaudRateEnums	\/*!< This feature controls the baud rate used by the selected serial port.*\/$/;"	g
_spinDeviceSerialPortSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinDeviceSerialPortSelectorEnums	\/*!< Selects which serial port of the device to control.*\/$/;"	g
_spinDeviceStreamChannelEndiannessEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinDeviceStreamChannelEndiannessEnums	\/*!< Endianess of multi-byte pixel data for this stream.*\/$/;"	g
_spinDeviceStreamChannelTypeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinDeviceStreamChannelTypeEnums	\/*!< Reports the type of the stream channel.*\/$/;"	g
_spinDeviceTLTypeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinDeviceTLTypeEnums	\/*!< Transport Layer type of the device.*\/$/;"	g
_spinDeviceTapGeometryEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinDeviceTapGeometryEnums	\/*!< This device tap geometry feature describes the geometrical properties characterizing the taps of a camera as presented at the output of the device.*\/$/;"	g
_spinDeviceTemperatureSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinDeviceTemperatureSelectorEnums	\/*!< Selects the location within the device, where the temperature will be measured.*\/$/;"	g
_spinDeviceTypeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinDeviceTypeEnums	\/*!< Returns the device type.*\/$/;"	g
_spinDisplayNotation	include/spinc/SpinnakerGenApiDefsC.h	/^typedef enum _spinDisplayNotation$/;"	g
_spinEncoderModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinEncoderModeEnums	\/*!< Selects if the count of encoder uses FourPhase mode with jitter filtering or the HighResolution mode without jitter filtering.*\/$/;"	g
_spinEncoderOutputModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinEncoderOutputModeEnums	\/*!< Selects the conditions for the Encoder interface to generate a valid Encoder output signal.*\/$/;"	g
_spinEncoderResetActivationEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinEncoderResetActivationEnums	\/*!< Selects the Activation mode of the Encoder Reset Source signal.*\/$/;"	g
_spinEncoderResetSourceEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinEncoderResetSourceEnums	\/*!< Selects the signals that will be the source to reset the Encoder.*\/$/;"	g
_spinEncoderSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinEncoderSelectorEnums	\/*!< Selects which Encoder to configure.*\/$/;"	g
_spinEncoderSourceAEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinEncoderSourceAEnums	\/*!< Selects the signal which will be the source of the A input of the Encoder.*\/$/;"	g
_spinEncoderSourceBEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinEncoderSourceBEnums	\/*!< Selects the signal which will be the source of the B input of the Encoder.*\/$/;"	g
_spinEncoderStatusEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinEncoderStatusEnums	\/*!< Returns the motion status of the encoder.*\/$/;"	g
_spinEndianess	include/spinc/SpinnakerGenApiDefsC.h	/^typedef enum _spinEndianess$/;"	g
_spinError	include/spinc/SpinnakerDefsC.h	/^typedef enum _spinError$/;"	g
_spinEventNotificationEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinEventNotificationEnums	\/*!< Activate or deactivate the notification to the host application of the occurrence of the selected Event.*\/$/;"	g
_spinEventSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinEventSelectorEnums	\/*!< Selects which Event to signal to the host application.*\/$/;"	g
_spinExposureAutoEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinExposureAutoEnums	\/*!< Sets the automatic exposure mode when ExposureMode is Timed. The exact algorithm used to implement this control is device-specific.*\/$/;"	g
_spinExposureModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinExposureModeEnums	\/*!< Sets the operation mode of the Exposure.*\/$/;"	g
_spinExposureTimeModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinExposureTimeModeEnums	\/*!< Sets the configuration mode of the ExposureTime feature.*\/$/;"	g
_spinExposureTimeSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinExposureTimeSelectorEnums	\/*!< Selects which exposure time is controlled by the ExposureTime feature. This allows for independent control over the exposure components.*\/$/;"	g
_spinFileOpenModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinFileOpenModeEnums	\/*!< Selects the access mode in which a file is opened in the device.*\/$/;"	g
_spinFileOperationSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinFileOperationSelectorEnums	\/*!< Selects the target operation for the selected file in the device. This Operation is executed when the FileOperationExecute feature is called.*\/$/;"	g
_spinFileOperationStatusEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinFileOperationStatusEnums	\/*!< Represents the file operation execution status.*\/$/;"	g
_spinFileSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinFileSelectorEnums	\/*!< Selects the target file in the device.*\/$/;"	g
_spinGainAutoBalanceEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinGainAutoBalanceEnums	\/*!< Sets the mode for automatic gain balancing between the sensor color channels or taps. The gain coefficients of each channel or tap are adjusted so they are matched.*\/$/;"	g
_spinGainAutoEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinGainAutoEnums	\/*!< Sets the automatic gain control (AGC) mode. The exact algorithm used to implement AGC is device-specific.*\/$/;"	g
_spinGainSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinGainSelectorEnums	\/*!< Selects which Gain is controlled by the various Gain features.*\/$/;"	g
_spinGevCCPEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinGevCCPEnums	\/*!< Controls the device access privilege of an application.*\/$/;"	g
_spinGevCurrentPhysicalLinkConfigurationEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinGevCurrentPhysicalLinkConfigurationEnums	\/*!< Indicates the current physical link configuration of the device.*\/$/;"	g
_spinGevGVCPExtendedStatusCodesSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinGevGVCPExtendedStatusCodesSelectorEnums	\/*!< Selects the GigE Vision version to control extended status codes for.*\/$/;"	g
_spinGevGVSPExtendedIDModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinGevGVSPExtendedIDModeEnums	\/*!< Enables the extended IDs mode.*\/$/;"	g
_spinGevIEEE1588ClockAccuracyEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinGevIEEE1588ClockAccuracyEnums	\/*!< Indicates the expected accuracy of the device clock when it is the grandmaster, or in the event it becomes the grandmaster.*\/$/;"	g
_spinGevIEEE1588StatusEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinGevIEEE1588StatusEnums	\/*!< Provides the status of the IEEE 1588 clock.*\/$/;"	g
_spinGevIPConfigurationStatusEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinGevIPConfigurationStatusEnums	\/*!< Reports the current IP configuration status.*\/$/;"	g
_spinGevPhysicalLinkConfigurationEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinGevPhysicalLinkConfigurationEnums	\/*!< Controls the principal physical link configuration to use on next restart\/power-up of the device.*\/$/;"	g
_spinGevSupportedOptionSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinGevSupportedOptionSelectorEnums	\/*!< Selects the GEV option to interrogate for existing support.*\/$/;"	g
_spinH264Option	include/spinc/SpinnakerDefsC.h	/^typedef struct _spinH264Option$/;"	s
_spinImageComponentSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinImageComponentSelectorEnums	\/*!< Selects a component to activate data streaming from.*\/$/;"	g
_spinImageCompressionJPEGFormatOptionEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinImageCompressionJPEGFormatOptionEnums	\/*!< When JPEG is selected as the compression format, a device might optionally offer better control over JPEG-specific options through this feature.*\/$/;"	g
_spinImageCompressionModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinImageCompressionModeEnums	\/*!< Enable a specific image compression mode as the base mode for image transfer. Optionally, chunk data can be appended to the compressed image (See chunk section).*\/$/;"	g
_spinImageCompressionRateOptionEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinImageCompressionRateOptionEnums	\/*!< Two rate controlling options are offered: fixed bit rate or fixed quality. The exact implementation to achieve one or the other is vendor-specific.*\/$/;"	g
_spinImageFileFormat	include/spinc/SpinnakerDefsC.h	/^typedef enum _spinImageFileFormat$/;"	g
_spinImageStatus	include/spinc/SpinnakerDefsC.h	/^typedef enum _spinImageStatus$/;"	g
_spinIncMode	include/spinc/SpinnakerGenApiDefsC.h	/^typedef enum _spinIncMode$/;"	g
_spinInputDirection	include/spinc/SpinnakerGenApiDefsC.h	/^typedef enum _spinInputDirection$/;"	g
_spinInterfaceType	include/spinc/SpinnakerGenApiDefsC.h	/^typedef enum _spinInterfaceType$/;"	g
_spinJPEGOption	include/spinc/SpinnakerDefsC.h	/^typedef struct _spinJPEGOption$/;"	s
_spinJPG2Option	include/spinc/SpinnakerDefsC.h	/^typedef struct _spinJPG2Option$/;"	s
_spinLUTSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinLUTSelectorEnums	\/*!< Selects which LUT to control.*\/$/;"	g
_spinLineFormatEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinLineFormatEnums	\/*!< Controls the current electrical format of the selected physical input or output Line.*\/$/;"	g
_spinLineModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinLineModeEnums	\/*!< Controls if the physical Line is used to Input or Output a signal.*\/$/;"	g
_spinLineSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinLineSelectorEnums	\/*!< Selects the physical line (or pin) of the external device connector or the virtual line of the Transport Layer to configure.*\/$/;"	g
_spinLineSourceEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinLineSourceEnums	\/*!< Selects which internal acquisition or I\/O source signal to output on the selected Line. LineMode must be Output.*\/$/;"	g
_spinLinkType	include/spinc/SpinnakerGenApiDefsC.h	/^typedef enum _spinLinkType$/;"	g
_spinLogLevel	include/spinc/SpinnakerDefsC.h	/^typedef enum _spinLogLevel$/;"	g
_spinMJPGOption	include/spinc/SpinnakerDefsC.h	/^typedef struct _spinMJPGOption$/;"	s
_spinNameSpace	include/spinc/SpinnakerGenApiDefsC.h	/^typedef enum _spinNameSpace$/;"	g
_spinNodeType	include/spinc/SpinnakerGenApiDefsC.h	/^typedef enum _spinNodeType$/;"	g
_spinPGMOption	include/spinc/SpinnakerDefsC.h	/^typedef struct _spinPGMOption$/;"	s
_spinPNGOption	include/spinc/SpinnakerDefsC.h	/^typedef struct _spinPNGOption$/;"	s
_spinPPMOption	include/spinc/SpinnakerDefsC.h	/^typedef struct _spinPPMOption$/;"	s
_spinPayloadTypeInfoIDs	include/spinc/SpinnakerDefsC.h	/^typedef enum _spinPayloadTypeInfoIDs$/;"	g
_spinPixelColorFilterEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinPixelColorFilterEnums	\/*!< Type of color filter that is applied to the image.*\/$/;"	g
_spinPixelFormatEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinPixelFormatEnums	\/*!< Format of the pixels provided by the device. It represents all the information provided by PixelSize, PixelColorFilter combined in a single feature.*\/$/;"	g
_spinPixelFormatInfoSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinPixelFormatInfoSelectorEnums	\/*!< Select the pixel format for which the information will be returned.*\/$/;"	g
_spinPixelFormatNamespaceID	include/spinc/SpinnakerDefsC.h	/^typedef enum _spinPixelFormatNamespaceID$/;"	g
_spinPixelSizeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinPixelSizeEnums	\/*!< Total size in bits of a pixel of the image.*\/$/;"	g
_spinRegionDestinationEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinRegionDestinationEnums	\/*!< Control the destination of the selected region.*\/$/;"	g
_spinRegionModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinRegionModeEnums	\/*!< Controls if the selected Region of interest is active and streaming.*\/$/;"	g
_spinRegionSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinRegionSelectorEnums	\/*!< Selects the Region of interest to control. The RegionSelector feature allows devices that are able to extract multiple regions out of an image, to configure the features of those individual regions independently.*\/$/;"	g
_spinRepresentation	include/spinc/SpinnakerGenApiDefsC.h	/^typedef enum _spinRepresentation$/;"	g
_spinScan3dCoordinateReferenceSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinScan3dCoordinateReferenceSelectorEnums	\/*!< Sets the index to read a coordinate system reference value defining the transform of a point from the current (Anchor or Transformed) system to the reference system.*\/$/;"	g
_spinScan3dCoordinateSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinScan3dCoordinateSelectorEnums	\/*!< Selects the individual coordinates in the vectors for 3D information\/transformation.*\/$/;"	g
_spinScan3dCoordinateSystemEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinScan3dCoordinateSystemEnums	\/*!< Specifies the Coordinate system to use for the device.*\/$/;"	g
_spinScan3dCoordinateSystemReferenceEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinScan3dCoordinateSystemReferenceEnums	\/*!< Defines coordinate system reference location.*\/$/;"	g
_spinScan3dCoordinateTransformSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinScan3dCoordinateTransformSelectorEnums	\/*!< Sets the index to read\/write a coordinate transform value.*\/$/;"	g
_spinScan3dDistanceUnitEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinScan3dDistanceUnitEnums	\/*!< Specifies the unit used when delivering calibrated distance data.*\/$/;"	g
_spinScan3dOutputModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinScan3dOutputModeEnums	\/*!< Controls the Calibration and data organization of the device, naming the coordinates transmitted.*\/$/;"	g
_spinSensorDigitizationTapsEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinSensorDigitizationTapsEnums	\/*!< Number of digitized samples outputted simultaneously by the camera A\/D conversion stage.*\/$/;"	g
_spinSensorShutterModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinSensorShutterModeEnums	\/*!< Sets the shutter mode of the device.*\/$/;"	g
_spinSensorTapsEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinSensorTapsEnums	\/*!< Number of taps of the camera sensor.*\/$/;"	g
_spinSequencerConfigurationModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinSequencerConfigurationModeEnums	\/*!< Controls if the sequencer configuration mode is active.*\/$/;"	g
_spinSequencerFeatureSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinSequencerFeatureSelectorEnums	\/*!< Selects which sequencer features to control.*\/$/;"	g
_spinSequencerModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinSequencerModeEnums	\/*!< Controls if the sequencer mechanism is active.*\/$/;"	g
_spinSequencerTriggerActivationEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinSequencerTriggerActivationEnums	\/*!< Specifies the activation mode of the sequencer trigger.*\/$/;"	g
_spinSequencerTriggerSourceEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinSequencerTriggerSourceEnums	\/*!< Specifies the internal signal or physical input line to use as the sequencer trigger source.*\/$/;"	g
_spinSign	include/spinc/SpinnakerGenApiDefsC.h	/^typedef enum _spinSign$/;"	g
_spinSlope	include/spinc/SpinnakerGenApiDefsC.h	/^typedef enum _spinSlope$/;"	g
_spinSoftwareSignalSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinSoftwareSignalSelectorEnums	\/*!< Selects which Software Signal features to control.*\/$/;"	g
_spinSourceSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinSourceSelectorEnums	\/*!< Selects the source to control.*\/$/;"	g
_spinStandardNameSpace	include/spinc/SpinnakerGenApiDefsC.h	/^typedef enum _spinStandardNameSpace$/;"	g
_spinStatisticsChannel	include/spinc/SpinnakerDefsC.h	/^typedef enum _spinStatisticsChannel$/;"	g
_spinTIFFOption	include/spinc/SpinnakerDefsC.h	/^typedef struct _spinTIFFOption$/;"	s
_spinTLDeviceAccessStatusEnums	include/spinc/TransportLayerDefsC.h	/^typedef enum _spinTLDeviceAccessStatusEnums	\/*!< Gets the access status the transport layer Producer has on the device.*\/$/;"	g
_spinTLDeviceCurrentSpeedEnums	include/spinc/TransportLayerDefsC.h	/^typedef enum _spinTLDeviceCurrentSpeedEnums	\/*!< The USB Speed that the device is currently operating at.*\/$/;"	g
_spinTLDeviceEndianessMechanismEnums	include/spinc/TransportLayerDefsC.h	/^typedef enum _spinTLDeviceEndianessMechanismEnums	\/*!< Identifies the endianness handling mode.*\/$/;"	g
_spinTLDeviceTypeEnums	include/spinc/TransportLayerDefsC.h	/^typedef enum _spinTLDeviceTypeEnums	\/*!< Transport layer type of the device.*\/$/;"	g
_spinTLGUIXMLLocationEnums	include/spinc/TransportLayerDefsC.h	/^typedef enum _spinTLGUIXMLLocationEnums	\/*!< Sets the location to load GUI XML.*\/$/;"	g
_spinTLGenICamXMLLocationEnums	include/spinc/TransportLayerDefsC.h	/^typedef enum _spinTLGenICamXMLLocationEnums	\/*!< Sets the location to load GenICam XML.*\/$/;"	g
_spinTLGevCCPEnums	include/spinc/TransportLayerDefsC.h	/^typedef enum _spinTLGevCCPEnums	\/*!< Controls the device access privilege of an application.*\/$/;"	g
_spinTLPOEStatusEnums	include/spinc/TransportLayerDefsC.h	/^typedef enum _spinTLPOEStatusEnums	\/*!< Reports and controls the interface's power over Ethernet status.*\/$/;"	g
_spinTLStreamBufferHandlingModeEnums	include/spinc/TransportLayerDefsC.h	/^typedef enum _spinTLStreamBufferHandlingModeEnums	\/*!< Available buffer handling modes of this data stream:*\/$/;"	g
_spinTLStreamDefaultBufferCountModeEnums	include/spinc/TransportLayerDefsC.h	/^typedef enum _spinTLStreamDefaultBufferCountModeEnums	\/*!< Controls the number of buffers used for the stream.*\/$/;"	g
_spinTLStreamTypeEnums	include/spinc/TransportLayerDefsC.h	/^typedef enum _spinTLStreamTypeEnums	\/*!< Stream type of the device.*\/$/;"	g
_spinTestPatternEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinTestPatternEnums	\/*!< Selects the type of test pattern that is generated by the device as image source.*\/$/;"	g
_spinTestPatternGeneratorSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinTestPatternGeneratorSelectorEnums	\/*!< Selects which test pattern generator is controlled by the TestPattern feature.*\/$/;"	g
_spinTimerSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinTimerSelectorEnums	\/*!< Selects which Timer to configure.*\/$/;"	g
_spinTimerStatusEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinTimerStatusEnums	\/*!< Returns the current status of the Timer.*\/$/;"	g
_spinTimerTriggerActivationEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinTimerTriggerActivationEnums	\/*!< Selects the activation mode of the trigger to start the Timer.*\/$/;"	g
_spinTimerTriggerSourceEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinTimerTriggerSourceEnums	\/*!< Selects the source of the trigger to start the Timer.*\/$/;"	g
_spinTransferComponentSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinTransferComponentSelectorEnums	\/*!< Selects the color component for the control of the TransferStreamChannel feature.*\/$/;"	g
_spinTransferControlModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinTransferControlModeEnums	\/*!< Selects the control method for the transfers.*\/$/;"	g
_spinTransferOperationModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinTransferOperationModeEnums	\/*!< Selects the operation mode of the transfer.*\/$/;"	g
_spinTransferQueueModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinTransferQueueModeEnums	\/*!< Specifies the operation mode of the transfer queue.*\/$/;"	g
_spinTransferSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinTransferSelectorEnums	\/*!< Selects which stream transfers are currently controlled by the selected Transfer features.*\/$/;"	g
_spinTransferStatusSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinTransferStatusSelectorEnums	\/*!< Selects which status of the transfer module to read.*\/$/;"	g
_spinTransferTriggerActivationEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinTransferTriggerActivationEnums	\/*!< Specifies the activation mode of the transfer control trigger.*\/$/;"	g
_spinTransferTriggerModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinTransferTriggerModeEnums	\/*!< Controls if the selected trigger is active.*\/$/;"	g
_spinTransferTriggerSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinTransferTriggerSelectorEnums	\/*!< Selects the type of transfer trigger to configure.*\/$/;"	g
_spinTransferTriggerSourceEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinTransferTriggerSourceEnums	\/*!< Specifies the signal to use as the trigger source for transfers.*\/$/;"	g
_spinTriggerActivationEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinTriggerActivationEnums	\/*!< Specifies the activation mode of the trigger.*\/$/;"	g
_spinTriggerModeEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinTriggerModeEnums	\/*!< Controls if the selected trigger is active.*\/$/;"	g
_spinTriggerOverlapEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinTriggerOverlapEnums	\/*!< Specifies the type trigger overlap permitted with the previous frame or line. This defines when a valid trigger will be accepted (or latched) for a new frame or a new line.*\/$/;"	g
_spinTriggerSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinTriggerSelectorEnums	\/*!< Selects the type of trigger to configure.*\/$/;"	g
_spinTriggerSourceEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinTriggerSourceEnums	\/*!< Specifies the internal signal or physical input Line to use as the trigger source. The selected trigger must have its TriggerMode set to On.*\/$/;"	g
_spinUserOutputSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinUserOutputSelectorEnums	\/*!< Selects which bit of the User Output register will be set by UserOutputValue.*\/$/;"	g
_spinUserSetDefaultEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinUserSetDefaultEnums	\/*!< Selects the feature User Set to load and make active by default when the device is reset.*\/$/;"	g
_spinUserSetFeatureSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinUserSetFeatureSelectorEnums	\/*!< Selects which individual UserSet feature to control.*\/$/;"	g
_spinUserSetSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinUserSetSelectorEnums	\/*!< Selects the feature User Set to load, save or configure.*\/$/;"	g
_spinVisibility	include/spinc/SpinnakerGenApiDefsC.h	/^typedef enum _spinVisibility$/;"	g
_spinWhiteClipSelectorEnums	include/spinc/CameraDefsC.h	/^typedef enum _spinWhiteClipSelectorEnums	\/*!< Selects which White Clip to control.*\/$/;"	g
_spinXMLValidation	include/spinc/SpinnakerGenApiDefsC.h	/^typedef enum _spinXMLValidation$/;"	g
_spinYesNo	include/spinc/SpinnakerGenApiDefsC.h	/^typedef enum _spinYesNo$/;"	g
_triggerType	SpinnakerTest/Trigger_C/Trigger_C.cpp	/^typedef enum _triggerType$/;"	g	file:
_triggerType	SpinnakerTest/Trigger_C_QuickSpin/Trigger_C_QuickSpin.cpp	/^typedef enum _triggerType$/;"	g	file:
_triggerType	src/Trigger_C/Trigger_C.cpp	/^typedef enum _triggerType$/;"	g	file:
_triggerType	src/Trigger_C_QuickSpin/Trigger_C_QuickSpin.cpp	/^typedef enum _triggerType$/;"	g	file:
_userData	SpinnakerTest/DeviceEvents_C/DeviceEvents_C.cpp	/^typedef struct _userData$/;"	s	file:
_userData	SpinnakerTest/EnumerationEvents_C/EnumerationEvents_C.cpp	/^typedef struct _userData$/;"	s	file:
_userData	SpinnakerTest/ImageEvents_C/ImageEvents_C.cpp	/^typedef struct _userData$/;"	s	file:
_userData	src/DeviceEvents_C/DeviceEvents_C.cpp	/^typedef struct _userData$/;"	s	file:
_userData	src/EnumerationEvents_C/EnumerationEvents_C.cpp	/^typedef struct _userData$/;"	s	file:
_userData	src/ImageEvents_C/ImageEvents_C.cpp	/^typedef struct _userData$/;"	s	file:
aPAUSEMACCtrlFramesReceived	include/Camera.h	/^		GenApi::IInteger &aPAUSEMACCtrlFramesReceived;$/;"	m	class:Spinnaker::Camera
aPAUSEMACCtrlFramesReceived	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode aPAUSEMACCtrlFramesReceived;$/;"	m	struct:_quickSpin
aPAUSEMACCtrlFramesTransmitted	include/Camera.h	/^		GenApi::IInteger &aPAUSEMACCtrlFramesTransmitted;$/;"	m	class:Spinnaker::Camera
aPAUSEMACCtrlFramesTransmitted	include/spinc/QuickSpinDefsC.h	/^	quickSpinIntegerNode aPAUSEMACCtrlFramesTransmitted;$/;"	m	struct:_quickSpin
align	include/GUI/RapidXML/rapidxml.hpp	/^        char *align(char *ptr)$/;"	f	class:rapidxml::memory_pool
alloc_func	include/GUI/RapidXML/rapidxml.hpp	/^        typedef void *(alloc_func)(std::size_t);       \/\/ Type of user-defined function used to allocate memory$/;"	t	class:rapidxml::memory_pool
allocate_aligned	include/GUI/RapidXML/rapidxml.hpp	/^        void *allocate_aligned(std::size_t size)$/;"	f	class:rapidxml::memory_pool
allocate_attribute	include/GUI/RapidXML/rapidxml.hpp	/^        xml_attribute<Ch> *allocate_attribute(const Ch *name = 0, const Ch *value = 0, $/;"	f	class:rapidxml::memory_pool
allocate_node	include/GUI/RapidXML/rapidxml.hpp	/^        xml_node<Ch> *allocate_node(node_type type, $/;"	f	class:rapidxml::memory_pool
allocate_raw	include/GUI/RapidXML/rapidxml.hpp	/^        char *allocate_raw(std::size_t size)$/;"	f	class:rapidxml::memory_pool
allocate_string	include/GUI/RapidXML/rapidxml.hpp	/^        Ch *allocate_string(const Ch *source = 0, std::size_t size = 0)$/;"	f	class:rapidxml::memory_pool
append_attribute	include/GUI/RapidXML/rapidxml.hpp	/^        void append_attribute(xml_attribute<Ch> *attribute)$/;"	f	class:rapidxml::xml_node
append_node	include/GUI/RapidXML/rapidxml.hpp	/^        void append_node(xml_node<Ch> *child)$/;"	f	class:rapidxml::xml_node
attribute_iterator	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        attribute_iterator()$/;"	f	class:rapidxml::attribute_iterator
attribute_iterator	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        attribute_iterator(xml_node<Ch> *node)$/;"	f	class:rapidxml::attribute_iterator
attribute_iterator	include/GUI/RapidXML/rapidxml_iterators.hpp	/^    class attribute_iterator$/;"	c	namespace:rapidxml
attribute_name_pred	include/GUI/RapidXML/rapidxml.hpp	/^        struct attribute_name_pred$/;"	s	class:rapidxml::xml_document
attribute_value_pred	include/GUI/RapidXML/rapidxml.hpp	/^        struct attribute_value_pred$/;"	s	class:rapidxml::xml_document
attribute_value_pure_pred	include/GUI/RapidXML/rapidxml.hpp	/^        struct attribute_value_pure_pred$/;"	s	class:rapidxml::xml_document
aviType	SpinnakerTest/SaveToAvi/SaveToAvi.cpp	/^enum aviType$/;"	g	file:
aviType	src/SaveToAvi/SaveToAvi.cpp	/^enum aviType$/;"	g	file:
binaryFile	include/SpinnakerDefs.h	/^        bool binaryFile;$/;"	m	struct:Spinnaker::PGMOption
binaryFile	include/SpinnakerDefs.h	/^        bool binaryFile;$/;"	m	struct:Spinnaker::PPMOption
binaryFile	include/spinc/SpinnakerDefsC.h	/^	bool8_t binaryFile;$/;"	m	struct:_spinPGMOption
binaryFile	include/spinc/SpinnakerDefsC.h	/^	bool8_t binaryFile;$/;"	m	struct:_spinPPMOption
bitrate	include/SpinnakerDefs.h	/^		unsigned int bitrate;$/;"	m	struct:Spinnaker::H264Option
bitrate	include/spinc/SpinnakerDefsC.h	/^	unsigned int bitrate;$/;"	m	struct:_spinH264Option
bool8_t	include/spinc/SpinnakerDefsC.h	/^typedef uint8_t bool8_t;$/;"	t
buffer_in	include/SpinGenApi/Filestream.h	/^			int buffer_in() {$/;"	f	class:Spinnaker::GenApi::IDevFileStreamBuf
buffer_out	include/SpinGenApi/Filestream.h	/^			int64_t buffer_out() {$/;"	f	class:Spinnaker::GenApi::ODevFileStreamBuf
cbPostInsideLock	include/SpinGenApi/NodeCallback.h	/^			cbPostInsideLock = 1,   \/\/!> callback is fired on leaving the tree inside the lock-guarded area$/;"	e	enum:Spinnaker::GenApi::_ECallbackType
cbPostOutsideLock	include/SpinGenApi/NodeCallback.h	/^			cbPostOutsideLock = 2   \/\/!> callback is fired on leaving the tree inside the lock-guarded area$/;"	e	enum:Spinnaker::GenApi::_ECallbackType
char_type	include/SpinGenApi/Filestream.h	/^			typedef typename Traits::char_type char_type;$/;"	t	class:Spinnaker::GenApi::IDevFileStreamBuf
char_type	include/SpinGenApi/Filestream.h	/^			typedef typename Traits::char_type char_type;$/;"	t	class:Spinnaker::GenApi::ODevFileStreamBuf
chosenAviType	SpinnakerTest/SaveToAvi/SaveToAvi.cpp	/^const aviType chosenAviType = UNCOMPRESSED;$/;"	v
chosenAviType	src/SaveToAvi/SaveToAvi.cpp	/^const aviType chosenAviType = UNCOMPRESSED;$/;"	v
chosenChunkData	SpinnakerTest/ChunkData/ChunkData.cpp	/^const chunkDataType chosenChunkData = IMAGE;$/;"	v
chosenChunkData	SpinnakerTest/ChunkData_C/ChunkData_C.cpp	/^const chunkDataType chosenChunkData = IMAGE;$/;"	v
chosenChunkData	src/ChunkData/ChunkData.cpp	/^const chunkDataType chosenChunkData = IMAGE;$/;"	v
chosenChunkData	src/ChunkData_C/ChunkData_C.cpp	/^const chunkDataType chosenChunkData = IMAGE;$/;"	v
chosenEvent	SpinnakerTest/DeviceEvents/DeviceEvents.cpp	/^const eventType chosenEvent = GENERIC;$/;"	v
chosenEvent	SpinnakerTest/DeviceEvents_C/DeviceEvents_C.cpp	/^const deviceEventType chosenEvent = GENERIC;$/;"	v
chosenEvent	src/DeviceEvents/DeviceEvents.cpp	/^const eventType chosenEvent = GENERIC;$/;"	v
chosenEvent	src/DeviceEvents_C/DeviceEvents_C.cpp	/^const deviceEventType chosenEvent = GENERIC;$/;"	v
chosenFileType	SpinnakerTest/SaveToAvi_C/SaveToAvi_C.cpp	/^const fileType chosenFileType = UNCOMPRESSED;$/;"	v
chosenFileType	src/SaveToAvi_C/SaveToAvi_C.cpp	/^const fileType chosenFileType = UNCOMPRESSED;$/;"	v
chosenRead	SpinnakerTest/NodeMapInfo/NodeMapInfo.cpp	/^const readType chosenRead = VALUE;$/;"	v
chosenRead	SpinnakerTest/NodeMapInfo_C/NodeMapInfo_C.cpp	/^const readType chosenRead = VALUE;$/;"	v
chosenRead	src/NodeMapInfo/NodeMapInfo.cpp	/^const readType chosenRead = VALUE;$/;"	v
chosenRead	src/NodeMapInfo_C/NodeMapInfo_C.cpp	/^const readType chosenRead = VALUE;$/;"	v
chosenTrigger	Abhinay/Abhi_hardware/Abhi_hardware.cpp	/^const triggerType chosenTrigger = HARDWARE;$/;"	v
chosenTrigger	Abhinay/Abhi_test3/Abhi_test3.cpp	/^const triggerType chosenTrigger = SOFTWARE;$/;"	v
chosenTrigger	Abhinay/Abhi_trigger/Trigger.cpp	/^const triggerType chosenTrigger = SOFTWARE;$/;"	v
chosenTrigger	SpinnakerTest/Abhi_test3/Abhi_test3.cpp	/^const triggerType chosenTrigger = SOFTWARE;$/;"	v
chosenTrigger	SpinnakerTest/Abhi_trigger/Trigger.cpp	/^const triggerType chosenTrigger = SOFTWARE;$/;"	v
chosenTrigger	SpinnakerTest/Trigger/Trigger.cpp	/^const triggerType chosenTrigger = SOFTWARE;$/;"	v
chosenTrigger	SpinnakerTest/Trigger_C/Trigger_C.cpp	/^const triggerType chosenTrigger = SOFTWARE;$/;"	v
chosenTrigger	SpinnakerTest/Trigger_C_QuickSpin/Trigger_C_QuickSpin.cpp	/^const triggerType chosenTrigger = SOFTWARE;$/;"	v
chosenTrigger	SpinnakerTest/Trigger_QuickSpin/Trigger_QuickSpin.cpp	/^const triggerType chosenTrigger = SOFTWARE;$/;"	v
chosenTrigger	src/Abhi_hardware/Abhi_hardware.cpp	/^const triggerType chosenTrigger = HARDWARE;$/;"	v
chosenTrigger	src/Abhi_test3/Abhi_test3.cpp	/^const triggerType chosenTrigger = SOFTWARE;$/;"	v
chosenTrigger	src/Abhi_trigger/Trigger.cpp	/^const triggerType chosenTrigger = SOFTWARE;$/;"	v
chosenTrigger	src/Trigger/Trigger.cpp	/^const triggerType chosenTrigger = SOFTWARE;$/;"	v
chosenTrigger	src/Trigger_C/Trigger_C.cpp	/^const triggerType chosenTrigger = SOFTWARE;$/;"	v
chosenTrigger	src/Trigger_C_QuickSpin/Trigger_C_QuickSpin.cpp	/^const triggerType chosenTrigger = SOFTWARE;$/;"	v
chosenTrigger	src/Trigger_QuickSpin/Trigger_QuickSpin.cpp	/^const triggerType chosenTrigger = SOFTWARE;$/;"	v
chunkDataType	SpinnakerTest/ChunkData/ChunkData.cpp	/^enum chunkDataType$/;"	g	file:
chunkDataType	SpinnakerTest/ChunkData_C/ChunkData_C.cpp	/^} chunkDataType;$/;"	t	typeref:enum:_chunkDataType	file:
chunkDataType	src/ChunkData/ChunkData.cpp	/^enum chunkDataType$/;"	g	file:
chunkDataType	src/ChunkData_C/ChunkData_C.cpp	/^} chunkDataType;$/;"	t	typeref:enum:_chunkDataType	file:
clear	include/GUI/RapidXML/rapidxml.hpp	/^        void clear()$/;"	f	class:rapidxml::memory_pool
clear	include/GUI/RapidXML/rapidxml.hpp	/^        void clear()$/;"	f	class:rapidxml::xml_document
clone_node	include/GUI/RapidXML/rapidxml.hpp	/^        xml_node<Ch> *clone_node(const xml_node<Ch> *source, xml_node<Ch> *result = 0)$/;"	f	class:rapidxml::memory_pool
close	include/SpinGenApi/Filestream.h	/^			filebuf_type *close() {$/;"	f	class:Spinnaker::GenApi::IDevFileStreamBuf
close	include/SpinGenApi/Filestream.h	/^			filebuf_type *close() {$/;"	f	class:Spinnaker::GenApi::ODevFileStreamBuf
close	include/SpinGenApi/Filestream.h	/^			void close() {$/;"	f	class:Spinnaker::GenApi::IDevFileStreamBase
close	include/SpinGenApi/Filestream.h	/^			void close() {$/;"	f	class:Spinnaker::GenApi::ODevFileStreamBase
compare	include/GUI/RapidXML/rapidxml.hpp	/^        inline bool compare(const Ch *p1, std::size_t size1, const Ch *p2, std::size_t size2, bool case_sensitive)$/;"	f	namespace:rapidxml::internal
compression	include/SpinnakerDefs.h	/^        CompressionMethod compression;$/;"	m	struct:Spinnaker::TIFFOption
compression	include/spinc/SpinnakerDefsC.h	/^	spinCompressionMethod compression;$/;"	m	struct:_spinTIFFOption
compressionLevel	include/SpinnakerDefs.h	/^        unsigned int compressionLevel;$/;"	m	struct:Spinnaker::PNGOption
compressionLevel	include/spinc/SpinnakerDefsC.h	/^	unsigned int compressionLevel;$/;"	m	struct:_spinPNGOption
const_iterator	include/SpinGenApi/Container.h	/^			class SPINNAKER_API const_iterator$/;"	c	class:Spinnaker::GenApi::node_vector
const_iterator	include/SpinGenApi/Container.h	/^			class SPINNAKER_API const_iterator$/;"	c	class:Spinnaker::GenApi::value_vector
const_iterator	include/SpinGenApi/GCStringVector.h	/^			class SPINNAKER_API const_iterator$/;"	c	class:Spinnaker::GenICam::gcstring_vector
copy_and_expand_chars	include/GUI/RapidXML/rapidxml_print.hpp	/^        inline OutIt copy_and_expand_chars(const Ch *begin, const Ch *end, Ch noexpand, OutIt out)$/;"	f	namespace:rapidxml::internal
copy_chars	include/GUI/RapidXML/rapidxml_print.hpp	/^        inline OutIt copy_chars(const Ch *begin, const Ch *end, OutIt out)$/;"	f	namespace:rapidxml::internal
count	SpinnakerTest/DeviceEvents_C/DeviceEvents_C.cpp	/^	int count;$/;"	m	struct:_userData	file:
count	src/DeviceEvents_C/DeviceEvents_C.cpp	/^	int count;$/;"	m	struct:_userData	file:
count_attributes	include/GUI/RapidXML/rapidxml_utils.hpp	/^    inline std::size_t count_attributes(xml_node<Ch> *node)$/;"	f	namespace:rapidxml
count_children	include/GUI/RapidXML/rapidxml_utils.hpp	/^    inline std::size_t count_children(xml_node<Ch> *node)$/;"	f	namespace:rapidxml
ctAllDependingNodes	include/spinc/SpinnakerGenApiDefsC.h	/^	ctAllDependingNodes, \/\/!> All nodes which will be invalidated if this node becomes invalid$/;"	e	enum:_spinLinkType
ctAllTerminalNodes	include/spinc/SpinnakerGenApiDefsC.h	/^	ctAllTerminalNodes,  \/\/!> All terminal nodes which may be written to by this node$/;"	e	enum:_spinLinkType
ctDependingChildren	include/spinc/SpinnakerGenApiDefsC.h	/^	ctDependingChildren  \/\/!> All child nodes which will cause this node to be invalidated$/;"	e	enum:_spinLinkType
ctDependingNodes	include/SpinGenApi/Types.h	/^			ctDependingNodes,	    \/\/!> All directly or indirectly connected nodes which are invalidated by this nodes (i.e. which are dependent on this node)$/;"	e	enum:Spinnaker::GenApi::_ELinkType
ctInvalidatingChildren	include/SpinGenApi/Types.h	/^			ctInvalidatingChildren, \/\/!> All directly connected nodes which invalidate this node$/;"	e	enum:Spinnaker::GenApi::_ELinkType
ctInvalidators	include/spinc/SpinnakerGenApiDefsC.h	/^	ctInvalidators,      \/\/!> List of references to nodes which may invalidate this node$/;"	e	enum:_spinLinkType
ctParentNodes	include/SpinGenApi/Types.h	/^			ctParentNodes,			\/\/!> All nodes for which this node is at least an invalidating child$/;"	e	enum:Spinnaker::GenApi::_ELinkType
ctReadingChildren	include/SpinGenApi/Types.h	/^			ctReadingChildren,		\/\/!> All nodes which can be read from $/;"	e	enum:Spinnaker::GenApi::_ELinkType
ctReadingChildren	include/spinc/SpinnakerGenApiDefsC.h	/^	ctReadingChildren,   \/\/!> All child nodes which influence this node's AccessMode$/;"	e	enum:_spinLinkType
ctTerminalNodes	include/SpinGenApi/Types.h	/^			ctTerminalNodes		    \/\/!> All indirectly connected terminal nodes$/;"	e	enum:Spinnaker::GenApi::_ELinkType
ctWritingChildren	include/SpinGenApi/Types.h	/^			ctWritingChildren,		\/\/!> All nodes which can write a value further down the node stack$/;"	e	enum:Spinnaker::GenApi::_ELinkType
ctWritingChildren	include/spinc/SpinnakerGenApiDefsC.h	/^	ctWritingChildren,   \/\/!> All child nodes which may be written to$/;"	e	enum:_spinLinkType
data	include/GUI/RapidXML/rapidxml_utils.hpp	/^        Ch *data()$/;"	f	class:rapidxml::file
data	include/GUI/RapidXML/rapidxml_utils.hpp	/^        const Ch *data() const$/;"	f	class:rapidxml::file
deviceEventType	SpinnakerTest/DeviceEvents_C/DeviceEvents_C.cpp	/^} deviceEventType;$/;"	t	typeref:enum:_deviceEventType	file:
deviceEventType	src/DeviceEvents_C/DeviceEvents_C.cpp	/^} deviceEventType;$/;"	t	typeref:enum:_deviceEventType	file:
deviceSerialNumber	SpinnakerTest/ImageEvents_C/ImageEvents_C.cpp	/^	char deviceSerialNumber[MAX_BUFF_LEN];$/;"	m	struct:_userData	file:
deviceSerialNumber	src/ImageEvents_C/ImageEvents_C.cpp	/^	char deviceSerialNumber[MAX_BUFF_LEN];$/;"	m	struct:_userData	file:
difference_type	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        typedef std::ptrdiff_t difference_type;$/;"	t	class:rapidxml::attribute_iterator
difference_type	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        typedef std::ptrdiff_t difference_type;$/;"	t	class:rapidxml::node_iterator
difference_type	include/SpinGenApi/Container.h	/^				typedef const_iterator::difference_type difference_type;$/;"	t	class:Spinnaker::GenApi::node_vector::iterator
difference_type	include/SpinGenApi/Container.h	/^				typedef const_iterator::difference_type difference_type;$/;"	t	class:Spinnaker::GenApi::value_vector::iterator
difference_type	include/SpinGenApi/Container.h	/^				typedef ptrdiff_t difference_type;$/;"	t	class:Spinnaker::GenApi::node_vector::const_iterator
difference_type	include/SpinGenApi/Container.h	/^				typedef ptrdiff_t difference_type;$/;"	t	class:Spinnaker::GenApi::value_vector::const_iterator
document	include/GUI/RapidXML/rapidxml.hpp	/^        xml_document<Ch> *document() const$/;"	f	class:rapidxml::xml_attribute
document	include/GUI/RapidXML/rapidxml.hpp	/^        xml_document<Ch> *document() const$/;"	f	class:rapidxml::xml_node
double_autovector_t	include/SpinGenApi/Autovector.h	/^		class SPINNAKER_API double_autovector_t$/;"	c	namespace:Spinnaker::GenApi
dstHeight	include/PtGreyVideoEncoder.h	/^	int dstHeight;						\/* Height of the output image. Must be an integer multiple of 2. *\/$/;"	m	struct:PtGreyVideoEncoderOptions
dstWidth	include/PtGreyVideoEncoder.h	/^	int dstWidth;						\/* Width of the output image. Must be an integer multiple of 2. *\/$/;"	m	struct:PtGreyVideoEncoderOptions
eventName	SpinnakerTest/DeviceEvents_C/DeviceEvents_C.cpp	/^	char eventName[MAX_BUFF_LEN];$/;"	m	struct:_userData	file:
eventName	src/DeviceEvents_C/DeviceEvents_C.cpp	/^	char eventName[MAX_BUFF_LEN];$/;"	m	struct:_userData	file:
eventType	SpinnakerTest/DeviceEvents/DeviceEvents.cpp	/^enum eventType$/;"	g	file:
eventType	src/DeviceEvents/DeviceEvents.cpp	/^enum eventType$/;"	g	file:
file	include/GUI/RapidXML/rapidxml_utils.hpp	/^        file(const char *filename)$/;"	f	class:rapidxml::file
file	include/GUI/RapidXML/rapidxml_utils.hpp	/^        file(std::basic_istream<Ch> &stream)$/;"	f	class:rapidxml::file
file	include/GUI/RapidXML/rapidxml_utils.hpp	/^    class file$/;"	c	namespace:rapidxml
fileType	SpinnakerTest/SaveToAvi_C/SaveToAvi_C.cpp	/^} fileType;$/;"	t	typeref:enum:_fileType	file:
fileType	src/SaveToAvi_C/SaveToAvi_C.cpp	/^} fileType;$/;"	t	typeref:enum:_fileType	file:
filebuf_type	include/SpinGenApi/Filestream.h	/^			typedef IDevFileStreamBuf<CharType, Traits> filebuf_type;$/;"	t	class:Spinnaker::GenApi::IDevFileStreamBase
filebuf_type	include/SpinGenApi/Filestream.h	/^			typedef IDevFileStreamBuf<CharType, Traits> filebuf_type;$/;"	t	class:Spinnaker::GenApi::IDevFileStreamBuf
filebuf_type	include/SpinGenApi/Filestream.h	/^			typedef ODevFileStreamBuf<CharType, Traits> filebuf_type;$/;"	t	class:Spinnaker::GenApi::ODevFileStreamBase
filebuf_type	include/SpinGenApi/Filestream.h	/^			typedef ODevFileStreamBuf<CharType, Traits> filebuf_type;$/;"	t	class:Spinnaker::GenApi::ODevFileStreamBuf
filename	include/PtGreyVideoEncoder.h	/^	char filename[PTGREY_BUF_LEN];		\/* NULL-terminated short name (not including full path) of the output file. *\/$/;"	m	struct:PtGreyVideoEncoderOptions
fill_chars	include/GUI/RapidXML/rapidxml_print.hpp	/^        inline OutIt fill_chars(OutIt out, int n, Ch ch)$/;"	f	namespace:rapidxml::internal
find_char	include/GUI/RapidXML/rapidxml_print.hpp	/^        inline bool find_char(const Ch *begin, const Ch *end)$/;"	f	namespace:rapidxml::internal
first_attribute	include/GUI/RapidXML/rapidxml.hpp	/^        xml_attribute<Ch> *first_attribute(const Ch *name = 0, std::size_t name_size = 0, bool case_sensitive = true) const$/;"	f	class:rapidxml::xml_node
first_node	include/GUI/RapidXML/rapidxml.hpp	/^        xml_node<Ch> *first_node(const Ch *name = 0, std::size_t name_size = 0, bool case_sensitive = true) const$/;"	f	class:rapidxml::xml_node
fixedIncrement	include/SpinGenApi/Types.h	/^			fixedIncrement, \/\/ !> The feature has a fix increment$/;"	e	enum:Spinnaker::GenApi::_EIncMode
fixedIncrement	include/spinc/SpinnakerGenApiDefsC.h	/^	fixedIncrement, \/\/ !> The feature has a fix increment$/;"	e	enum:_spinIncMode
float32_t	include/SpinGenApi/GCTypes.h	/^typedef float             float32_t;$/;"	t
float64_t	include/SpinGenApi/GCTypes.h	/^typedef double            float64_t;$/;"	t
fmt	include/PtGreyVideoEncoder.h	/^	enum PtGreyVideoCodecFormat fmt;	\/* Video codec to use for output video file. *\/$/;"	m	struct:PtGreyVideoEncoderOptions	typeref:enum:PtGreyVideoEncoderOptions::PtGreyVideoCodecFormat
fnAutomatic	include/SpinGenApi/Types.h	/^			fnAutomatic, \/\/!> the notation if either scientific or fixed depending on what is shorter$/;"	e	enum:Spinnaker::GenApi::_EDisplayNotation
fnAutomatic	include/spinc/SpinnakerGenApiDefsC.h	/^	fnAutomatic, \/\/!> the notation if either scientific or fixed depending on what is shorter$/;"	e	enum:_spinDisplayNotation
fnFixed	include/SpinGenApi/Types.h	/^			fnFixed,    \/\/!> the notation is fixed, e.g. 123.4$/;"	e	enum:Spinnaker::GenApi::_EDisplayNotation
fnFixed	include/spinc/SpinnakerGenApiDefsC.h	/^	fnFixed,    \/\/!> the notation is fixed, e.g. 123.4$/;"	e	enum:_spinDisplayNotation
fnScientific	include/SpinGenApi/Types.h	/^			fnScientific,    \/\/!> the notation is scientific, e.g. 1.234e2$/;"	e	enum:Spinnaker::GenApi::_EDisplayNotation
fnScientific	include/spinc/SpinnakerGenApiDefsC.h	/^	fnScientific,    \/\/!> the notation is scientific, e.g. 1.234e2$/;"	e	enum:_spinDisplayNotation
frameRate	include/SpinnakerDefs.h	/^		float frameRate;$/;"	m	struct:Spinnaker::H264Option
frameRate	include/SpinnakerDefs.h	/^		float frameRate;$/;"	m	struct:Spinnaker::MJPGOption
frameRate	include/SpinnakerDefs.h	/^        float frameRate;$/;"	m	struct:Spinnaker::AVIOption
frameRate	include/spinc/SpinnakerDefsC.h	/^	float frameRate;$/;"	m	struct:_spinAVIOption
frameRate	include/spinc/SpinnakerDefsC.h	/^	float frameRate;$/;"	m	struct:_spinH264Option
frameRate	include/spinc/SpinnakerDefsC.h	/^	float frameRate;$/;"	m	struct:_spinMJPGOption
frames	include/PtGreyVideoEncoder.h	/^	int frames;							\/* Number of frames to encode. *\/$/;"	m	struct:PtGreyVideoEncoderOptions
free_func	include/GUI/RapidXML/rapidxml.hpp	/^        typedef void (free_func)(void *);              \/\/ Type of user-defined function used to free memory$/;"	t	class:rapidxml::memory_pool
gcstring	include/SpinGenApi/GCString.h	/^        class SPINNAKER_API gcstring$/;"	c	namespace:Spinnaker::GenICam
gcstring_vector	include/SpinGenApi/GCStringVector.h	/^		class SPINNAKER_API gcstring_vector$/;"	c	namespace:Spinnaker::GenICam
gcwchar	include/SpinGenApi/GCString.h	/^            class SPINNAKER_API gcwchar$/;"	c	class:Spinnaker::GenICam::gcstring
getImageCount	SpinnakerTest/ImageEvents/ImageEvents.cpp	/^	int getImageCount()$/;"	f	class:ImageEventHandler
getImageCount	src/ImageEvents/ImageEvents.cpp	/^	int getImageCount()$/;"	f	class:ImageEventHandler
getMaxImages	SpinnakerTest/ImageEvents/ImageEvents.cpp	/^	int getMaxImages()$/;"	f	class:ImageEventHandler
getMaxImages	src/ImageEvents/ImageEvents.cpp	/^	int getMaxImages()$/;"	f	class:ImageEventHandler
getMilliCount	Abhinay/Abhi_hardware/Abhi_hardware.cpp	/^int getMilliCount(){$/;"	f
getMilliCount	Abhinay/Abhi_test1/Abhi_test1.cpp	/^int getMilliCount(){$/;"	f
getMilliCount	Abhinay/Abhi_test1/Abhi_test1OLD.cpp	/^int getMilliCount(){$/;"	f
getMilliCount	Abhinay/Abhi_test1/MultiCamStream.cpp	/^int getMilliCount(){$/;"	f
getMilliCount	Abhinay/Abhi_test3/Abhi_test3.cpp	/^int getMilliCount(){$/;"	f
getMilliCount	Abhinay/Abhi_test4/Abhi_test4.cpp	/^int getMilliCount(){$/;"	f
getMilliCount	SpinnakerTest/Abhi_test1/Abhi_test1.cpp	/^int getMilliCount(){$/;"	f
getMilliCount	SpinnakerTest/Abhi_test1/Abhi_test1OLD.cpp	/^int getMilliCount(){$/;"	f
getMilliCount	SpinnakerTest/Abhi_test1/MultiCamStream.cpp	/^int getMilliCount(){$/;"	f
getMilliCount	SpinnakerTest/Abhi_test4/Abhi_test4.cpp	/^int getMilliCount(){$/;"	f
getMilliCount	src/Abhi_hardware/Abhi_hardware.cpp	/^int getMilliCount(){$/;"	f
getMilliCount	src/Abhi_test1/Abhi_test1.cpp	/^int getMilliCount(){$/;"	f
getMilliCount	src/Abhi_test1/Abhi_test1OLD.cpp	/^int getMilliCount(){$/;"	f
getMilliCount	src/Abhi_test1/MultiCamStream.cpp	/^int getMilliCount(){$/;"	f
getMilliCount	src/Abhi_test3/Abhi_test3.cpp	/^int getMilliCount(){$/;"	f
getMilliCount	src/Abhi_test4/Abhi_test4.cpp	/^int getMilliCount(){$/;"	f
getMilliSpan	Abhinay/Abhi_hardware/Abhi_hardware.cpp	/^int getMilliSpan(int nTimeStart){$/;"	f
getMilliSpan	Abhinay/Abhi_test1/Abhi_test1.cpp	/^int getMilliSpan(int nTimeStart){$/;"	f
getMilliSpan	Abhinay/Abhi_test1/Abhi_test1OLD.cpp	/^int getMilliSpan(int nTimeStart){$/;"	f
getMilliSpan	Abhinay/Abhi_test1/MultiCamStream.cpp	/^int getMilliSpan(int nTimeStart){$/;"	f
getMilliSpan	Abhinay/Abhi_test3/Abhi_test3.cpp	/^int getMilliSpan(int nTimeStart){$/;"	f
getMilliSpan	Abhinay/Abhi_test4/Abhi_test4.cpp	/^int getMilliSpan(int nTimeStart){$/;"	f
getMilliSpan	SpinnakerTest/Abhi_test1/Abhi_test1.cpp	/^int getMilliSpan(int nTimeStart){$/;"	f
getMilliSpan	SpinnakerTest/Abhi_test1/Abhi_test1OLD.cpp	/^int getMilliSpan(int nTimeStart){$/;"	f
getMilliSpan	SpinnakerTest/Abhi_test1/MultiCamStream.cpp	/^int getMilliSpan(int nTimeStart){$/;"	f
getMilliSpan	SpinnakerTest/Abhi_test4/Abhi_test4.cpp	/^int getMilliSpan(int nTimeStart){$/;"	f
getMilliSpan	src/Abhi_hardware/Abhi_hardware.cpp	/^int getMilliSpan(int nTimeStart){$/;"	f
getMilliSpan	src/Abhi_test1/Abhi_test1.cpp	/^int getMilliSpan(int nTimeStart){$/;"	f
getMilliSpan	src/Abhi_test1/Abhi_test1OLD.cpp	/^int getMilliSpan(int nTimeStart){$/;"	f
getMilliSpan	src/Abhi_test1/MultiCamStream.cpp	/^int getMilliSpan(int nTimeStart){$/;"	f
getMilliSpan	src/Abhi_test3/Abhi_test3.cpp	/^int getMilliSpan(int nTimeStart){$/;"	f
getMilliSpan	src/Abhi_test4/Abhi_test4.cpp	/^int getMilliSpan(int nTimeStart){$/;"	f
getline	include/SpinGenApi/GCString.h	/^		inline std::istream &  getline(std::istream& is, Spinnaker::GenICam::gcstring& str)$/;"	f	namespace:Spinnaker::GenICam
getline	include/SpinGenApi/GCString.h	/^		inline std::istream &  getline(std::istream& is, Spinnaker::GenICam::gcstring& str, char delim)$/;"	f	namespace:Spinnaker::GenICam
hInterface	SpinnakerTest/EnumerationEvents_C/EnumerationEvents_C.cpp	/^	spinInterface hInterface;$/;"	m	struct:_userData	file:
hInterface	src/EnumerationEvents_C/EnumerationEvents_C.cpp	/^	spinInterface hInterface;$/;"	m	struct:_userData	file:
header	include/GUI/RapidXML/rapidxml.hpp	/^        struct header$/;"	s	class:rapidxml::memory_pool
height	include/SpinnakerDefs.h	/^		unsigned int height;$/;"	m	struct:Spinnaker::H264Option
height	include/spinc/SpinnakerDefsC.h	/^	unsigned int height;$/;"	m	struct:_spinH264Option
idFrom	include/SpinGenApi/Types.h	/^			idFrom, \/\/!> Indicates a swiss knife that it is used as worker for a converter computing FROM$/;"	e	enum:Spinnaker::GenApi::_EInputDirection
idFrom	include/spinc/SpinnakerGenApiDefsC.h	/^	idFrom, \/\/!> Indicates a swiss knife that it is used as worker for a converter computing FROM$/;"	e	enum:_spinInputDirection
idNone	include/SpinGenApi/Types.h	/^			idNone  \/\/!> SwissKnife is not used within a converter$/;"	e	enum:Spinnaker::GenApi::_EInputDirection
idNone	include/spinc/SpinnakerGenApiDefsC.h	/^	idNone  \/\/!> SwissKnife is not used within a converter$/;"	e	enum:_spinInputDirection
idTo	include/SpinGenApi/Types.h	/^			idTo,   \/\/!> Indicates a swiss knife that it is used as worker for a converter computing TO$/;"	e	enum:Spinnaker::GenApi::_EInputDirection
idTo	include/spinc/SpinnakerGenApiDefsC.h	/^	idTo,   \/\/!> Indicates a swiss knife that it is used as worker for a converter computing TO$/;"	e	enum:_spinInputDirection
imageCnt	SpinnakerTest/ImageEvents_C/ImageEvents_C.cpp	/^	unsigned int imageCnt;$/;"	m	struct:_userData	file:
imageCnt	src/ImageEvents_C/ImageEvents_C.cpp	/^	unsigned int imageCnt;$/;"	m	struct:_userData	file:
indent	SpinnakerTest/NodeMapInfo/NodeMapInfo.cpp	/^void indent(unsigned int level)$/;"	f
indent	SpinnakerTest/NodeMapInfo_C/NodeMapInfo_C.cpp	/^void indent(unsigned int level)$/;"	f
indent	src/NodeMapInfo/NodeMapInfo.cpp	/^void indent(unsigned int level)$/;"	f
indent	src/NodeMapInfo_C/NodeMapInfo_C.cpp	/^void indent(unsigned int level)$/;"	f
indexedColor_8bit	include/SpinnakerDefs.h	/^		bool indexedColor_8bit;$/;"	m	struct:Spinnaker::BMPOption
indexedColor_8bit	include/spinc/SpinnakerDefsC.h	/^	bool8_t indexedColor_8bit;$/;"	m	struct:_spinBMPOption
init	include/GUI/RapidXML/rapidxml.hpp	/^        void init()$/;"	f	class:rapidxml::memory_pool
insert_attribute	include/GUI/RapidXML/rapidxml.hpp	/^        void insert_attribute(xml_attribute<Ch> *where, xml_attribute<Ch> *attribute)$/;"	f	class:rapidxml::xml_node
insert_coded_character	include/GUI/RapidXML/rapidxml.hpp	/^        static void insert_coded_character(Ch *&text, unsigned long code)$/;"	f	class:rapidxml::xml_document
insert_node	include/GUI/RapidXML/rapidxml.hpp	/^        void insert_node(xml_node<Ch> *where, xml_node<Ch> *child)$/;"	f	class:rapidxml::xml_node
int16_t	include/PtGreyVideoEncoderPlatform.h	/^typedef __int16				int16_t;$/;"	t
int16_t	include/SpinGenApi/GCTypes.h	/^            typedef short int16_t;$/;"	t
int32_t	include/PtGreyVideoEncoderPlatform.h	/^typedef __int32				int32_t;$/;"	t
int32_t	include/SpinGenApi/GCTypes.h	/^            typedef __int32 int32_t;$/;"	t
int32_t	include/spinc/SpinnakerPlatformC.h	/^typedef __int32 int32_t;$/;"	t
int64_autovector_t	include/SpinGenApi/Autovector.h	/^		class SPINNAKER_API int64_autovector_t$/;"	c	namespace:Spinnaker::GenApi
int64_t	include/PtGreyVideoEncoderPlatform.h	/^typedef __int64				int64_t;$/;"	t
int64_t	include/SpinGenApi/GCTypes.h	/^            typedef __int64 int64_t;$/;"	t
int64_t	include/spinc/SpinnakerPlatformC.h	/^typedef __int64	int64_t;$/;"	t
int8_t	include/PtGreyVideoEncoderPlatform.h	/^typedef __int8				int8_t;$/;"	t
int8_t	include/SpinGenApi/GCTypes.h	/^            typedef char int8_t;$/;"	t
int_t	include/SpinGenApi/GCTypes.h	/^    typedef __int64 int_t;$/;"	t
int_type	include/SpinGenApi/Filestream.h	/^			typedef typename Traits::int_type int_type;$/;"	t	class:Spinnaker::GenApi::IDevFileStreamBuf
int_type	include/SpinGenApi/Filestream.h	/^			typedef typename Traits::int_type int_type;$/;"	t	class:Spinnaker::GenApi::ODevFileStreamBuf
interface	include/SpinGenApi/Types.h	29;"	d
interfaceNum	SpinnakerTest/EnumerationEvents_C/EnumerationEvents_C.cpp	/^	int interfaceNum;$/;"	m	struct:_userData	file:
interfaceNum	src/EnumerationEvents_C/EnumerationEvents_C.cpp	/^	int interfaceNum;$/;"	m	struct:_userData	file:
interlaced	include/SpinnakerDefs.h	/^        bool interlaced;$/;"	m	struct:Spinnaker::PNGOption
interlaced	include/spinc/SpinnakerDefsC.h	/^	bool8_t interlaced;$/;"	m	struct:_spinPNGOption
internal	include/GUI/RapidXML/rapidxml.hpp	/^    namespace internal$/;"	n	namespace:rapidxml
internal	include/GUI/RapidXML/rapidxml_print.hpp	/^    namespace internal$/;"	n	namespace:rapidxml
intfIBase	include/SpinGenApi/Types.h	/^			intfIBase,        \/\/!> IBase interface$/;"	e	enum:Spinnaker::GenApi::_EInterfaceType
intfIBase	include/spinc/SpinnakerGenApiDefsC.h	/^	intfIBase,        \/\/!> IBase interface$/;"	e	enum:_spinInterfaceType
intfIBoolean	include/SpinGenApi/Types.h	/^			intfIBoolean,     \/\/!> IBoolean interface$/;"	e	enum:Spinnaker::GenApi::_EInterfaceType
intfIBoolean	include/spinc/SpinnakerGenApiDefsC.h	/^	intfIBoolean,     \/\/!> IBoolean interface$/;"	e	enum:_spinInterfaceType
intfICategory	include/SpinGenApi/Types.h	/^			intfICategory,    \/\/!> ICategory interface$/;"	e	enum:Spinnaker::GenApi::_EInterfaceType
intfICategory	include/spinc/SpinnakerGenApiDefsC.h	/^	intfICategory,    \/\/!> ICategory interface$/;"	e	enum:_spinInterfaceType
intfICommand	include/SpinGenApi/Types.h	/^			intfICommand,     \/\/!> ICommand interface$/;"	e	enum:Spinnaker::GenApi::_EInterfaceType
intfICommand	include/spinc/SpinnakerGenApiDefsC.h	/^	intfICommand,     \/\/!> ICommand interface$/;"	e	enum:_spinInterfaceType
intfIEnumEntry	include/SpinGenApi/Types.h	/^			intfIEnumEntry,   \/\/!> IEnumEntry interface$/;"	e	enum:Spinnaker::GenApi::_EInterfaceType
intfIEnumEntry	include/spinc/SpinnakerGenApiDefsC.h	/^	intfIEnumEntry,   \/\/!> IEnumEntry interface$/;"	e	enum:_spinInterfaceType
intfIEnumeration	include/SpinGenApi/Types.h	/^			intfIEnumeration, \/\/!> IEnumeration interface$/;"	e	enum:Spinnaker::GenApi::_EInterfaceType
intfIEnumeration	include/spinc/SpinnakerGenApiDefsC.h	/^	intfIEnumeration, \/\/!> IEnumeration interface$/;"	e	enum:_spinInterfaceType
intfIFloat	include/SpinGenApi/Types.h	/^			intfIFloat,       \/\/!> IFloat interface$/;"	e	enum:Spinnaker::GenApi::_EInterfaceType
intfIFloat	include/spinc/SpinnakerGenApiDefsC.h	/^	intfIFloat,       \/\/!> IFloat interface$/;"	e	enum:_spinInterfaceType
intfIInteger	include/SpinGenApi/Types.h	/^			intfIInteger,     \/\/!> IInteger interface$/;"	e	enum:Spinnaker::GenApi::_EInterfaceType
intfIInteger	include/spinc/SpinnakerGenApiDefsC.h	/^	intfIInteger,     \/\/!> IInteger interface$/;"	e	enum:_spinInterfaceType
intfIPort	include/SpinGenApi/Types.h	/^			intfIPort         \/\/!> IPort interface$/;"	e	enum:Spinnaker::GenApi::_EInterfaceType
intfIPort	include/spinc/SpinnakerGenApiDefsC.h	/^	intfIPort         \/\/!> IPort interface$/;"	e	enum:_spinInterfaceType
intfIRegister	include/SpinGenApi/Types.h	/^			intfIRegister,    \/\/!> IRegister interface$/;"	e	enum:Spinnaker::GenApi::_EInterfaceType
intfIRegister	include/spinc/SpinnakerGenApiDefsC.h	/^	intfIRegister,    \/\/!> IRegister interface$/;"	e	enum:_spinInterfaceType
intfIString	include/SpinGenApi/Types.h	/^			intfIString,      \/\/!> IString interface$/;"	e	enum:Spinnaker::GenApi::_EInterfaceType
intfIString	include/spinc/SpinnakerGenApiDefsC.h	/^	intfIString,      \/\/!> IString interface$/;"	e	enum:_spinInterfaceType
intfIValue	include/SpinGenApi/Types.h	/^			intfIValue,       \/\/!> IValue interface$/;"	e	enum:Spinnaker::GenApi::_EInterfaceType
intfIValue	include/spinc/SpinnakerGenApiDefsC.h	/^	intfIValue,       \/\/!> IValue interface$/;"	e	enum:_spinInterfaceType
intptr_t	include/SpinGenApi/GCTypes.h	/^            typedef GC_W64 int intptr_t;$/;"	t
intptr_t	include/SpinGenApi/GCTypes.h	/^            typedef __int64 intptr_t;$/;"	t
ios_type	include/SpinGenApi/Filestream.h	/^			typedef std::basic_ios<CharType, Traits> ios_type;$/;"	t	class:Spinnaker::GenApi::IDevFileStreamBase
ios_type	include/SpinGenApi/Filestream.h	/^			typedef std::basic_ios<CharType, Traits> ios_type;$/;"	t	class:Spinnaker::GenApi::ODevFileStreamBase
isCamera	include/GUI/SpinnakerGUI_WPF.h	/^			bool isCamera;$/;"	m	struct:Spinnaker::GUI_WPF::DeviceInformationStruct
is_open	include/SpinGenApi/Filestream.h	/^				is_open() const {$/;"	f	class:Spinnaker::GenApi::ODevFileStreamBuf
is_open	include/SpinGenApi/Filestream.h	/^				is_open() const$/;"	f	class:Spinnaker::GenApi::IDevFileStreamBuf
is_open	include/SpinGenApi/Filestream.h	/^			bool is_open() const {$/;"	f	class:Spinnaker::GenApi::IDevFileStreamBase
is_open	include/SpinGenApi/Filestream.h	/^			bool is_open() const {$/;"	f	class:Spinnaker::GenApi::ODevFileStreamBase
istream_type	include/SpinGenApi/Filestream.h	/^			typedef std::basic_istream<CharType, Traits> istream_type;$/;"	t	class:Spinnaker::GenApi::IDevFileStreamBase
iterator	include/SpinGenApi/Container.h	/^			class SPINNAKER_API iterator :$/;"	c	class:Spinnaker::GenApi::node_vector
iterator	include/SpinGenApi/Container.h	/^			class SPINNAKER_API iterator :$/;"	c	class:Spinnaker::GenApi::value_vector
iterator	include/SpinGenApi/GCStringVector.h	/^			class SPINNAKER_API iterator :$/;"	c	class:Spinnaker::GenICam::gcstring_vector
iterator_category	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:rapidxml::attribute_iterator
iterator_category	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:rapidxml::node_iterator
iterator_category	include/SpinGenApi/Container.h	/^				typedef std::random_access_iterator_tag iterator_category;$/;"	t	class:Spinnaker::GenApi::node_vector::const_iterator
iterator_category	include/SpinGenApi/Container.h	/^				typedef std::random_access_iterator_tag iterator_category;$/;"	t	class:Spinnaker::GenApi::node_vector::iterator
iterator_category	include/SpinGenApi/Container.h	/^				typedef std::random_access_iterator_tag iterator_category;$/;"	t	class:Spinnaker::GenApi::value_vector::const_iterator
iterator_category	include/SpinGenApi/Container.h	/^				typedef std::random_access_iterator_tag iterator_category;$/;"	t	class:Spinnaker::GenApi::value_vector::iterator
k_LoggingLevel	SpinnakerTest/Logging/Logging.cpp	/^const SpinnakerLogLevel k_LoggingLevel = LOG_LEVEL_DEBUG;$/;"	v
k_LoggingLevel	src/Logging/Logging.cpp	/^const SpinnakerLogLevel k_LoggingLevel = LOG_LEVEL_DEBUG;$/;"	v
k_loggingLevel	SpinnakerTest/Logging_C/Logging_C.cpp	/^const spinnakerLogLevel k_loggingLevel = LOG_LEVEL_DEBUG;$/;"	v
k_loggingLevel	src/Logging_C/Logging_C.cpp	/^const spinnakerLogLevel k_loggingLevel = LOG_LEVEL_DEBUG;$/;"	v
last_attribute	include/GUI/RapidXML/rapidxml.hpp	/^        xml_attribute<Ch> *last_attribute(const Ch *name = 0, std::size_t name_size = 0, bool case_sensitive = true) const$/;"	f	class:rapidxml::xml_node
last_node	include/GUI/RapidXML/rapidxml.hpp	/^        xml_node<Ch> *last_node(const Ch *name = 0, std::size_t name_size = 0, bool case_sensitive = true) const$/;"	f	class:rapidxml::xml_node
lenDeviceSerialNumber	SpinnakerTest/ImageEvents_C/ImageEvents_C.cpp	/^	size_t lenDeviceSerialNumber;$/;"	m	struct:_userData	file:
lenDeviceSerialNumber	src/ImageEvents_C/ImageEvents_C.cpp	/^	size_t lenDeviceSerialNumber;$/;"	m	struct:_userData	file:
listIncrement	include/SpinGenApi/Types.h	/^			listIncrement, \/\/ !> The feature has a list of valid value$/;"	e	enum:Spinnaker::GenApi::_EIncMode
listIncrement	include/spinc/SpinnakerGenApiDefsC.h	/^	listIncrement, \/\/ !> The feature has a list of valid value$/;"	e	enum:_spinIncMode
lookup_attribute_data_1	include/GUI/RapidXML/rapidxml.hpp	/^            static const unsigned char lookup_attribute_data_1[256];        \/\/ Attribute data table with single quote$/;"	m	struct:rapidxml::internal::lookup_tables
lookup_attribute_data_1	include/GUI/RapidXML/rapidxml.hpp	/^        const unsigned char lookup_tables<Dummy>::lookup_attribute_data_1[256] = $/;"	m	class:rapidxml::internal::lookup_tables
lookup_attribute_data_1_pure	include/GUI/RapidXML/rapidxml.hpp	/^            static const unsigned char lookup_attribute_data_1_pure[256];   \/\/ Attribute data table with single quote$/;"	m	struct:rapidxml::internal::lookup_tables
lookup_attribute_data_1_pure	include/GUI/RapidXML/rapidxml.hpp	/^        const unsigned char lookup_tables<Dummy>::lookup_attribute_data_1_pure[256] = $/;"	m	class:rapidxml::internal::lookup_tables
lookup_attribute_data_2	include/GUI/RapidXML/rapidxml.hpp	/^            static const unsigned char lookup_attribute_data_2[256];        \/\/ Attribute data table with double quotes$/;"	m	struct:rapidxml::internal::lookup_tables
lookup_attribute_data_2	include/GUI/RapidXML/rapidxml.hpp	/^        const unsigned char lookup_tables<Dummy>::lookup_attribute_data_2[256] = $/;"	m	class:rapidxml::internal::lookup_tables
lookup_attribute_data_2_pure	include/GUI/RapidXML/rapidxml.hpp	/^            static const unsigned char lookup_attribute_data_2_pure[256];   \/\/ Attribute data table with double quotes$/;"	m	struct:rapidxml::internal::lookup_tables
lookup_attribute_data_2_pure	include/GUI/RapidXML/rapidxml.hpp	/^        const unsigned char lookup_tables<Dummy>::lookup_attribute_data_2_pure[256] = $/;"	m	class:rapidxml::internal::lookup_tables
lookup_attribute_name	include/GUI/RapidXML/rapidxml.hpp	/^            static const unsigned char lookup_attribute_name[256];          \/\/ Attribute name table$/;"	m	struct:rapidxml::internal::lookup_tables
lookup_attribute_name	include/GUI/RapidXML/rapidxml.hpp	/^        const unsigned char lookup_tables<Dummy>::lookup_attribute_name[256] = $/;"	m	class:rapidxml::internal::lookup_tables
lookup_digits	include/GUI/RapidXML/rapidxml.hpp	/^            static const unsigned char lookup_digits[256];                  \/\/ Digits$/;"	m	struct:rapidxml::internal::lookup_tables
lookup_digits	include/GUI/RapidXML/rapidxml.hpp	/^        const unsigned char lookup_tables<Dummy>::lookup_digits[256] = $/;"	m	class:rapidxml::internal::lookup_tables
lookup_node_name	include/GUI/RapidXML/rapidxml.hpp	/^            static const unsigned char lookup_node_name[256];               \/\/ Node name table$/;"	m	struct:rapidxml::internal::lookup_tables
lookup_node_name	include/GUI/RapidXML/rapidxml.hpp	/^        const unsigned char lookup_tables<Dummy>::lookup_node_name[256] = $/;"	m	class:rapidxml::internal::lookup_tables
lookup_tables	include/GUI/RapidXML/rapidxml.hpp	/^        struct lookup_tables$/;"	s	namespace:rapidxml::internal
lookup_text	include/GUI/RapidXML/rapidxml.hpp	/^            static const unsigned char lookup_text[256];                    \/\/ Text table$/;"	m	struct:rapidxml::internal::lookup_tables
lookup_text	include/GUI/RapidXML/rapidxml.hpp	/^        const unsigned char lookup_tables<Dummy>::lookup_text[256] = $/;"	m	class:rapidxml::internal::lookup_tables
lookup_text_pure_no_ws	include/GUI/RapidXML/rapidxml.hpp	/^            static const unsigned char lookup_text_pure_no_ws[256];         \/\/ Text table$/;"	m	struct:rapidxml::internal::lookup_tables
lookup_text_pure_no_ws	include/GUI/RapidXML/rapidxml.hpp	/^        const unsigned char lookup_tables<Dummy>::lookup_text_pure_no_ws[256] = $/;"	m	class:rapidxml::internal::lookup_tables
lookup_text_pure_with_ws	include/GUI/RapidXML/rapidxml.hpp	/^            static const unsigned char lookup_text_pure_with_ws[256];       \/\/ Text table$/;"	m	struct:rapidxml::internal::lookup_tables
lookup_text_pure_with_ws	include/GUI/RapidXML/rapidxml.hpp	/^        const unsigned char lookup_tables<Dummy>::lookup_text_pure_with_ws[256] = $/;"	m	class:rapidxml::internal::lookup_tables
lookup_upcase	include/GUI/RapidXML/rapidxml.hpp	/^            static const unsigned char lookup_upcase[256];                  \/\/ To uppercase conversion table for ASCII characters$/;"	m	struct:rapidxml::internal::lookup_tables
lookup_upcase	include/GUI/RapidXML/rapidxml.hpp	/^        const unsigned char lookup_tables<Dummy>::lookup_upcase[256] = $/;"	m	class:rapidxml::internal::lookup_tables
lookup_whitespace	include/GUI/RapidXML/rapidxml.hpp	/^            static const unsigned char lookup_whitespace[256];              \/\/ Whitespace table$/;"	m	struct:rapidxml::internal::lookup_tables
lookup_whitespace	include/GUI/RapidXML/rapidxml.hpp	/^        const unsigned char lookup_tables<Dummy>::lookup_whitespace[256] = $/;"	m	class:rapidxml::internal::lookup_tables
m_BaseAddress	include/SpinGenApi/StructPort.h	/^			int64_t m_BaseAddress;$/;"	m	class:Spinnaker::GenApi::CTestPortStruct
m_BufSize	include/SpinGenApi/Filestream.h	/^			std::streamsize m_BufSize;$/;"	m	class:Spinnaker::GenApi::IDevFileStreamBuf
m_CallbackType	include/SpinGenApi/NodeCallback.h	/^			ECallbackType m_CallbackType;$/;"	m	class:Spinnaker::GenApi::CNodeCallback
m_Callbacks	include/SpinGenApi/Node.h	/^            std::list<CallbackHandleType_t*> m_Callbacks;$/;"	m	class:Spinnaker::GenApi::Node
m_CameraSelectionDialog	include/GUI/SpinnakerGUI_GTKmm.h	/^			static CameraSelection* m_CameraSelectionDialog;$/;"	m	class:Spinnaker::GUI_GTKmm::GUIFactory
m_Client	include/SpinGenApi/NodeCallback.h	/^			Client& m_Client;$/;"	m	class:Spinnaker::GenApi::Member_NodeCallback
m_DebugCount	include/SpinGenApi/GCSynch.h	/^			mutable long m_DebugCount;$/;"	m	class:Spinnaker::GenICam::CGlobalLock
m_GetCtrlConnection	include/GUI/SpinnakerGUI_GTKmm.h	/^			sigc::connection m_GetCtrlConnection;$/;"	m	class:Spinnaker::GUI_GTKmm::GUIFactory
m_Lock	include/SpinGenApi/GCSynch.h	/^			CGlobalLock&    m_Lock;$/;"	m	class:Spinnaker::GenICam::CGlobalLockUnlocker
m_Lock	include/SpinGenApi/GCSynch.h	/^			CLock& m_Lock;$/;"	m	class:Spinnaker::GenICam::AutoLock
m_Lock	include/SpinGenApi/GCSynch.h	/^			mutable CLock m_Lock;$/;"	m	class:Spinnaker::GenICam::LockableObject
m_Lock	include/SpinGenApi/Synch.h	/^			CLock& m_Lock;$/;"	m	class:Spinnaker::GenApi::AutoLock
m_NumReads	include/SpinGenApi/StructPort.h	/^			int64_t m_NumReads;$/;"	m	class:Spinnaker::GenApi::CTestPortStruct
m_NumWrites	include/SpinGenApi/StructPort.h	/^			int64_t m_NumWrites;$/;"	m	class:Spinnaker::GenApi::CTestPortStruct
m_Object	include/SpinGenApi/GCSynch.h	/^				const LockableObject<Object> &m_Object;$/;"	m	class:Spinnaker::GenICam::LockableObject::Lock
m_allCameraList	include/GUI/CameraSelectionWidget.h	/^				Spinnaker::CameraList m_allCameraList;$/;"	m	class:Spinnaker::GUI_GTKmm::CameraSelectionWidget
m_alloc_func	include/GUI/RapidXML/rapidxml.hpp	/^        alloc_func *m_alloc_func;                           \/\/ Allocator function, or 0 if default is to be used$/;"	m	class:rapidxml::memory_pool
m_attribute	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        xml_attribute<Ch> *m_attribute;$/;"	m	class:rapidxml::attribute_iterator
m_bIsConnected	include/GUI/Viewer.h	/^				bool m_bIsConnected;$/;"	m	class:Spinnaker::GUI_GTKmm::Viewer
m_bIsConnected	include/GUI/ViewerWidget.h	/^				bool m_bIsConnected;$/;"	m	class:Spinnaker::GUI_GTKmm::ViewerWidget
m_bOwnLock	include/SpinGenApi/Synch.h	/^			bool m_bOwnLock;$/;"	m	class:Spinnaker::GenApi::CLock
m_begin	include/GUI/RapidXML/rapidxml.hpp	/^        char *m_begin;                                      \/\/ Start of raw memory making up current pool$/;"	m	class:rapidxml::memory_pool
m_bisConnected	include/GUI/SpinnakerGUI.h	/^			bool m_bisConnected;$/;"	m	class:Spinnaker::GUI::GUIFactory
m_bisConnected	include/GUI/SpinnakerGUI_GTKmm.h	/^			bool m_bisConnected;$/;"	m	class:Spinnaker::GUI_GTKmm::GUIFactory
m_blackLevel	include/ChunkData.h	/^		float64_t m_blackLevel;$/;"	m	class:Spinnaker::ChunkData
m_blackLevel	include/spinc/ChunkDataDefC.h	/^	double m_blackLevel;$/;"	m	struct:_spinChunkData
m_count	SpinnakerTest/DeviceEvents/DeviceEvents.cpp	/^	int m_count;$/;"	m	class:DeviceEventHandler	file:
m_count	src/DeviceEvents/DeviceEvents.cpp	/^	int m_count;$/;"	m	class:DeviceEventHandler	file:
m_counterValue	include/ChunkData.h	/^		int64_t m_counterValue;$/;"	m	class:Spinnaker::ChunkData
m_counterValue	include/spinc/ChunkDataDefC.h	/^	int64_t m_counterValue;$/;"	m	struct:_spinChunkData
m_csObject	include/SpinGenApi/GCSynch.h	/^			CRITICAL_SECTION m_csObject;$/;"	m	class:Spinnaker::GenICam::CLock
m_data	include/GUI/RapidXML/rapidxml_utils.hpp	/^        std::vector<Ch> m_data;   \/\/ File data$/;"	m	class:rapidxml::file
m_deviceSerialNumber	SpinnakerTest/ImageEvents/ImageEvents.cpp	/^	string m_deviceSerialNumber;$/;"	m	class:ImageEventHandler	file:
m_deviceSerialNumber	src/ImageEvents/ImageEvents.cpp	/^	string m_deviceSerialNumber;$/;"	m	class:ImageEventHandler	file:
m_enabled	include/SpinGenApi/GCSynch.h	/^			bool            m_enabled;$/;"	m	class:Spinnaker::GenICam::CGlobalLockUnlocker
m_encoderValue	include/ChunkData.h	/^		int64_t m_encoderValue;$/;"	m	class:Spinnaker::ChunkData
m_encoderValue	include/spinc/ChunkDataDefC.h	/^	int64_t m_encoderValue;$/;"	m	struct:_spinChunkData
m_end	include/GUI/RapidXML/rapidxml.hpp	/^        char *m_end;                                        \/\/ One past last available byte in current pool$/;"	m	class:rapidxml::memory_pool
m_eventName	SpinnakerTest/DeviceEvents/DeviceEvents.cpp	/^	gcstring m_eventName;$/;"	m	class:DeviceEventHandler	file:
m_eventName	src/DeviceEvents/DeviceEvents.cpp	/^	gcstring m_eventName;$/;"	m	class:DeviceEventHandler	file:
m_exposureTime	include/ChunkData.h	/^		float64_t m_exposureTime;$/;"	m	class:Spinnaker::ChunkData
m_exposureTime	include/spinc/ChunkDataDefC.h	/^	double m_exposureTime;$/;"	m	struct:_spinChunkData
m_featureBag	include/SpinGenApi/Persistence.h	/^			void* m_featureBag;$/;"	m	class:Spinnaker::GenApi::CFeatureBag
m_file	include/SpinGenApi/Filestream.h	/^			GenICam::gcstring m_file;$/;"	m	class:Spinnaker::GenApi::IDevFileStreamBuf
m_file	include/SpinGenApi/Filestream.h	/^			const char * m_file;$/;"	m	class:Spinnaker::GenApi::ODevFileStreamBuf
m_fileProtocolAdapter	include/SpinGenApi/Filestream.h	/^			void* m_fileProtocolAdapter;$/;"	m	class:Spinnaker::GenApi::FileProtocolAdapter
m_first_attribute	include/GUI/RapidXML/rapidxml.hpp	/^        xml_attribute<Ch> *m_first_attribute;   \/\/ Pointer to first attribute of node, or 0 if none; always valid$/;"	m	class:rapidxml::xml_node
m_first_node	include/GUI/RapidXML/rapidxml.hpp	/^        xml_node<Ch> *m_first_node;             \/\/ Pointer to first child node, or 0 if none; always valid$/;"	m	class:rapidxml::xml_node
m_fpos	include/SpinGenApi/Filestream.h	/^			int64_t m_fpos;$/;"	m	class:Spinnaker::GenApi::IDevFileStreamBuf
m_fpos	include/SpinGenApi/Filestream.h	/^			int64_t m_fpos;$/;"	m	class:Spinnaker::GenApi::ODevFileStreamBuf
m_frameID	include/ChunkData.h	/^		int64_t m_frameID;$/;"	m	class:Spinnaker::ChunkData
m_frameID	include/spinc/ChunkDataDefC.h	/^	int64_t m_frameID;$/;"	m	struct:_spinChunkData
m_free_func	include/GUI/RapidXML/rapidxml.hpp	/^        free_func *m_free_func;                             \/\/ Free function, or 0 if default is to be used$/;"	m	class:rapidxml::memory_pool
m_gain	include/ChunkData.h	/^		float64_t m_gain;$/;"	m	class:Spinnaker::ChunkData
m_gain	include/spinc/ChunkDataDefC.h	/^	double m_gain;$/;"	m	struct:_spinChunkData
m_handle	include/SpinGenApi/GCSynch.h	/^        HANDLE m_handle;$/;"	m	class:Spinnaker::GenICam::CGlobalLock
m_handle	include/SpinGenApi/GCSynch.h	/^        sem_t* m_handle;$/;"	m	class:Spinnaker::GenICam::CGlobalLock
m_height	include/ChunkData.h	/^		int64_t m_height;$/;"	m	class:Spinnaker::ChunkData
m_height	include/spinc/ChunkDataDefC.h	/^	int64_t m_height;$/;"	m	struct:_spinChunkData
m_imageCnt	SpinnakerTest/ImageEvents/ImageEvents.cpp	/^	unsigned int m_imageCnt;$/;"	m	class:ImageEventHandler	file:
m_imageCnt	src/ImageEvents/ImageEvents.cpp	/^	unsigned int m_imageCnt;$/;"	m	class:ImageEventHandler	file:
m_interface	SpinnakerTest/EnumerationEvents/EnumerationEvents.cpp	/^	InterfacePtr m_interface;$/;"	m	class:InterfaceEventHandler	file:
m_interface	src/EnumerationEvents/EnumerationEvents.cpp	/^	InterfacePtr m_interface;$/;"	m	class:InterfaceEventHandler	file:
m_interfaceNum	SpinnakerTest/EnumerationEvents/EnumerationEvents.cpp	/^	int m_interfaceNum;$/;"	m	class:InterfaceEventHandler	file:
m_interfaceNum	src/EnumerationEvents/EnumerationEvents.cpp	/^	int m_interfaceNum;$/;"	m	class:InterfaceEventHandler	file:
m_last_attribute	include/GUI/RapidXML/rapidxml.hpp	/^        xml_attribute<Ch> *m_last_attribute;    \/\/ Pointer to last attribute of node, or 0 if none; this value is only valid if m_first_attribute is non-zero$/;"	m	class:rapidxml::xml_node
m_last_node	include/GUI/RapidXML/rapidxml.hpp	/^        xml_node<Ch> *m_last_node;              \/\/ Pointer to last child node, or 0 if none; this value is only valid if m_first_node is non-zero$/;"	m	class:rapidxml::xml_node
m_linePitch	include/ChunkData.h	/^		int64_t m_linePitch;$/;"	m	class:Spinnaker::ChunkData
m_linePitch	include/spinc/ChunkDataDefC.h	/^	int64_t m_linePitch;$/;"	m	struct:_spinChunkData
m_lineStatusAll	include/ChunkData.h	/^		int64_t m_lineStatusAll;$/;"	m	class:Spinnaker::ChunkData
m_lineStatusAll	include/spinc/ChunkDataDefC.h	/^	int64_t m_lineStatusAll;$/;"	m	struct:_spinChunkData
m_lock	include/SpinGenApi/Synch.h	/^			void* m_lock;$/;"	m	class:Spinnaker::GenApi::CLock
m_lockEx	include/SpinGenApi/Synch.h	/^			void* m_lockEx;$/;"	m	class:Spinnaker::GenApi::CLockEx
m_map	include/GUI/SpinnakerGUI_GTKmm.h	/^			Spinnaker::GenApi::INodeMap* m_map;$/;"	m	class:Spinnaker::GUI_GTKmm::GUIFactory
m_mtxObject	include/SpinGenApi/GCSynch.h	/^			pthread_mutex_t m_mtxObject;$/;"	m	class:Spinnaker::GenICam::CLock
m_name	include/GUI/RapidXML/rapidxml.hpp	/^        Ch *m_name;                         \/\/ Name of node, or 0 if no name$/;"	m	class:rapidxml::xml_base
m_name_size	include/GUI/RapidXML/rapidxml.hpp	/^        std::size_t m_name_size;            \/\/ Length of node name, or undefined of no name$/;"	m	class:rapidxml::xml_base
m_next_attribute	include/GUI/RapidXML/rapidxml.hpp	/^        xml_attribute<Ch> *m_next_attribute;        \/\/ Pointer to next sibling of attribute, or 0 if none; only valid if parent is non-zero$/;"	m	class:rapidxml::xml_attribute
m_next_sibling	include/GUI/RapidXML/rapidxml.hpp	/^        xml_node<Ch> *m_next_sibling;           \/\/ Pointer to next sibling of node, or 0 if none; this value is only valid if m_parent is non-zero$/;"	m	class:rapidxml::xml_node
m_node	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        xml_node<Ch> *m_node;$/;"	m	class:rapidxml::node_iterator
m_nodeMap	include/SpinGenApi/NodeMap.h	/^			mutable std::map < GenICam::gcstring, std::shared_ptr<INode> > m_nodeMap;$/;"	m	class:Spinnaker::GenApi::NodeMap
m_nodeMapRef	include/SpinGenApi/NodeMap.h	/^			void* m_nodeMapRef;$/;"	m	class:Spinnaker::GenApi::NodeMap
m_offsetX	include/ChunkData.h	/^		int64_t m_offsetX;$/;"	m	class:Spinnaker::ChunkData
m_offsetX	include/spinc/ChunkDataDefC.h	/^	int64_t m_offsetX;$/;"	m	struct:_spinChunkData
m_offsetY	include/ChunkData.h	/^		int64_t m_offsetY;$/;"	m	class:Spinnaker::ChunkData
m_offsetY	include/spinc/ChunkDataDefC.h	/^	int64_t m_offsetY;$/;"	m	struct:_spinChunkData
m_pAVIRecorderData	include/AVIRecorder.h	/^        AVIRecorderData* m_pAVIRecorderData;$/;"	m	class:Spinnaker::AVIRecorder
m_pAdapter	include/SpinGenApi/Filestream.h	/^			FileProtocolAdapter * m_pAdapter;$/;"	m	class:Spinnaker::GenApi::IDevFileStreamBuf
m_pAdapter	include/SpinGenApi/Filestream.h	/^			FileProtocolAdapter * m_pAdapter;$/;"	m	class:Spinnaker::GenApi::ODevFileStreamBuf
m_pBoolean	include/SpinGenApi/BooleanNode.h	/^			std::shared_ptr<Node::NodeImpl> m_pBoolean;$/;"	m	class:Spinnaker::GenApi::BooleanNode
m_pBuffer	include/SpinGenApi/Filestream.h	/^			char_type * m_pBuffer; \/\/ buffer[bufSize];$/;"	m	class:Spinnaker::GenApi::ODevFileStreamBuf
m_pBuffer	include/SpinGenApi/Filestream.h	/^			char_type * m_pBuffer;$/;"	m	class:Spinnaker::GenApi::IDevFileStreamBuf
m_pCamSelectionData	include/GUI/SpinnakerGUI_WPF.h	/^			CamSelectionData* m_pCamSelectionData;$/;"	m	class:Spinnaker::GUI_WPF::CameraSelectionWindow
m_pCameraBaseData	include/CameraBase.h	/^		CameraBaseData* m_pCameraBaseData;$/;"	m	class:Spinnaker::CameraBase
m_pCameraControlProxy	include/GUI/SpinnakerGUI_GTKmm.h	/^			CameraControlProxy* m_pCameraControlProxy;$/;"	m	class:Spinnaker::GUI_GTKmm::GUIFactory
m_pCameraListData	include/CameraList.h	/^		CameraListData* m_pCameraListData;$/;"	m	class:Spinnaker::CameraList
m_pCameraSelectionData	include/GUI/CameraSelection.h	/^				CameraSelectionData* m_pCameraSelectionData;$/;"	m	class:Spinnaker::GUI_GTKmm::CameraSelection
m_pCameraSelectionDialog	include/GUI/SpinnakerGUI.h	/^			static CameraSelectionDlg* m_pCameraSelectionDialog;$/;"	m	class:Spinnaker::GUI::GUIFactory
m_pCameraSelectionWidgetData	include/GUI/CameraSelectionWidget.h	/^				CameraSelectionWidgetData* m_pCameraSelectionWidgetData;$/;"	m	class:Spinnaker::GUI_GTKmm::CameraSelectionWidget
m_pCategory	include/SpinGenApi/CategoryNode.h	/^			std::shared_ptr<Node::NodeImpl> m_pCategory;$/;"	m	class:Spinnaker::GenApi::CategoryNode
m_pChunkAdapter	include/SpinGenApi/ChunkAdapter.h	/^			void* m_pChunkAdapter;$/;"	m	class:Spinnaker::GenApi::CChunkAdapter
m_pChunkPort	include/SpinGenApi/ChunkPort.h	/^			void* m_pChunkPort;$/;"	m	class:Spinnaker::GenApi::CChunkPort
m_pCommand	include/SpinGenApi/CommandNode.h	/^			std::shared_ptr<Node::NodeImpl> m_pCommand;$/;"	m	class:Spinnaker::GenApi::CommandNode
m_pData	include/ImageStatistics.h	/^        ImageStatisticsData* m_pData;$/;"	m	class:Spinnaker::ImageStatistics
m_pEnumEntry	include/SpinGenApi/EnumEntryNode.h	/^			std::shared_ptr<Node::NodeImpl> m_pEnumEntry;$/;"	m	class:Spinnaker::GenApi::EnumEntryNode
m_pEnumeration	include/SpinGenApi/EnumNode.h	/^			std::shared_ptr<Node::NodeImpl> m_pEnumeration;$/;"	m	class:Spinnaker::GenApi::EnumNode
m_pEnumerationT	include/SpinGenApi/EnumNodeT.h	/^			std::shared_ptr<Node::NodeImpl> m_pEnumerationT;$/;"	m	class:Spinnaker::GenApi::CEnumerationTRef
m_pEventAdapter	include/SpinGenApi/EventAdapter.h	/^			void* m_pEventAdapter;$/;"	m	class:Spinnaker::GenApi::CEventAdapter
m_pEventData	include/Event.h	/^		EventData* m_pEventData;$/;"	m	class:Spinnaker::Event
m_pEventPort	include/SpinGenApi/EventPort.h	/^			void* m_pEventPort;$/;"	m	class:Spinnaker::GenApi::CEventPort
m_pFloat	include/SpinGenApi/FloatNode.h	/^			std::shared_ptr<Node::NodeImpl> m_pFloat;$/;"	m	class:Spinnaker::GenApi::FloatNode
m_pFunction	include/SpinGenApi/NodeCallback.h	/^			const Function m_pFunction;$/;"	m	class:Spinnaker::GenApi::Function_NodeCallback
m_pGTKCameraSelection	include/GUI/CameraSelectionDlg.h	/^				Spinnaker::GUI_GTKmm::CameraSelection* m_pGTKCameraSelection;$/;"	m	class:Spinnaker::GUI::CameraSelectionDlg
m_pGTKGUIAPI	include/GUI/SpinnakerGUI.h	/^			Spinnaker::GUI_GTKmm::GUIFactory* m_pGTKGUIAPI;$/;"	m	class:Spinnaker::GUI::GUIFactory
m_pGTKViewer	include/GUI/ViewerDlg.h	/^			Spinnaker::GUI_GTKmm::Viewer* m_pGTKViewer;$/;"	m	class:Spinnaker::GUI::ViewerDlg
m_pGUIFactoryData	include/GUI/SpinnakerGUI_WPF.h	/^			GUIFactoryData* m_pGUIFactoryData;$/;"	m	class:Spinnaker::GUI_WPF::GUIFactory
m_pGtkPropertyGrid	include/GUI/PropertyGridDlg.h	/^				Spinnaker::GUI_GTKmm::PropertyGrid* m_pGtkPropertyGrid;$/;"	m	class:Spinnaker::GUI::PropertyGridDlg
m_pIValue	include/SpinGenApi/ValueNode.h	/^			std::shared_ptr<Node::NodeImpl> m_pIValue;$/;"	m	class:Spinnaker::GenApi::ValueNode
m_pImageData	include/Image.h	/^		ImageData* m_pImageData;$/;"	m	class:Spinnaker::Image
m_pImageStreamingData	include/GUI/SpinnakerGUI_WPF.h	/^			ImageStreamingData* m_pImageStreamingData;$/;"	m	class:Spinnaker::GUI_WPF::ImageDrawingWindow
m_pImpl	include/Exception.h	/^        ExceptionData* m_pImpl;$/;"	m	class:Spinnaker::Exception
m_pImpl	include/SpinGenApi/NodeMapFactory.h	/^			CNodeMapFactoryImpl* m_pImpl;$/;"	m	class:Spinnaker::GenApi::CNodeMapFactory
m_pInteger	include/SpinGenApi/IntegerNode.h	/^			std::shared_ptr<Node::NodeImpl> m_pInteger;$/;"	m	class:Spinnaker::GenApi::IntegerNode
m_pInterfaceData	include/Interface.h	/^		InterfaceData* m_pInterfaceData;$/;"	m	class:Spinnaker::Interface
m_pInterfaceListData	include/InterfaceList.h	/^		InterfaceListData* m_pInterfaceListData;$/;"	m	class:Spinnaker::InterfaceList
m_pLock	include/SpinGenApi/NodeMap.h	/^			mutable CLock* m_pLock;$/;"	m	class:Spinnaker::GenApi::NodeMap
m_pLoggingEventData	include/LoggingEventData.h	/^			LoggingEventDataInternal* m_pLoggingEventData;$/;"	m	class:Spinnaker::LoggingEventData
m_pMemberFunc	include/SpinGenApi/NodeCallback.h	/^			PMEMBERFUNC m_pMemberFunc;$/;"	m	class:Spinnaker::GenApi::Member_NodeCallback
m_pNode	include/SpinGenApi/EventPort.h	/^			CNodePtr m_pNode;$/;"	m	class:Spinnaker::GenApi::CEventPort
m_pNode	include/SpinGenApi/NodeCallback.h	/^			INode* m_pNode;$/;"	m	class:Spinnaker::GenApi::CNodeCallback
m_pNode	include/SpinGenApi/SelectorSet.h	/^			INode* m_pNode;$/;"	m	class:Spinnaker::GenApi::CSelectorSet
m_pNodeData	include/SpinGenApi/Node.h	/^			std::shared_ptr<Node::NodeImpl> m_pNodeData;$/;"	m	class:Spinnaker::GenApi::Node
m_pNodeMap	include/SpinGenApi/Node.h	/^			INodeMap* m_pNodeMap;$/;"	m	class:Spinnaker::GenApi::Node
m_pPort	include/SpinGenApi/ChunkPort.h	/^			CNodePtr m_pPort;$/;"	m	class:Spinnaker::GenApi::CChunkPort
m_pPort	include/SpinGenApi/PortNode.h	/^			std::shared_ptr<Node::NodeImpl> m_pPort;$/;"	m	class:Spinnaker::GenApi::PortNode
m_pPortAdapter	include/SpinGenApi/ChunkPort.h	/^			std::shared_ptr<PortAdapter> m_pPortAdapter;$/;"	m	class:Spinnaker::GenApi::CChunkPort
m_pPortAdapter	include/SpinGenApi/EventPort.h	/^			std::shared_ptr<PortAdapter> m_pPortAdapter;$/;"	m	class:Spinnaker::GenApi::CEventPort
m_pPortRecorder	include/SpinGenApi/PortRecorder.h	/^			void* m_pPortRecorder;$/;"	m	class:Spinnaker::GenApi::PortRecorder
m_pPortReplay	include/SpinGenApi/PortReplay.h	/^			void* m_pPortReplay;$/;"	m	class:Spinnaker::GenApi::PortReplay
m_pPropertyGridData	include/GUI/PropertyGrid.h	/^				PropertyGridData* m_pPropertyGridData;$/;"	m	class:Spinnaker::GUI_GTKmm::PropertyGrid
m_pPropertyGridData	include/GUI/SpinnakerGUI_WPF.h	/^			PropertyGridData* m_pPropertyGridData;$/;"	m	class:Spinnaker::GUI_WPF::PropertyGridWindow
m_pPropertyGridDialog	include/GUI/SpinnakerGUI.h	/^			static PropertyGridDlg* m_pPropertyGridDialog;$/;"	m	class:Spinnaker::GUI::GUIFactory
m_pPropertyGridDialog	include/GUI/SpinnakerGUI_GTKmm.h	/^			static PropertyGrid* m_pPropertyGridDialog;$/;"	m	class:Spinnaker::GUI_GTKmm::GUIFactory
m_pPropertyGridWidgetData	include/GUI/PropertyGridWidget.h	/^				PropertyGridWidgetData* m_pPropertyGridWidgetData;$/;"	m	class:Spinnaker::GUI_GTKmm::PropertyGridWidget
m_pRegister	include/SpinGenApi/RegisterNode.h	/^			std::shared_ptr<Node::NodeImpl> m_pRegister;$/;"	m	class:Spinnaker::GenApi::RegisterNode
m_pSelectorSet	include/SpinGenApi/SelectorSet.h	/^			void* m_pSelectorSet;$/;"	m	class:Spinnaker::GenApi::CSelectorSet
m_pString	include/SpinGenApi/StringNode.h	/^			std::shared_ptr<Node::NodeImpl> m_pString;$/;"	m	class:Spinnaker::GenApi::StringNode
m_pT	include/BasePtr.h	/^		PointerData* m_pT;$/;"	m	class:Spinnaker::BasePtr
m_pT	include/SpinGenApi/Pointer.h	/^        T* m_pT;$/;"	m	class:Spinnaker::GenApi::CPointer
m_pViewer	include/GUI/SpinnakerGUI.h	/^			static ViewerDlg* m_pViewer;$/;"	m	class:Spinnaker::GUI::GUIFactory
m_pViewer	include/GUI/SpinnakerGUI_GTKmm.h	/^			static Viewer* m_pViewer;$/;"	m	class:Spinnaker::GUI_GTKmm::GUIFactory
m_pViewerData	include/GUI/Viewer.h	/^				ViewerData* m_pViewerData;$/;"	m	class:Spinnaker::GUI_GTKmm::Viewer
m_pViewerWidgetData	include/GUI/ViewerWidget.h	/^				ViewerWidgetData* m_pViewerWidgetData;$/;"	m	class:Spinnaker::GUI_GTKmm::ViewerWidget
m_pWPFCameraSelection	include/GUI/CameraSelectionDlg.h	/^				Spinnaker::GUI_WPF::CameraSelectionWindow* m_pWPFCameraSelection;$/;"	m	class:Spinnaker::GUI::CameraSelectionDlg
m_pWPFGUIFactory	include/GUI/SpinnakerGUI.h	/^			Spinnaker::GUI_WPF::GUIFactory* m_pWPFGUIFactory;$/;"	m	class:Spinnaker::GUI::GUIFactory
m_pWPFPropertyGrid	include/GUI/PropertyGridDlg.h	/^				Spinnaker::GUI_WPF::PropertyGridWindow* m_pWPFPropertyGrid;$/;"	m	class:Spinnaker::GUI::PropertyGridDlg
m_pWPFViewer	include/GUI/ViewerDlg.h	/^			Spinnaker::GUI_WPF::ImageDrawingWindow* m_pWPFViewer;$/;"	m	class:Spinnaker::GUI::ViewerDlg
m_pWriteList	include/SpinGenApi/PortWriteList.h	/^			void* m_pWriteList;$/;"	m	class:Spinnaker::GenApi::CPortWriteList
m_parent	include/GUI/RapidXML/rapidxml.hpp	/^        xml_node<Ch> *m_parent;             \/\/ Pointer to parent node, or 0 if none$/;"	m	class:rapidxml::xml_base
m_partSelector	include/ChunkData.h	/^		int64_t m_partSelector;$/;"	m	class:Spinnaker::ChunkData
m_partSelector	include/spinc/ChunkDataDefC.h	/^	int64_t m_partSelector;$/;"	m	struct:_spinChunkData
m_pimpl	include/SpinGenApi/GCString.h	/^                impl *m_pimpl;$/;"	m	class:Spinnaker::GenICam::gcstring::gcwchar
m_pixelDynamicRangeMax	include/ChunkData.h	/^		int64_t m_pixelDynamicRangeMax;$/;"	m	class:Spinnaker::ChunkData
m_pixelDynamicRangeMax	include/spinc/ChunkDataDefC.h	/^	int64_t m_pixelDynamicRangeMax;$/;"	m	struct:_spinChunkData
m_pixelDynamicRangeMin	include/ChunkData.h	/^		int64_t m_pixelDynamicRangeMin;$/;"	m	class:Spinnaker::ChunkData
m_pixelDynamicRangeMin	include/spinc/ChunkDataDefC.h	/^	int64_t m_pixelDynamicRangeMin;$/;"	m	struct:_spinChunkData
m_portAdapters	include/SpinGenApi/NodeMap.h	/^			mutable std::vector< std::shared_ptr<PortAdapter> > m_portAdapters;$/;"	m	class:Spinnaker::GenApi::NodeMap
m_prev_attribute	include/GUI/RapidXML/rapidxml.hpp	/^        xml_attribute<Ch> *m_prev_attribute;        \/\/ Pointer to previous sibling of attribute, or 0 if none; only valid if parent is non-zero$/;"	m	class:rapidxml::xml_attribute
m_prev_sibling	include/GUI/RapidXML/rapidxml.hpp	/^        xml_node<Ch> *m_prev_sibling;           \/\/ Pointer to previous sibling of node, or 0 if none; this value is only valid if m_parent is non-zero$/;"	m	class:rapidxml::xml_node
m_psz	include/SpinGenApi/GCString.h	/^			const char* m_psz;$/;"	m	class:Spinnaker::GenICam::gcstring
m_ptr	include/GUI/RapidXML/rapidxml.hpp	/^        char *m_ptr;                                        \/\/ First free byte in current pool$/;"	m	class:rapidxml::memory_pool
m_ptrPort	include/SpinGenApi/PortImpl.h	/^			CNodePtr m_ptrPort;$/;"	m	class:Spinnaker::GenApi::CPortImpl
m_scan3dAxisMax	include/ChunkData.h	/^		float64_t m_scan3dAxisMax;$/;"	m	class:Spinnaker::ChunkData
m_scan3dAxisMax	include/spinc/ChunkDataDefC.h	/^	double m_scan3dAxisMax;$/;"	m	struct:_spinChunkData
m_scan3dAxisMin	include/ChunkData.h	/^		float64_t m_scan3dAxisMin;$/;"	m	class:Spinnaker::ChunkData
m_scan3dAxisMin	include/spinc/ChunkDataDefC.h	/^	double m_scan3dAxisMin;$/;"	m	struct:_spinChunkData
m_scan3dCoordinateOffset	include/ChunkData.h	/^		float64_t m_scan3dCoordinateOffset;$/;"	m	class:Spinnaker::ChunkData
m_scan3dCoordinateOffset	include/spinc/ChunkDataDefC.h	/^	double m_scan3dCoordinateOffset;$/;"	m	struct:_spinChunkData
m_scan3dCoordinateReferenceValue	include/ChunkData.h	/^		float64_t m_scan3dCoordinateReferenceValue;$/;"	m	class:Spinnaker::ChunkData
m_scan3dCoordinateReferenceValue	include/spinc/ChunkDataDefC.h	/^	double m_scan3dCoordinateReferenceValue;$/;"	m	struct:_spinChunkData
m_scan3dCoordinateScale	include/ChunkData.h	/^		float64_t m_scan3dCoordinateScale;$/;"	m	class:Spinnaker::ChunkData
m_scan3dCoordinateScale	include/spinc/ChunkDataDefC.h	/^	double m_scan3dCoordinateScale;$/;"	m	struct:_spinChunkData
m_scan3dInvalidDataValue	include/ChunkData.h	/^		float64_t m_scan3dInvalidDataValue;$/;"	m	class:Spinnaker::ChunkData
m_scan3dInvalidDataValue	include/spinc/ChunkDataDefC.h	/^	double m_scan3dInvalidDataValue;$/;"	m	struct:_spinChunkData
m_scan3dTransformValue	include/ChunkData.h	/^		float64_t m_scan3dTransformValue;$/;"	m	class:Spinnaker::ChunkData
m_scan3dTransformValue	include/spinc/ChunkDataDefC.h	/^	double m_scan3dTransformValue;$/;"	m	struct:_spinChunkData
m_scanLineSelector	include/ChunkData.h	/^		int64_t m_scanLineSelector;$/;"	m	class:Spinnaker::ChunkData
m_scanLineSelector	include/spinc/ChunkDataDefC.h	/^	int64_t m_scanLineSelector;$/;"	m	struct:_spinChunkData
m_sem	include/SpinGenApi/GCSynch.h	/^			SEM_ID m_sem;$/;"	m	class:Spinnaker::GenICam::CLock
m_semName	include/SpinGenApi/GCSynch.h	/^        gcstring m_semName;$/;"	m	class:Spinnaker::GenICam::CGlobalLock
m_sequencerSetActive	include/ChunkData.h	/^		int64_t m_sequencerSetActive;$/;"	m	class:Spinnaker::ChunkData
m_sequencerSetActive	include/spinc/ChunkDataDefC.h	/^	int64_t m_sequencerSetActive;$/;"	m	struct:_spinChunkData
m_static_memory	include/GUI/RapidXML/rapidxml.hpp	/^        char m_static_memory[RAPIDXML_STATIC_POOL_SIZE];    \/\/ Static raw memory$/;"	m	class:rapidxml::memory_pool
m_strData	include/SpinGenApi/GCString.h	/^			uint8_t m_strData[64];$/;"	m	class:Spinnaker::GenICam::gcstring
m_streamChannelID	include/ChunkData.h	/^		int64_t m_streamChannelID;$/;"	m	class:Spinnaker::ChunkData
m_streamChannelID	include/spinc/ChunkDataDefC.h	/^	int64_t m_streamChannelID;$/;"	m	struct:_spinChunkData
m_streambuf	include/SpinGenApi/Filestream.h	/^			filebuf_type m_streambuf;$/;"	m	class:Spinnaker::GenApi::IDevFileStreamBase
m_streambuf	include/SpinGenApi/Filestream.h	/^			filebuf_type m_streambuf;$/;"	m	class:Spinnaker::GenApi::ODevFileStreamBase
m_system	SpinnakerTest/EnumerationEvents/EnumerationEvents.cpp	/^	SystemPtr m_system;$/;"	m	class:SystemEventHandler	file:
m_system	src/EnumerationEvents/EnumerationEvents.cpp	/^	SystemPtr m_system;$/;"	m	class:SystemEventHandler	file:
m_timerValue	include/ChunkData.h	/^		float64_t m_timerValue;$/;"	m	class:Spinnaker::ChunkData
m_timerValue	include/spinc/ChunkDataDefC.h	/^	double m_timerValue;$/;"	m	struct:_spinChunkData
m_timestamp	include/ChunkData.h	/^		int64_t m_timestamp;$/;"	m	class:Spinnaker::ChunkData
m_timestamp	include/spinc/ChunkDataDefC.h	/^	int64_t m_timestamp;$/;"	m	struct:_spinChunkData
m_timestampLatchValue	include/ChunkData.h	/^		int64_t m_timestampLatchValue;$/;"	m	class:Spinnaker::ChunkData
m_timestampLatchValue	include/spinc/ChunkDataDefC.h	/^	int64_t m_timestampLatchValue;$/;"	m	struct:_spinChunkData
m_transferBlockID	include/ChunkData.h	/^		int64_t m_transferBlockID;$/;"	m	class:Spinnaker::ChunkData
m_transferBlockID	include/spinc/ChunkDataDefC.h	/^	int64_t m_transferBlockID;$/;"	m	struct:_spinChunkData
m_transferQueueCurrentBlockCount	include/ChunkData.h	/^		int64_t m_transferQueueCurrentBlockCount;$/;"	m	class:Spinnaker::ChunkData
m_transferQueueCurrentBlockCount	include/spinc/ChunkDataDefC.h	/^	int64_t m_transferQueueCurrentBlockCount;$/;"	m	struct:_spinChunkData
m_type	include/GUI/RapidXML/rapidxml.hpp	/^        node_type m_type;                       \/\/ Type of node; always valid$/;"	m	class:rapidxml::xml_node
m_value	include/GUI/RapidXML/rapidxml.hpp	/^        Ch *m_value;                        \/\/ Value of node, or 0 if no value$/;"	m	class:rapidxml::xml_base
m_value	include/SpinGenApi/Counter.h	/^			unsigned int m_value;$/;"	m	class:Spinnaker::GenApi::Counter
m_value_size	include/GUI/RapidXML/rapidxml.hpp	/^        std::size_t m_value_size;           \/\/ Length of node value, or undefined if no value$/;"	m	class:rapidxml::xml_base
m_width	include/ChunkData.h	/^		int64_t m_width;$/;"	m	class:Spinnaker::ChunkData
m_width	include/spinc/ChunkDataDefC.h	/^	int64_t m_width;$/;"	m	struct:_spinChunkData
main	Abhinay/Abhi_hardware/Abhi_hardware.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	Abhinay/Abhi_test1/Abhi_test1.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	Abhinay/Abhi_test1/Abhi_test1OLD.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	Abhinay/Abhi_test1/MultiCamStream.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	Abhinay/Abhi_test2/Abhi_test2.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	Abhinay/Abhi_test3/Abhi_test3.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	Abhinay/Abhi_test4/Abhi_test4.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	Abhinay/Abhi_trigger/Trigger.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	SpinnakerTest/Abhi_test1/Abhi_test1.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	SpinnakerTest/Abhi_test1/Abhi_test1OLD.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	SpinnakerTest/Abhi_test1/MultiCamStream.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	SpinnakerTest/Abhi_test2/Abhi_test2.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	SpinnakerTest/Abhi_test3/Abhi_test3.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	SpinnakerTest/Abhi_test4/Abhi_test4.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	SpinnakerTest/Abhi_trigger/Trigger.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	SpinnakerTest/Acquisition/Acquisition.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	SpinnakerTest/AcquisitionMultipleCamera/AcquisitionMultipleCamera.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	SpinnakerTest/AcquisitionMultipleCamera_C/AcquisitionMultipleCamera_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	SpinnakerTest/Acquisition_C/Acquisition_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	SpinnakerTest/ChunkData/ChunkData.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	SpinnakerTest/ChunkData_C/ChunkData_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	SpinnakerTest/DeviceEvents/DeviceEvents.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	SpinnakerTest/DeviceEvents_C/DeviceEvents_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	SpinnakerTest/Enumeration/Enumeration.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	SpinnakerTest/EnumerationEvents/EnumerationEvents.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	SpinnakerTest/EnumerationEvents_C/EnumerationEvents_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	SpinnakerTest/Enumeration_C/Enumeration_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	SpinnakerTest/Enumeration_C_QuickSpin/Enumeration_C_QuickSpin.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	SpinnakerTest/Enumeration_QuickSpin/Enumeration_QuickSpin.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	SpinnakerTest/Exposure/Exposure.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	SpinnakerTest/Exposure_C/Exposure_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	SpinnakerTest/Exposure_C_QuickSpin/Exposure_C_QuickSpin.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	SpinnakerTest/Exposure_QuickSpin/Exposure_QuickSpin.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	SpinnakerTest/ImageEvents/ImageEvents.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	SpinnakerTest/ImageEvents_C/ImageEvents_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	SpinnakerTest/ImageFormatControl/ImageFormatControl.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	SpinnakerTest/ImageFormatControl_C/ImageFormatControl_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	SpinnakerTest/ImageFormatControl_C_QuickSpin/ImageFormatControl_C_QuickSpin.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	SpinnakerTest/ImageFormatControl_QuickSpin/ImageFormatControl_QuickSpin.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	SpinnakerTest/Logging/Logging.cpp	/^int main( int \/*argc*\/, char** \/*argv*\/ )$/;"	f
main	SpinnakerTest/Logging_C/Logging_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	SpinnakerTest/LookupTable/LookupTable.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	SpinnakerTest/LookupTable_C/LookupTable_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	SpinnakerTest/NodeMapCallback/NodeMapCallback.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	SpinnakerTest/NodeMapCallback_C/NodeMapCallback_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	SpinnakerTest/NodeMapInfo/NodeMapInfo.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	SpinnakerTest/NodeMapInfo_C/NodeMapInfo_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	SpinnakerTest/NodeMapInfo_C_QuickSpin/NodeMapInfo_C_QuickSpin.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	SpinnakerTest/NodeMapInfo_QuickSpin/NodeMapInfo_QuickSpin.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	SpinnakerTest/SaveToAvi/SaveToAvi.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	SpinnakerTest/SaveToAvi_C/SaveToAvi_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	SpinnakerTest/Sequencer/Sequencer.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	SpinnakerTest/Sequencer_C/Sequencer_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	SpinnakerTest/Trigger/Trigger.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	SpinnakerTest/Trigger_C/Trigger_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	SpinnakerTest/Trigger_C_QuickSpin/Trigger_C_QuickSpin.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	SpinnakerTest/Trigger_QuickSpin/Trigger_QuickSpin.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	src/Abhi_hardware/Abhi_hardware.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	src/Abhi_test1/Abhi_test1.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	src/Abhi_test1/Abhi_test1OLD.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	src/Abhi_test1/MultiCamStream.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	src/Abhi_test2/Abhi_test2.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	src/Abhi_test3/Abhi_test3.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	src/Abhi_test4/Abhi_test4.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	src/Abhi_trigger/Trigger.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	src/Acquisition/Acquisition.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	src/AcquisitionMultipleCamera/AcquisitionMultipleCamera.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	src/AcquisitionMultipleCamera_C/AcquisitionMultipleCamera_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	src/Acquisition_C/Acquisition_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	src/ChunkData/ChunkData.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	src/ChunkData_C/ChunkData_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	src/DeviceEvents/DeviceEvents.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	src/DeviceEvents_C/DeviceEvents_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	src/Enumeration/Enumeration.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	src/EnumerationEvents/EnumerationEvents.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	src/EnumerationEvents_C/EnumerationEvents_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	src/Enumeration_C/Enumeration_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	src/Enumeration_C_QuickSpin/Enumeration_C_QuickSpin.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	src/Enumeration_QuickSpin/Enumeration_QuickSpin.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	src/Exposure/Exposure.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	src/Exposure_C/Exposure_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	src/Exposure_C_QuickSpin/Exposure_C_QuickSpin.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	src/Exposure_QuickSpin/Exposure_QuickSpin.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	src/ImageEvents/ImageEvents.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	src/ImageEvents_C/ImageEvents_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	src/ImageFormatControl/ImageFormatControl.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	src/ImageFormatControl_C/ImageFormatControl_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	src/ImageFormatControl_C_QuickSpin/ImageFormatControl_C_QuickSpin.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	src/ImageFormatControl_QuickSpin/ImageFormatControl_QuickSpin.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	src/Logging/Logging.cpp	/^int main( int \/*argc*\/, char** \/*argv*\/ )$/;"	f
main	src/Logging_C/Logging_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	src/LookupTable/LookupTable.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	src/LookupTable_C/LookupTable_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	src/NodeMapCallback/NodeMapCallback.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	src/NodeMapCallback_C/NodeMapCallback_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	src/NodeMapInfo/NodeMapInfo.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	src/NodeMapInfo_C/NodeMapInfo_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	src/NodeMapInfo_C_QuickSpin/NodeMapInfo_C_QuickSpin.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	src/NodeMapInfo_QuickSpin/NodeMapInfo_QuickSpin.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	src/SaveToAvi/SaveToAvi.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	src/SaveToAvi_C/SaveToAvi_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	src/Sequencer/Sequencer.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	src/Sequencer_C/Sequencer_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	src/Trigger/Trigger.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
main	src/Trigger_C/Trigger_C.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	src/Trigger_C_QuickSpin/Trigger_C_QuickSpin.cpp	/^int main(\/*int argc, char** argv*\/)$/;"	f
main	src/Trigger_QuickSpin/Trigger_QuickSpin.cpp	/^int main(int \/*argc*\/, char** \/*argv*\/)$/;"	f
make_NodeCallback	include/SpinGenApi/NodeCallback.h	/^		CNodeCallback *make_NodeCallback(INode* pNode, Client& client, Member member, ECallbackType CallbackType)$/;"	f	namespace:Spinnaker::GenApi
make_NodeCallback	include/SpinGenApi/NodeCallback.h	/^		CNodeCallback *make_NodeCallback(INode* pNode, Function function, ECallbackType CallbackType)$/;"	f	namespace:Spinnaker::GenApi
measure	include/GUI/RapidXML/rapidxml.hpp	/^        inline std::size_t measure(const Ch *p)$/;"	f	namespace:rapidxml::internal
memory_pool	include/GUI/RapidXML/rapidxml.hpp	/^        memory_pool()$/;"	f	class:rapidxml::memory_pool
memory_pool	include/GUI/RapidXML/rapidxml.hpp	/^    class memory_pool$/;"	c	namespace:rapidxml
mk_numImages	SpinnakerTest/ImageEvents/ImageEvents.cpp	/^	static const unsigned int mk_numImages = 10;$/;"	m	class:ImageEventHandler	file:
mk_numImages	src/ImageEvents/ImageEvents.cpp	/^	static const unsigned int mk_numImages = 10;$/;"	m	class:ImageEventHandler	file:
mode	include/PtGreyVideoEncoder.h	/^	enum PtGreyVideoScalerMode mode;	\/* Image scaling algorithm to use. *\/$/;"	m	struct:PtGreyVideoEncoderOptions	typeref:enum:PtGreyVideoEncoderOptions::PtGreyVideoScalerMode
name	include/GUI/RapidXML/rapidxml.hpp	/^        Ch *name() const$/;"	f	class:rapidxml::xml_base
name	include/GUI/RapidXML/rapidxml.hpp	/^        void name(const Ch *name)$/;"	f	class:rapidxml::xml_base
name	include/GUI/RapidXML/rapidxml.hpp	/^        void name(const Ch *name, std::size_t size)$/;"	f	class:rapidxml::xml_base
name_size	include/GUI/RapidXML/rapidxml.hpp	/^        std::size_t name_size() const$/;"	f	class:rapidxml::xml_base
next_attribute	include/GUI/RapidXML/rapidxml.hpp	/^        xml_attribute<Ch> *next_attribute(const Ch *name = 0, std::size_t name_size = 0, bool case_sensitive = true) const$/;"	f	class:rapidxml::xml_attribute
next_sibling	include/GUI/RapidXML/rapidxml.hpp	/^        xml_node<Ch> *next_sibling(const Ch *name = 0, std::size_t name_size = 0, bool case_sensitive = true) const$/;"	f	class:rapidxml::xml_node
noIncrement	include/SpinGenApi/Types.h	/^			noIncrement, \/\/ !> The feature has no increment$/;"	e	enum:Spinnaker::GenApi::_EIncMode
noIncrement	include/spinc/SpinnakerGenApiDefsC.h	/^	noIncrement, \/\/ !> The feature has no increment$/;"	e	enum:_spinIncMode
node_cdata	include/GUI/RapidXML/rapidxml.hpp	/^        node_cdata,         \/\/!< A CDATA node. Name is empty. Value contains data text.$/;"	e	enum:rapidxml::node_type
node_comment	include/GUI/RapidXML/rapidxml.hpp	/^        node_comment,       \/\/!< A comment node. Name is empty. Value contains comment text.$/;"	e	enum:rapidxml::node_type
node_data	include/GUI/RapidXML/rapidxml.hpp	/^        node_data,          \/\/!< A data node. Name is empty. Value contains data text.$/;"	e	enum:rapidxml::node_type
node_declaration	include/GUI/RapidXML/rapidxml.hpp	/^        node_declaration,   \/\/!< A declaration node. Name and value are empty. Declaration parameters (version, encoding and standalone) are in node attributes.$/;"	e	enum:rapidxml::node_type
node_doctype	include/GUI/RapidXML/rapidxml.hpp	/^        node_doctype,       \/\/!< A DOCTYPE node. Name is empty. Value contains DOCTYPE text.$/;"	e	enum:rapidxml::node_type
node_document	include/GUI/RapidXML/rapidxml.hpp	/^        node_document,      \/\/!< A document node. Name and value are empty.$/;"	e	enum:rapidxml::node_type
node_element	include/GUI/RapidXML/rapidxml.hpp	/^        node_element,       \/\/!< An element node. Name contains element name. Value contains text of first data node.$/;"	e	enum:rapidxml::node_type
node_iterator	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        node_iterator()$/;"	f	class:rapidxml::node_iterator
node_iterator	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        node_iterator(xml_node<Ch> *node)$/;"	f	class:rapidxml::node_iterator
node_iterator	include/GUI/RapidXML/rapidxml_iterators.hpp	/^    class node_iterator$/;"	c	namespace:rapidxml
node_name_pred	include/GUI/RapidXML/rapidxml.hpp	/^        struct node_name_pred$/;"	s	class:rapidxml::xml_document
node_pi	include/GUI/RapidXML/rapidxml.hpp	/^        node_pi             \/\/!< A PI node. Name contains target. Value contains instructions.$/;"	e	enum:rapidxml::node_type
node_type	include/GUI/RapidXML/rapidxml.hpp	/^    enum node_type$/;"	g	namespace:rapidxml
node_vector	include/SpinGenApi/Container.h	/^		class SPINNAKER_API node_vector$/;"	c	namespace:Spinnaker::GenApi
npos	include/SpinGenApi/GCString.h	/^			static const size_t npos;$/;"	m	class:Spinnaker::GenICam::gcstring
nullstr	include/GUI/RapidXML/rapidxml.hpp	/^        static Ch *nullstr()$/;"	f	class:rapidxml::xml_base
numImages	SpinnakerTest/ImageEvents_C/ImageEvents_C.cpp	/^	unsigned int numImages;$/;"	m	struct:_userData	file:
numImages	src/ImageEvents_C/ImageEvents_C.cpp	/^	unsigned int numImages;$/;"	m	struct:_userData	file:
off_type	include/SpinGenApi/Filestream.h	/^			typedef typename Traits::off_type off_type;$/;"	t	class:Spinnaker::GenApi::ODevFileStreamBuf
onDeviceArrivalInterface	SpinnakerTest/EnumerationEvents_C/EnumerationEvents_C.cpp	/^void onDeviceArrivalInterface(void* pUserData)$/;"	f
onDeviceArrivalInterface	src/EnumerationEvents_C/EnumerationEvents_C.cpp	/^void onDeviceArrivalInterface(void* pUserData)$/;"	f
onDeviceArrivalSystem	SpinnakerTest/EnumerationEvents_C/EnumerationEvents_C.cpp	/^void onDeviceArrivalSystem(void* pUserData)$/;"	f
onDeviceArrivalSystem	src/EnumerationEvents_C/EnumerationEvents_C.cpp	/^void onDeviceArrivalSystem(void* pUserData)$/;"	f
onDeviceEvent	SpinnakerTest/DeviceEvents_C/DeviceEvents_C.cpp	/^void onDeviceEvent(const spinDeviceEventData hEventData, const char* pEventName, void* pUserData)$/;"	f
onDeviceEvent	src/DeviceEvents_C/DeviceEvents_C.cpp	/^void onDeviceEvent(const spinDeviceEventData hEventData, const char* pEventName, void* pUserData)$/;"	f
onDeviceRemovalInterface	SpinnakerTest/EnumerationEvents_C/EnumerationEvents_C.cpp	/^void onDeviceRemovalInterface(uint64_t deviceSerialNumber, void* pUserData)$/;"	f
onDeviceRemovalInterface	src/EnumerationEvents_C/EnumerationEvents_C.cpp	/^void onDeviceRemovalInterface(uint64_t deviceSerialNumber, void* pUserData)$/;"	f
onDeviceRemovalSystem	SpinnakerTest/EnumerationEvents_C/EnumerationEvents_C.cpp	/^void onDeviceRemovalSystem(uint64_t deviceSerialNumber, void* pUserData)$/;"	f
onDeviceRemovalSystem	src/EnumerationEvents_C/EnumerationEvents_C.cpp	/^void onDeviceRemovalSystem(uint64_t deviceSerialNumber, void* pUserData)$/;"	f
onGainNodeUpdate	SpinnakerTest/NodeMapCallback_C/NodeMapCallback_C.cpp	/^void onGainNodeUpdate(spinNodeHandle hNode)$/;"	f
onGainNodeUpdate	src/NodeMapCallback_C/NodeMapCallback_C.cpp	/^void onGainNodeUpdate(spinNodeHandle hNode)$/;"	f
onHeightNodeUpdate	SpinnakerTest/NodeMapCallback_C/NodeMapCallback_C.cpp	/^void onHeightNodeUpdate(spinNodeHandle hNode) $/;"	f
onHeightNodeUpdate	src/NodeMapCallback_C/NodeMapCallback_C.cpp	/^void onHeightNodeUpdate(spinNodeHandle hNode) $/;"	f
onImageEvent	SpinnakerTest/ImageEvents_C/ImageEvents_C.cpp	/^void onImageEvent(spinImage hImage, void* pUserData)$/;"	f
onImageEvent	src/ImageEvents_C/ImageEvents_C.cpp	/^void onImageEvent(spinImage hImage, void* pUserData)$/;"	f
onLogEvent	SpinnakerTest/Logging_C/Logging_C.cpp	/^void onLogEvent(const spinLogEventData hEventData, void* pUserData)$/;"	f
onLogEvent	src/Logging_C/Logging_C.cpp	/^void onLogEvent(const spinLogEventData hEventData, void* pUserData)$/;"	f
open	include/SpinGenApi/Filestream.h	/^			filebuf_type *open(Spinnaker::GenApi::INodeMap * pInterface, const char * pFileName, std::ios_base::openmode mode = std::ios_base::in) {$/;"	f	class:Spinnaker::GenApi::IDevFileStreamBuf
open	include/SpinGenApi/Filestream.h	/^			filebuf_type *open(Spinnaker::GenApi::INodeMap * pInterface, const char * pFileName, std::ios_base::openmode mode) {$/;"	f	class:Spinnaker::GenApi::ODevFileStreamBuf
open	include/SpinGenApi/Filestream.h	/^			void open(INodeMap * pInterface, const char * pFileName,$/;"	f	class:Spinnaker::GenApi::ODevFileStreamBase
open	include/SpinGenApi/Filestream.h	/^			void open(Spinnaker::GenApi::INodeMap * pInterface, const char * pFileName,$/;"	f	class:Spinnaker::GenApi::IDevFileStreamBase
operator !=	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        bool operator !=(const attribute_iterator<Ch> &rhs)$/;"	f	class:rapidxml::attribute_iterator
operator !=	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        bool operator !=(const node_iterator<Ch> &rhs)$/;"	f	class:rapidxml::node_iterator
operator ()	include/SpinGenApi/NodeCallback.h	/^			virtual void operator()(ECallbackType CallbackType) const$/;"	f	class:Spinnaker::GenApi::Function_NodeCallback
operator ()	include/SpinGenApi/NodeCallback.h	/^			virtual void operator()(ECallbackType CallbackType) const$/;"	f	class:Spinnaker::GenApi::Member_NodeCallback
operator ()	include/SpinGenApi/Pointer.h	/^        T& operator()(void) const$/;"	f	class:Spinnaker::GenApi::CPointer
operator *	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        reference operator *() const$/;"	f	class:rapidxml::attribute_iterator
operator *	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        reference operator *() const$/;"	f	class:rapidxml::node_iterator
operator *	include/SpinGenApi/Pointer.h	/^        T& operator*(void) const$/;"	f	class:Spinnaker::GenApi::CPointer
operator ++	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        attribute_iterator operator++(int)$/;"	f	class:rapidxml::attribute_iterator
operator ++	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        attribute_iterator& operator++()$/;"	f	class:rapidxml::attribute_iterator
operator ++	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        node_iterator operator++(int)$/;"	f	class:rapidxml::node_iterator
operator ++	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        node_iterator& operator++()$/;"	f	class:rapidxml::node_iterator
operator ++	include/SpinGenApi/Counter.h	/^			unsigned int operator++() \/\/ prefix$/;"	f	class:Spinnaker::GenApi::Counter
operator ++	include/SpinGenApi/Counter.h	/^			unsigned int operator++(int) \/\/ postfix$/;"	f	class:Spinnaker::GenApi::Counter
operator --	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        attribute_iterator operator--(int)$/;"	f	class:rapidxml::attribute_iterator
operator --	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        attribute_iterator& operator--()$/;"	f	class:rapidxml::attribute_iterator
operator --	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        node_iterator operator--(int)$/;"	f	class:rapidxml::node_iterator
operator --	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        node_iterator& operator--()$/;"	f	class:rapidxml::node_iterator
operator --	include/SpinGenApi/Counter.h	/^			unsigned int operator--() \/\/ prefix$/;"	f	class:Spinnaker::GenApi::Counter
operator --	include/SpinGenApi/Counter.h	/^			unsigned int operator--(int) \/\/ postfix$/;"	f	class:Spinnaker::GenApi::Counter
operator ->	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        pointer operator->() const$/;"	f	class:rapidxml::attribute_iterator
operator ->	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        pointer operator->() const$/;"	f	class:rapidxml::node_iterator
operator ->	include/SpinGenApi/Pointer.h	/^        T* operator->(void) const$/;"	f	class:Spinnaker::GenApi::CPointer
operator <<	include/GUI/RapidXML/rapidxml_print.hpp	/^    inline std::basic_ostream<Ch> &operator <<(std::basic_ostream<Ch> &out, const xml_node<Ch> &node)$/;"	f	namespace:rapidxml
operator <<	include/SpinGenApi/GCString.h	/^inline std::ostream & operator <<(std::ostream &ostr, const Spinnaker::GenICam::gcstring &str)$/;"	f
operator =	include/CameraPtr.h	/^		virtual CameraPtr& operator=(const int nMustBeNull){ return dynamic_cast<CameraPtr&>(BasePtr<Camera, CameraBase>::operator=(nMustBeNull)); };$/;"	f	class:Spinnaker::CameraPtr
operator =	include/InterfacePtr.h	/^		virtual InterfacePtr& operator=(const int nMustBeNull){ return dynamic_cast<InterfacePtr&>(BasePtr<Interface>::operator=(nMustBeNull)); };$/;"	f	class:Spinnaker::InterfacePtr
operator =	include/LoggingEventDataPtr.h	/^		virtual LoggingEventDataPtr& operator=(const int nMustBeNull){ return dynamic_cast<LoggingEventDataPtr&>(BasePtr<LoggingEventData>::operator=(nMustBeNull)); };$/;"	f	class:Spinnaker::LoggingEventDataPtr
operator =	include/SpinGenApi/NodeMapRef.h	/^			CNodeMapRef& operator=(INodeMap* pNodeMap)$/;"	f	class:Spinnaker::GenApi::CNodeMapRef
operator =	include/SpinGenApi/NodeMapRef.h	/^			CNodeMapRef& operator=(const CNodeMapRef& Them)$/;"	f	class:Spinnaker::GenApi::CNodeMapRef
operator =	include/SpinGenApi/NodeMapRef.h	/^		CNodeMapRefT<TCameraParams>& GenApi::CNodeMapRefT<TCameraParams>::operator=(INodeMap* pNodeMap)$/;"	f	class:Spinnaker::GenApi::GenApi::CNodeMapRefT
operator =	include/SpinGenApi/NodeMapRef.h	/^		CNodeMapRefT<TCameraParams>& GenApi::CNodeMapRefT<TCameraParams>::operator=(const CNodeMapRefT& Them)$/;"	f	class:Spinnaker::GenApi::GenApi::CNodeMapRefT
operator =	include/SpinGenApi/Pointer.h	/^			void operator=( IBase *pB )$/;"	f	class:Spinnaker::GenApi::CFloatPtr
operator =	include/SpinGenApi/Pointer.h	/^        void operator=( B *pB )$/;"	f	class:Spinnaker::GenApi::CPointer
operator ==	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        bool operator ==(const attribute_iterator<Ch> &rhs)$/;"	f	class:rapidxml::attribute_iterator
operator ==	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        bool operator ==(const node_iterator<Ch> &rhs)$/;"	f	class:rapidxml::node_iterator
operator ==	include/SpinGenApi/Pointer.h	/^        bool operator==(T* pT) const $/;"	f	class:Spinnaker::GenApi::CPointer
operator ==	include/SpinGenApi/Pointer.h	/^        bool operator==(const CPointer<T,B> &rT) const $/;"	f	class:Spinnaker::GenApi::CPointer
operator ==	include/SpinGenApi/Pointer.h	/^        bool operator==(int nMustBeNull) const$/;"	f	class:Spinnaker::GenApi::CPointer
operator >>	include/SpinGenApi/GCString.h	/^inline std::istream & operator >>(std::istream &istr, Spinnaker::GenICam::gcstring &str)$/;"	f
operator T*	include/SpinGenApi/Pointer.h	/^        operator T*(void) const$/;"	f	class:Spinnaker::GenApi::CPointer
operator bool	include/SpinGenApi/Pointer.h	/^        operator bool(void) const throw()$/;"	f	class:Spinnaker::GenApi::CPointer
operator unsigned int	include/SpinGenApi/Counter.h	/^			operator unsigned int()$/;"	f	class:Spinnaker::GenApi::Counter
ostream_type	include/SpinGenApi/Filestream.h	/^			typedef std::basic_ostream<CharType, Traits> ostream_type;$/;"	t	class:Spinnaker::GenApi::ODevFileStreamBase
overflow	include/SpinGenApi/Filestream.h	/^			int_type overflow(int_type c = traits_type::eof()) {$/;"	f	class:Spinnaker::GenApi::ODevFileStreamBuf
pCamera	include/GUI/SpinnakerGUI_WPF.h	/^			Spinnaker::CameraPtr* pCamera;$/;"	m	struct:Spinnaker::GUI_WPF::DeviceInformationStruct
pInterface	include/GUI/SpinnakerGUI_WPF.h	/^			Spinnaker::InterfacePtr* pInterface;$/;"	m	struct:Spinnaker::GUI_WPF::DeviceInformationStruct
parent	include/GUI/RapidXML/rapidxml.hpp	/^        xml_node<Ch> *parent() const$/;"	f	class:rapidxml::xml_base
parse	include/GUI/RapidXML/rapidxml.hpp	/^        void parse(Ch *text)$/;"	f	class:rapidxml::xml_document
parse_and_append_data	include/GUI/RapidXML/rapidxml.hpp	/^        Ch parse_and_append_data(xml_node<Ch> *node, Ch *&text, Ch *contents_start)$/;"	f	class:rapidxml::xml_document
parse_bom	include/GUI/RapidXML/rapidxml.hpp	/^        void parse_bom(Ch *&text)$/;"	f	class:rapidxml::xml_document
parse_cdata	include/GUI/RapidXML/rapidxml.hpp	/^        xml_node<Ch> *parse_cdata(Ch *&text)$/;"	f	class:rapidxml::xml_document
parse_comment	include/GUI/RapidXML/rapidxml.hpp	/^        xml_node<Ch> *parse_comment(Ch *&text)$/;"	f	class:rapidxml::xml_document
parse_comment_nodes	include/GUI/RapidXML/rapidxml.hpp	/^    const int parse_comment_nodes = 0x40;$/;"	m	namespace:rapidxml
parse_declaration_node	include/GUI/RapidXML/rapidxml.hpp	/^    const int parse_declaration_node = 0x20;$/;"	m	namespace:rapidxml
parse_default	include/GUI/RapidXML/rapidxml.hpp	/^    const int parse_default = 0;$/;"	m	namespace:rapidxml
parse_doctype	include/GUI/RapidXML/rapidxml.hpp	/^        xml_node<Ch> *parse_doctype(Ch *&text)$/;"	f	class:rapidxml::xml_document
parse_doctype_node	include/GUI/RapidXML/rapidxml.hpp	/^    const int parse_doctype_node = 0x80;$/;"	m	namespace:rapidxml
parse_element	include/GUI/RapidXML/rapidxml.hpp	/^        xml_node<Ch> *parse_element(Ch *&text)$/;"	f	class:rapidxml::xml_document
parse_fastest	include/GUI/RapidXML/rapidxml.hpp	/^    const int parse_fastest = parse_non_destructive | parse_no_data_nodes;$/;"	m	namespace:rapidxml
parse_full	include/GUI/RapidXML/rapidxml.hpp	/^    const int parse_full = parse_declaration_node | parse_comment_nodes | parse_doctype_node | parse_pi_nodes | parse_validate_closing_tags;$/;"	m	namespace:rapidxml
parse_no_data_nodes	include/GUI/RapidXML/rapidxml.hpp	/^    const int parse_no_data_nodes = 0x1;            $/;"	m	namespace:rapidxml
parse_no_element_values	include/GUI/RapidXML/rapidxml.hpp	/^    const int parse_no_element_values = 0x2;$/;"	m	namespace:rapidxml
parse_no_entity_translation	include/GUI/RapidXML/rapidxml.hpp	/^    const int parse_no_entity_translation = 0x8;$/;"	m	namespace:rapidxml
parse_no_string_terminators	include/GUI/RapidXML/rapidxml.hpp	/^    const int parse_no_string_terminators = 0x4;$/;"	m	namespace:rapidxml
parse_no_utf8	include/GUI/RapidXML/rapidxml.hpp	/^    const int parse_no_utf8 = 0x10;$/;"	m	namespace:rapidxml
parse_node	include/GUI/RapidXML/rapidxml.hpp	/^        xml_node<Ch> *parse_node(Ch *&text)$/;"	f	class:rapidxml::xml_document
parse_node_attributes	include/GUI/RapidXML/rapidxml.hpp	/^        void parse_node_attributes(Ch *&text, xml_node<Ch> *node)$/;"	f	class:rapidxml::xml_document
parse_node_contents	include/GUI/RapidXML/rapidxml.hpp	/^        void parse_node_contents(Ch *&text, xml_node<Ch> *node)$/;"	f	class:rapidxml::xml_document
parse_non_destructive	include/GUI/RapidXML/rapidxml.hpp	/^    const int parse_non_destructive = parse_no_string_terminators | parse_no_entity_translation;$/;"	m	namespace:rapidxml
parse_normalize_whitespace	include/GUI/RapidXML/rapidxml.hpp	/^    const int parse_normalize_whitespace = 0x800;$/;"	m	namespace:rapidxml
parse_pi	include/GUI/RapidXML/rapidxml.hpp	/^        xml_node<Ch> *parse_pi(Ch *&text)$/;"	f	class:rapidxml::xml_document
parse_pi_nodes	include/GUI/RapidXML/rapidxml.hpp	/^    const int parse_pi_nodes = 0x100;$/;"	m	namespace:rapidxml
parse_trim_whitespace	include/GUI/RapidXML/rapidxml.hpp	/^    const int parse_trim_whitespace = 0x400;$/;"	m	namespace:rapidxml
parse_validate_closing_tags	include/GUI/RapidXML/rapidxml.hpp	/^    const int parse_validate_closing_tags = 0x200;$/;"	m	namespace:rapidxml
parse_xml_declaration	include/GUI/RapidXML/rapidxml.hpp	/^        xml_node<Ch> *parse_xml_declaration(Ch *&text)$/;"	f	class:rapidxml::xml_document
pbackfail	include/SpinGenApi/Filestream.h	/^			int_type pbackfail(int_type c) {$/;"	f	class:Spinnaker::GenApi::IDevFileStreamBuf
pointer	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        typedef typename xml_attribute<Ch> *pointer;$/;"	t	class:rapidxml::attribute_iterator
pointer	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        typedef typename xml_node<Ch> *pointer;$/;"	t	class:rapidxml::node_iterator
pointer	include/SpinGenApi/Container.h	/^				typedef T* pointer;$/;"	t	class:Spinnaker::GenApi::node_vector::const_iterator
pointer	include/SpinGenApi/Container.h	/^				typedef T* pointer;$/;"	t	class:Spinnaker::GenApi::value_vector::const_iterator
pointer	include/SpinGenApi/Container.h	/^				typedef const_iterator::pointer pointer;$/;"	t	class:Spinnaker::GenApi::node_vector::iterator
pointer	include/SpinGenApi/Container.h	/^				typedef const_iterator::pointer pointer;$/;"	t	class:Spinnaker::GenApi::value_vector::iterator
pos_type	include/SpinGenApi/Filestream.h	/^			typedef typename Traits::pos_type pos_type;$/;"	t	class:Spinnaker::GenApi::ODevFileStreamBuf
prepend_attribute	include/GUI/RapidXML/rapidxml.hpp	/^        void prepend_attribute(xml_attribute<Ch> *attribute)$/;"	f	class:rapidxml::xml_node
prepend_node	include/GUI/RapidXML/rapidxml.hpp	/^        void prepend_node(xml_node<Ch> *child)$/;"	f	class:rapidxml::xml_node
previous_attribute	include/GUI/RapidXML/rapidxml.hpp	/^        xml_attribute<Ch> *previous_attribute(const Ch *name = 0, std::size_t name_size = 0, bool case_sensitive = true) const$/;"	f	class:rapidxml::xml_attribute
previous_begin	include/GUI/RapidXML/rapidxml.hpp	/^            char *previous_begin;$/;"	m	struct:rapidxml::memory_pool::header
previous_sibling	include/GUI/RapidXML/rapidxml.hpp	/^        xml_node<Ch> *previous_sibling(const Ch *name = 0, std::size_t name_size = 0, bool case_sensitive = true) const$/;"	f	class:rapidxml::xml_node
print	include/GUI/RapidXML/rapidxml_print.hpp	/^    inline OutIt print(OutIt out, const xml_node<Ch> &node, int flags = 0)$/;"	f	namespace:rapidxml
print	include/GUI/RapidXML/rapidxml_print.hpp	/^    inline std::basic_ostream<Ch> &print(std::basic_ostream<Ch> &out, const xml_node<Ch> &node, int flags = 0)$/;"	f	namespace:rapidxml
printBooleanNode	SpinnakerTest/NodeMapInfo/NodeMapInfo.cpp	/^int printBooleanNode(CNodePtr node, unsigned int level)$/;"	f
printBooleanNode	SpinnakerTest/NodeMapInfo_C/NodeMapInfo_C.cpp	/^spinError printBooleanNode(spinNodeHandle hNode, unsigned int level)$/;"	f
printBooleanNode	src/NodeMapInfo/NodeMapInfo.cpp	/^int printBooleanNode(CNodePtr node, unsigned int level)$/;"	f
printBooleanNode	src/NodeMapInfo_C/NodeMapInfo_C.cpp	/^spinError printBooleanNode(spinNodeHandle hNode, unsigned int level)$/;"	f
printCategoryNodeAndAllFeatures	SpinnakerTest/NodeMapInfo/NodeMapInfo.cpp	/^int printCategoryNodeAndAllFeatures(CNodePtr node, unsigned int level)$/;"	f
printCategoryNodeAndAllFeatures	SpinnakerTest/NodeMapInfo_C/NodeMapInfo_C.cpp	/^spinError printCategoryNodeAndAllFeatures(spinNodeHandle hCategoryNode, unsigned int level)$/;"	f
printCategoryNodeAndAllFeatures	src/NodeMapInfo/NodeMapInfo.cpp	/^int printCategoryNodeAndAllFeatures(CNodePtr node, unsigned int level)$/;"	f
printCategoryNodeAndAllFeatures	src/NodeMapInfo_C/NodeMapInfo_C.cpp	/^spinError printCategoryNodeAndAllFeatures(spinNodeHandle hCategoryNode, unsigned int level)$/;"	f
printCommandNode	SpinnakerTest/NodeMapInfo/NodeMapInfo.cpp	/^int printCommandNode(CNodePtr node, unsigned int level)$/;"	f
printCommandNode	SpinnakerTest/NodeMapInfo_C/NodeMapInfo_C.cpp	/^spinError printCommandNode(spinNodeHandle hNode, unsigned int level)$/;"	f
printCommandNode	src/NodeMapInfo/NodeMapInfo.cpp	/^int printCommandNode(CNodePtr node, unsigned int level)$/;"	f
printCommandNode	src/NodeMapInfo_C/NodeMapInfo_C.cpp	/^spinError printCommandNode(spinNodeHandle hNode, unsigned int level)$/;"	f
printEnumerationNodeAndCurrentEntry	SpinnakerTest/NodeMapInfo/NodeMapInfo.cpp	/^int printEnumerationNodeAndCurrentEntry(CNodePtr node, unsigned int level)$/;"	f
printEnumerationNodeAndCurrentEntry	SpinnakerTest/NodeMapInfo_C/NodeMapInfo_C.cpp	/^spinError printEnumerationNodeAndCurrentEntry(spinNodeHandle hEnumerationNode, unsigned int level)$/;"	f
printEnumerationNodeAndCurrentEntry	src/NodeMapInfo/NodeMapInfo.cpp	/^int printEnumerationNodeAndCurrentEntry(CNodePtr node, unsigned int level)$/;"	f
printEnumerationNodeAndCurrentEntry	src/NodeMapInfo_C/NodeMapInfo_C.cpp	/^spinError printEnumerationNodeAndCurrentEntry(spinNodeHandle hEnumerationNode, unsigned int level)$/;"	f
printFloatNode	SpinnakerTest/NodeMapInfo/NodeMapInfo.cpp	/^int printFloatNode(CNodePtr node, unsigned int level)$/;"	f
printFloatNode	SpinnakerTest/NodeMapInfo_C/NodeMapInfo_C.cpp	/^spinError printFloatNode(spinNodeHandle hNode, unsigned int level)$/;"	f
printFloatNode	src/NodeMapInfo/NodeMapInfo.cpp	/^int printFloatNode(CNodePtr node, unsigned int level)$/;"	f
printFloatNode	src/NodeMapInfo_C/NodeMapInfo_C.cpp	/^spinError printFloatNode(spinNodeHandle hNode, unsigned int level)$/;"	f
printIntegerNode	SpinnakerTest/NodeMapInfo/NodeMapInfo.cpp	/^int printIntegerNode(CNodePtr node, unsigned int level)$/;"	f
printIntegerNode	SpinnakerTest/NodeMapInfo_C/NodeMapInfo_C.cpp	/^spinError printIntegerNode(spinNodeHandle hNode, unsigned int level)$/;"	f
printIntegerNode	src/NodeMapInfo/NodeMapInfo.cpp	/^int printIntegerNode(CNodePtr node, unsigned int level)$/;"	f
printIntegerNode	src/NodeMapInfo_C/NodeMapInfo_C.cpp	/^spinError printIntegerNode(spinNodeHandle hNode, unsigned int level)$/;"	f
printStringNode	SpinnakerTest/NodeMapInfo/NodeMapInfo.cpp	/^int printStringNode(CNodePtr node, unsigned int level)$/;"	f
printStringNode	SpinnakerTest/NodeMapInfo_C/NodeMapInfo_C.cpp	/^spinError printStringNode(spinNodeHandle hNode, unsigned int level)$/;"	f
printStringNode	src/NodeMapInfo/NodeMapInfo.cpp	/^int printStringNode(CNodePtr node, unsigned int level)$/;"	f
printStringNode	src/NodeMapInfo_C/NodeMapInfo_C.cpp	/^spinError printStringNode(spinNodeHandle hNode, unsigned int level)$/;"	f
printValueNode	SpinnakerTest/NodeMapInfo/NodeMapInfo.cpp	/^int printValueNode(CNodePtr node, unsigned int level)$/;"	f
printValueNode	SpinnakerTest/NodeMapInfo_C/NodeMapInfo_C.cpp	/^spinError printValueNode(spinNodeHandle hNode, unsigned int level)$/;"	f
printValueNode	src/NodeMapInfo/NodeMapInfo.cpp	/^int printValueNode(CNodePtr node, unsigned int level)$/;"	f
printValueNode	src/NodeMapInfo_C/NodeMapInfo_C.cpp	/^spinError printValueNode(spinNodeHandle hNode, unsigned int level)$/;"	f
print_attributes	include/GUI/RapidXML/rapidxml_print.hpp	/^        inline OutIt print_attributes(OutIt out, const xml_node<Ch> *node, int flags)$/;"	f	namespace:rapidxml::internal
print_cdata_node	include/GUI/RapidXML/rapidxml_print.hpp	/^        inline OutIt print_cdata_node(OutIt out, const xml_node<Ch> *node, int flags, int indent)$/;"	f	namespace:rapidxml::internal
print_children	include/GUI/RapidXML/rapidxml_print.hpp	/^        inline OutIt print_children(OutIt out, const xml_node<Ch> *node, int flags, int indent)$/;"	f	namespace:rapidxml::internal
print_comment_node	include/GUI/RapidXML/rapidxml_print.hpp	/^        inline OutIt print_comment_node(OutIt out, const xml_node<Ch> *node, int flags, int indent)$/;"	f	namespace:rapidxml::internal
print_data_node	include/GUI/RapidXML/rapidxml_print.hpp	/^        inline OutIt print_data_node(OutIt out, const xml_node<Ch> *node, int flags, int indent)$/;"	f	namespace:rapidxml::internal
print_declaration_node	include/GUI/RapidXML/rapidxml_print.hpp	/^        inline OutIt print_declaration_node(OutIt out, const xml_node<Ch> *node, int flags, int indent)$/;"	f	namespace:rapidxml::internal
print_doctype_node	include/GUI/RapidXML/rapidxml_print.hpp	/^        inline OutIt print_doctype_node(OutIt out, const xml_node<Ch> *node, int flags, int indent)$/;"	f	namespace:rapidxml::internal
print_element_node	include/GUI/RapidXML/rapidxml_print.hpp	/^        inline OutIt print_element_node(OutIt out, const xml_node<Ch> *node, int flags, int indent)$/;"	f	namespace:rapidxml::internal
print_no_indenting	include/GUI/RapidXML/rapidxml_print.hpp	/^    const int print_no_indenting = 0x1;   \/\/!< Printer flag instructing the printer to suppress indenting of XML. See print() function.$/;"	m	namespace:rapidxml
print_node	include/GUI/RapidXML/rapidxml_print.hpp	/^        inline OutIt print_node(OutIt out, const xml_node<Ch> *node, int flags, int indent)$/;"	f	namespace:rapidxml::internal
print_pi_node	include/GUI/RapidXML/rapidxml_print.hpp	/^        inline OutIt print_pi_node(OutIt out, const xml_node<Ch> *node, int flags, int indent)$/;"	f	namespace:rapidxml::internal
progressive	include/SpinnakerDefs.h	/^        bool progressive;$/;"	m	struct:Spinnaker::JPEGOption
progressive	include/spinc/SpinnakerDefsC.h	/^	bool8_t progressive;$/;"	m	struct:_spinJPEGOption
quality	include/SpinnakerDefs.h	/^		unsigned int quality;$/;"	m	struct:Spinnaker::MJPGOption
quality	include/SpinnakerDefs.h	/^        unsigned int quality;$/;"	m	struct:Spinnaker::JPEGOption
quality	include/SpinnakerDefs.h	/^        unsigned int quality;$/;"	m	struct:Spinnaker::JPG2Option
quality	include/spinc/SpinnakerDefsC.h	/^	unsigned int quality;$/;"	m	struct:_spinJPEGOption
quality	include/spinc/SpinnakerDefsC.h	/^	unsigned int quality;$/;"	m	struct:_spinJPG2Option
quality	include/spinc/SpinnakerDefsC.h	/^	unsigned int quality;$/;"	m	struct:_spinMJPGOption
quickSpin	include/spinc/QuickSpinDefsC.h	/^} quickSpin;$/;"	t	typeref:struct:_quickSpin
quickSpinBooleanNode	include/spinc/QuickSpinDefsC.h	/^typedef spinNodeHandle quickSpinBooleanNode;$/;"	t
quickSpinCommandNode	include/spinc/QuickSpinDefsC.h	/^typedef spinNodeHandle quickSpinCommandNode;$/;"	t
quickSpinEnumerationNode	include/spinc/QuickSpinDefsC.h	/^typedef spinNodeHandle quickSpinEnumerationNode;$/;"	t
quickSpinFloatNode	include/spinc/QuickSpinDefsC.h	/^typedef spinNodeHandle quickSpinFloatNode;$/;"	t
quickSpinIntegerNode	include/spinc/QuickSpinDefsC.h	/^typedef spinNodeHandle quickSpinIntegerNode;$/;"	t
quickSpinRegisterNode	include/spinc/QuickSpinDefsC.h	/^typedef spinNodeHandle quickSpinRegisterNode;$/;"	t
quickSpinStringNode	include/spinc/QuickSpinDefsC.h	/^typedef spinNodeHandle quickSpinStringNode;$/;"	t
quickSpinTLDevice	include/spinc/TransportLayerDeviceC.h	/^} quickSpinTLDevice;$/;"	t	typeref:struct:_quickSpinTLDevice
quickSpinTLInterface	include/spinc/TransportLayerInterfaceC.h	/^} quickSpinTLInterface;$/;"	t	typeref:struct:_quickSpinTLInterface
quickSpinTLStream	include/spinc/TransportLayerStreamC.h	/^} quickSpinTLStream;$/;"	t	typeref:struct:_quickSpinTLStream
rapidxml	include/GUI/RapidXML/rapidxml.hpp	/^namespace rapidxml$/;"	n
rapidxml	include/GUI/RapidXML/rapidxml_iterators.hpp	/^namespace rapidxml$/;"	n
rapidxml	include/GUI/RapidXML/rapidxml_print.hpp	/^namespace rapidxml$/;"	n
rapidxml	include/GUI/RapidXML/rapidxml_utils.hpp	/^namespace rapidxml$/;"	n
rdbuf	include/SpinGenApi/Filestream.h	/^			filebuf_type *rdbuf() const {$/;"	f	class:Spinnaker::GenApi::IDevFileStreamBase
rdbuf	include/SpinGenApi/Filestream.h	/^			filebuf_type *rdbuf() const {$/;"	f	class:Spinnaker::GenApi::ODevFileStreamBase
readType	SpinnakerTest/NodeMapInfo/NodeMapInfo.cpp	/^enum readType$/;"	g	file:
readType	SpinnakerTest/NodeMapInfo_C/NodeMapInfo_C.cpp	/^} readType;$/;"	t	typeref:enum:_readType	file:
readType	src/NodeMapInfo/NodeMapInfo.cpp	/^enum readType$/;"	g	file:
readType	src/NodeMapInfo_C/NodeMapInfo_C.cpp	/^} readType;$/;"	t	typeref:enum:_readType	file:
reference	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        typedef typename xml_attribute<Ch> &reference;$/;"	t	class:rapidxml::attribute_iterator
reference	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        typedef typename xml_node<Ch> &reference;$/;"	t	class:rapidxml::node_iterator
reference	include/SpinGenApi/Container.h	/^				typedef T& reference;$/;"	t	class:Spinnaker::GenApi::node_vector::const_iterator
reference	include/SpinGenApi/Container.h	/^				typedef T& reference;$/;"	t	class:Spinnaker::GenApi::value_vector::const_iterator
reference	include/SpinGenApi/Container.h	/^				typedef const_iterator::reference reference;$/;"	t	class:Spinnaker::GenApi::node_vector::iterator
reference	include/SpinGenApi/Container.h	/^				typedef const_iterator::reference reference;$/;"	t	class:Spinnaker::GenApi::value_vector::iterator
remove_all_attributes	include/GUI/RapidXML/rapidxml.hpp	/^        void remove_all_attributes()$/;"	f	class:rapidxml::xml_node
remove_all_nodes	include/GUI/RapidXML/rapidxml.hpp	/^        void remove_all_nodes()$/;"	f	class:rapidxml::xml_node
remove_attribute	include/GUI/RapidXML/rapidxml.hpp	/^        void remove_attribute(xml_attribute<Ch> *where)$/;"	f	class:rapidxml::xml_node
remove_first_attribute	include/GUI/RapidXML/rapidxml.hpp	/^        void remove_first_attribute()$/;"	f	class:rapidxml::xml_node
remove_first_node	include/GUI/RapidXML/rapidxml.hpp	/^        void remove_first_node()$/;"	f	class:rapidxml::xml_node
remove_last_attribute	include/GUI/RapidXML/rapidxml.hpp	/^        void remove_last_attribute()$/;"	f	class:rapidxml::xml_node
remove_last_node	include/GUI/RapidXML/rapidxml.hpp	/^        void remove_last_node()$/;"	f	class:rapidxml::xml_node
remove_node	include/GUI/RapidXML/rapidxml.hpp	/^        void remove_node(xml_node<Ch> *where)$/;"	f	class:rapidxml::xml_node
reserved	include/SpinnakerDefs.h	/^		unsigned int reserved[16];$/;"	m	struct:Spinnaker::BMPOption
reserved	include/SpinnakerDefs.h	/^		unsigned int reserved[256];$/;"	m	struct:Spinnaker::AVIOption
reserved	include/SpinnakerDefs.h	/^		unsigned int reserved[256];$/;"	m	struct:Spinnaker::H264Option
reserved	include/SpinnakerDefs.h	/^		unsigned int reserved[256];$/;"	m	struct:Spinnaker::MJPGOption
reserved	include/SpinnakerDefs.h	/^        unsigned int reserved[16];$/;"	m	struct:Spinnaker::JPEGOption
reserved	include/SpinnakerDefs.h	/^        unsigned int reserved[16];$/;"	m	struct:Spinnaker::JPG2Option
reserved	include/SpinnakerDefs.h	/^        unsigned int reserved[16];$/;"	m	struct:Spinnaker::PGMOption
reserved	include/SpinnakerDefs.h	/^        unsigned int reserved[16];$/;"	m	struct:Spinnaker::PNGOption
reserved	include/SpinnakerDefs.h	/^        unsigned int reserved[16];$/;"	m	struct:Spinnaker::PPMOption
reserved	include/SpinnakerDefs.h	/^        unsigned int reserved[16];$/;"	m	struct:Spinnaker::TIFFOption
reserved	include/spinc/SpinnakerDefsC.h	/^	unsigned int reserved[16];$/;"	m	struct:_spinBMPOption
reserved	include/spinc/SpinnakerDefsC.h	/^	unsigned int reserved[16];$/;"	m	struct:_spinJPEGOption
reserved	include/spinc/SpinnakerDefsC.h	/^	unsigned int reserved[16];$/;"	m	struct:_spinJPG2Option
reserved	include/spinc/SpinnakerDefsC.h	/^	unsigned int reserved[16];$/;"	m	struct:_spinPGMOption
reserved	include/spinc/SpinnakerDefsC.h	/^	unsigned int reserved[16];$/;"	m	struct:_spinPNGOption
reserved	include/spinc/SpinnakerDefsC.h	/^	unsigned int reserved[16];$/;"	m	struct:_spinPPMOption
reserved	include/spinc/SpinnakerDefsC.h	/^	unsigned int reserved[16];$/;"	m	struct:_spinTIFFOption
reserved	include/spinc/SpinnakerDefsC.h	/^	unsigned int reserved[256];$/;"	m	struct:_spinAVIOption
reserved	include/spinc/SpinnakerDefsC.h	/^	unsigned int reserved[256];$/;"	m	struct:_spinH264Option
reserved	include/spinc/SpinnakerDefsC.h	/^	unsigned int reserved[256];$/;"	m	struct:_spinMJPGOption
set_allocator	include/GUI/RapidXML/rapidxml.hpp	/^        void set_allocator(alloc_func *af, free_func *ff)$/;"	f	class:rapidxml::memory_pool
size	include/GUI/RapidXML/rapidxml_utils.hpp	/^        std::size_t size() const$/;"	f	class:rapidxml::file
size_t	include/SpinGenApi/GCTypes.h	/^            typedef GC_W64 unsigned int size_t;$/;"	t
size_t	include/SpinGenApi/GCTypes.h	/^            typedef unsigned __int64 size_t;$/;"	t
skip	include/GUI/RapidXML/rapidxml.hpp	/^        static void skip(Ch *&text)$/;"	f	class:rapidxml::xml_document
skip_and_expand_character_refs	include/GUI/RapidXML/rapidxml.hpp	/^        static Ch *skip_and_expand_character_refs(Ch *&text)$/;"	f	class:rapidxml::xml_document
spinAVIOption	include/spinc/SpinnakerDefsC.h	/^} spinAVIOption;$/;"	t	typeref:struct:_spinAVIOption
spinAVIRecorder	include/spinc/SpinnakerDefsC.h	/^typedef void* spinAVIRecorder;$/;"	t
spinAccessMode	include/spinc/SpinnakerGenApiDefsC.h	/^} spinAccessMode;$/;"	t	typeref:enum:_spinAccessMode
spinAcquisitionModeEnums	include/spinc/CameraDefsC.h	/^} spinAcquisitionModeEnums;$/;"	t	typeref:enum:_spinAcquisitionModeEnums
spinAcquisitionStatusSelectorEnums	include/spinc/CameraDefsC.h	/^} spinAcquisitionStatusSelectorEnums;$/;"	t	typeref:enum:_spinAcquisitionStatusSelectorEnums
spinActionUnconditionalModeEnums	include/spinc/CameraDefsC.h	/^} spinActionUnconditionalModeEnums;$/;"	t	typeref:enum:_spinActionUnconditionalModeEnums
spinArrivalEvent	include/spinc/SpinnakerDefsC.h	/^typedef void* spinArrivalEvent;$/;"	t
spinArrivalEventFunction	include/spinc/SpinnakerDefsC.h	/^typedef void(*spinArrivalEventFunction)(void* pUserData);$/;"	t
spinBMPOption	include/spinc/SpinnakerDefsC.h	/^} spinBMPOption;$/;"	t	typeref:struct:_spinBMPOption
spinBalanceRatioSelectorEnums	include/spinc/CameraDefsC.h	/^} spinBalanceRatioSelectorEnums;$/;"	t	typeref:enum:_spinBalanceRatioSelectorEnums
spinBalanceWhiteAutoEnums	include/spinc/CameraDefsC.h	/^} spinBalanceWhiteAutoEnums;$/;"	t	typeref:enum:_spinBalanceWhiteAutoEnums
spinBinningHorizontalModeEnums	include/spinc/CameraDefsC.h	/^} spinBinningHorizontalModeEnums;$/;"	t	typeref:enum:_spinBinningHorizontalModeEnums
spinBinningSelectorEnums	include/spinc/CameraDefsC.h	/^} spinBinningSelectorEnums;$/;"	t	typeref:enum:_spinBinningSelectorEnums
spinBinningVerticalModeEnums	include/spinc/CameraDefsC.h	/^} spinBinningVerticalModeEnums;$/;"	t	typeref:enum:_spinBinningVerticalModeEnums
spinBlackLevelAutoBalanceEnums	include/spinc/CameraDefsC.h	/^} spinBlackLevelAutoBalanceEnums;$/;"	t	typeref:enum:_spinBlackLevelAutoBalanceEnums
spinBlackLevelAutoEnums	include/spinc/CameraDefsC.h	/^} spinBlackLevelAutoEnums;$/;"	t	typeref:enum:_spinBlackLevelAutoEnums
spinBlackLevelSelectorEnums	include/spinc/CameraDefsC.h	/^} spinBlackLevelSelectorEnums;$/;"	t	typeref:enum:_spinBlackLevelSelectorEnums
spinCachingMode	include/spinc/SpinnakerGenApiDefsC.h	/^} spinCachingMode;$/;"	t	typeref:enum:_spinCachingMode
spinCamera	include/spinc/SpinnakerDefsC.h	/^typedef void* spinCamera;$/;"	t
spinCameraList	include/spinc/SpinnakerDefsC.h	/^typedef void* spinCameraList;$/;"	t
spinChunkBlackLevelSelectorEnums	include/spinc/CameraDefsC.h	/^} spinChunkBlackLevelSelectorEnums;$/;"	t	typeref:enum:_spinChunkBlackLevelSelectorEnums
spinChunkCounterSelectorEnums	include/spinc/CameraDefsC.h	/^} spinChunkCounterSelectorEnums;$/;"	t	typeref:enum:_spinChunkCounterSelectorEnums
spinChunkData	include/spinc/ChunkDataDefC.h	/^} spinChunkData;$/;"	t	typeref:struct:_spinChunkData
spinChunkEncoderSelectorEnums	include/spinc/CameraDefsC.h	/^} spinChunkEncoderSelectorEnums;$/;"	t	typeref:enum:_spinChunkEncoderSelectorEnums
spinChunkEncoderStatusEnums	include/spinc/CameraDefsC.h	/^} spinChunkEncoderStatusEnums;$/;"	t	typeref:enum:_spinChunkEncoderStatusEnums
spinChunkExposureTimeSelectorEnums	include/spinc/CameraDefsC.h	/^} spinChunkExposureTimeSelectorEnums;$/;"	t	typeref:enum:_spinChunkExposureTimeSelectorEnums
spinChunkGainSelectorEnums	include/spinc/CameraDefsC.h	/^} spinChunkGainSelectorEnums;$/;"	t	typeref:enum:_spinChunkGainSelectorEnums
spinChunkImageComponentEnums	include/spinc/CameraDefsC.h	/^} spinChunkImageComponentEnums;$/;"	t	typeref:enum:_spinChunkImageComponentEnums
spinChunkPixelFormatEnums	include/spinc/CameraDefsC.h	/^} spinChunkPixelFormatEnums;$/;"	t	typeref:enum:_spinChunkPixelFormatEnums
spinChunkRegionIDEnums	include/spinc/CameraDefsC.h	/^} spinChunkRegionIDEnums;$/;"	t	typeref:enum:_spinChunkRegionIDEnums
spinChunkScan3dCoordinateReferenceSelectorEnums	include/spinc/CameraDefsC.h	/^} spinChunkScan3dCoordinateReferenceSelectorEnums;$/;"	t	typeref:enum:_spinChunkScan3dCoordinateReferenceSelectorEnums
spinChunkScan3dCoordinateSelectorEnums	include/spinc/CameraDefsC.h	/^} spinChunkScan3dCoordinateSelectorEnums;$/;"	t	typeref:enum:_spinChunkScan3dCoordinateSelectorEnums
spinChunkScan3dCoordinateSystemEnums	include/spinc/CameraDefsC.h	/^} spinChunkScan3dCoordinateSystemEnums;$/;"	t	typeref:enum:_spinChunkScan3dCoordinateSystemEnums
spinChunkScan3dCoordinateSystemReferenceEnums	include/spinc/CameraDefsC.h	/^} spinChunkScan3dCoordinateSystemReferenceEnums;$/;"	t	typeref:enum:_spinChunkScan3dCoordinateSystemReferenceEnums
spinChunkScan3dCoordinateTransformSelectorEnums	include/spinc/CameraDefsC.h	/^} spinChunkScan3dCoordinateTransformSelectorEnums;$/;"	t	typeref:enum:_spinChunkScan3dCoordinateTransformSelectorEnums
spinChunkScan3dDistanceUnitEnums	include/spinc/CameraDefsC.h	/^} spinChunkScan3dDistanceUnitEnums;$/;"	t	typeref:enum:_spinChunkScan3dDistanceUnitEnums
spinChunkScan3dOutputModeEnums	include/spinc/CameraDefsC.h	/^} spinChunkScan3dOutputModeEnums;$/;"	t	typeref:enum:_spinChunkScan3dOutputModeEnums
spinChunkSelectorEnums	include/spinc/CameraDefsC.h	/^} spinChunkSelectorEnums;$/;"	t	typeref:enum:_spinChunkSelectorEnums
spinChunkSourceIDEnums	include/spinc/CameraDefsC.h	/^} spinChunkSourceIDEnums;$/;"	t	typeref:enum:_spinChunkSourceIDEnums
spinChunkTimerSelectorEnums	include/spinc/CameraDefsC.h	/^} spinChunkTimerSelectorEnums;$/;"	t	typeref:enum:_spinChunkTimerSelectorEnums
spinChunkTransferStreamIDEnums	include/spinc/CameraDefsC.h	/^} spinChunkTransferStreamIDEnums;$/;"	t	typeref:enum:_spinChunkTransferStreamIDEnums
spinClConfigurationEnums	include/spinc/CameraDefsC.h	/^} spinClConfigurationEnums;$/;"	t	typeref:enum:_spinClConfigurationEnums
spinClTimeSlotsCountEnums	include/spinc/CameraDefsC.h	/^} spinClTimeSlotsCountEnums;$/;"	t	typeref:enum:_spinClTimeSlotsCountEnums
spinColorProcessingAlgorithm	include/spinc/SpinnakerDefsC.h	/^} spinColorProcessingAlgorithm;$/;"	t	typeref:enum:_spinColorProcessingAlgorithm
spinColorTransformationSelectorEnums	include/spinc/CameraDefsC.h	/^} spinColorTransformationSelectorEnums;$/;"	t	typeref:enum:_spinColorTransformationSelectorEnums
spinColorTransformationValueSelectorEnums	include/spinc/CameraDefsC.h	/^} spinColorTransformationValueSelectorEnums;$/;"	t	typeref:enum:_spinColorTransformationValueSelectorEnums
spinCompressionMethod	include/spinc/SpinnakerDefsC.h	/^} spinCompressionMethod;$/;"	t	typeref:enum:CompressionMethod
spinCounterEventActivationEnums	include/spinc/CameraDefsC.h	/^} spinCounterEventActivationEnums;$/;"	t	typeref:enum:_spinCounterEventActivationEnums
spinCounterEventSourceEnums	include/spinc/CameraDefsC.h	/^} spinCounterEventSourceEnums;$/;"	t	typeref:enum:_spinCounterEventSourceEnums
spinCounterResetActivationEnums	include/spinc/CameraDefsC.h	/^} spinCounterResetActivationEnums;$/;"	t	typeref:enum:_spinCounterResetActivationEnums
spinCounterResetSourceEnums	include/spinc/CameraDefsC.h	/^} spinCounterResetSourceEnums;$/;"	t	typeref:enum:_spinCounterResetSourceEnums
spinCounterSelectorEnums	include/spinc/CameraDefsC.h	/^} spinCounterSelectorEnums;$/;"	t	typeref:enum:_spinCounterSelectorEnums
spinCounterStatusEnums	include/spinc/CameraDefsC.h	/^} spinCounterStatusEnums;$/;"	t	typeref:enum:_spinCounterStatusEnums
spinCounterTriggerActivationEnums	include/spinc/CameraDefsC.h	/^} spinCounterTriggerActivationEnums;$/;"	t	typeref:enum:_spinCounterTriggerActivationEnums
spinCounterTriggerSourceEnums	include/spinc/CameraDefsC.h	/^} spinCounterTriggerSourceEnums;$/;"	t	typeref:enum:_spinCounterTriggerSourceEnums
spinCxpConnectionTestModeEnums	include/spinc/CameraDefsC.h	/^} spinCxpConnectionTestModeEnums;$/;"	t	typeref:enum:_spinCxpConnectionTestModeEnums
spinCxpLinkConfigurationEnums	include/spinc/CameraDefsC.h	/^} spinCxpLinkConfigurationEnums;$/;"	t	typeref:enum:_spinCxpLinkConfigurationEnums
spinCxpLinkConfigurationPreferredEnums	include/spinc/CameraDefsC.h	/^} spinCxpLinkConfigurationPreferredEnums;$/;"	t	typeref:enum:_spinCxpLinkConfigurationPreferredEnums
spinCxpLinkConfigurationStatusEnums	include/spinc/CameraDefsC.h	/^} spinCxpLinkConfigurationStatusEnums;$/;"	t	typeref:enum:_spinCxpLinkConfigurationStatusEnums
spinCxpPoCxpStatusEnums	include/spinc/CameraDefsC.h	/^} spinCxpPoCxpStatusEnums;$/;"	t	typeref:enum:_spinCxpPoCxpStatusEnums
spinDecimationHorizontalModeEnums	include/spinc/CameraDefsC.h	/^} spinDecimationHorizontalModeEnums;$/;"	t	typeref:enum:_spinDecimationHorizontalModeEnums
spinDecimationVerticalModeEnums	include/spinc/CameraDefsC.h	/^} spinDecimationVerticalModeEnums;$/;"	t	typeref:enum:_spinDecimationVerticalModeEnums
spinDeinterlacingEnums	include/spinc/CameraDefsC.h	/^} spinDeinterlacingEnums;$/;"	t	typeref:enum:_spinDeinterlacingEnums
spinDeviceCharacterSetEnums	include/spinc/CameraDefsC.h	/^} spinDeviceCharacterSetEnums;$/;"	t	typeref:enum:_spinDeviceCharacterSetEnums
spinDeviceClockSelectorEnums	include/spinc/CameraDefsC.h	/^} spinDeviceClockSelectorEnums;$/;"	t	typeref:enum:_spinDeviceClockSelectorEnums
spinDeviceConnectionStatusEnums	include/spinc/CameraDefsC.h	/^} spinDeviceConnectionStatusEnums;$/;"	t	typeref:enum:_spinDeviceConnectionStatusEnums
spinDeviceEvent	include/spinc/SpinnakerDefsC.h	/^typedef void* spinDeviceEvent;$/;"	t
spinDeviceEventData	include/spinc/SpinnakerDefsC.h	/^typedef void* spinDeviceEventData;$/;"	t
spinDeviceEventFunction	include/spinc/SpinnakerDefsC.h	/^typedef void(*spinDeviceEventFunction)(const spinDeviceEventData hEventData, const char* pEventName, void* pUserData);$/;"	t
spinDeviceIndicatorModeEnums	include/spinc/CameraDefsC.h	/^} spinDeviceIndicatorModeEnums;$/;"	t	typeref:enum:_spinDeviceIndicatorModeEnums
spinDeviceLinkHeartbeatModeEnums	include/spinc/CameraDefsC.h	/^} spinDeviceLinkHeartbeatModeEnums;$/;"	t	typeref:enum:_spinDeviceLinkHeartbeatModeEnums
spinDeviceLinkThroughputLimitModeEnums	include/spinc/CameraDefsC.h	/^} spinDeviceLinkThroughputLimitModeEnums;$/;"	t	typeref:enum:_spinDeviceLinkThroughputLimitModeEnums
spinDeviceRegistersEndiannessEnums	include/spinc/CameraDefsC.h	/^} spinDeviceRegistersEndiannessEnums;$/;"	t	typeref:enum:_spinDeviceRegistersEndiannessEnums
spinDeviceScanTypeEnums	include/spinc/CameraDefsC.h	/^} spinDeviceScanTypeEnums;$/;"	t	typeref:enum:_spinDeviceScanTypeEnums
spinDeviceSerialPortBaudRateEnums	include/spinc/CameraDefsC.h	/^} spinDeviceSerialPortBaudRateEnums;$/;"	t	typeref:enum:_spinDeviceSerialPortBaudRateEnums
spinDeviceSerialPortSelectorEnums	include/spinc/CameraDefsC.h	/^} spinDeviceSerialPortSelectorEnums;$/;"	t	typeref:enum:_spinDeviceSerialPortSelectorEnums
spinDeviceStreamChannelEndiannessEnums	include/spinc/CameraDefsC.h	/^} spinDeviceStreamChannelEndiannessEnums;$/;"	t	typeref:enum:_spinDeviceStreamChannelEndiannessEnums
spinDeviceStreamChannelTypeEnums	include/spinc/CameraDefsC.h	/^} spinDeviceStreamChannelTypeEnums;$/;"	t	typeref:enum:_spinDeviceStreamChannelTypeEnums
spinDeviceTLTypeEnums	include/spinc/CameraDefsC.h	/^} spinDeviceTLTypeEnums;$/;"	t	typeref:enum:_spinDeviceTLTypeEnums
spinDeviceTapGeometryEnums	include/spinc/CameraDefsC.h	/^} spinDeviceTapGeometryEnums;$/;"	t	typeref:enum:_spinDeviceTapGeometryEnums
spinDeviceTemperatureSelectorEnums	include/spinc/CameraDefsC.h	/^} spinDeviceTemperatureSelectorEnums;$/;"	t	typeref:enum:_spinDeviceTemperatureSelectorEnums
spinDeviceTypeEnums	include/spinc/CameraDefsC.h	/^} spinDeviceTypeEnums;$/;"	t	typeref:enum:_spinDeviceTypeEnums
spinDisplayNotation	include/spinc/SpinnakerGenApiDefsC.h	/^} spinDisplayNotation;$/;"	t	typeref:enum:_spinDisplayNotation
spinEncoderModeEnums	include/spinc/CameraDefsC.h	/^} spinEncoderModeEnums;$/;"	t	typeref:enum:_spinEncoderModeEnums
spinEncoderOutputModeEnums	include/spinc/CameraDefsC.h	/^} spinEncoderOutputModeEnums;$/;"	t	typeref:enum:_spinEncoderOutputModeEnums
spinEncoderResetActivationEnums	include/spinc/CameraDefsC.h	/^} spinEncoderResetActivationEnums;$/;"	t	typeref:enum:_spinEncoderResetActivationEnums
spinEncoderResetSourceEnums	include/spinc/CameraDefsC.h	/^} spinEncoderResetSourceEnums;$/;"	t	typeref:enum:_spinEncoderResetSourceEnums
spinEncoderSelectorEnums	include/spinc/CameraDefsC.h	/^} spinEncoderSelectorEnums;$/;"	t	typeref:enum:_spinEncoderSelectorEnums
spinEncoderSourceAEnums	include/spinc/CameraDefsC.h	/^} spinEncoderSourceAEnums;$/;"	t	typeref:enum:_spinEncoderSourceAEnums
spinEncoderSourceBEnums	include/spinc/CameraDefsC.h	/^} spinEncoderSourceBEnums;$/;"	t	typeref:enum:_spinEncoderSourceBEnums
spinEncoderStatusEnums	include/spinc/CameraDefsC.h	/^} spinEncoderStatusEnums;$/;"	t	typeref:enum:_spinEncoderStatusEnums
spinEndianess	include/spinc/SpinnakerGenApiDefsC.h	/^} spinEndianess;$/;"	t	typeref:enum:_spinEndianess
spinError	include/spinc/SpinnakerDefsC.h	/^} spinError;$/;"	t	typeref:enum:_spinError
spinEventNotificationEnums	include/spinc/CameraDefsC.h	/^} spinEventNotificationEnums;$/;"	t	typeref:enum:_spinEventNotificationEnums
spinEventSelectorEnums	include/spinc/CameraDefsC.h	/^} spinEventSelectorEnums;$/;"	t	typeref:enum:_spinEventSelectorEnums
spinExposureAutoEnums	include/spinc/CameraDefsC.h	/^} spinExposureAutoEnums;$/;"	t	typeref:enum:_spinExposureAutoEnums
spinExposureModeEnums	include/spinc/CameraDefsC.h	/^} spinExposureModeEnums;$/;"	t	typeref:enum:_spinExposureModeEnums
spinExposureTimeModeEnums	include/spinc/CameraDefsC.h	/^} spinExposureTimeModeEnums;$/;"	t	typeref:enum:_spinExposureTimeModeEnums
spinExposureTimeSelectorEnums	include/spinc/CameraDefsC.h	/^} spinExposureTimeSelectorEnums;$/;"	t	typeref:enum:_spinExposureTimeSelectorEnums
spinFileOpenModeEnums	include/spinc/CameraDefsC.h	/^} spinFileOpenModeEnums;$/;"	t	typeref:enum:_spinFileOpenModeEnums
spinFileOperationSelectorEnums	include/spinc/CameraDefsC.h	/^} spinFileOperationSelectorEnums;$/;"	t	typeref:enum:_spinFileOperationSelectorEnums
spinFileOperationStatusEnums	include/spinc/CameraDefsC.h	/^} spinFileOperationStatusEnums;$/;"	t	typeref:enum:_spinFileOperationStatusEnums
spinFileSelectorEnums	include/spinc/CameraDefsC.h	/^} spinFileSelectorEnums;$/;"	t	typeref:enum:_spinFileSelectorEnums
spinGainAutoBalanceEnums	include/spinc/CameraDefsC.h	/^} spinGainAutoBalanceEnums;$/;"	t	typeref:enum:_spinGainAutoBalanceEnums
spinGainAutoEnums	include/spinc/CameraDefsC.h	/^} spinGainAutoEnums;$/;"	t	typeref:enum:_spinGainAutoEnums
spinGainSelectorEnums	include/spinc/CameraDefsC.h	/^} spinGainSelectorEnums;$/;"	t	typeref:enum:_spinGainSelectorEnums
spinGevCCPEnums	include/spinc/CameraDefsC.h	/^} spinGevCCPEnums;$/;"	t	typeref:enum:_spinGevCCPEnums
spinGevCurrentPhysicalLinkConfigurationEnums	include/spinc/CameraDefsC.h	/^} spinGevCurrentPhysicalLinkConfigurationEnums;$/;"	t	typeref:enum:_spinGevCurrentPhysicalLinkConfigurationEnums
spinGevGVCPExtendedStatusCodesSelectorEnums	include/spinc/CameraDefsC.h	/^} spinGevGVCPExtendedStatusCodesSelectorEnums;$/;"	t	typeref:enum:_spinGevGVCPExtendedStatusCodesSelectorEnums
spinGevGVSPExtendedIDModeEnums	include/spinc/CameraDefsC.h	/^} spinGevGVSPExtendedIDModeEnums;$/;"	t	typeref:enum:_spinGevGVSPExtendedIDModeEnums
spinGevIEEE1588ClockAccuracyEnums	include/spinc/CameraDefsC.h	/^} spinGevIEEE1588ClockAccuracyEnums;$/;"	t	typeref:enum:_spinGevIEEE1588ClockAccuracyEnums
spinGevIEEE1588StatusEnums	include/spinc/CameraDefsC.h	/^} spinGevIEEE1588StatusEnums;$/;"	t	typeref:enum:_spinGevIEEE1588StatusEnums
spinGevIPConfigurationStatusEnums	include/spinc/CameraDefsC.h	/^} spinGevIPConfigurationStatusEnums;$/;"	t	typeref:enum:_spinGevIPConfigurationStatusEnums
spinGevPhysicalLinkConfigurationEnums	include/spinc/CameraDefsC.h	/^} spinGevPhysicalLinkConfigurationEnums;$/;"	t	typeref:enum:_spinGevPhysicalLinkConfigurationEnums
spinGevSupportedOptionSelectorEnums	include/spinc/CameraDefsC.h	/^} spinGevSupportedOptionSelectorEnums;$/;"	t	typeref:enum:_spinGevSupportedOptionSelectorEnums
spinH264Option	include/spinc/SpinnakerDefsC.h	/^} spinH264Option;$/;"	t	typeref:struct:_spinH264Option
spinImage	include/spinc/SpinnakerDefsC.h	/^typedef void* spinImage;$/;"	t
spinImageComponentSelectorEnums	include/spinc/CameraDefsC.h	/^} spinImageComponentSelectorEnums;$/;"	t	typeref:enum:_spinImageComponentSelectorEnums
spinImageCompressionJPEGFormatOptionEnums	include/spinc/CameraDefsC.h	/^} spinImageCompressionJPEGFormatOptionEnums;$/;"	t	typeref:enum:_spinImageCompressionJPEGFormatOptionEnums
spinImageCompressionModeEnums	include/spinc/CameraDefsC.h	/^} spinImageCompressionModeEnums;$/;"	t	typeref:enum:_spinImageCompressionModeEnums
spinImageCompressionRateOptionEnums	include/spinc/CameraDefsC.h	/^} spinImageCompressionRateOptionEnums;$/;"	t	typeref:enum:_spinImageCompressionRateOptionEnums
spinImageEvent	include/spinc/SpinnakerDefsC.h	/^typedef void* spinImageEvent;$/;"	t
spinImageEventFunction	include/spinc/SpinnakerDefsC.h	/^typedef void(*spinImageEventFunction)(const spinImage hImage, void* pUserData);$/;"	t
spinImageFileFormat	include/spinc/SpinnakerDefsC.h	/^} spinImageFileFormat;$/;"	t	typeref:enum:_spinImageFileFormat
spinImageStatistics	include/spinc/SpinnakerDefsC.h	/^typedef void* spinImageStatistics;$/;"	t
spinImageStatus	include/spinc/SpinnakerDefsC.h	/^} spinImageStatus;$/;"	t	typeref:enum:_spinImageStatus
spinIncMode	include/spinc/SpinnakerGenApiDefsC.h	/^} spinIncMode;$/;"	t	typeref:enum:_spinIncMode
spinInputDirection	include/spinc/SpinnakerGenApiDefsC.h	/^} spinInputDirection;$/;"	t	typeref:enum:_spinInputDirection
spinInterface	include/spinc/SpinnakerDefsC.h	/^typedef void* spinInterface;$/;"	t
spinInterfaceEvent	include/spinc/SpinnakerDefsC.h	/^typedef void* spinInterfaceEvent;$/;"	t
spinInterfaceList	include/spinc/SpinnakerDefsC.h	/^typedef void* spinInterfaceList;$/;"	t
spinInterfaceType	include/spinc/SpinnakerGenApiDefsC.h	/^} spinInterfaceType;$/;"	t	typeref:enum:_spinInterfaceType
spinJPEGOption	include/spinc/SpinnakerDefsC.h	/^} spinJPEGOption;$/;"	t	typeref:struct:_spinJPEGOption
spinJPG2Option	include/spinc/SpinnakerDefsC.h	/^} spinJPG2Option;$/;"	t	typeref:struct:_spinJPG2Option
spinLUTSelectorEnums	include/spinc/CameraDefsC.h	/^} spinLUTSelectorEnums;$/;"	t	typeref:enum:_spinLUTSelectorEnums
spinLineFormatEnums	include/spinc/CameraDefsC.h	/^} spinLineFormatEnums;$/;"	t	typeref:enum:_spinLineFormatEnums
spinLineModeEnums	include/spinc/CameraDefsC.h	/^} spinLineModeEnums;$/;"	t	typeref:enum:_spinLineModeEnums
spinLineSelectorEnums	include/spinc/CameraDefsC.h	/^} spinLineSelectorEnums;$/;"	t	typeref:enum:_spinLineSelectorEnums
spinLineSourceEnums	include/spinc/CameraDefsC.h	/^} spinLineSourceEnums;$/;"	t	typeref:enum:_spinLineSourceEnums
spinLinkType	include/spinc/SpinnakerGenApiDefsC.h	/^} spinLinkType;$/;"	t	typeref:enum:_spinLinkType
spinLogEvent	include/spinc/SpinnakerDefsC.h	/^typedef void* spinLogEvent;$/;"	t
spinLogEventData	include/spinc/SpinnakerDefsC.h	/^typedef void* spinLogEventData;$/;"	t
spinLogEventFunction	include/spinc/SpinnakerDefsC.h	/^typedef void(*spinLogEventFunction)(const spinLogEventData hEventData, void* pUserData);$/;"	t
spinMJPGOption	include/spinc/SpinnakerDefsC.h	/^} spinMJPGOption;$/;"	t	typeref:struct:_spinMJPGOption
spinNameSpace	include/spinc/SpinnakerGenApiDefsC.h	/^} spinNameSpace;$/;"	t	typeref:enum:_spinNameSpace
spinNodeCallbackFunction	include/spinc/SpinnakerGenApiDefsC.h	/^typedef void(*spinNodeCallbackFunction)(spinNodeHandle hNode);$/;"	t
spinNodeCallbackHandle	include/spinc/SpinnakerGenApiDefsC.h	/^typedef void* spinNodeCallbackHandle;$/;"	t
spinNodeHandle	include/spinc/SpinnakerGenApiDefsC.h	/^typedef void* spinNodeHandle;$/;"	t
spinNodeMapHandle	include/spinc/SpinnakerGenApiDefsC.h	/^typedef void* spinNodeMapHandle;$/;"	t
spinNodeType	include/spinc/SpinnakerGenApiDefsC.h	/^} spinNodeType;$/;"	t	typeref:enum:_spinNodeType
spinPGMOption	include/spinc/SpinnakerDefsC.h	/^} spinPGMOption;$/;"	t	typeref:struct:_spinPGMOption
spinPNGOption	include/spinc/SpinnakerDefsC.h	/^} spinPNGOption;$/;"	t	typeref:struct:_spinPNGOption
spinPPMOption	include/spinc/SpinnakerDefsC.h	/^} spinPPMOption;$/;"	t	typeref:struct:_spinPPMOption
spinPayloadTypeInfoIDs	include/spinc/SpinnakerDefsC.h	/^} spinPayloadTypeInfoIDs;$/;"	t	typeref:enum:_spinPayloadTypeInfoIDs
spinPixelColorFilterEnums	include/spinc/CameraDefsC.h	/^} spinPixelColorFilterEnums;$/;"	t	typeref:enum:_spinPixelColorFilterEnums
spinPixelFormatEnums	include/spinc/CameraDefsC.h	/^} spinPixelFormatEnums;$/;"	t	typeref:enum:_spinPixelFormatEnums
spinPixelFormatInfoSelectorEnums	include/spinc/CameraDefsC.h	/^} spinPixelFormatInfoSelectorEnums;$/;"	t	typeref:enum:_spinPixelFormatInfoSelectorEnums
spinPixelFormatNamespaceID	include/spinc/SpinnakerDefsC.h	/^} spinPixelFormatNamespaceID;$/;"	t	typeref:enum:_spinPixelFormatNamespaceID
spinPixelSizeEnums	include/spinc/CameraDefsC.h	/^} spinPixelSizeEnums;$/;"	t	typeref:enum:_spinPixelSizeEnums
spinRegionDestinationEnums	include/spinc/CameraDefsC.h	/^} spinRegionDestinationEnums;$/;"	t	typeref:enum:_spinRegionDestinationEnums
spinRegionModeEnums	include/spinc/CameraDefsC.h	/^} spinRegionModeEnums;$/;"	t	typeref:enum:_spinRegionModeEnums
spinRegionSelectorEnums	include/spinc/CameraDefsC.h	/^} spinRegionSelectorEnums;$/;"	t	typeref:enum:_spinRegionSelectorEnums
spinRemovalEvent	include/spinc/SpinnakerDefsC.h	/^typedef void* spinRemovalEvent;$/;"	t
spinRemovalEventFunction	include/spinc/SpinnakerDefsC.h	/^typedef void(*spinRemovalEventFunction)(uint64_t deviceSerialNumber, void* pUserData);$/;"	t
spinRepresentation	include/spinc/SpinnakerGenApiDefsC.h	/^} spinRepresentation;$/;"	t	typeref:enum:_spinRepresentation
spinScan3dCoordinateReferenceSelectorEnums	include/spinc/CameraDefsC.h	/^} spinScan3dCoordinateReferenceSelectorEnums;$/;"	t	typeref:enum:_spinScan3dCoordinateReferenceSelectorEnums
spinScan3dCoordinateSelectorEnums	include/spinc/CameraDefsC.h	/^} spinScan3dCoordinateSelectorEnums;$/;"	t	typeref:enum:_spinScan3dCoordinateSelectorEnums
spinScan3dCoordinateSystemEnums	include/spinc/CameraDefsC.h	/^} spinScan3dCoordinateSystemEnums;$/;"	t	typeref:enum:_spinScan3dCoordinateSystemEnums
spinScan3dCoordinateSystemReferenceEnums	include/spinc/CameraDefsC.h	/^} spinScan3dCoordinateSystemReferenceEnums;$/;"	t	typeref:enum:_spinScan3dCoordinateSystemReferenceEnums
spinScan3dCoordinateTransformSelectorEnums	include/spinc/CameraDefsC.h	/^} spinScan3dCoordinateTransformSelectorEnums;$/;"	t	typeref:enum:_spinScan3dCoordinateTransformSelectorEnums
spinScan3dDistanceUnitEnums	include/spinc/CameraDefsC.h	/^} spinScan3dDistanceUnitEnums;$/;"	t	typeref:enum:_spinScan3dDistanceUnitEnums
spinScan3dOutputModeEnums	include/spinc/CameraDefsC.h	/^} spinScan3dOutputModeEnums;$/;"	t	typeref:enum:_spinScan3dOutputModeEnums
spinSensorDigitizationTapsEnums	include/spinc/CameraDefsC.h	/^} spinSensorDigitizationTapsEnums;$/;"	t	typeref:enum:_spinSensorDigitizationTapsEnums
spinSensorShutterModeEnums	include/spinc/CameraDefsC.h	/^} spinSensorShutterModeEnums;$/;"	t	typeref:enum:_spinSensorShutterModeEnums
spinSensorTapsEnums	include/spinc/CameraDefsC.h	/^} spinSensorTapsEnums;$/;"	t	typeref:enum:_spinSensorTapsEnums
spinSequencerConfigurationModeEnums	include/spinc/CameraDefsC.h	/^} spinSequencerConfigurationModeEnums;$/;"	t	typeref:enum:_spinSequencerConfigurationModeEnums
spinSequencerFeatureSelectorEnums	include/spinc/CameraDefsC.h	/^} spinSequencerFeatureSelectorEnums;$/;"	t	typeref:enum:_spinSequencerFeatureSelectorEnums
spinSequencerModeEnums	include/spinc/CameraDefsC.h	/^} spinSequencerModeEnums;$/;"	t	typeref:enum:_spinSequencerModeEnums
spinSequencerTriggerActivationEnums	include/spinc/CameraDefsC.h	/^} spinSequencerTriggerActivationEnums;$/;"	t	typeref:enum:_spinSequencerTriggerActivationEnums
spinSequencerTriggerSourceEnums	include/spinc/CameraDefsC.h	/^} spinSequencerTriggerSourceEnums;$/;"	t	typeref:enum:_spinSequencerTriggerSourceEnums
spinSign	include/spinc/SpinnakerGenApiDefsC.h	/^} spinSign;$/;"	t	typeref:enum:_spinSign
spinSlope	include/spinc/SpinnakerGenApiDefsC.h	/^} spinSlope;$/;"	t	typeref:enum:_spinSlope
spinSoftwareSignalSelectorEnums	include/spinc/CameraDefsC.h	/^} spinSoftwareSignalSelectorEnums;$/;"	t	typeref:enum:_spinSoftwareSignalSelectorEnums
spinSourceSelectorEnums	include/spinc/CameraDefsC.h	/^} spinSourceSelectorEnums;$/;"	t	typeref:enum:_spinSourceSelectorEnums
spinStandardNameSpace	include/spinc/SpinnakerGenApiDefsC.h	/^} spinStandardNameSpace;$/;"	t	typeref:enum:_spinStandardNameSpace
spinStatisticsChannel	include/spinc/SpinnakerDefsC.h	/^} spinStatisticsChannel;$/;"	t	typeref:enum:_spinStatisticsChannel
spinSystem	include/spinc/SpinnakerDefsC.h	/^typedef void* spinSystem;$/;"	t
spinTIFFOption	include/spinc/SpinnakerDefsC.h	/^} spinTIFFOption;$/;"	t	typeref:struct:_spinTIFFOption
spinTLDeviceAccessStatusEnums	include/spinc/TransportLayerDefsC.h	/^} spinTLDeviceAccessStatusEnums;$/;"	t	typeref:enum:_spinTLDeviceAccessStatusEnums
spinTLDeviceCurrentSpeedEnums	include/spinc/TransportLayerDefsC.h	/^} spinTLDeviceCurrentSpeedEnums;$/;"	t	typeref:enum:_spinTLDeviceCurrentSpeedEnums
spinTLDeviceEndianessMechanismEnums	include/spinc/TransportLayerDefsC.h	/^} spinTLDeviceEndianessMechanismEnums;$/;"	t	typeref:enum:_spinTLDeviceEndianessMechanismEnums
spinTLDeviceTypeEnums	include/spinc/TransportLayerDefsC.h	/^} spinTLDeviceTypeEnums;$/;"	t	typeref:enum:_spinTLDeviceTypeEnums
spinTLGUIXMLLocationEnums	include/spinc/TransportLayerDefsC.h	/^} spinTLGUIXMLLocationEnums;$/;"	t	typeref:enum:_spinTLGUIXMLLocationEnums
spinTLGenICamXMLLocationEnums	include/spinc/TransportLayerDefsC.h	/^} spinTLGenICamXMLLocationEnums;$/;"	t	typeref:enum:_spinTLGenICamXMLLocationEnums
spinTLGevCCPEnums	include/spinc/TransportLayerDefsC.h	/^} spinTLGevCCPEnums;$/;"	t	typeref:enum:_spinTLGevCCPEnums
spinTLPOEStatusEnums	include/spinc/TransportLayerDefsC.h	/^} spinTLPOEStatusEnums;$/;"	t	typeref:enum:_spinTLPOEStatusEnums
spinTLStreamBufferHandlingModeEnums	include/spinc/TransportLayerDefsC.h	/^} spinTLStreamBufferHandlingModeEnums;$/;"	t	typeref:enum:_spinTLStreamBufferHandlingModeEnums
spinTLStreamDefaultBufferCountModeEnums	include/spinc/TransportLayerDefsC.h	/^} spinTLStreamDefaultBufferCountModeEnums;$/;"	t	typeref:enum:_spinTLStreamDefaultBufferCountModeEnums
spinTLStreamTypeEnums	include/spinc/TransportLayerDefsC.h	/^} spinTLStreamTypeEnums;$/;"	t	typeref:enum:_spinTLStreamTypeEnums
spinTestPatternEnums	include/spinc/CameraDefsC.h	/^} spinTestPatternEnums;$/;"	t	typeref:enum:_spinTestPatternEnums
spinTestPatternGeneratorSelectorEnums	include/spinc/CameraDefsC.h	/^} spinTestPatternGeneratorSelectorEnums;$/;"	t	typeref:enum:_spinTestPatternGeneratorSelectorEnums
spinTimerSelectorEnums	include/spinc/CameraDefsC.h	/^} spinTimerSelectorEnums;$/;"	t	typeref:enum:_spinTimerSelectorEnums
spinTimerStatusEnums	include/spinc/CameraDefsC.h	/^} spinTimerStatusEnums;$/;"	t	typeref:enum:_spinTimerStatusEnums
spinTimerTriggerActivationEnums	include/spinc/CameraDefsC.h	/^} spinTimerTriggerActivationEnums;$/;"	t	typeref:enum:_spinTimerTriggerActivationEnums
spinTimerTriggerSourceEnums	include/spinc/CameraDefsC.h	/^} spinTimerTriggerSourceEnums;$/;"	t	typeref:enum:_spinTimerTriggerSourceEnums
spinTransferComponentSelectorEnums	include/spinc/CameraDefsC.h	/^} spinTransferComponentSelectorEnums;$/;"	t	typeref:enum:_spinTransferComponentSelectorEnums
spinTransferControlModeEnums	include/spinc/CameraDefsC.h	/^} spinTransferControlModeEnums;$/;"	t	typeref:enum:_spinTransferControlModeEnums
spinTransferOperationModeEnums	include/spinc/CameraDefsC.h	/^} spinTransferOperationModeEnums;$/;"	t	typeref:enum:_spinTransferOperationModeEnums
spinTransferQueueModeEnums	include/spinc/CameraDefsC.h	/^} spinTransferQueueModeEnums;$/;"	t	typeref:enum:_spinTransferQueueModeEnums
spinTransferSelectorEnums	include/spinc/CameraDefsC.h	/^} spinTransferSelectorEnums;$/;"	t	typeref:enum:_spinTransferSelectorEnums
spinTransferStatusSelectorEnums	include/spinc/CameraDefsC.h	/^} spinTransferStatusSelectorEnums;$/;"	t	typeref:enum:_spinTransferStatusSelectorEnums
spinTransferTriggerActivationEnums	include/spinc/CameraDefsC.h	/^} spinTransferTriggerActivationEnums;$/;"	t	typeref:enum:_spinTransferTriggerActivationEnums
spinTransferTriggerModeEnums	include/spinc/CameraDefsC.h	/^} spinTransferTriggerModeEnums;$/;"	t	typeref:enum:_spinTransferTriggerModeEnums
spinTransferTriggerSelectorEnums	include/spinc/CameraDefsC.h	/^} spinTransferTriggerSelectorEnums;$/;"	t	typeref:enum:_spinTransferTriggerSelectorEnums
spinTransferTriggerSourceEnums	include/spinc/CameraDefsC.h	/^} spinTransferTriggerSourceEnums;$/;"	t	typeref:enum:_spinTransferTriggerSourceEnums
spinTriggerActivationEnums	include/spinc/CameraDefsC.h	/^} spinTriggerActivationEnums;$/;"	t	typeref:enum:_spinTriggerActivationEnums
spinTriggerModeEnums	include/spinc/CameraDefsC.h	/^} spinTriggerModeEnums;$/;"	t	typeref:enum:_spinTriggerModeEnums
spinTriggerOverlapEnums	include/spinc/CameraDefsC.h	/^} spinTriggerOverlapEnums;$/;"	t	typeref:enum:_spinTriggerOverlapEnums
spinTriggerSelectorEnums	include/spinc/CameraDefsC.h	/^} spinTriggerSelectorEnums;$/;"	t	typeref:enum:_spinTriggerSelectorEnums
spinTriggerSourceEnums	include/spinc/CameraDefsC.h	/^} spinTriggerSourceEnums;$/;"	t	typeref:enum:_spinTriggerSourceEnums
spinUserOutputSelectorEnums	include/spinc/CameraDefsC.h	/^} spinUserOutputSelectorEnums;$/;"	t	typeref:enum:_spinUserOutputSelectorEnums
spinUserSetDefaultEnums	include/spinc/CameraDefsC.h	/^} spinUserSetDefaultEnums;$/;"	t	typeref:enum:_spinUserSetDefaultEnums
spinUserSetFeatureSelectorEnums	include/spinc/CameraDefsC.h	/^} spinUserSetFeatureSelectorEnums;$/;"	t	typeref:enum:_spinUserSetFeatureSelectorEnums
spinUserSetSelectorEnums	include/spinc/CameraDefsC.h	/^} spinUserSetSelectorEnums;$/;"	t	typeref:enum:_spinUserSetSelectorEnums
spinVisibility	include/spinc/SpinnakerGenApiDefsC.h	/^} spinVisibility;$/;"	t	typeref:enum:_spinVisibility
spinWhiteClipSelectorEnums	include/spinc/CameraDefsC.h	/^} spinWhiteClipSelectorEnums;$/;"	t	typeref:enum:_spinWhiteClipSelectorEnums
spinXMLValidation	include/spinc/SpinnakerGenApiDefsC.h	/^} spinXMLValidation;$/;"	t	typeref:enum:_spinXMLValidation
spinYesNo	include/spinc/SpinnakerGenApiDefsC.h	/^} spinYesNo;$/;"	t	typeref:enum:_spinYesNo
spinnakerLogLevel	include/spinc/SpinnakerDefsC.h	/^} spinnakerLogLevel;$/;"	t	typeref:enum:_spinLogLevel
srcHeight	include/PtGreyVideoEncoder.h	/^	int srcHeight;						\/* Height of the input image. *\/$/;"	m	struct:PtGreyVideoEncoderOptions
srcWidth	include/PtGreyVideoEncoder.h	/^	int srcWidth;						\/* Width of the input image. *\/$/;"	m	struct:PtGreyVideoEncoderOptions
std	include/SpinGenApi/Container.h	/^namespace std$/;"	n
stride	include/PtGreyVideoEncoder.h	/^	int stride;							\/* Stride of pixel data (ie: number of bytes per pixel, assuming no$/;"	m	struct:PtGreyVideoEncoderOptions
sync	include/SpinGenApi/Filestream.h	/^			int sync() {$/;"	f	class:Spinnaker::GenApi::ODevFileStreamBuf
test	include/GUI/RapidXML/rapidxml.hpp	/^            static unsigned char test(Ch ch)$/;"	f	struct:rapidxml::xml_document::attribute_name_pred
test	include/GUI/RapidXML/rapidxml.hpp	/^            static unsigned char test(Ch ch)$/;"	f	struct:rapidxml::xml_document::attribute_value_pred
test	include/GUI/RapidXML/rapidxml.hpp	/^            static unsigned char test(Ch ch)$/;"	f	struct:rapidxml::xml_document::attribute_value_pure_pred
test	include/GUI/RapidXML/rapidxml.hpp	/^            static unsigned char test(Ch ch)$/;"	f	struct:rapidxml::xml_document::node_name_pred
test	include/GUI/RapidXML/rapidxml.hpp	/^            static unsigned char test(Ch ch)$/;"	f	struct:rapidxml::xml_document::text_pred
test	include/GUI/RapidXML/rapidxml.hpp	/^            static unsigned char test(Ch ch)$/;"	f	struct:rapidxml::xml_document::text_pure_no_ws_pred
test	include/GUI/RapidXML/rapidxml.hpp	/^            static unsigned char test(Ch ch)$/;"	f	struct:rapidxml::xml_document::text_pure_with_ws_pred
test	include/GUI/RapidXML/rapidxml.hpp	/^            static unsigned char test(Ch ch)$/;"	f	struct:rapidxml::xml_document::whitespace_pred
text_pred	include/GUI/RapidXML/rapidxml.hpp	/^        struct text_pred$/;"	s	class:rapidxml::xml_document
text_pure_no_ws_pred	include/GUI/RapidXML/rapidxml.hpp	/^        struct text_pure_no_ws_pred$/;"	s	class:rapidxml::xml_document
text_pure_with_ws_pred	include/GUI/RapidXML/rapidxml.hpp	/^        struct text_pure_with_ws_pred$/;"	s	class:rapidxml::xml_document
traits_type	include/SpinGenApi/Filestream.h	/^			typedef Traits traits_type;$/;"	t	class:Spinnaker::GenApi::IDevFileStreamBuf
traits_type	include/SpinGenApi/Filestream.h	/^			typedef Traits traits_type;$/;"	t	class:Spinnaker::GenApi::ODevFileStreamBuf
triggerType	Abhinay/Abhi_hardware/Abhi_hardware.cpp	/^enum triggerType$/;"	g	file:
triggerType	Abhinay/Abhi_test3/Abhi_test3.cpp	/^enum triggerType$/;"	g	file:
triggerType	Abhinay/Abhi_trigger/Trigger.cpp	/^enum triggerType$/;"	g	file:
triggerType	SpinnakerTest/Abhi_test3/Abhi_test3.cpp	/^enum triggerType$/;"	g	file:
triggerType	SpinnakerTest/Abhi_trigger/Trigger.cpp	/^enum triggerType$/;"	g	file:
triggerType	SpinnakerTest/Trigger/Trigger.cpp	/^enum triggerType$/;"	g	file:
triggerType	SpinnakerTest/Trigger_C/Trigger_C.cpp	/^}triggerType;$/;"	t	typeref:enum:_triggerType	file:
triggerType	SpinnakerTest/Trigger_C_QuickSpin/Trigger_C_QuickSpin.cpp	/^}triggerType;$/;"	t	typeref:enum:_triggerType	file:
triggerType	SpinnakerTest/Trigger_QuickSpin/Trigger_QuickSpin.cpp	/^enum triggerType$/;"	g	file:
triggerType	src/Abhi_hardware/Abhi_hardware.cpp	/^enum triggerType$/;"	g	file:
triggerType	src/Abhi_test3/Abhi_test3.cpp	/^enum triggerType$/;"	g	file:
triggerType	src/Abhi_trigger/Trigger.cpp	/^enum triggerType$/;"	g	file:
triggerType	src/Trigger/Trigger.cpp	/^enum triggerType$/;"	g	file:
triggerType	src/Trigger_C/Trigger_C.cpp	/^}triggerType;$/;"	t	typeref:enum:_triggerType	file:
triggerType	src/Trigger_C_QuickSpin/Trigger_C_QuickSpin.cpp	/^}triggerType;$/;"	t	typeref:enum:_triggerType	file:
triggerType	src/Trigger_QuickSpin/Trigger_QuickSpin.cpp	/^enum triggerType$/;"	g	file:
type	include/GUI/RapidXML/rapidxml.hpp	/^        node_type type() const$/;"	f	class:rapidxml::xml_node
type	include/GUI/RapidXML/rapidxml.hpp	/^        void type(node_type type)$/;"	f	class:rapidxml::xml_node
uint16_t	include/PtGreyVideoEncoderPlatform.h	/^typedef unsigned __int16	uint16_t;$/;"	t
uint16_t	include/SpinGenApi/GCTypes.h	/^            typedef unsigned short uint16_t;$/;"	t
uint32_t	include/PtGreyVideoEncoderPlatform.h	/^typedef unsigned __int32	uint32_t;$/;"	t
uint32_t	include/SpinGenApi/GCTypes.h	/^            typedef unsigned __int32 uint32_t;$/;"	t
uint32_t	include/spinc/SpinnakerPlatformC.h	/^typedef unsigned __int32 uint32_t;$/;"	t
uint64_t	include/PtGreyVideoEncoderPlatform.h	/^typedef unsigned __int64	uint64_t;$/;"	t
uint64_t	include/SpinGenApi/GCTypes.h	/^            typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	include/spinc/SpinnakerPlatformC.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint8_t	include/PtGreyVideoEncoderPlatform.h	/^typedef unsigned __int8		uint8_t;$/;"	t
uint8_t	include/SpinGenApi/GCTypes.h	/^            typedef unsigned char uint8_t;$/;"	t
uint8_t	include/spinc/SpinnakerPlatformC.h	/^typedef unsigned char uint8_t;$/;"	t
uint_t	include/SpinGenApi/GCTypes.h	/^    typedef unsigned __int64 uint_t;$/;"	t
uintptr_t	include/SpinGenApi/GCTypes.h	/^            typedef GC_W64 unsigned int uintptr_t;$/;"	t
uintptr_t	include/SpinGenApi/GCTypes.h	/^            typedef unsigned __int64 uintptr_t;$/;"	t
underflow	include/SpinGenApi/Filestream.h	/^			int_type underflow() {$/;"	f	class:Spinnaker::GenApi::IDevFileStreamBuf
userData	SpinnakerTest/DeviceEvents_C/DeviceEvents_C.cpp	/^} userData;$/;"	t	typeref:struct:_userData	file:
userData	SpinnakerTest/EnumerationEvents_C/EnumerationEvents_C.cpp	/^} userData;$/;"	t	typeref:struct:_userData	file:
userData	SpinnakerTest/ImageEvents_C/ImageEvents_C.cpp	/^} userData;$/;"	t	typeref:struct:_userData	file:
userData	src/DeviceEvents_C/DeviceEvents_C.cpp	/^} userData;$/;"	t	typeref:struct:_userData	file:
userData	src/EnumerationEvents_C/EnumerationEvents_C.cpp	/^} userData;$/;"	t	typeref:struct:_userData	file:
userData	src/ImageEvents_C/ImageEvents_C.cpp	/^} userData;$/;"	t	typeref:struct:_userData	file:
v1_0	include/SpinGenApi/Types.h	/^			v1_0 = 1,$/;"	e	enum:Spinnaker::GenApi::_EGenApiSchemaVersion
v1_1	include/SpinGenApi/Types.h	/^			v1_1 = 2,$/;"	e	enum:Spinnaker::GenApi::_EGenApiSchemaVersion
value	include/GUI/RapidXML/rapidxml.hpp	/^        Ch *value() const$/;"	f	class:rapidxml::xml_base
value	include/GUI/RapidXML/rapidxml.hpp	/^        void value(const Ch *value)$/;"	f	class:rapidxml::xml_base
value	include/GUI/RapidXML/rapidxml.hpp	/^        void value(const Ch *value, std::size_t size)$/;"	f	class:rapidxml::xml_base
value_size	include/GUI/RapidXML/rapidxml.hpp	/^        std::size_t value_size() const$/;"	f	class:rapidxml::xml_base
value_type	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        typedef typename xml_attribute<Ch> value_type;$/;"	t	class:rapidxml::attribute_iterator
value_type	include/GUI/RapidXML/rapidxml_iterators.hpp	/^        typedef typename xml_node<Ch> value_type;$/;"	t	class:rapidxml::node_iterator
value_type	include/SpinGenApi/Container.h	/^				typedef T value_type;$/;"	t	class:Spinnaker::GenApi::node_vector::const_iterator
value_type	include/SpinGenApi/Container.h	/^				typedef T value_type;$/;"	t	class:Spinnaker::GenApi::node_vector::iterator
value_type	include/SpinGenApi/Container.h	/^				typedef T value_type;$/;"	t	class:Spinnaker::GenApi::value_vector::const_iterator
value_type	include/SpinGenApi/Container.h	/^				typedef T value_type;$/;"	t	class:Spinnaker::GenApi::value_vector::iterator
value_vector	include/SpinGenApi/Container.h	/^		class SPINNAKER_API value_vector$/;"	c	namespace:Spinnaker::GenApi
vector_t	include/SpinGenApi/Container.h	/^			typedef std::vector<T, std::allocator<T> > vector_t;$/;"	t	class:Spinnaker::GenApi::node_vector
vector_t	include/SpinGenApi/Container.h	/^			typedef std::vector<T, std::allocator<T> > vector_t;$/;"	t	class:Spinnaker::GenApi::value_vector
whitespace_pred	include/GUI/RapidXML/rapidxml.hpp	/^        struct whitespace_pred$/;"	s	class:rapidxml::xml_document
width	include/SpinnakerDefs.h	/^		unsigned int width;$/;"	m	struct:Spinnaker::H264Option
width	include/spinc/SpinnakerDefsC.h	/^	unsigned int width;$/;"	m	struct:_spinH264Option
xml_attribute	include/GUI/RapidXML/rapidxml.hpp	/^        xml_attribute()$/;"	f	class:rapidxml::xml_attribute
xml_attribute	include/GUI/RapidXML/rapidxml.hpp	/^    class xml_attribute: public xml_base<Ch>$/;"	c	namespace:rapidxml
xml_base	include/GUI/RapidXML/rapidxml.hpp	/^        xml_base()$/;"	f	class:rapidxml::xml_base
xml_base	include/GUI/RapidXML/rapidxml.hpp	/^    class xml_base$/;"	c	namespace:rapidxml
xml_document	include/GUI/RapidXML/rapidxml.hpp	/^        xml_document()$/;"	f	class:rapidxml::xml_document
xml_document	include/GUI/RapidXML/rapidxml.hpp	/^    class xml_document: public xml_node<Ch>, public memory_pool<Ch>$/;"	c	namespace:rapidxml
xml_node	include/GUI/RapidXML/rapidxml.hpp	/^        xml_node(node_type type)$/;"	f	class:rapidxml::xml_node
xml_node	include/GUI/RapidXML/rapidxml.hpp	/^    class xml_node: public xml_base<Ch>$/;"	c	namespace:rapidxml
xsputn	include/SpinGenApi/Filestream.h	/^			std::streamsize xsputn(const char_type * s, std::streamsize n) {$/;"	f	class:Spinnaker::GenApi::ODevFileStreamBuf
xvAll	include/SpinGenApi/Types.h	/^			xvAll = 0xffffffffL,    \/\/!> all possible checks$/;"	e	enum:Spinnaker::GenApi::_EXMLValidation
xvAll	include/spinc/SpinnakerGenApiDefsC.h	/^	xvAll       = 0xffffffffL,    \/\/!> all possible checks$/;"	e	enum:_spinXMLValidation
xvCycles	include/SpinGenApi/Types.h	/^			xvCycles = 0x00000002L,    \/\/!> checks for write and dependency cycles (implies xvLoad)$/;"	e	enum:Spinnaker::GenApi::_EXMLValidation
xvCycles	include/spinc/SpinnakerGenApiDefsC.h	/^	xvCycles    = 0x00000002L,    \/\/!> checks for write and dependency cycles (implies xvLoad)$/;"	e	enum:_spinXMLValidation
xvDefault	include/SpinGenApi/Types.h	/^			xvDefault = 0x00000000L,    \/\/!> checks performed if nothing else is said$/;"	e	enum:Spinnaker::GenApi::_EXMLValidation
xvDefault	include/spinc/SpinnakerGenApiDefsC.h	/^	xvDefault   = 0x00000000L,    \/\/!> checks performed if nothing else is said$/;"	e	enum:_spinXMLValidation
xvLoad	include/SpinGenApi/Types.h	/^			xvLoad = 0x00000001L,    \/\/!> Creates a dummy node map$/;"	e	enum:Spinnaker::GenApi::_EXMLValidation
xvLoad	include/spinc/SpinnakerGenApiDefsC.h	/^	xvLoad      = 0x00000001L,    \/\/!> Creates a dummy node map$/;"	e	enum:_spinXMLValidation
xvSFNC	include/SpinGenApi/Types.h	/^			xvSFNC = 0x00000004L,    \/\/!> checks for conformance with the standard feature naming convention (SFNC)$/;"	e	enum:Spinnaker::GenApi::_EXMLValidation
xvSFNC	include/spinc/SpinnakerGenApiDefsC.h	/^	xvSFNC      = 0x00000004L,    \/\/!> checks for conformance with the standard feature naming convention (SFNC)$/;"	e	enum:_spinXMLValidation
~AutoLock	include/SpinGenApi/GCSynch.h	/^			~AutoLock()$/;"	f	class:Spinnaker::GenICam::AutoLock
~AutoLock	include/SpinGenApi/Synch.h	/^			~AutoLock()$/;"	f	class:Spinnaker::GenApi::AutoLock
~CGlobalLockUnlocker	include/SpinGenApi/GCSynch.h	/^			~CGlobalLockUnlocker()$/;"	f	class:Spinnaker::GenICam::CGlobalLockUnlocker
~CNodeCallback	include/SpinGenApi/NodeCallback.h	/^			virtual ~CNodeCallback()$/;"	f	class:Spinnaker::GenApi::CNodeCallback
~CNodeMapRefT	include/SpinGenApi/NodeMapRef.h	/^		inline CNodeMapRefT<TCameraParams>::~CNodeMapRefT()$/;"	f	class:Spinnaker::GenApi::CNodeMapRefT
~CPointer	include/SpinGenApi/Pointer.h	/^        virtual ~CPointer(void)$/;"	f	class:Spinnaker::GenApi::CPointer
~CPortImpl	include/SpinGenApi/PortImpl.h	/^			virtual ~CPortImpl()$/;"	f	class:Spinnaker::GenApi::CPortImpl
~CRegisterPortImpl	include/SpinGenApi/RegisterPortImpl.h	/^			virtual ~CRegisterPortImpl(){};$/;"	f	class:Spinnaker::GenApi::CRegisterPortImpl
~CameraPtr	include/CameraPtr.h	/^		virtual ~CameraPtr(void){};$/;"	f	class:Spinnaker::CameraPtr
~DeviceEventHandler	SpinnakerTest/DeviceEvents/DeviceEvents.cpp	/^	~DeviceEventHandler() {};$/;"	f	class:DeviceEventHandler
~DeviceEventHandler	src/DeviceEvents/DeviceEvents.cpp	/^	~DeviceEventHandler() {};$/;"	f	class:DeviceEventHandler
~IDevFileStreamBuf	include/SpinGenApi/Filestream.h	/^			~IDevFileStreamBuf()$/;"	f	class:Spinnaker::GenApi::IDevFileStreamBuf
~ImageEventHandler	SpinnakerTest/ImageEvents/ImageEvents.cpp	/^	~ImageEventHandler() {}$/;"	f	class:ImageEventHandler
~ImageEventHandler	src/ImageEvents/ImageEvents.cpp	/^	~ImageEventHandler() {}$/;"	f	class:ImageEventHandler
~InterfaceEventHandler	SpinnakerTest/EnumerationEvents/EnumerationEvents.cpp	/^	~InterfaceEventHandler() { m_interface = NULL; };$/;"	f	class:InterfaceEventHandler
~InterfaceEventHandler	src/EnumerationEvents/EnumerationEvents.cpp	/^	~InterfaceEventHandler() { m_interface = NULL; };$/;"	f	class:InterfaceEventHandler
~InterfacePtr	include/InterfacePtr.h	/^		virtual ~InterfacePtr(void){};$/;"	f	class:Spinnaker::InterfacePtr
~Lock	include/SpinGenApi/GCSynch.h	/^				~Lock(){$/;"	f	class:Spinnaker::GenICam::LockableObject::Lock
~LoggingEventDataPtr	include/LoggingEventDataPtr.h	/^		virtual ~LoggingEventDataPtr(void){};$/;"	f	class:Spinnaker::LoggingEventDataPtr
~ODevFileStreamBuf	include/SpinGenApi/Filestream.h	/^			~ODevFileStreamBuf() {$/;"	f	class:Spinnaker::GenApi::ODevFileStreamBuf
~SystemEventHandler	SpinnakerTest/EnumerationEvents/EnumerationEvents.cpp	/^	~SystemEventHandler() {};$/;"	f	class:SystemEventHandler
~SystemEventHandler	src/EnumerationEvents/EnumerationEvents.cpp	/^	~SystemEventHandler() {};$/;"	f	class:SystemEventHandler
~memory_pool	include/GUI/RapidXML/rapidxml.hpp	/^        ~memory_pool()$/;"	f	class:rapidxml::memory_pool
